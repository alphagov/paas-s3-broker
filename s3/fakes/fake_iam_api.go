// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iam"
	"github.com/aws/aws-sdk-go/service/iam/iamiface"
)

type FakeIAMAPI struct {
	AddClientIDToOpenIDConnectProviderStub        func(*iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error)
	addClientIDToOpenIDConnectProviderMutex       sync.RWMutex
	addClientIDToOpenIDConnectProviderArgsForCall []struct {
		arg1 *iam.AddClientIDToOpenIDConnectProviderInput
	}
	addClientIDToOpenIDConnectProviderReturns struct {
		result1 *iam.AddClientIDToOpenIDConnectProviderOutput
		result2 error
	}
	addClientIDToOpenIDConnectProviderReturnsOnCall map[int]struct {
		result1 *iam.AddClientIDToOpenIDConnectProviderOutput
		result2 error
	}
	AddClientIDToOpenIDConnectProviderRequestStub        func(*iam.AddClientIDToOpenIDConnectProviderInput) (*request.Request, *iam.AddClientIDToOpenIDConnectProviderOutput)
	addClientIDToOpenIDConnectProviderRequestMutex       sync.RWMutex
	addClientIDToOpenIDConnectProviderRequestArgsForCall []struct {
		arg1 *iam.AddClientIDToOpenIDConnectProviderInput
	}
	addClientIDToOpenIDConnectProviderRequestReturns struct {
		result1 *request.Request
		result2 *iam.AddClientIDToOpenIDConnectProviderOutput
	}
	addClientIDToOpenIDConnectProviderRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.AddClientIDToOpenIDConnectProviderOutput
	}
	AddClientIDToOpenIDConnectProviderWithContextStub        func(context.Context, *iam.AddClientIDToOpenIDConnectProviderInput, ...request.Option) (*iam.AddClientIDToOpenIDConnectProviderOutput, error)
	addClientIDToOpenIDConnectProviderWithContextMutex       sync.RWMutex
	addClientIDToOpenIDConnectProviderWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.AddClientIDToOpenIDConnectProviderInput
		arg3 []request.Option
	}
	addClientIDToOpenIDConnectProviderWithContextReturns struct {
		result1 *iam.AddClientIDToOpenIDConnectProviderOutput
		result2 error
	}
	addClientIDToOpenIDConnectProviderWithContextReturnsOnCall map[int]struct {
		result1 *iam.AddClientIDToOpenIDConnectProviderOutput
		result2 error
	}
	AddRoleToInstanceProfileStub        func(*iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error)
	addRoleToInstanceProfileMutex       sync.RWMutex
	addRoleToInstanceProfileArgsForCall []struct {
		arg1 *iam.AddRoleToInstanceProfileInput
	}
	addRoleToInstanceProfileReturns struct {
		result1 *iam.AddRoleToInstanceProfileOutput
		result2 error
	}
	addRoleToInstanceProfileReturnsOnCall map[int]struct {
		result1 *iam.AddRoleToInstanceProfileOutput
		result2 error
	}
	AddRoleToInstanceProfileRequestStub        func(*iam.AddRoleToInstanceProfileInput) (*request.Request, *iam.AddRoleToInstanceProfileOutput)
	addRoleToInstanceProfileRequestMutex       sync.RWMutex
	addRoleToInstanceProfileRequestArgsForCall []struct {
		arg1 *iam.AddRoleToInstanceProfileInput
	}
	addRoleToInstanceProfileRequestReturns struct {
		result1 *request.Request
		result2 *iam.AddRoleToInstanceProfileOutput
	}
	addRoleToInstanceProfileRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.AddRoleToInstanceProfileOutput
	}
	AddRoleToInstanceProfileWithContextStub        func(context.Context, *iam.AddRoleToInstanceProfileInput, ...request.Option) (*iam.AddRoleToInstanceProfileOutput, error)
	addRoleToInstanceProfileWithContextMutex       sync.RWMutex
	addRoleToInstanceProfileWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.AddRoleToInstanceProfileInput
		arg3 []request.Option
	}
	addRoleToInstanceProfileWithContextReturns struct {
		result1 *iam.AddRoleToInstanceProfileOutput
		result2 error
	}
	addRoleToInstanceProfileWithContextReturnsOnCall map[int]struct {
		result1 *iam.AddRoleToInstanceProfileOutput
		result2 error
	}
	AddUserToGroupStub        func(*iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error)
	addUserToGroupMutex       sync.RWMutex
	addUserToGroupArgsForCall []struct {
		arg1 *iam.AddUserToGroupInput
	}
	addUserToGroupReturns struct {
		result1 *iam.AddUserToGroupOutput
		result2 error
	}
	addUserToGroupReturnsOnCall map[int]struct {
		result1 *iam.AddUserToGroupOutput
		result2 error
	}
	AddUserToGroupRequestStub        func(*iam.AddUserToGroupInput) (*request.Request, *iam.AddUserToGroupOutput)
	addUserToGroupRequestMutex       sync.RWMutex
	addUserToGroupRequestArgsForCall []struct {
		arg1 *iam.AddUserToGroupInput
	}
	addUserToGroupRequestReturns struct {
		result1 *request.Request
		result2 *iam.AddUserToGroupOutput
	}
	addUserToGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.AddUserToGroupOutput
	}
	AddUserToGroupWithContextStub        func(context.Context, *iam.AddUserToGroupInput, ...request.Option) (*iam.AddUserToGroupOutput, error)
	addUserToGroupWithContextMutex       sync.RWMutex
	addUserToGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.AddUserToGroupInput
		arg3 []request.Option
	}
	addUserToGroupWithContextReturns struct {
		result1 *iam.AddUserToGroupOutput
		result2 error
	}
	addUserToGroupWithContextReturnsOnCall map[int]struct {
		result1 *iam.AddUserToGroupOutput
		result2 error
	}
	AttachGroupPolicyStub        func(*iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error)
	attachGroupPolicyMutex       sync.RWMutex
	attachGroupPolicyArgsForCall []struct {
		arg1 *iam.AttachGroupPolicyInput
	}
	attachGroupPolicyReturns struct {
		result1 *iam.AttachGroupPolicyOutput
		result2 error
	}
	attachGroupPolicyReturnsOnCall map[int]struct {
		result1 *iam.AttachGroupPolicyOutput
		result2 error
	}
	AttachGroupPolicyRequestStub        func(*iam.AttachGroupPolicyInput) (*request.Request, *iam.AttachGroupPolicyOutput)
	attachGroupPolicyRequestMutex       sync.RWMutex
	attachGroupPolicyRequestArgsForCall []struct {
		arg1 *iam.AttachGroupPolicyInput
	}
	attachGroupPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.AttachGroupPolicyOutput
	}
	attachGroupPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.AttachGroupPolicyOutput
	}
	AttachGroupPolicyWithContextStub        func(context.Context, *iam.AttachGroupPolicyInput, ...request.Option) (*iam.AttachGroupPolicyOutput, error)
	attachGroupPolicyWithContextMutex       sync.RWMutex
	attachGroupPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.AttachGroupPolicyInput
		arg3 []request.Option
	}
	attachGroupPolicyWithContextReturns struct {
		result1 *iam.AttachGroupPolicyOutput
		result2 error
	}
	attachGroupPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.AttachGroupPolicyOutput
		result2 error
	}
	AttachRolePolicyStub        func(*iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error)
	attachRolePolicyMutex       sync.RWMutex
	attachRolePolicyArgsForCall []struct {
		arg1 *iam.AttachRolePolicyInput
	}
	attachRolePolicyReturns struct {
		result1 *iam.AttachRolePolicyOutput
		result2 error
	}
	attachRolePolicyReturnsOnCall map[int]struct {
		result1 *iam.AttachRolePolicyOutput
		result2 error
	}
	AttachRolePolicyRequestStub        func(*iam.AttachRolePolicyInput) (*request.Request, *iam.AttachRolePolicyOutput)
	attachRolePolicyRequestMutex       sync.RWMutex
	attachRolePolicyRequestArgsForCall []struct {
		arg1 *iam.AttachRolePolicyInput
	}
	attachRolePolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.AttachRolePolicyOutput
	}
	attachRolePolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.AttachRolePolicyOutput
	}
	AttachRolePolicyWithContextStub        func(context.Context, *iam.AttachRolePolicyInput, ...request.Option) (*iam.AttachRolePolicyOutput, error)
	attachRolePolicyWithContextMutex       sync.RWMutex
	attachRolePolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.AttachRolePolicyInput
		arg3 []request.Option
	}
	attachRolePolicyWithContextReturns struct {
		result1 *iam.AttachRolePolicyOutput
		result2 error
	}
	attachRolePolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.AttachRolePolicyOutput
		result2 error
	}
	AttachUserPolicyStub        func(*iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error)
	attachUserPolicyMutex       sync.RWMutex
	attachUserPolicyArgsForCall []struct {
		arg1 *iam.AttachUserPolicyInput
	}
	attachUserPolicyReturns struct {
		result1 *iam.AttachUserPolicyOutput
		result2 error
	}
	attachUserPolicyReturnsOnCall map[int]struct {
		result1 *iam.AttachUserPolicyOutput
		result2 error
	}
	AttachUserPolicyRequestStub        func(*iam.AttachUserPolicyInput) (*request.Request, *iam.AttachUserPolicyOutput)
	attachUserPolicyRequestMutex       sync.RWMutex
	attachUserPolicyRequestArgsForCall []struct {
		arg1 *iam.AttachUserPolicyInput
	}
	attachUserPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.AttachUserPolicyOutput
	}
	attachUserPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.AttachUserPolicyOutput
	}
	AttachUserPolicyWithContextStub        func(context.Context, *iam.AttachUserPolicyInput, ...request.Option) (*iam.AttachUserPolicyOutput, error)
	attachUserPolicyWithContextMutex       sync.RWMutex
	attachUserPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.AttachUserPolicyInput
		arg3 []request.Option
	}
	attachUserPolicyWithContextReturns struct {
		result1 *iam.AttachUserPolicyOutput
		result2 error
	}
	attachUserPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.AttachUserPolicyOutput
		result2 error
	}
	ChangePasswordStub        func(*iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error)
	changePasswordMutex       sync.RWMutex
	changePasswordArgsForCall []struct {
		arg1 *iam.ChangePasswordInput
	}
	changePasswordReturns struct {
		result1 *iam.ChangePasswordOutput
		result2 error
	}
	changePasswordReturnsOnCall map[int]struct {
		result1 *iam.ChangePasswordOutput
		result2 error
	}
	ChangePasswordRequestStub        func(*iam.ChangePasswordInput) (*request.Request, *iam.ChangePasswordOutput)
	changePasswordRequestMutex       sync.RWMutex
	changePasswordRequestArgsForCall []struct {
		arg1 *iam.ChangePasswordInput
	}
	changePasswordRequestReturns struct {
		result1 *request.Request
		result2 *iam.ChangePasswordOutput
	}
	changePasswordRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ChangePasswordOutput
	}
	ChangePasswordWithContextStub        func(context.Context, *iam.ChangePasswordInput, ...request.Option) (*iam.ChangePasswordOutput, error)
	changePasswordWithContextMutex       sync.RWMutex
	changePasswordWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ChangePasswordInput
		arg3 []request.Option
	}
	changePasswordWithContextReturns struct {
		result1 *iam.ChangePasswordOutput
		result2 error
	}
	changePasswordWithContextReturnsOnCall map[int]struct {
		result1 *iam.ChangePasswordOutput
		result2 error
	}
	CreateAccessKeyStub        func(*iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error)
	createAccessKeyMutex       sync.RWMutex
	createAccessKeyArgsForCall []struct {
		arg1 *iam.CreateAccessKeyInput
	}
	createAccessKeyReturns struct {
		result1 *iam.CreateAccessKeyOutput
		result2 error
	}
	createAccessKeyReturnsOnCall map[int]struct {
		result1 *iam.CreateAccessKeyOutput
		result2 error
	}
	CreateAccessKeyRequestStub        func(*iam.CreateAccessKeyInput) (*request.Request, *iam.CreateAccessKeyOutput)
	createAccessKeyRequestMutex       sync.RWMutex
	createAccessKeyRequestArgsForCall []struct {
		arg1 *iam.CreateAccessKeyInput
	}
	createAccessKeyRequestReturns struct {
		result1 *request.Request
		result2 *iam.CreateAccessKeyOutput
	}
	createAccessKeyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.CreateAccessKeyOutput
	}
	CreateAccessKeyWithContextStub        func(context.Context, *iam.CreateAccessKeyInput, ...request.Option) (*iam.CreateAccessKeyOutput, error)
	createAccessKeyWithContextMutex       sync.RWMutex
	createAccessKeyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.CreateAccessKeyInput
		arg3 []request.Option
	}
	createAccessKeyWithContextReturns struct {
		result1 *iam.CreateAccessKeyOutput
		result2 error
	}
	createAccessKeyWithContextReturnsOnCall map[int]struct {
		result1 *iam.CreateAccessKeyOutput
		result2 error
	}
	CreateAccountAliasStub        func(*iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error)
	createAccountAliasMutex       sync.RWMutex
	createAccountAliasArgsForCall []struct {
		arg1 *iam.CreateAccountAliasInput
	}
	createAccountAliasReturns struct {
		result1 *iam.CreateAccountAliasOutput
		result2 error
	}
	createAccountAliasReturnsOnCall map[int]struct {
		result1 *iam.CreateAccountAliasOutput
		result2 error
	}
	CreateAccountAliasRequestStub        func(*iam.CreateAccountAliasInput) (*request.Request, *iam.CreateAccountAliasOutput)
	createAccountAliasRequestMutex       sync.RWMutex
	createAccountAliasRequestArgsForCall []struct {
		arg1 *iam.CreateAccountAliasInput
	}
	createAccountAliasRequestReturns struct {
		result1 *request.Request
		result2 *iam.CreateAccountAliasOutput
	}
	createAccountAliasRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.CreateAccountAliasOutput
	}
	CreateAccountAliasWithContextStub        func(context.Context, *iam.CreateAccountAliasInput, ...request.Option) (*iam.CreateAccountAliasOutput, error)
	createAccountAliasWithContextMutex       sync.RWMutex
	createAccountAliasWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.CreateAccountAliasInput
		arg3 []request.Option
	}
	createAccountAliasWithContextReturns struct {
		result1 *iam.CreateAccountAliasOutput
		result2 error
	}
	createAccountAliasWithContextReturnsOnCall map[int]struct {
		result1 *iam.CreateAccountAliasOutput
		result2 error
	}
	CreateGroupStub        func(*iam.CreateGroupInput) (*iam.CreateGroupOutput, error)
	createGroupMutex       sync.RWMutex
	createGroupArgsForCall []struct {
		arg1 *iam.CreateGroupInput
	}
	createGroupReturns struct {
		result1 *iam.CreateGroupOutput
		result2 error
	}
	createGroupReturnsOnCall map[int]struct {
		result1 *iam.CreateGroupOutput
		result2 error
	}
	CreateGroupRequestStub        func(*iam.CreateGroupInput) (*request.Request, *iam.CreateGroupOutput)
	createGroupRequestMutex       sync.RWMutex
	createGroupRequestArgsForCall []struct {
		arg1 *iam.CreateGroupInput
	}
	createGroupRequestReturns struct {
		result1 *request.Request
		result2 *iam.CreateGroupOutput
	}
	createGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.CreateGroupOutput
	}
	CreateGroupWithContextStub        func(context.Context, *iam.CreateGroupInput, ...request.Option) (*iam.CreateGroupOutput, error)
	createGroupWithContextMutex       sync.RWMutex
	createGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.CreateGroupInput
		arg3 []request.Option
	}
	createGroupWithContextReturns struct {
		result1 *iam.CreateGroupOutput
		result2 error
	}
	createGroupWithContextReturnsOnCall map[int]struct {
		result1 *iam.CreateGroupOutput
		result2 error
	}
	CreateInstanceProfileStub        func(*iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error)
	createInstanceProfileMutex       sync.RWMutex
	createInstanceProfileArgsForCall []struct {
		arg1 *iam.CreateInstanceProfileInput
	}
	createInstanceProfileReturns struct {
		result1 *iam.CreateInstanceProfileOutput
		result2 error
	}
	createInstanceProfileReturnsOnCall map[int]struct {
		result1 *iam.CreateInstanceProfileOutput
		result2 error
	}
	CreateInstanceProfileRequestStub        func(*iam.CreateInstanceProfileInput) (*request.Request, *iam.CreateInstanceProfileOutput)
	createInstanceProfileRequestMutex       sync.RWMutex
	createInstanceProfileRequestArgsForCall []struct {
		arg1 *iam.CreateInstanceProfileInput
	}
	createInstanceProfileRequestReturns struct {
		result1 *request.Request
		result2 *iam.CreateInstanceProfileOutput
	}
	createInstanceProfileRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.CreateInstanceProfileOutput
	}
	CreateInstanceProfileWithContextStub        func(context.Context, *iam.CreateInstanceProfileInput, ...request.Option) (*iam.CreateInstanceProfileOutput, error)
	createInstanceProfileWithContextMutex       sync.RWMutex
	createInstanceProfileWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.CreateInstanceProfileInput
		arg3 []request.Option
	}
	createInstanceProfileWithContextReturns struct {
		result1 *iam.CreateInstanceProfileOutput
		result2 error
	}
	createInstanceProfileWithContextReturnsOnCall map[int]struct {
		result1 *iam.CreateInstanceProfileOutput
		result2 error
	}
	CreateLoginProfileStub        func(*iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error)
	createLoginProfileMutex       sync.RWMutex
	createLoginProfileArgsForCall []struct {
		arg1 *iam.CreateLoginProfileInput
	}
	createLoginProfileReturns struct {
		result1 *iam.CreateLoginProfileOutput
		result2 error
	}
	createLoginProfileReturnsOnCall map[int]struct {
		result1 *iam.CreateLoginProfileOutput
		result2 error
	}
	CreateLoginProfileRequestStub        func(*iam.CreateLoginProfileInput) (*request.Request, *iam.CreateLoginProfileOutput)
	createLoginProfileRequestMutex       sync.RWMutex
	createLoginProfileRequestArgsForCall []struct {
		arg1 *iam.CreateLoginProfileInput
	}
	createLoginProfileRequestReturns struct {
		result1 *request.Request
		result2 *iam.CreateLoginProfileOutput
	}
	createLoginProfileRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.CreateLoginProfileOutput
	}
	CreateLoginProfileWithContextStub        func(context.Context, *iam.CreateLoginProfileInput, ...request.Option) (*iam.CreateLoginProfileOutput, error)
	createLoginProfileWithContextMutex       sync.RWMutex
	createLoginProfileWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.CreateLoginProfileInput
		arg3 []request.Option
	}
	createLoginProfileWithContextReturns struct {
		result1 *iam.CreateLoginProfileOutput
		result2 error
	}
	createLoginProfileWithContextReturnsOnCall map[int]struct {
		result1 *iam.CreateLoginProfileOutput
		result2 error
	}
	CreateOpenIDConnectProviderStub        func(*iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error)
	createOpenIDConnectProviderMutex       sync.RWMutex
	createOpenIDConnectProviderArgsForCall []struct {
		arg1 *iam.CreateOpenIDConnectProviderInput
	}
	createOpenIDConnectProviderReturns struct {
		result1 *iam.CreateOpenIDConnectProviderOutput
		result2 error
	}
	createOpenIDConnectProviderReturnsOnCall map[int]struct {
		result1 *iam.CreateOpenIDConnectProviderOutput
		result2 error
	}
	CreateOpenIDConnectProviderRequestStub        func(*iam.CreateOpenIDConnectProviderInput) (*request.Request, *iam.CreateOpenIDConnectProviderOutput)
	createOpenIDConnectProviderRequestMutex       sync.RWMutex
	createOpenIDConnectProviderRequestArgsForCall []struct {
		arg1 *iam.CreateOpenIDConnectProviderInput
	}
	createOpenIDConnectProviderRequestReturns struct {
		result1 *request.Request
		result2 *iam.CreateOpenIDConnectProviderOutput
	}
	createOpenIDConnectProviderRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.CreateOpenIDConnectProviderOutput
	}
	CreateOpenIDConnectProviderWithContextStub        func(context.Context, *iam.CreateOpenIDConnectProviderInput, ...request.Option) (*iam.CreateOpenIDConnectProviderOutput, error)
	createOpenIDConnectProviderWithContextMutex       sync.RWMutex
	createOpenIDConnectProviderWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.CreateOpenIDConnectProviderInput
		arg3 []request.Option
	}
	createOpenIDConnectProviderWithContextReturns struct {
		result1 *iam.CreateOpenIDConnectProviderOutput
		result2 error
	}
	createOpenIDConnectProviderWithContextReturnsOnCall map[int]struct {
		result1 *iam.CreateOpenIDConnectProviderOutput
		result2 error
	}
	CreatePolicyStub        func(*iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error)
	createPolicyMutex       sync.RWMutex
	createPolicyArgsForCall []struct {
		arg1 *iam.CreatePolicyInput
	}
	createPolicyReturns struct {
		result1 *iam.CreatePolicyOutput
		result2 error
	}
	createPolicyReturnsOnCall map[int]struct {
		result1 *iam.CreatePolicyOutput
		result2 error
	}
	CreatePolicyRequestStub        func(*iam.CreatePolicyInput) (*request.Request, *iam.CreatePolicyOutput)
	createPolicyRequestMutex       sync.RWMutex
	createPolicyRequestArgsForCall []struct {
		arg1 *iam.CreatePolicyInput
	}
	createPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.CreatePolicyOutput
	}
	createPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.CreatePolicyOutput
	}
	CreatePolicyVersionStub        func(*iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error)
	createPolicyVersionMutex       sync.RWMutex
	createPolicyVersionArgsForCall []struct {
		arg1 *iam.CreatePolicyVersionInput
	}
	createPolicyVersionReturns struct {
		result1 *iam.CreatePolicyVersionOutput
		result2 error
	}
	createPolicyVersionReturnsOnCall map[int]struct {
		result1 *iam.CreatePolicyVersionOutput
		result2 error
	}
	CreatePolicyVersionRequestStub        func(*iam.CreatePolicyVersionInput) (*request.Request, *iam.CreatePolicyVersionOutput)
	createPolicyVersionRequestMutex       sync.RWMutex
	createPolicyVersionRequestArgsForCall []struct {
		arg1 *iam.CreatePolicyVersionInput
	}
	createPolicyVersionRequestReturns struct {
		result1 *request.Request
		result2 *iam.CreatePolicyVersionOutput
	}
	createPolicyVersionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.CreatePolicyVersionOutput
	}
	CreatePolicyVersionWithContextStub        func(context.Context, *iam.CreatePolicyVersionInput, ...request.Option) (*iam.CreatePolicyVersionOutput, error)
	createPolicyVersionWithContextMutex       sync.RWMutex
	createPolicyVersionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.CreatePolicyVersionInput
		arg3 []request.Option
	}
	createPolicyVersionWithContextReturns struct {
		result1 *iam.CreatePolicyVersionOutput
		result2 error
	}
	createPolicyVersionWithContextReturnsOnCall map[int]struct {
		result1 *iam.CreatePolicyVersionOutput
		result2 error
	}
	CreatePolicyWithContextStub        func(context.Context, *iam.CreatePolicyInput, ...request.Option) (*iam.CreatePolicyOutput, error)
	createPolicyWithContextMutex       sync.RWMutex
	createPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.CreatePolicyInput
		arg3 []request.Option
	}
	createPolicyWithContextReturns struct {
		result1 *iam.CreatePolicyOutput
		result2 error
	}
	createPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.CreatePolicyOutput
		result2 error
	}
	CreateRoleStub        func(*iam.CreateRoleInput) (*iam.CreateRoleOutput, error)
	createRoleMutex       sync.RWMutex
	createRoleArgsForCall []struct {
		arg1 *iam.CreateRoleInput
	}
	createRoleReturns struct {
		result1 *iam.CreateRoleOutput
		result2 error
	}
	createRoleReturnsOnCall map[int]struct {
		result1 *iam.CreateRoleOutput
		result2 error
	}
	CreateRoleRequestStub        func(*iam.CreateRoleInput) (*request.Request, *iam.CreateRoleOutput)
	createRoleRequestMutex       sync.RWMutex
	createRoleRequestArgsForCall []struct {
		arg1 *iam.CreateRoleInput
	}
	createRoleRequestReturns struct {
		result1 *request.Request
		result2 *iam.CreateRoleOutput
	}
	createRoleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.CreateRoleOutput
	}
	CreateRoleWithContextStub        func(context.Context, *iam.CreateRoleInput, ...request.Option) (*iam.CreateRoleOutput, error)
	createRoleWithContextMutex       sync.RWMutex
	createRoleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.CreateRoleInput
		arg3 []request.Option
	}
	createRoleWithContextReturns struct {
		result1 *iam.CreateRoleOutput
		result2 error
	}
	createRoleWithContextReturnsOnCall map[int]struct {
		result1 *iam.CreateRoleOutput
		result2 error
	}
	CreateSAMLProviderStub        func(*iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error)
	createSAMLProviderMutex       sync.RWMutex
	createSAMLProviderArgsForCall []struct {
		arg1 *iam.CreateSAMLProviderInput
	}
	createSAMLProviderReturns struct {
		result1 *iam.CreateSAMLProviderOutput
		result2 error
	}
	createSAMLProviderReturnsOnCall map[int]struct {
		result1 *iam.CreateSAMLProviderOutput
		result2 error
	}
	CreateSAMLProviderRequestStub        func(*iam.CreateSAMLProviderInput) (*request.Request, *iam.CreateSAMLProviderOutput)
	createSAMLProviderRequestMutex       sync.RWMutex
	createSAMLProviderRequestArgsForCall []struct {
		arg1 *iam.CreateSAMLProviderInput
	}
	createSAMLProviderRequestReturns struct {
		result1 *request.Request
		result2 *iam.CreateSAMLProviderOutput
	}
	createSAMLProviderRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.CreateSAMLProviderOutput
	}
	CreateSAMLProviderWithContextStub        func(context.Context, *iam.CreateSAMLProviderInput, ...request.Option) (*iam.CreateSAMLProviderOutput, error)
	createSAMLProviderWithContextMutex       sync.RWMutex
	createSAMLProviderWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.CreateSAMLProviderInput
		arg3 []request.Option
	}
	createSAMLProviderWithContextReturns struct {
		result1 *iam.CreateSAMLProviderOutput
		result2 error
	}
	createSAMLProviderWithContextReturnsOnCall map[int]struct {
		result1 *iam.CreateSAMLProviderOutput
		result2 error
	}
	CreateServiceLinkedRoleStub        func(*iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error)
	createServiceLinkedRoleMutex       sync.RWMutex
	createServiceLinkedRoleArgsForCall []struct {
		arg1 *iam.CreateServiceLinkedRoleInput
	}
	createServiceLinkedRoleReturns struct {
		result1 *iam.CreateServiceLinkedRoleOutput
		result2 error
	}
	createServiceLinkedRoleReturnsOnCall map[int]struct {
		result1 *iam.CreateServiceLinkedRoleOutput
		result2 error
	}
	CreateServiceLinkedRoleRequestStub        func(*iam.CreateServiceLinkedRoleInput) (*request.Request, *iam.CreateServiceLinkedRoleOutput)
	createServiceLinkedRoleRequestMutex       sync.RWMutex
	createServiceLinkedRoleRequestArgsForCall []struct {
		arg1 *iam.CreateServiceLinkedRoleInput
	}
	createServiceLinkedRoleRequestReturns struct {
		result1 *request.Request
		result2 *iam.CreateServiceLinkedRoleOutput
	}
	createServiceLinkedRoleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.CreateServiceLinkedRoleOutput
	}
	CreateServiceLinkedRoleWithContextStub        func(context.Context, *iam.CreateServiceLinkedRoleInput, ...request.Option) (*iam.CreateServiceLinkedRoleOutput, error)
	createServiceLinkedRoleWithContextMutex       sync.RWMutex
	createServiceLinkedRoleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.CreateServiceLinkedRoleInput
		arg3 []request.Option
	}
	createServiceLinkedRoleWithContextReturns struct {
		result1 *iam.CreateServiceLinkedRoleOutput
		result2 error
	}
	createServiceLinkedRoleWithContextReturnsOnCall map[int]struct {
		result1 *iam.CreateServiceLinkedRoleOutput
		result2 error
	}
	CreateServiceSpecificCredentialStub        func(*iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error)
	createServiceSpecificCredentialMutex       sync.RWMutex
	createServiceSpecificCredentialArgsForCall []struct {
		arg1 *iam.CreateServiceSpecificCredentialInput
	}
	createServiceSpecificCredentialReturns struct {
		result1 *iam.CreateServiceSpecificCredentialOutput
		result2 error
	}
	createServiceSpecificCredentialReturnsOnCall map[int]struct {
		result1 *iam.CreateServiceSpecificCredentialOutput
		result2 error
	}
	CreateServiceSpecificCredentialRequestStub        func(*iam.CreateServiceSpecificCredentialInput) (*request.Request, *iam.CreateServiceSpecificCredentialOutput)
	createServiceSpecificCredentialRequestMutex       sync.RWMutex
	createServiceSpecificCredentialRequestArgsForCall []struct {
		arg1 *iam.CreateServiceSpecificCredentialInput
	}
	createServiceSpecificCredentialRequestReturns struct {
		result1 *request.Request
		result2 *iam.CreateServiceSpecificCredentialOutput
	}
	createServiceSpecificCredentialRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.CreateServiceSpecificCredentialOutput
	}
	CreateServiceSpecificCredentialWithContextStub        func(context.Context, *iam.CreateServiceSpecificCredentialInput, ...request.Option) (*iam.CreateServiceSpecificCredentialOutput, error)
	createServiceSpecificCredentialWithContextMutex       sync.RWMutex
	createServiceSpecificCredentialWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.CreateServiceSpecificCredentialInput
		arg3 []request.Option
	}
	createServiceSpecificCredentialWithContextReturns struct {
		result1 *iam.CreateServiceSpecificCredentialOutput
		result2 error
	}
	createServiceSpecificCredentialWithContextReturnsOnCall map[int]struct {
		result1 *iam.CreateServiceSpecificCredentialOutput
		result2 error
	}
	CreateUserStub        func(*iam.CreateUserInput) (*iam.CreateUserOutput, error)
	createUserMutex       sync.RWMutex
	createUserArgsForCall []struct {
		arg1 *iam.CreateUserInput
	}
	createUserReturns struct {
		result1 *iam.CreateUserOutput
		result2 error
	}
	createUserReturnsOnCall map[int]struct {
		result1 *iam.CreateUserOutput
		result2 error
	}
	CreateUserRequestStub        func(*iam.CreateUserInput) (*request.Request, *iam.CreateUserOutput)
	createUserRequestMutex       sync.RWMutex
	createUserRequestArgsForCall []struct {
		arg1 *iam.CreateUserInput
	}
	createUserRequestReturns struct {
		result1 *request.Request
		result2 *iam.CreateUserOutput
	}
	createUserRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.CreateUserOutput
	}
	CreateUserWithContextStub        func(context.Context, *iam.CreateUserInput, ...request.Option) (*iam.CreateUserOutput, error)
	createUserWithContextMutex       sync.RWMutex
	createUserWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.CreateUserInput
		arg3 []request.Option
	}
	createUserWithContextReturns struct {
		result1 *iam.CreateUserOutput
		result2 error
	}
	createUserWithContextReturnsOnCall map[int]struct {
		result1 *iam.CreateUserOutput
		result2 error
	}
	CreateVirtualMFADeviceStub        func(*iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error)
	createVirtualMFADeviceMutex       sync.RWMutex
	createVirtualMFADeviceArgsForCall []struct {
		arg1 *iam.CreateVirtualMFADeviceInput
	}
	createVirtualMFADeviceReturns struct {
		result1 *iam.CreateVirtualMFADeviceOutput
		result2 error
	}
	createVirtualMFADeviceReturnsOnCall map[int]struct {
		result1 *iam.CreateVirtualMFADeviceOutput
		result2 error
	}
	CreateVirtualMFADeviceRequestStub        func(*iam.CreateVirtualMFADeviceInput) (*request.Request, *iam.CreateVirtualMFADeviceOutput)
	createVirtualMFADeviceRequestMutex       sync.RWMutex
	createVirtualMFADeviceRequestArgsForCall []struct {
		arg1 *iam.CreateVirtualMFADeviceInput
	}
	createVirtualMFADeviceRequestReturns struct {
		result1 *request.Request
		result2 *iam.CreateVirtualMFADeviceOutput
	}
	createVirtualMFADeviceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.CreateVirtualMFADeviceOutput
	}
	CreateVirtualMFADeviceWithContextStub        func(context.Context, *iam.CreateVirtualMFADeviceInput, ...request.Option) (*iam.CreateVirtualMFADeviceOutput, error)
	createVirtualMFADeviceWithContextMutex       sync.RWMutex
	createVirtualMFADeviceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.CreateVirtualMFADeviceInput
		arg3 []request.Option
	}
	createVirtualMFADeviceWithContextReturns struct {
		result1 *iam.CreateVirtualMFADeviceOutput
		result2 error
	}
	createVirtualMFADeviceWithContextReturnsOnCall map[int]struct {
		result1 *iam.CreateVirtualMFADeviceOutput
		result2 error
	}
	DeactivateMFADeviceStub        func(*iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error)
	deactivateMFADeviceMutex       sync.RWMutex
	deactivateMFADeviceArgsForCall []struct {
		arg1 *iam.DeactivateMFADeviceInput
	}
	deactivateMFADeviceReturns struct {
		result1 *iam.DeactivateMFADeviceOutput
		result2 error
	}
	deactivateMFADeviceReturnsOnCall map[int]struct {
		result1 *iam.DeactivateMFADeviceOutput
		result2 error
	}
	DeactivateMFADeviceRequestStub        func(*iam.DeactivateMFADeviceInput) (*request.Request, *iam.DeactivateMFADeviceOutput)
	deactivateMFADeviceRequestMutex       sync.RWMutex
	deactivateMFADeviceRequestArgsForCall []struct {
		arg1 *iam.DeactivateMFADeviceInput
	}
	deactivateMFADeviceRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeactivateMFADeviceOutput
	}
	deactivateMFADeviceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeactivateMFADeviceOutput
	}
	DeactivateMFADeviceWithContextStub        func(context.Context, *iam.DeactivateMFADeviceInput, ...request.Option) (*iam.DeactivateMFADeviceOutput, error)
	deactivateMFADeviceWithContextMutex       sync.RWMutex
	deactivateMFADeviceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeactivateMFADeviceInput
		arg3 []request.Option
	}
	deactivateMFADeviceWithContextReturns struct {
		result1 *iam.DeactivateMFADeviceOutput
		result2 error
	}
	deactivateMFADeviceWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeactivateMFADeviceOutput
		result2 error
	}
	DeleteAccessKeyStub        func(*iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error)
	deleteAccessKeyMutex       sync.RWMutex
	deleteAccessKeyArgsForCall []struct {
		arg1 *iam.DeleteAccessKeyInput
	}
	deleteAccessKeyReturns struct {
		result1 *iam.DeleteAccessKeyOutput
		result2 error
	}
	deleteAccessKeyReturnsOnCall map[int]struct {
		result1 *iam.DeleteAccessKeyOutput
		result2 error
	}
	DeleteAccessKeyRequestStub        func(*iam.DeleteAccessKeyInput) (*request.Request, *iam.DeleteAccessKeyOutput)
	deleteAccessKeyRequestMutex       sync.RWMutex
	deleteAccessKeyRequestArgsForCall []struct {
		arg1 *iam.DeleteAccessKeyInput
	}
	deleteAccessKeyRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteAccessKeyOutput
	}
	deleteAccessKeyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteAccessKeyOutput
	}
	DeleteAccessKeyWithContextStub        func(context.Context, *iam.DeleteAccessKeyInput, ...request.Option) (*iam.DeleteAccessKeyOutput, error)
	deleteAccessKeyWithContextMutex       sync.RWMutex
	deleteAccessKeyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteAccessKeyInput
		arg3 []request.Option
	}
	deleteAccessKeyWithContextReturns struct {
		result1 *iam.DeleteAccessKeyOutput
		result2 error
	}
	deleteAccessKeyWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteAccessKeyOutput
		result2 error
	}
	DeleteAccountAliasStub        func(*iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error)
	deleteAccountAliasMutex       sync.RWMutex
	deleteAccountAliasArgsForCall []struct {
		arg1 *iam.DeleteAccountAliasInput
	}
	deleteAccountAliasReturns struct {
		result1 *iam.DeleteAccountAliasOutput
		result2 error
	}
	deleteAccountAliasReturnsOnCall map[int]struct {
		result1 *iam.DeleteAccountAliasOutput
		result2 error
	}
	DeleteAccountAliasRequestStub        func(*iam.DeleteAccountAliasInput) (*request.Request, *iam.DeleteAccountAliasOutput)
	deleteAccountAliasRequestMutex       sync.RWMutex
	deleteAccountAliasRequestArgsForCall []struct {
		arg1 *iam.DeleteAccountAliasInput
	}
	deleteAccountAliasRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteAccountAliasOutput
	}
	deleteAccountAliasRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteAccountAliasOutput
	}
	DeleteAccountAliasWithContextStub        func(context.Context, *iam.DeleteAccountAliasInput, ...request.Option) (*iam.DeleteAccountAliasOutput, error)
	deleteAccountAliasWithContextMutex       sync.RWMutex
	deleteAccountAliasWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteAccountAliasInput
		arg3 []request.Option
	}
	deleteAccountAliasWithContextReturns struct {
		result1 *iam.DeleteAccountAliasOutput
		result2 error
	}
	deleteAccountAliasWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteAccountAliasOutput
		result2 error
	}
	DeleteAccountPasswordPolicyStub        func(*iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error)
	deleteAccountPasswordPolicyMutex       sync.RWMutex
	deleteAccountPasswordPolicyArgsForCall []struct {
		arg1 *iam.DeleteAccountPasswordPolicyInput
	}
	deleteAccountPasswordPolicyReturns struct {
		result1 *iam.DeleteAccountPasswordPolicyOutput
		result2 error
	}
	deleteAccountPasswordPolicyReturnsOnCall map[int]struct {
		result1 *iam.DeleteAccountPasswordPolicyOutput
		result2 error
	}
	DeleteAccountPasswordPolicyRequestStub        func(*iam.DeleteAccountPasswordPolicyInput) (*request.Request, *iam.DeleteAccountPasswordPolicyOutput)
	deleteAccountPasswordPolicyRequestMutex       sync.RWMutex
	deleteAccountPasswordPolicyRequestArgsForCall []struct {
		arg1 *iam.DeleteAccountPasswordPolicyInput
	}
	deleteAccountPasswordPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteAccountPasswordPolicyOutput
	}
	deleteAccountPasswordPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteAccountPasswordPolicyOutput
	}
	DeleteAccountPasswordPolicyWithContextStub        func(context.Context, *iam.DeleteAccountPasswordPolicyInput, ...request.Option) (*iam.DeleteAccountPasswordPolicyOutput, error)
	deleteAccountPasswordPolicyWithContextMutex       sync.RWMutex
	deleteAccountPasswordPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteAccountPasswordPolicyInput
		arg3 []request.Option
	}
	deleteAccountPasswordPolicyWithContextReturns struct {
		result1 *iam.DeleteAccountPasswordPolicyOutput
		result2 error
	}
	deleteAccountPasswordPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteAccountPasswordPolicyOutput
		result2 error
	}
	DeleteGroupStub        func(*iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error)
	deleteGroupMutex       sync.RWMutex
	deleteGroupArgsForCall []struct {
		arg1 *iam.DeleteGroupInput
	}
	deleteGroupReturns struct {
		result1 *iam.DeleteGroupOutput
		result2 error
	}
	deleteGroupReturnsOnCall map[int]struct {
		result1 *iam.DeleteGroupOutput
		result2 error
	}
	DeleteGroupPolicyStub        func(*iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error)
	deleteGroupPolicyMutex       sync.RWMutex
	deleteGroupPolicyArgsForCall []struct {
		arg1 *iam.DeleteGroupPolicyInput
	}
	deleteGroupPolicyReturns struct {
		result1 *iam.DeleteGroupPolicyOutput
		result2 error
	}
	deleteGroupPolicyReturnsOnCall map[int]struct {
		result1 *iam.DeleteGroupPolicyOutput
		result2 error
	}
	DeleteGroupPolicyRequestStub        func(*iam.DeleteGroupPolicyInput) (*request.Request, *iam.DeleteGroupPolicyOutput)
	deleteGroupPolicyRequestMutex       sync.RWMutex
	deleteGroupPolicyRequestArgsForCall []struct {
		arg1 *iam.DeleteGroupPolicyInput
	}
	deleteGroupPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteGroupPolicyOutput
	}
	deleteGroupPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteGroupPolicyOutput
	}
	DeleteGroupPolicyWithContextStub        func(context.Context, *iam.DeleteGroupPolicyInput, ...request.Option) (*iam.DeleteGroupPolicyOutput, error)
	deleteGroupPolicyWithContextMutex       sync.RWMutex
	deleteGroupPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteGroupPolicyInput
		arg3 []request.Option
	}
	deleteGroupPolicyWithContextReturns struct {
		result1 *iam.DeleteGroupPolicyOutput
		result2 error
	}
	deleteGroupPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteGroupPolicyOutput
		result2 error
	}
	DeleteGroupRequestStub        func(*iam.DeleteGroupInput) (*request.Request, *iam.DeleteGroupOutput)
	deleteGroupRequestMutex       sync.RWMutex
	deleteGroupRequestArgsForCall []struct {
		arg1 *iam.DeleteGroupInput
	}
	deleteGroupRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteGroupOutput
	}
	deleteGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteGroupOutput
	}
	DeleteGroupWithContextStub        func(context.Context, *iam.DeleteGroupInput, ...request.Option) (*iam.DeleteGroupOutput, error)
	deleteGroupWithContextMutex       sync.RWMutex
	deleteGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteGroupInput
		arg3 []request.Option
	}
	deleteGroupWithContextReturns struct {
		result1 *iam.DeleteGroupOutput
		result2 error
	}
	deleteGroupWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteGroupOutput
		result2 error
	}
	DeleteInstanceProfileStub        func(*iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error)
	deleteInstanceProfileMutex       sync.RWMutex
	deleteInstanceProfileArgsForCall []struct {
		arg1 *iam.DeleteInstanceProfileInput
	}
	deleteInstanceProfileReturns struct {
		result1 *iam.DeleteInstanceProfileOutput
		result2 error
	}
	deleteInstanceProfileReturnsOnCall map[int]struct {
		result1 *iam.DeleteInstanceProfileOutput
		result2 error
	}
	DeleteInstanceProfileRequestStub        func(*iam.DeleteInstanceProfileInput) (*request.Request, *iam.DeleteInstanceProfileOutput)
	deleteInstanceProfileRequestMutex       sync.RWMutex
	deleteInstanceProfileRequestArgsForCall []struct {
		arg1 *iam.DeleteInstanceProfileInput
	}
	deleteInstanceProfileRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteInstanceProfileOutput
	}
	deleteInstanceProfileRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteInstanceProfileOutput
	}
	DeleteInstanceProfileWithContextStub        func(context.Context, *iam.DeleteInstanceProfileInput, ...request.Option) (*iam.DeleteInstanceProfileOutput, error)
	deleteInstanceProfileWithContextMutex       sync.RWMutex
	deleteInstanceProfileWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteInstanceProfileInput
		arg3 []request.Option
	}
	deleteInstanceProfileWithContextReturns struct {
		result1 *iam.DeleteInstanceProfileOutput
		result2 error
	}
	deleteInstanceProfileWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteInstanceProfileOutput
		result2 error
	}
	DeleteLoginProfileStub        func(*iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error)
	deleteLoginProfileMutex       sync.RWMutex
	deleteLoginProfileArgsForCall []struct {
		arg1 *iam.DeleteLoginProfileInput
	}
	deleteLoginProfileReturns struct {
		result1 *iam.DeleteLoginProfileOutput
		result2 error
	}
	deleteLoginProfileReturnsOnCall map[int]struct {
		result1 *iam.DeleteLoginProfileOutput
		result2 error
	}
	DeleteLoginProfileRequestStub        func(*iam.DeleteLoginProfileInput) (*request.Request, *iam.DeleteLoginProfileOutput)
	deleteLoginProfileRequestMutex       sync.RWMutex
	deleteLoginProfileRequestArgsForCall []struct {
		arg1 *iam.DeleteLoginProfileInput
	}
	deleteLoginProfileRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteLoginProfileOutput
	}
	deleteLoginProfileRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteLoginProfileOutput
	}
	DeleteLoginProfileWithContextStub        func(context.Context, *iam.DeleteLoginProfileInput, ...request.Option) (*iam.DeleteLoginProfileOutput, error)
	deleteLoginProfileWithContextMutex       sync.RWMutex
	deleteLoginProfileWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteLoginProfileInput
		arg3 []request.Option
	}
	deleteLoginProfileWithContextReturns struct {
		result1 *iam.DeleteLoginProfileOutput
		result2 error
	}
	deleteLoginProfileWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteLoginProfileOutput
		result2 error
	}
	DeleteOpenIDConnectProviderStub        func(*iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error)
	deleteOpenIDConnectProviderMutex       sync.RWMutex
	deleteOpenIDConnectProviderArgsForCall []struct {
		arg1 *iam.DeleteOpenIDConnectProviderInput
	}
	deleteOpenIDConnectProviderReturns struct {
		result1 *iam.DeleteOpenIDConnectProviderOutput
		result2 error
	}
	deleteOpenIDConnectProviderReturnsOnCall map[int]struct {
		result1 *iam.DeleteOpenIDConnectProviderOutput
		result2 error
	}
	DeleteOpenIDConnectProviderRequestStub        func(*iam.DeleteOpenIDConnectProviderInput) (*request.Request, *iam.DeleteOpenIDConnectProviderOutput)
	deleteOpenIDConnectProviderRequestMutex       sync.RWMutex
	deleteOpenIDConnectProviderRequestArgsForCall []struct {
		arg1 *iam.DeleteOpenIDConnectProviderInput
	}
	deleteOpenIDConnectProviderRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteOpenIDConnectProviderOutput
	}
	deleteOpenIDConnectProviderRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteOpenIDConnectProviderOutput
	}
	DeleteOpenIDConnectProviderWithContextStub        func(context.Context, *iam.DeleteOpenIDConnectProviderInput, ...request.Option) (*iam.DeleteOpenIDConnectProviderOutput, error)
	deleteOpenIDConnectProviderWithContextMutex       sync.RWMutex
	deleteOpenIDConnectProviderWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteOpenIDConnectProviderInput
		arg3 []request.Option
	}
	deleteOpenIDConnectProviderWithContextReturns struct {
		result1 *iam.DeleteOpenIDConnectProviderOutput
		result2 error
	}
	deleteOpenIDConnectProviderWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteOpenIDConnectProviderOutput
		result2 error
	}
	DeletePolicyStub        func(*iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error)
	deletePolicyMutex       sync.RWMutex
	deletePolicyArgsForCall []struct {
		arg1 *iam.DeletePolicyInput
	}
	deletePolicyReturns struct {
		result1 *iam.DeletePolicyOutput
		result2 error
	}
	deletePolicyReturnsOnCall map[int]struct {
		result1 *iam.DeletePolicyOutput
		result2 error
	}
	DeletePolicyRequestStub        func(*iam.DeletePolicyInput) (*request.Request, *iam.DeletePolicyOutput)
	deletePolicyRequestMutex       sync.RWMutex
	deletePolicyRequestArgsForCall []struct {
		arg1 *iam.DeletePolicyInput
	}
	deletePolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeletePolicyOutput
	}
	deletePolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeletePolicyOutput
	}
	DeletePolicyVersionStub        func(*iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error)
	deletePolicyVersionMutex       sync.RWMutex
	deletePolicyVersionArgsForCall []struct {
		arg1 *iam.DeletePolicyVersionInput
	}
	deletePolicyVersionReturns struct {
		result1 *iam.DeletePolicyVersionOutput
		result2 error
	}
	deletePolicyVersionReturnsOnCall map[int]struct {
		result1 *iam.DeletePolicyVersionOutput
		result2 error
	}
	DeletePolicyVersionRequestStub        func(*iam.DeletePolicyVersionInput) (*request.Request, *iam.DeletePolicyVersionOutput)
	deletePolicyVersionRequestMutex       sync.RWMutex
	deletePolicyVersionRequestArgsForCall []struct {
		arg1 *iam.DeletePolicyVersionInput
	}
	deletePolicyVersionRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeletePolicyVersionOutput
	}
	deletePolicyVersionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeletePolicyVersionOutput
	}
	DeletePolicyVersionWithContextStub        func(context.Context, *iam.DeletePolicyVersionInput, ...request.Option) (*iam.DeletePolicyVersionOutput, error)
	deletePolicyVersionWithContextMutex       sync.RWMutex
	deletePolicyVersionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeletePolicyVersionInput
		arg3 []request.Option
	}
	deletePolicyVersionWithContextReturns struct {
		result1 *iam.DeletePolicyVersionOutput
		result2 error
	}
	deletePolicyVersionWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeletePolicyVersionOutput
		result2 error
	}
	DeletePolicyWithContextStub        func(context.Context, *iam.DeletePolicyInput, ...request.Option) (*iam.DeletePolicyOutput, error)
	deletePolicyWithContextMutex       sync.RWMutex
	deletePolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeletePolicyInput
		arg3 []request.Option
	}
	deletePolicyWithContextReturns struct {
		result1 *iam.DeletePolicyOutput
		result2 error
	}
	deletePolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeletePolicyOutput
		result2 error
	}
	DeleteRoleStub        func(*iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error)
	deleteRoleMutex       sync.RWMutex
	deleteRoleArgsForCall []struct {
		arg1 *iam.DeleteRoleInput
	}
	deleteRoleReturns struct {
		result1 *iam.DeleteRoleOutput
		result2 error
	}
	deleteRoleReturnsOnCall map[int]struct {
		result1 *iam.DeleteRoleOutput
		result2 error
	}
	DeleteRolePermissionsBoundaryStub        func(*iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error)
	deleteRolePermissionsBoundaryMutex       sync.RWMutex
	deleteRolePermissionsBoundaryArgsForCall []struct {
		arg1 *iam.DeleteRolePermissionsBoundaryInput
	}
	deleteRolePermissionsBoundaryReturns struct {
		result1 *iam.DeleteRolePermissionsBoundaryOutput
		result2 error
	}
	deleteRolePermissionsBoundaryReturnsOnCall map[int]struct {
		result1 *iam.DeleteRolePermissionsBoundaryOutput
		result2 error
	}
	DeleteRolePermissionsBoundaryRequestStub        func(*iam.DeleteRolePermissionsBoundaryInput) (*request.Request, *iam.DeleteRolePermissionsBoundaryOutput)
	deleteRolePermissionsBoundaryRequestMutex       sync.RWMutex
	deleteRolePermissionsBoundaryRequestArgsForCall []struct {
		arg1 *iam.DeleteRolePermissionsBoundaryInput
	}
	deleteRolePermissionsBoundaryRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteRolePermissionsBoundaryOutput
	}
	deleteRolePermissionsBoundaryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteRolePermissionsBoundaryOutput
	}
	DeleteRolePermissionsBoundaryWithContextStub        func(context.Context, *iam.DeleteRolePermissionsBoundaryInput, ...request.Option) (*iam.DeleteRolePermissionsBoundaryOutput, error)
	deleteRolePermissionsBoundaryWithContextMutex       sync.RWMutex
	deleteRolePermissionsBoundaryWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteRolePermissionsBoundaryInput
		arg3 []request.Option
	}
	deleteRolePermissionsBoundaryWithContextReturns struct {
		result1 *iam.DeleteRolePermissionsBoundaryOutput
		result2 error
	}
	deleteRolePermissionsBoundaryWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteRolePermissionsBoundaryOutput
		result2 error
	}
	DeleteRolePolicyStub        func(*iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error)
	deleteRolePolicyMutex       sync.RWMutex
	deleteRolePolicyArgsForCall []struct {
		arg1 *iam.DeleteRolePolicyInput
	}
	deleteRolePolicyReturns struct {
		result1 *iam.DeleteRolePolicyOutput
		result2 error
	}
	deleteRolePolicyReturnsOnCall map[int]struct {
		result1 *iam.DeleteRolePolicyOutput
		result2 error
	}
	DeleteRolePolicyRequestStub        func(*iam.DeleteRolePolicyInput) (*request.Request, *iam.DeleteRolePolicyOutput)
	deleteRolePolicyRequestMutex       sync.RWMutex
	deleteRolePolicyRequestArgsForCall []struct {
		arg1 *iam.DeleteRolePolicyInput
	}
	deleteRolePolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteRolePolicyOutput
	}
	deleteRolePolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteRolePolicyOutput
	}
	DeleteRolePolicyWithContextStub        func(context.Context, *iam.DeleteRolePolicyInput, ...request.Option) (*iam.DeleteRolePolicyOutput, error)
	deleteRolePolicyWithContextMutex       sync.RWMutex
	deleteRolePolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteRolePolicyInput
		arg3 []request.Option
	}
	deleteRolePolicyWithContextReturns struct {
		result1 *iam.DeleteRolePolicyOutput
		result2 error
	}
	deleteRolePolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteRolePolicyOutput
		result2 error
	}
	DeleteRoleRequestStub        func(*iam.DeleteRoleInput) (*request.Request, *iam.DeleteRoleOutput)
	deleteRoleRequestMutex       sync.RWMutex
	deleteRoleRequestArgsForCall []struct {
		arg1 *iam.DeleteRoleInput
	}
	deleteRoleRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteRoleOutput
	}
	deleteRoleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteRoleOutput
	}
	DeleteRoleWithContextStub        func(context.Context, *iam.DeleteRoleInput, ...request.Option) (*iam.DeleteRoleOutput, error)
	deleteRoleWithContextMutex       sync.RWMutex
	deleteRoleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteRoleInput
		arg3 []request.Option
	}
	deleteRoleWithContextReturns struct {
		result1 *iam.DeleteRoleOutput
		result2 error
	}
	deleteRoleWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteRoleOutput
		result2 error
	}
	DeleteSAMLProviderStub        func(*iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error)
	deleteSAMLProviderMutex       sync.RWMutex
	deleteSAMLProviderArgsForCall []struct {
		arg1 *iam.DeleteSAMLProviderInput
	}
	deleteSAMLProviderReturns struct {
		result1 *iam.DeleteSAMLProviderOutput
		result2 error
	}
	deleteSAMLProviderReturnsOnCall map[int]struct {
		result1 *iam.DeleteSAMLProviderOutput
		result2 error
	}
	DeleteSAMLProviderRequestStub        func(*iam.DeleteSAMLProviderInput) (*request.Request, *iam.DeleteSAMLProviderOutput)
	deleteSAMLProviderRequestMutex       sync.RWMutex
	deleteSAMLProviderRequestArgsForCall []struct {
		arg1 *iam.DeleteSAMLProviderInput
	}
	deleteSAMLProviderRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteSAMLProviderOutput
	}
	deleteSAMLProviderRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteSAMLProviderOutput
	}
	DeleteSAMLProviderWithContextStub        func(context.Context, *iam.DeleteSAMLProviderInput, ...request.Option) (*iam.DeleteSAMLProviderOutput, error)
	deleteSAMLProviderWithContextMutex       sync.RWMutex
	deleteSAMLProviderWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteSAMLProviderInput
		arg3 []request.Option
	}
	deleteSAMLProviderWithContextReturns struct {
		result1 *iam.DeleteSAMLProviderOutput
		result2 error
	}
	deleteSAMLProviderWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteSAMLProviderOutput
		result2 error
	}
	DeleteSSHPublicKeyStub        func(*iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error)
	deleteSSHPublicKeyMutex       sync.RWMutex
	deleteSSHPublicKeyArgsForCall []struct {
		arg1 *iam.DeleteSSHPublicKeyInput
	}
	deleteSSHPublicKeyReturns struct {
		result1 *iam.DeleteSSHPublicKeyOutput
		result2 error
	}
	deleteSSHPublicKeyReturnsOnCall map[int]struct {
		result1 *iam.DeleteSSHPublicKeyOutput
		result2 error
	}
	DeleteSSHPublicKeyRequestStub        func(*iam.DeleteSSHPublicKeyInput) (*request.Request, *iam.DeleteSSHPublicKeyOutput)
	deleteSSHPublicKeyRequestMutex       sync.RWMutex
	deleteSSHPublicKeyRequestArgsForCall []struct {
		arg1 *iam.DeleteSSHPublicKeyInput
	}
	deleteSSHPublicKeyRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteSSHPublicKeyOutput
	}
	deleteSSHPublicKeyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteSSHPublicKeyOutput
	}
	DeleteSSHPublicKeyWithContextStub        func(context.Context, *iam.DeleteSSHPublicKeyInput, ...request.Option) (*iam.DeleteSSHPublicKeyOutput, error)
	deleteSSHPublicKeyWithContextMutex       sync.RWMutex
	deleteSSHPublicKeyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteSSHPublicKeyInput
		arg3 []request.Option
	}
	deleteSSHPublicKeyWithContextReturns struct {
		result1 *iam.DeleteSSHPublicKeyOutput
		result2 error
	}
	deleteSSHPublicKeyWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteSSHPublicKeyOutput
		result2 error
	}
	DeleteServerCertificateStub        func(*iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error)
	deleteServerCertificateMutex       sync.RWMutex
	deleteServerCertificateArgsForCall []struct {
		arg1 *iam.DeleteServerCertificateInput
	}
	deleteServerCertificateReturns struct {
		result1 *iam.DeleteServerCertificateOutput
		result2 error
	}
	deleteServerCertificateReturnsOnCall map[int]struct {
		result1 *iam.DeleteServerCertificateOutput
		result2 error
	}
	DeleteServerCertificateRequestStub        func(*iam.DeleteServerCertificateInput) (*request.Request, *iam.DeleteServerCertificateOutput)
	deleteServerCertificateRequestMutex       sync.RWMutex
	deleteServerCertificateRequestArgsForCall []struct {
		arg1 *iam.DeleteServerCertificateInput
	}
	deleteServerCertificateRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteServerCertificateOutput
	}
	deleteServerCertificateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteServerCertificateOutput
	}
	DeleteServerCertificateWithContextStub        func(context.Context, *iam.DeleteServerCertificateInput, ...request.Option) (*iam.DeleteServerCertificateOutput, error)
	deleteServerCertificateWithContextMutex       sync.RWMutex
	deleteServerCertificateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteServerCertificateInput
		arg3 []request.Option
	}
	deleteServerCertificateWithContextReturns struct {
		result1 *iam.DeleteServerCertificateOutput
		result2 error
	}
	deleteServerCertificateWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteServerCertificateOutput
		result2 error
	}
	DeleteServiceLinkedRoleStub        func(*iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error)
	deleteServiceLinkedRoleMutex       sync.RWMutex
	deleteServiceLinkedRoleArgsForCall []struct {
		arg1 *iam.DeleteServiceLinkedRoleInput
	}
	deleteServiceLinkedRoleReturns struct {
		result1 *iam.DeleteServiceLinkedRoleOutput
		result2 error
	}
	deleteServiceLinkedRoleReturnsOnCall map[int]struct {
		result1 *iam.DeleteServiceLinkedRoleOutput
		result2 error
	}
	DeleteServiceLinkedRoleRequestStub        func(*iam.DeleteServiceLinkedRoleInput) (*request.Request, *iam.DeleteServiceLinkedRoleOutput)
	deleteServiceLinkedRoleRequestMutex       sync.RWMutex
	deleteServiceLinkedRoleRequestArgsForCall []struct {
		arg1 *iam.DeleteServiceLinkedRoleInput
	}
	deleteServiceLinkedRoleRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteServiceLinkedRoleOutput
	}
	deleteServiceLinkedRoleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteServiceLinkedRoleOutput
	}
	DeleteServiceLinkedRoleWithContextStub        func(context.Context, *iam.DeleteServiceLinkedRoleInput, ...request.Option) (*iam.DeleteServiceLinkedRoleOutput, error)
	deleteServiceLinkedRoleWithContextMutex       sync.RWMutex
	deleteServiceLinkedRoleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteServiceLinkedRoleInput
		arg3 []request.Option
	}
	deleteServiceLinkedRoleWithContextReturns struct {
		result1 *iam.DeleteServiceLinkedRoleOutput
		result2 error
	}
	deleteServiceLinkedRoleWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteServiceLinkedRoleOutput
		result2 error
	}
	DeleteServiceSpecificCredentialStub        func(*iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error)
	deleteServiceSpecificCredentialMutex       sync.RWMutex
	deleteServiceSpecificCredentialArgsForCall []struct {
		arg1 *iam.DeleteServiceSpecificCredentialInput
	}
	deleteServiceSpecificCredentialReturns struct {
		result1 *iam.DeleteServiceSpecificCredentialOutput
		result2 error
	}
	deleteServiceSpecificCredentialReturnsOnCall map[int]struct {
		result1 *iam.DeleteServiceSpecificCredentialOutput
		result2 error
	}
	DeleteServiceSpecificCredentialRequestStub        func(*iam.DeleteServiceSpecificCredentialInput) (*request.Request, *iam.DeleteServiceSpecificCredentialOutput)
	deleteServiceSpecificCredentialRequestMutex       sync.RWMutex
	deleteServiceSpecificCredentialRequestArgsForCall []struct {
		arg1 *iam.DeleteServiceSpecificCredentialInput
	}
	deleteServiceSpecificCredentialRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteServiceSpecificCredentialOutput
	}
	deleteServiceSpecificCredentialRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteServiceSpecificCredentialOutput
	}
	DeleteServiceSpecificCredentialWithContextStub        func(context.Context, *iam.DeleteServiceSpecificCredentialInput, ...request.Option) (*iam.DeleteServiceSpecificCredentialOutput, error)
	deleteServiceSpecificCredentialWithContextMutex       sync.RWMutex
	deleteServiceSpecificCredentialWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteServiceSpecificCredentialInput
		arg3 []request.Option
	}
	deleteServiceSpecificCredentialWithContextReturns struct {
		result1 *iam.DeleteServiceSpecificCredentialOutput
		result2 error
	}
	deleteServiceSpecificCredentialWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteServiceSpecificCredentialOutput
		result2 error
	}
	DeleteSigningCertificateStub        func(*iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error)
	deleteSigningCertificateMutex       sync.RWMutex
	deleteSigningCertificateArgsForCall []struct {
		arg1 *iam.DeleteSigningCertificateInput
	}
	deleteSigningCertificateReturns struct {
		result1 *iam.DeleteSigningCertificateOutput
		result2 error
	}
	deleteSigningCertificateReturnsOnCall map[int]struct {
		result1 *iam.DeleteSigningCertificateOutput
		result2 error
	}
	DeleteSigningCertificateRequestStub        func(*iam.DeleteSigningCertificateInput) (*request.Request, *iam.DeleteSigningCertificateOutput)
	deleteSigningCertificateRequestMutex       sync.RWMutex
	deleteSigningCertificateRequestArgsForCall []struct {
		arg1 *iam.DeleteSigningCertificateInput
	}
	deleteSigningCertificateRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteSigningCertificateOutput
	}
	deleteSigningCertificateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteSigningCertificateOutput
	}
	DeleteSigningCertificateWithContextStub        func(context.Context, *iam.DeleteSigningCertificateInput, ...request.Option) (*iam.DeleteSigningCertificateOutput, error)
	deleteSigningCertificateWithContextMutex       sync.RWMutex
	deleteSigningCertificateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteSigningCertificateInput
		arg3 []request.Option
	}
	deleteSigningCertificateWithContextReturns struct {
		result1 *iam.DeleteSigningCertificateOutput
		result2 error
	}
	deleteSigningCertificateWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteSigningCertificateOutput
		result2 error
	}
	DeleteUserStub        func(*iam.DeleteUserInput) (*iam.DeleteUserOutput, error)
	deleteUserMutex       sync.RWMutex
	deleteUserArgsForCall []struct {
		arg1 *iam.DeleteUserInput
	}
	deleteUserReturns struct {
		result1 *iam.DeleteUserOutput
		result2 error
	}
	deleteUserReturnsOnCall map[int]struct {
		result1 *iam.DeleteUserOutput
		result2 error
	}
	DeleteUserPermissionsBoundaryStub        func(*iam.DeleteUserPermissionsBoundaryInput) (*iam.DeleteUserPermissionsBoundaryOutput, error)
	deleteUserPermissionsBoundaryMutex       sync.RWMutex
	deleteUserPermissionsBoundaryArgsForCall []struct {
		arg1 *iam.DeleteUserPermissionsBoundaryInput
	}
	deleteUserPermissionsBoundaryReturns struct {
		result1 *iam.DeleteUserPermissionsBoundaryOutput
		result2 error
	}
	deleteUserPermissionsBoundaryReturnsOnCall map[int]struct {
		result1 *iam.DeleteUserPermissionsBoundaryOutput
		result2 error
	}
	DeleteUserPermissionsBoundaryRequestStub        func(*iam.DeleteUserPermissionsBoundaryInput) (*request.Request, *iam.DeleteUserPermissionsBoundaryOutput)
	deleteUserPermissionsBoundaryRequestMutex       sync.RWMutex
	deleteUserPermissionsBoundaryRequestArgsForCall []struct {
		arg1 *iam.DeleteUserPermissionsBoundaryInput
	}
	deleteUserPermissionsBoundaryRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteUserPermissionsBoundaryOutput
	}
	deleteUserPermissionsBoundaryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteUserPermissionsBoundaryOutput
	}
	DeleteUserPermissionsBoundaryWithContextStub        func(context.Context, *iam.DeleteUserPermissionsBoundaryInput, ...request.Option) (*iam.DeleteUserPermissionsBoundaryOutput, error)
	deleteUserPermissionsBoundaryWithContextMutex       sync.RWMutex
	deleteUserPermissionsBoundaryWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteUserPermissionsBoundaryInput
		arg3 []request.Option
	}
	deleteUserPermissionsBoundaryWithContextReturns struct {
		result1 *iam.DeleteUserPermissionsBoundaryOutput
		result2 error
	}
	deleteUserPermissionsBoundaryWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteUserPermissionsBoundaryOutput
		result2 error
	}
	DeleteUserPolicyStub        func(*iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error)
	deleteUserPolicyMutex       sync.RWMutex
	deleteUserPolicyArgsForCall []struct {
		arg1 *iam.DeleteUserPolicyInput
	}
	deleteUserPolicyReturns struct {
		result1 *iam.DeleteUserPolicyOutput
		result2 error
	}
	deleteUserPolicyReturnsOnCall map[int]struct {
		result1 *iam.DeleteUserPolicyOutput
		result2 error
	}
	DeleteUserPolicyRequestStub        func(*iam.DeleteUserPolicyInput) (*request.Request, *iam.DeleteUserPolicyOutput)
	deleteUserPolicyRequestMutex       sync.RWMutex
	deleteUserPolicyRequestArgsForCall []struct {
		arg1 *iam.DeleteUserPolicyInput
	}
	deleteUserPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteUserPolicyOutput
	}
	deleteUserPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteUserPolicyOutput
	}
	DeleteUserPolicyWithContextStub        func(context.Context, *iam.DeleteUserPolicyInput, ...request.Option) (*iam.DeleteUserPolicyOutput, error)
	deleteUserPolicyWithContextMutex       sync.RWMutex
	deleteUserPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteUserPolicyInput
		arg3 []request.Option
	}
	deleteUserPolicyWithContextReturns struct {
		result1 *iam.DeleteUserPolicyOutput
		result2 error
	}
	deleteUserPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteUserPolicyOutput
		result2 error
	}
	DeleteUserRequestStub        func(*iam.DeleteUserInput) (*request.Request, *iam.DeleteUserOutput)
	deleteUserRequestMutex       sync.RWMutex
	deleteUserRequestArgsForCall []struct {
		arg1 *iam.DeleteUserInput
	}
	deleteUserRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteUserOutput
	}
	deleteUserRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteUserOutput
	}
	DeleteUserWithContextStub        func(context.Context, *iam.DeleteUserInput, ...request.Option) (*iam.DeleteUserOutput, error)
	deleteUserWithContextMutex       sync.RWMutex
	deleteUserWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteUserInput
		arg3 []request.Option
	}
	deleteUserWithContextReturns struct {
		result1 *iam.DeleteUserOutput
		result2 error
	}
	deleteUserWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteUserOutput
		result2 error
	}
	DeleteVirtualMFADeviceStub        func(*iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error)
	deleteVirtualMFADeviceMutex       sync.RWMutex
	deleteVirtualMFADeviceArgsForCall []struct {
		arg1 *iam.DeleteVirtualMFADeviceInput
	}
	deleteVirtualMFADeviceReturns struct {
		result1 *iam.DeleteVirtualMFADeviceOutput
		result2 error
	}
	deleteVirtualMFADeviceReturnsOnCall map[int]struct {
		result1 *iam.DeleteVirtualMFADeviceOutput
		result2 error
	}
	DeleteVirtualMFADeviceRequestStub        func(*iam.DeleteVirtualMFADeviceInput) (*request.Request, *iam.DeleteVirtualMFADeviceOutput)
	deleteVirtualMFADeviceRequestMutex       sync.RWMutex
	deleteVirtualMFADeviceRequestArgsForCall []struct {
		arg1 *iam.DeleteVirtualMFADeviceInput
	}
	deleteVirtualMFADeviceRequestReturns struct {
		result1 *request.Request
		result2 *iam.DeleteVirtualMFADeviceOutput
	}
	deleteVirtualMFADeviceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DeleteVirtualMFADeviceOutput
	}
	DeleteVirtualMFADeviceWithContextStub        func(context.Context, *iam.DeleteVirtualMFADeviceInput, ...request.Option) (*iam.DeleteVirtualMFADeviceOutput, error)
	deleteVirtualMFADeviceWithContextMutex       sync.RWMutex
	deleteVirtualMFADeviceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DeleteVirtualMFADeviceInput
		arg3 []request.Option
	}
	deleteVirtualMFADeviceWithContextReturns struct {
		result1 *iam.DeleteVirtualMFADeviceOutput
		result2 error
	}
	deleteVirtualMFADeviceWithContextReturnsOnCall map[int]struct {
		result1 *iam.DeleteVirtualMFADeviceOutput
		result2 error
	}
	DetachGroupPolicyStub        func(*iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error)
	detachGroupPolicyMutex       sync.RWMutex
	detachGroupPolicyArgsForCall []struct {
		arg1 *iam.DetachGroupPolicyInput
	}
	detachGroupPolicyReturns struct {
		result1 *iam.DetachGroupPolicyOutput
		result2 error
	}
	detachGroupPolicyReturnsOnCall map[int]struct {
		result1 *iam.DetachGroupPolicyOutput
		result2 error
	}
	DetachGroupPolicyRequestStub        func(*iam.DetachGroupPolicyInput) (*request.Request, *iam.DetachGroupPolicyOutput)
	detachGroupPolicyRequestMutex       sync.RWMutex
	detachGroupPolicyRequestArgsForCall []struct {
		arg1 *iam.DetachGroupPolicyInput
	}
	detachGroupPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.DetachGroupPolicyOutput
	}
	detachGroupPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DetachGroupPolicyOutput
	}
	DetachGroupPolicyWithContextStub        func(context.Context, *iam.DetachGroupPolicyInput, ...request.Option) (*iam.DetachGroupPolicyOutput, error)
	detachGroupPolicyWithContextMutex       sync.RWMutex
	detachGroupPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DetachGroupPolicyInput
		arg3 []request.Option
	}
	detachGroupPolicyWithContextReturns struct {
		result1 *iam.DetachGroupPolicyOutput
		result2 error
	}
	detachGroupPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.DetachGroupPolicyOutput
		result2 error
	}
	DetachRolePolicyStub        func(*iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error)
	detachRolePolicyMutex       sync.RWMutex
	detachRolePolicyArgsForCall []struct {
		arg1 *iam.DetachRolePolicyInput
	}
	detachRolePolicyReturns struct {
		result1 *iam.DetachRolePolicyOutput
		result2 error
	}
	detachRolePolicyReturnsOnCall map[int]struct {
		result1 *iam.DetachRolePolicyOutput
		result2 error
	}
	DetachRolePolicyRequestStub        func(*iam.DetachRolePolicyInput) (*request.Request, *iam.DetachRolePolicyOutput)
	detachRolePolicyRequestMutex       sync.RWMutex
	detachRolePolicyRequestArgsForCall []struct {
		arg1 *iam.DetachRolePolicyInput
	}
	detachRolePolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.DetachRolePolicyOutput
	}
	detachRolePolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DetachRolePolicyOutput
	}
	DetachRolePolicyWithContextStub        func(context.Context, *iam.DetachRolePolicyInput, ...request.Option) (*iam.DetachRolePolicyOutput, error)
	detachRolePolicyWithContextMutex       sync.RWMutex
	detachRolePolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DetachRolePolicyInput
		arg3 []request.Option
	}
	detachRolePolicyWithContextReturns struct {
		result1 *iam.DetachRolePolicyOutput
		result2 error
	}
	detachRolePolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.DetachRolePolicyOutput
		result2 error
	}
	DetachUserPolicyStub        func(*iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error)
	detachUserPolicyMutex       sync.RWMutex
	detachUserPolicyArgsForCall []struct {
		arg1 *iam.DetachUserPolicyInput
	}
	detachUserPolicyReturns struct {
		result1 *iam.DetachUserPolicyOutput
		result2 error
	}
	detachUserPolicyReturnsOnCall map[int]struct {
		result1 *iam.DetachUserPolicyOutput
		result2 error
	}
	DetachUserPolicyRequestStub        func(*iam.DetachUserPolicyInput) (*request.Request, *iam.DetachUserPolicyOutput)
	detachUserPolicyRequestMutex       sync.RWMutex
	detachUserPolicyRequestArgsForCall []struct {
		arg1 *iam.DetachUserPolicyInput
	}
	detachUserPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.DetachUserPolicyOutput
	}
	detachUserPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.DetachUserPolicyOutput
	}
	DetachUserPolicyWithContextStub        func(context.Context, *iam.DetachUserPolicyInput, ...request.Option) (*iam.DetachUserPolicyOutput, error)
	detachUserPolicyWithContextMutex       sync.RWMutex
	detachUserPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.DetachUserPolicyInput
		arg3 []request.Option
	}
	detachUserPolicyWithContextReturns struct {
		result1 *iam.DetachUserPolicyOutput
		result2 error
	}
	detachUserPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.DetachUserPolicyOutput
		result2 error
	}
	EnableMFADeviceStub        func(*iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error)
	enableMFADeviceMutex       sync.RWMutex
	enableMFADeviceArgsForCall []struct {
		arg1 *iam.EnableMFADeviceInput
	}
	enableMFADeviceReturns struct {
		result1 *iam.EnableMFADeviceOutput
		result2 error
	}
	enableMFADeviceReturnsOnCall map[int]struct {
		result1 *iam.EnableMFADeviceOutput
		result2 error
	}
	EnableMFADeviceRequestStub        func(*iam.EnableMFADeviceInput) (*request.Request, *iam.EnableMFADeviceOutput)
	enableMFADeviceRequestMutex       sync.RWMutex
	enableMFADeviceRequestArgsForCall []struct {
		arg1 *iam.EnableMFADeviceInput
	}
	enableMFADeviceRequestReturns struct {
		result1 *request.Request
		result2 *iam.EnableMFADeviceOutput
	}
	enableMFADeviceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.EnableMFADeviceOutput
	}
	EnableMFADeviceWithContextStub        func(context.Context, *iam.EnableMFADeviceInput, ...request.Option) (*iam.EnableMFADeviceOutput, error)
	enableMFADeviceWithContextMutex       sync.RWMutex
	enableMFADeviceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.EnableMFADeviceInput
		arg3 []request.Option
	}
	enableMFADeviceWithContextReturns struct {
		result1 *iam.EnableMFADeviceOutput
		result2 error
	}
	enableMFADeviceWithContextReturnsOnCall map[int]struct {
		result1 *iam.EnableMFADeviceOutput
		result2 error
	}
	GenerateCredentialReportStub        func(*iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error)
	generateCredentialReportMutex       sync.RWMutex
	generateCredentialReportArgsForCall []struct {
		arg1 *iam.GenerateCredentialReportInput
	}
	generateCredentialReportReturns struct {
		result1 *iam.GenerateCredentialReportOutput
		result2 error
	}
	generateCredentialReportReturnsOnCall map[int]struct {
		result1 *iam.GenerateCredentialReportOutput
		result2 error
	}
	GenerateCredentialReportRequestStub        func(*iam.GenerateCredentialReportInput) (*request.Request, *iam.GenerateCredentialReportOutput)
	generateCredentialReportRequestMutex       sync.RWMutex
	generateCredentialReportRequestArgsForCall []struct {
		arg1 *iam.GenerateCredentialReportInput
	}
	generateCredentialReportRequestReturns struct {
		result1 *request.Request
		result2 *iam.GenerateCredentialReportOutput
	}
	generateCredentialReportRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GenerateCredentialReportOutput
	}
	GenerateCredentialReportWithContextStub        func(context.Context, *iam.GenerateCredentialReportInput, ...request.Option) (*iam.GenerateCredentialReportOutput, error)
	generateCredentialReportWithContextMutex       sync.RWMutex
	generateCredentialReportWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GenerateCredentialReportInput
		arg3 []request.Option
	}
	generateCredentialReportWithContextReturns struct {
		result1 *iam.GenerateCredentialReportOutput
		result2 error
	}
	generateCredentialReportWithContextReturnsOnCall map[int]struct {
		result1 *iam.GenerateCredentialReportOutput
		result2 error
	}
	GenerateOrganizationsAccessReportStub        func(*iam.GenerateOrganizationsAccessReportInput) (*iam.GenerateOrganizationsAccessReportOutput, error)
	generateOrganizationsAccessReportMutex       sync.RWMutex
	generateOrganizationsAccessReportArgsForCall []struct {
		arg1 *iam.GenerateOrganizationsAccessReportInput
	}
	generateOrganizationsAccessReportReturns struct {
		result1 *iam.GenerateOrganizationsAccessReportOutput
		result2 error
	}
	generateOrganizationsAccessReportReturnsOnCall map[int]struct {
		result1 *iam.GenerateOrganizationsAccessReportOutput
		result2 error
	}
	GenerateOrganizationsAccessReportRequestStub        func(*iam.GenerateOrganizationsAccessReportInput) (*request.Request, *iam.GenerateOrganizationsAccessReportOutput)
	generateOrganizationsAccessReportRequestMutex       sync.RWMutex
	generateOrganizationsAccessReportRequestArgsForCall []struct {
		arg1 *iam.GenerateOrganizationsAccessReportInput
	}
	generateOrganizationsAccessReportRequestReturns struct {
		result1 *request.Request
		result2 *iam.GenerateOrganizationsAccessReportOutput
	}
	generateOrganizationsAccessReportRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GenerateOrganizationsAccessReportOutput
	}
	GenerateOrganizationsAccessReportWithContextStub        func(context.Context, *iam.GenerateOrganizationsAccessReportInput, ...request.Option) (*iam.GenerateOrganizationsAccessReportOutput, error)
	generateOrganizationsAccessReportWithContextMutex       sync.RWMutex
	generateOrganizationsAccessReportWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GenerateOrganizationsAccessReportInput
		arg3 []request.Option
	}
	generateOrganizationsAccessReportWithContextReturns struct {
		result1 *iam.GenerateOrganizationsAccessReportOutput
		result2 error
	}
	generateOrganizationsAccessReportWithContextReturnsOnCall map[int]struct {
		result1 *iam.GenerateOrganizationsAccessReportOutput
		result2 error
	}
	GenerateServiceLastAccessedDetailsStub        func(*iam.GenerateServiceLastAccessedDetailsInput) (*iam.GenerateServiceLastAccessedDetailsOutput, error)
	generateServiceLastAccessedDetailsMutex       sync.RWMutex
	generateServiceLastAccessedDetailsArgsForCall []struct {
		arg1 *iam.GenerateServiceLastAccessedDetailsInput
	}
	generateServiceLastAccessedDetailsReturns struct {
		result1 *iam.GenerateServiceLastAccessedDetailsOutput
		result2 error
	}
	generateServiceLastAccessedDetailsReturnsOnCall map[int]struct {
		result1 *iam.GenerateServiceLastAccessedDetailsOutput
		result2 error
	}
	GenerateServiceLastAccessedDetailsRequestStub        func(*iam.GenerateServiceLastAccessedDetailsInput) (*request.Request, *iam.GenerateServiceLastAccessedDetailsOutput)
	generateServiceLastAccessedDetailsRequestMutex       sync.RWMutex
	generateServiceLastAccessedDetailsRequestArgsForCall []struct {
		arg1 *iam.GenerateServiceLastAccessedDetailsInput
	}
	generateServiceLastAccessedDetailsRequestReturns struct {
		result1 *request.Request
		result2 *iam.GenerateServiceLastAccessedDetailsOutput
	}
	generateServiceLastAccessedDetailsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GenerateServiceLastAccessedDetailsOutput
	}
	GenerateServiceLastAccessedDetailsWithContextStub        func(context.Context, *iam.GenerateServiceLastAccessedDetailsInput, ...request.Option) (*iam.GenerateServiceLastAccessedDetailsOutput, error)
	generateServiceLastAccessedDetailsWithContextMutex       sync.RWMutex
	generateServiceLastAccessedDetailsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GenerateServiceLastAccessedDetailsInput
		arg3 []request.Option
	}
	generateServiceLastAccessedDetailsWithContextReturns struct {
		result1 *iam.GenerateServiceLastAccessedDetailsOutput
		result2 error
	}
	generateServiceLastAccessedDetailsWithContextReturnsOnCall map[int]struct {
		result1 *iam.GenerateServiceLastAccessedDetailsOutput
		result2 error
	}
	GetAccessKeyLastUsedStub        func(*iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error)
	getAccessKeyLastUsedMutex       sync.RWMutex
	getAccessKeyLastUsedArgsForCall []struct {
		arg1 *iam.GetAccessKeyLastUsedInput
	}
	getAccessKeyLastUsedReturns struct {
		result1 *iam.GetAccessKeyLastUsedOutput
		result2 error
	}
	getAccessKeyLastUsedReturnsOnCall map[int]struct {
		result1 *iam.GetAccessKeyLastUsedOutput
		result2 error
	}
	GetAccessKeyLastUsedRequestStub        func(*iam.GetAccessKeyLastUsedInput) (*request.Request, *iam.GetAccessKeyLastUsedOutput)
	getAccessKeyLastUsedRequestMutex       sync.RWMutex
	getAccessKeyLastUsedRequestArgsForCall []struct {
		arg1 *iam.GetAccessKeyLastUsedInput
	}
	getAccessKeyLastUsedRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetAccessKeyLastUsedOutput
	}
	getAccessKeyLastUsedRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetAccessKeyLastUsedOutput
	}
	GetAccessKeyLastUsedWithContextStub        func(context.Context, *iam.GetAccessKeyLastUsedInput, ...request.Option) (*iam.GetAccessKeyLastUsedOutput, error)
	getAccessKeyLastUsedWithContextMutex       sync.RWMutex
	getAccessKeyLastUsedWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetAccessKeyLastUsedInput
		arg3 []request.Option
	}
	getAccessKeyLastUsedWithContextReturns struct {
		result1 *iam.GetAccessKeyLastUsedOutput
		result2 error
	}
	getAccessKeyLastUsedWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetAccessKeyLastUsedOutput
		result2 error
	}
	GetAccountAuthorizationDetailsStub        func(*iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error)
	getAccountAuthorizationDetailsMutex       sync.RWMutex
	getAccountAuthorizationDetailsArgsForCall []struct {
		arg1 *iam.GetAccountAuthorizationDetailsInput
	}
	getAccountAuthorizationDetailsReturns struct {
		result1 *iam.GetAccountAuthorizationDetailsOutput
		result2 error
	}
	getAccountAuthorizationDetailsReturnsOnCall map[int]struct {
		result1 *iam.GetAccountAuthorizationDetailsOutput
		result2 error
	}
	GetAccountAuthorizationDetailsPagesStub        func(*iam.GetAccountAuthorizationDetailsInput, func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool) error
	getAccountAuthorizationDetailsPagesMutex       sync.RWMutex
	getAccountAuthorizationDetailsPagesArgsForCall []struct {
		arg1 *iam.GetAccountAuthorizationDetailsInput
		arg2 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
	}
	getAccountAuthorizationDetailsPagesReturns struct {
		result1 error
	}
	getAccountAuthorizationDetailsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	GetAccountAuthorizationDetailsPagesWithContextStub        func(context.Context, *iam.GetAccountAuthorizationDetailsInput, func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool, ...request.Option) error
	getAccountAuthorizationDetailsPagesWithContextMutex       sync.RWMutex
	getAccountAuthorizationDetailsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetAccountAuthorizationDetailsInput
		arg3 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
		arg4 []request.Option
	}
	getAccountAuthorizationDetailsPagesWithContextReturns struct {
		result1 error
	}
	getAccountAuthorizationDetailsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	GetAccountAuthorizationDetailsRequestStub        func(*iam.GetAccountAuthorizationDetailsInput) (*request.Request, *iam.GetAccountAuthorizationDetailsOutput)
	getAccountAuthorizationDetailsRequestMutex       sync.RWMutex
	getAccountAuthorizationDetailsRequestArgsForCall []struct {
		arg1 *iam.GetAccountAuthorizationDetailsInput
	}
	getAccountAuthorizationDetailsRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetAccountAuthorizationDetailsOutput
	}
	getAccountAuthorizationDetailsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetAccountAuthorizationDetailsOutput
	}
	GetAccountAuthorizationDetailsWithContextStub        func(context.Context, *iam.GetAccountAuthorizationDetailsInput, ...request.Option) (*iam.GetAccountAuthorizationDetailsOutput, error)
	getAccountAuthorizationDetailsWithContextMutex       sync.RWMutex
	getAccountAuthorizationDetailsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetAccountAuthorizationDetailsInput
		arg3 []request.Option
	}
	getAccountAuthorizationDetailsWithContextReturns struct {
		result1 *iam.GetAccountAuthorizationDetailsOutput
		result2 error
	}
	getAccountAuthorizationDetailsWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetAccountAuthorizationDetailsOutput
		result2 error
	}
	GetAccountPasswordPolicyStub        func(*iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error)
	getAccountPasswordPolicyMutex       sync.RWMutex
	getAccountPasswordPolicyArgsForCall []struct {
		arg1 *iam.GetAccountPasswordPolicyInput
	}
	getAccountPasswordPolicyReturns struct {
		result1 *iam.GetAccountPasswordPolicyOutput
		result2 error
	}
	getAccountPasswordPolicyReturnsOnCall map[int]struct {
		result1 *iam.GetAccountPasswordPolicyOutput
		result2 error
	}
	GetAccountPasswordPolicyRequestStub        func(*iam.GetAccountPasswordPolicyInput) (*request.Request, *iam.GetAccountPasswordPolicyOutput)
	getAccountPasswordPolicyRequestMutex       sync.RWMutex
	getAccountPasswordPolicyRequestArgsForCall []struct {
		arg1 *iam.GetAccountPasswordPolicyInput
	}
	getAccountPasswordPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetAccountPasswordPolicyOutput
	}
	getAccountPasswordPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetAccountPasswordPolicyOutput
	}
	GetAccountPasswordPolicyWithContextStub        func(context.Context, *iam.GetAccountPasswordPolicyInput, ...request.Option) (*iam.GetAccountPasswordPolicyOutput, error)
	getAccountPasswordPolicyWithContextMutex       sync.RWMutex
	getAccountPasswordPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetAccountPasswordPolicyInput
		arg3 []request.Option
	}
	getAccountPasswordPolicyWithContextReturns struct {
		result1 *iam.GetAccountPasswordPolicyOutput
		result2 error
	}
	getAccountPasswordPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetAccountPasswordPolicyOutput
		result2 error
	}
	GetAccountSummaryStub        func(*iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error)
	getAccountSummaryMutex       sync.RWMutex
	getAccountSummaryArgsForCall []struct {
		arg1 *iam.GetAccountSummaryInput
	}
	getAccountSummaryReturns struct {
		result1 *iam.GetAccountSummaryOutput
		result2 error
	}
	getAccountSummaryReturnsOnCall map[int]struct {
		result1 *iam.GetAccountSummaryOutput
		result2 error
	}
	GetAccountSummaryRequestStub        func(*iam.GetAccountSummaryInput) (*request.Request, *iam.GetAccountSummaryOutput)
	getAccountSummaryRequestMutex       sync.RWMutex
	getAccountSummaryRequestArgsForCall []struct {
		arg1 *iam.GetAccountSummaryInput
	}
	getAccountSummaryRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetAccountSummaryOutput
	}
	getAccountSummaryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetAccountSummaryOutput
	}
	GetAccountSummaryWithContextStub        func(context.Context, *iam.GetAccountSummaryInput, ...request.Option) (*iam.GetAccountSummaryOutput, error)
	getAccountSummaryWithContextMutex       sync.RWMutex
	getAccountSummaryWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetAccountSummaryInput
		arg3 []request.Option
	}
	getAccountSummaryWithContextReturns struct {
		result1 *iam.GetAccountSummaryOutput
		result2 error
	}
	getAccountSummaryWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetAccountSummaryOutput
		result2 error
	}
	GetContextKeysForCustomPolicyStub        func(*iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error)
	getContextKeysForCustomPolicyMutex       sync.RWMutex
	getContextKeysForCustomPolicyArgsForCall []struct {
		arg1 *iam.GetContextKeysForCustomPolicyInput
	}
	getContextKeysForCustomPolicyReturns struct {
		result1 *iam.GetContextKeysForPolicyResponse
		result2 error
	}
	getContextKeysForCustomPolicyReturnsOnCall map[int]struct {
		result1 *iam.GetContextKeysForPolicyResponse
		result2 error
	}
	GetContextKeysForCustomPolicyRequestStub        func(*iam.GetContextKeysForCustomPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse)
	getContextKeysForCustomPolicyRequestMutex       sync.RWMutex
	getContextKeysForCustomPolicyRequestArgsForCall []struct {
		arg1 *iam.GetContextKeysForCustomPolicyInput
	}
	getContextKeysForCustomPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetContextKeysForPolicyResponse
	}
	getContextKeysForCustomPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetContextKeysForPolicyResponse
	}
	GetContextKeysForCustomPolicyWithContextStub        func(context.Context, *iam.GetContextKeysForCustomPolicyInput, ...request.Option) (*iam.GetContextKeysForPolicyResponse, error)
	getContextKeysForCustomPolicyWithContextMutex       sync.RWMutex
	getContextKeysForCustomPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetContextKeysForCustomPolicyInput
		arg3 []request.Option
	}
	getContextKeysForCustomPolicyWithContextReturns struct {
		result1 *iam.GetContextKeysForPolicyResponse
		result2 error
	}
	getContextKeysForCustomPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetContextKeysForPolicyResponse
		result2 error
	}
	GetContextKeysForPrincipalPolicyStub        func(*iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error)
	getContextKeysForPrincipalPolicyMutex       sync.RWMutex
	getContextKeysForPrincipalPolicyArgsForCall []struct {
		arg1 *iam.GetContextKeysForPrincipalPolicyInput
	}
	getContextKeysForPrincipalPolicyReturns struct {
		result1 *iam.GetContextKeysForPolicyResponse
		result2 error
	}
	getContextKeysForPrincipalPolicyReturnsOnCall map[int]struct {
		result1 *iam.GetContextKeysForPolicyResponse
		result2 error
	}
	GetContextKeysForPrincipalPolicyRequestStub        func(*iam.GetContextKeysForPrincipalPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse)
	getContextKeysForPrincipalPolicyRequestMutex       sync.RWMutex
	getContextKeysForPrincipalPolicyRequestArgsForCall []struct {
		arg1 *iam.GetContextKeysForPrincipalPolicyInput
	}
	getContextKeysForPrincipalPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetContextKeysForPolicyResponse
	}
	getContextKeysForPrincipalPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetContextKeysForPolicyResponse
	}
	GetContextKeysForPrincipalPolicyWithContextStub        func(context.Context, *iam.GetContextKeysForPrincipalPolicyInput, ...request.Option) (*iam.GetContextKeysForPolicyResponse, error)
	getContextKeysForPrincipalPolicyWithContextMutex       sync.RWMutex
	getContextKeysForPrincipalPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetContextKeysForPrincipalPolicyInput
		arg3 []request.Option
	}
	getContextKeysForPrincipalPolicyWithContextReturns struct {
		result1 *iam.GetContextKeysForPolicyResponse
		result2 error
	}
	getContextKeysForPrincipalPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetContextKeysForPolicyResponse
		result2 error
	}
	GetCredentialReportStub        func(*iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error)
	getCredentialReportMutex       sync.RWMutex
	getCredentialReportArgsForCall []struct {
		arg1 *iam.GetCredentialReportInput
	}
	getCredentialReportReturns struct {
		result1 *iam.GetCredentialReportOutput
		result2 error
	}
	getCredentialReportReturnsOnCall map[int]struct {
		result1 *iam.GetCredentialReportOutput
		result2 error
	}
	GetCredentialReportRequestStub        func(*iam.GetCredentialReportInput) (*request.Request, *iam.GetCredentialReportOutput)
	getCredentialReportRequestMutex       sync.RWMutex
	getCredentialReportRequestArgsForCall []struct {
		arg1 *iam.GetCredentialReportInput
	}
	getCredentialReportRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetCredentialReportOutput
	}
	getCredentialReportRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetCredentialReportOutput
	}
	GetCredentialReportWithContextStub        func(context.Context, *iam.GetCredentialReportInput, ...request.Option) (*iam.GetCredentialReportOutput, error)
	getCredentialReportWithContextMutex       sync.RWMutex
	getCredentialReportWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetCredentialReportInput
		arg3 []request.Option
	}
	getCredentialReportWithContextReturns struct {
		result1 *iam.GetCredentialReportOutput
		result2 error
	}
	getCredentialReportWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetCredentialReportOutput
		result2 error
	}
	GetGroupStub        func(*iam.GetGroupInput) (*iam.GetGroupOutput, error)
	getGroupMutex       sync.RWMutex
	getGroupArgsForCall []struct {
		arg1 *iam.GetGroupInput
	}
	getGroupReturns struct {
		result1 *iam.GetGroupOutput
		result2 error
	}
	getGroupReturnsOnCall map[int]struct {
		result1 *iam.GetGroupOutput
		result2 error
	}
	GetGroupPagesStub        func(*iam.GetGroupInput, func(*iam.GetGroupOutput, bool) bool) error
	getGroupPagesMutex       sync.RWMutex
	getGroupPagesArgsForCall []struct {
		arg1 *iam.GetGroupInput
		arg2 func(*iam.GetGroupOutput, bool) bool
	}
	getGroupPagesReturns struct {
		result1 error
	}
	getGroupPagesReturnsOnCall map[int]struct {
		result1 error
	}
	GetGroupPagesWithContextStub        func(context.Context, *iam.GetGroupInput, func(*iam.GetGroupOutput, bool) bool, ...request.Option) error
	getGroupPagesWithContextMutex       sync.RWMutex
	getGroupPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetGroupInput
		arg3 func(*iam.GetGroupOutput, bool) bool
		arg4 []request.Option
	}
	getGroupPagesWithContextReturns struct {
		result1 error
	}
	getGroupPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	GetGroupPolicyStub        func(*iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error)
	getGroupPolicyMutex       sync.RWMutex
	getGroupPolicyArgsForCall []struct {
		arg1 *iam.GetGroupPolicyInput
	}
	getGroupPolicyReturns struct {
		result1 *iam.GetGroupPolicyOutput
		result2 error
	}
	getGroupPolicyReturnsOnCall map[int]struct {
		result1 *iam.GetGroupPolicyOutput
		result2 error
	}
	GetGroupPolicyRequestStub        func(*iam.GetGroupPolicyInput) (*request.Request, *iam.GetGroupPolicyOutput)
	getGroupPolicyRequestMutex       sync.RWMutex
	getGroupPolicyRequestArgsForCall []struct {
		arg1 *iam.GetGroupPolicyInput
	}
	getGroupPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetGroupPolicyOutput
	}
	getGroupPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetGroupPolicyOutput
	}
	GetGroupPolicyWithContextStub        func(context.Context, *iam.GetGroupPolicyInput, ...request.Option) (*iam.GetGroupPolicyOutput, error)
	getGroupPolicyWithContextMutex       sync.RWMutex
	getGroupPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetGroupPolicyInput
		arg3 []request.Option
	}
	getGroupPolicyWithContextReturns struct {
		result1 *iam.GetGroupPolicyOutput
		result2 error
	}
	getGroupPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetGroupPolicyOutput
		result2 error
	}
	GetGroupRequestStub        func(*iam.GetGroupInput) (*request.Request, *iam.GetGroupOutput)
	getGroupRequestMutex       sync.RWMutex
	getGroupRequestArgsForCall []struct {
		arg1 *iam.GetGroupInput
	}
	getGroupRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetGroupOutput
	}
	getGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetGroupOutput
	}
	GetGroupWithContextStub        func(context.Context, *iam.GetGroupInput, ...request.Option) (*iam.GetGroupOutput, error)
	getGroupWithContextMutex       sync.RWMutex
	getGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetGroupInput
		arg3 []request.Option
	}
	getGroupWithContextReturns struct {
		result1 *iam.GetGroupOutput
		result2 error
	}
	getGroupWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetGroupOutput
		result2 error
	}
	GetInstanceProfileStub        func(*iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error)
	getInstanceProfileMutex       sync.RWMutex
	getInstanceProfileArgsForCall []struct {
		arg1 *iam.GetInstanceProfileInput
	}
	getInstanceProfileReturns struct {
		result1 *iam.GetInstanceProfileOutput
		result2 error
	}
	getInstanceProfileReturnsOnCall map[int]struct {
		result1 *iam.GetInstanceProfileOutput
		result2 error
	}
	GetInstanceProfileRequestStub        func(*iam.GetInstanceProfileInput) (*request.Request, *iam.GetInstanceProfileOutput)
	getInstanceProfileRequestMutex       sync.RWMutex
	getInstanceProfileRequestArgsForCall []struct {
		arg1 *iam.GetInstanceProfileInput
	}
	getInstanceProfileRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetInstanceProfileOutput
	}
	getInstanceProfileRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetInstanceProfileOutput
	}
	GetInstanceProfileWithContextStub        func(context.Context, *iam.GetInstanceProfileInput, ...request.Option) (*iam.GetInstanceProfileOutput, error)
	getInstanceProfileWithContextMutex       sync.RWMutex
	getInstanceProfileWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetInstanceProfileInput
		arg3 []request.Option
	}
	getInstanceProfileWithContextReturns struct {
		result1 *iam.GetInstanceProfileOutput
		result2 error
	}
	getInstanceProfileWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetInstanceProfileOutput
		result2 error
	}
	GetLoginProfileStub        func(*iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error)
	getLoginProfileMutex       sync.RWMutex
	getLoginProfileArgsForCall []struct {
		arg1 *iam.GetLoginProfileInput
	}
	getLoginProfileReturns struct {
		result1 *iam.GetLoginProfileOutput
		result2 error
	}
	getLoginProfileReturnsOnCall map[int]struct {
		result1 *iam.GetLoginProfileOutput
		result2 error
	}
	GetLoginProfileRequestStub        func(*iam.GetLoginProfileInput) (*request.Request, *iam.GetLoginProfileOutput)
	getLoginProfileRequestMutex       sync.RWMutex
	getLoginProfileRequestArgsForCall []struct {
		arg1 *iam.GetLoginProfileInput
	}
	getLoginProfileRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetLoginProfileOutput
	}
	getLoginProfileRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetLoginProfileOutput
	}
	GetLoginProfileWithContextStub        func(context.Context, *iam.GetLoginProfileInput, ...request.Option) (*iam.GetLoginProfileOutput, error)
	getLoginProfileWithContextMutex       sync.RWMutex
	getLoginProfileWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetLoginProfileInput
		arg3 []request.Option
	}
	getLoginProfileWithContextReturns struct {
		result1 *iam.GetLoginProfileOutput
		result2 error
	}
	getLoginProfileWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetLoginProfileOutput
		result2 error
	}
	GetOpenIDConnectProviderStub        func(*iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error)
	getOpenIDConnectProviderMutex       sync.RWMutex
	getOpenIDConnectProviderArgsForCall []struct {
		arg1 *iam.GetOpenIDConnectProviderInput
	}
	getOpenIDConnectProviderReturns struct {
		result1 *iam.GetOpenIDConnectProviderOutput
		result2 error
	}
	getOpenIDConnectProviderReturnsOnCall map[int]struct {
		result1 *iam.GetOpenIDConnectProviderOutput
		result2 error
	}
	GetOpenIDConnectProviderRequestStub        func(*iam.GetOpenIDConnectProviderInput) (*request.Request, *iam.GetOpenIDConnectProviderOutput)
	getOpenIDConnectProviderRequestMutex       sync.RWMutex
	getOpenIDConnectProviderRequestArgsForCall []struct {
		arg1 *iam.GetOpenIDConnectProviderInput
	}
	getOpenIDConnectProviderRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetOpenIDConnectProviderOutput
	}
	getOpenIDConnectProviderRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetOpenIDConnectProviderOutput
	}
	GetOpenIDConnectProviderWithContextStub        func(context.Context, *iam.GetOpenIDConnectProviderInput, ...request.Option) (*iam.GetOpenIDConnectProviderOutput, error)
	getOpenIDConnectProviderWithContextMutex       sync.RWMutex
	getOpenIDConnectProviderWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetOpenIDConnectProviderInput
		arg3 []request.Option
	}
	getOpenIDConnectProviderWithContextReturns struct {
		result1 *iam.GetOpenIDConnectProviderOutput
		result2 error
	}
	getOpenIDConnectProviderWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetOpenIDConnectProviderOutput
		result2 error
	}
	GetOrganizationsAccessReportStub        func(*iam.GetOrganizationsAccessReportInput) (*iam.GetOrganizationsAccessReportOutput, error)
	getOrganizationsAccessReportMutex       sync.RWMutex
	getOrganizationsAccessReportArgsForCall []struct {
		arg1 *iam.GetOrganizationsAccessReportInput
	}
	getOrganizationsAccessReportReturns struct {
		result1 *iam.GetOrganizationsAccessReportOutput
		result2 error
	}
	getOrganizationsAccessReportReturnsOnCall map[int]struct {
		result1 *iam.GetOrganizationsAccessReportOutput
		result2 error
	}
	GetOrganizationsAccessReportRequestStub        func(*iam.GetOrganizationsAccessReportInput) (*request.Request, *iam.GetOrganizationsAccessReportOutput)
	getOrganizationsAccessReportRequestMutex       sync.RWMutex
	getOrganizationsAccessReportRequestArgsForCall []struct {
		arg1 *iam.GetOrganizationsAccessReportInput
	}
	getOrganizationsAccessReportRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetOrganizationsAccessReportOutput
	}
	getOrganizationsAccessReportRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetOrganizationsAccessReportOutput
	}
	GetOrganizationsAccessReportWithContextStub        func(context.Context, *iam.GetOrganizationsAccessReportInput, ...request.Option) (*iam.GetOrganizationsAccessReportOutput, error)
	getOrganizationsAccessReportWithContextMutex       sync.RWMutex
	getOrganizationsAccessReportWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetOrganizationsAccessReportInput
		arg3 []request.Option
	}
	getOrganizationsAccessReportWithContextReturns struct {
		result1 *iam.GetOrganizationsAccessReportOutput
		result2 error
	}
	getOrganizationsAccessReportWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetOrganizationsAccessReportOutput
		result2 error
	}
	GetPolicyStub        func(*iam.GetPolicyInput) (*iam.GetPolicyOutput, error)
	getPolicyMutex       sync.RWMutex
	getPolicyArgsForCall []struct {
		arg1 *iam.GetPolicyInput
	}
	getPolicyReturns struct {
		result1 *iam.GetPolicyOutput
		result2 error
	}
	getPolicyReturnsOnCall map[int]struct {
		result1 *iam.GetPolicyOutput
		result2 error
	}
	GetPolicyRequestStub        func(*iam.GetPolicyInput) (*request.Request, *iam.GetPolicyOutput)
	getPolicyRequestMutex       sync.RWMutex
	getPolicyRequestArgsForCall []struct {
		arg1 *iam.GetPolicyInput
	}
	getPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetPolicyOutput
	}
	getPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetPolicyOutput
	}
	GetPolicyVersionStub        func(*iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error)
	getPolicyVersionMutex       sync.RWMutex
	getPolicyVersionArgsForCall []struct {
		arg1 *iam.GetPolicyVersionInput
	}
	getPolicyVersionReturns struct {
		result1 *iam.GetPolicyVersionOutput
		result2 error
	}
	getPolicyVersionReturnsOnCall map[int]struct {
		result1 *iam.GetPolicyVersionOutput
		result2 error
	}
	GetPolicyVersionRequestStub        func(*iam.GetPolicyVersionInput) (*request.Request, *iam.GetPolicyVersionOutput)
	getPolicyVersionRequestMutex       sync.RWMutex
	getPolicyVersionRequestArgsForCall []struct {
		arg1 *iam.GetPolicyVersionInput
	}
	getPolicyVersionRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetPolicyVersionOutput
	}
	getPolicyVersionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetPolicyVersionOutput
	}
	GetPolicyVersionWithContextStub        func(context.Context, *iam.GetPolicyVersionInput, ...request.Option) (*iam.GetPolicyVersionOutput, error)
	getPolicyVersionWithContextMutex       sync.RWMutex
	getPolicyVersionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetPolicyVersionInput
		arg3 []request.Option
	}
	getPolicyVersionWithContextReturns struct {
		result1 *iam.GetPolicyVersionOutput
		result2 error
	}
	getPolicyVersionWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetPolicyVersionOutput
		result2 error
	}
	GetPolicyWithContextStub        func(context.Context, *iam.GetPolicyInput, ...request.Option) (*iam.GetPolicyOutput, error)
	getPolicyWithContextMutex       sync.RWMutex
	getPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetPolicyInput
		arg3 []request.Option
	}
	getPolicyWithContextReturns struct {
		result1 *iam.GetPolicyOutput
		result2 error
	}
	getPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetPolicyOutput
		result2 error
	}
	GetRoleStub        func(*iam.GetRoleInput) (*iam.GetRoleOutput, error)
	getRoleMutex       sync.RWMutex
	getRoleArgsForCall []struct {
		arg1 *iam.GetRoleInput
	}
	getRoleReturns struct {
		result1 *iam.GetRoleOutput
		result2 error
	}
	getRoleReturnsOnCall map[int]struct {
		result1 *iam.GetRoleOutput
		result2 error
	}
	GetRolePolicyStub        func(*iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error)
	getRolePolicyMutex       sync.RWMutex
	getRolePolicyArgsForCall []struct {
		arg1 *iam.GetRolePolicyInput
	}
	getRolePolicyReturns struct {
		result1 *iam.GetRolePolicyOutput
		result2 error
	}
	getRolePolicyReturnsOnCall map[int]struct {
		result1 *iam.GetRolePolicyOutput
		result2 error
	}
	GetRolePolicyRequestStub        func(*iam.GetRolePolicyInput) (*request.Request, *iam.GetRolePolicyOutput)
	getRolePolicyRequestMutex       sync.RWMutex
	getRolePolicyRequestArgsForCall []struct {
		arg1 *iam.GetRolePolicyInput
	}
	getRolePolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetRolePolicyOutput
	}
	getRolePolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetRolePolicyOutput
	}
	GetRolePolicyWithContextStub        func(context.Context, *iam.GetRolePolicyInput, ...request.Option) (*iam.GetRolePolicyOutput, error)
	getRolePolicyWithContextMutex       sync.RWMutex
	getRolePolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetRolePolicyInput
		arg3 []request.Option
	}
	getRolePolicyWithContextReturns struct {
		result1 *iam.GetRolePolicyOutput
		result2 error
	}
	getRolePolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetRolePolicyOutput
		result2 error
	}
	GetRoleRequestStub        func(*iam.GetRoleInput) (*request.Request, *iam.GetRoleOutput)
	getRoleRequestMutex       sync.RWMutex
	getRoleRequestArgsForCall []struct {
		arg1 *iam.GetRoleInput
	}
	getRoleRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetRoleOutput
	}
	getRoleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetRoleOutput
	}
	GetRoleWithContextStub        func(context.Context, *iam.GetRoleInput, ...request.Option) (*iam.GetRoleOutput, error)
	getRoleWithContextMutex       sync.RWMutex
	getRoleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetRoleInput
		arg3 []request.Option
	}
	getRoleWithContextReturns struct {
		result1 *iam.GetRoleOutput
		result2 error
	}
	getRoleWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetRoleOutput
		result2 error
	}
	GetSAMLProviderStub        func(*iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error)
	getSAMLProviderMutex       sync.RWMutex
	getSAMLProviderArgsForCall []struct {
		arg1 *iam.GetSAMLProviderInput
	}
	getSAMLProviderReturns struct {
		result1 *iam.GetSAMLProviderOutput
		result2 error
	}
	getSAMLProviderReturnsOnCall map[int]struct {
		result1 *iam.GetSAMLProviderOutput
		result2 error
	}
	GetSAMLProviderRequestStub        func(*iam.GetSAMLProviderInput) (*request.Request, *iam.GetSAMLProviderOutput)
	getSAMLProviderRequestMutex       sync.RWMutex
	getSAMLProviderRequestArgsForCall []struct {
		arg1 *iam.GetSAMLProviderInput
	}
	getSAMLProviderRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetSAMLProviderOutput
	}
	getSAMLProviderRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetSAMLProviderOutput
	}
	GetSAMLProviderWithContextStub        func(context.Context, *iam.GetSAMLProviderInput, ...request.Option) (*iam.GetSAMLProviderOutput, error)
	getSAMLProviderWithContextMutex       sync.RWMutex
	getSAMLProviderWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetSAMLProviderInput
		arg3 []request.Option
	}
	getSAMLProviderWithContextReturns struct {
		result1 *iam.GetSAMLProviderOutput
		result2 error
	}
	getSAMLProviderWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetSAMLProviderOutput
		result2 error
	}
	GetSSHPublicKeyStub        func(*iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error)
	getSSHPublicKeyMutex       sync.RWMutex
	getSSHPublicKeyArgsForCall []struct {
		arg1 *iam.GetSSHPublicKeyInput
	}
	getSSHPublicKeyReturns struct {
		result1 *iam.GetSSHPublicKeyOutput
		result2 error
	}
	getSSHPublicKeyReturnsOnCall map[int]struct {
		result1 *iam.GetSSHPublicKeyOutput
		result2 error
	}
	GetSSHPublicKeyRequestStub        func(*iam.GetSSHPublicKeyInput) (*request.Request, *iam.GetSSHPublicKeyOutput)
	getSSHPublicKeyRequestMutex       sync.RWMutex
	getSSHPublicKeyRequestArgsForCall []struct {
		arg1 *iam.GetSSHPublicKeyInput
	}
	getSSHPublicKeyRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetSSHPublicKeyOutput
	}
	getSSHPublicKeyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetSSHPublicKeyOutput
	}
	GetSSHPublicKeyWithContextStub        func(context.Context, *iam.GetSSHPublicKeyInput, ...request.Option) (*iam.GetSSHPublicKeyOutput, error)
	getSSHPublicKeyWithContextMutex       sync.RWMutex
	getSSHPublicKeyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetSSHPublicKeyInput
		arg3 []request.Option
	}
	getSSHPublicKeyWithContextReturns struct {
		result1 *iam.GetSSHPublicKeyOutput
		result2 error
	}
	getSSHPublicKeyWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetSSHPublicKeyOutput
		result2 error
	}
	GetServerCertificateStub        func(*iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error)
	getServerCertificateMutex       sync.RWMutex
	getServerCertificateArgsForCall []struct {
		arg1 *iam.GetServerCertificateInput
	}
	getServerCertificateReturns struct {
		result1 *iam.GetServerCertificateOutput
		result2 error
	}
	getServerCertificateReturnsOnCall map[int]struct {
		result1 *iam.GetServerCertificateOutput
		result2 error
	}
	GetServerCertificateRequestStub        func(*iam.GetServerCertificateInput) (*request.Request, *iam.GetServerCertificateOutput)
	getServerCertificateRequestMutex       sync.RWMutex
	getServerCertificateRequestArgsForCall []struct {
		arg1 *iam.GetServerCertificateInput
	}
	getServerCertificateRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetServerCertificateOutput
	}
	getServerCertificateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetServerCertificateOutput
	}
	GetServerCertificateWithContextStub        func(context.Context, *iam.GetServerCertificateInput, ...request.Option) (*iam.GetServerCertificateOutput, error)
	getServerCertificateWithContextMutex       sync.RWMutex
	getServerCertificateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetServerCertificateInput
		arg3 []request.Option
	}
	getServerCertificateWithContextReturns struct {
		result1 *iam.GetServerCertificateOutput
		result2 error
	}
	getServerCertificateWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetServerCertificateOutput
		result2 error
	}
	GetServiceLastAccessedDetailsStub        func(*iam.GetServiceLastAccessedDetailsInput) (*iam.GetServiceLastAccessedDetailsOutput, error)
	getServiceLastAccessedDetailsMutex       sync.RWMutex
	getServiceLastAccessedDetailsArgsForCall []struct {
		arg1 *iam.GetServiceLastAccessedDetailsInput
	}
	getServiceLastAccessedDetailsReturns struct {
		result1 *iam.GetServiceLastAccessedDetailsOutput
		result2 error
	}
	getServiceLastAccessedDetailsReturnsOnCall map[int]struct {
		result1 *iam.GetServiceLastAccessedDetailsOutput
		result2 error
	}
	GetServiceLastAccessedDetailsRequestStub        func(*iam.GetServiceLastAccessedDetailsInput) (*request.Request, *iam.GetServiceLastAccessedDetailsOutput)
	getServiceLastAccessedDetailsRequestMutex       sync.RWMutex
	getServiceLastAccessedDetailsRequestArgsForCall []struct {
		arg1 *iam.GetServiceLastAccessedDetailsInput
	}
	getServiceLastAccessedDetailsRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetServiceLastAccessedDetailsOutput
	}
	getServiceLastAccessedDetailsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetServiceLastAccessedDetailsOutput
	}
	GetServiceLastAccessedDetailsWithContextStub        func(context.Context, *iam.GetServiceLastAccessedDetailsInput, ...request.Option) (*iam.GetServiceLastAccessedDetailsOutput, error)
	getServiceLastAccessedDetailsWithContextMutex       sync.RWMutex
	getServiceLastAccessedDetailsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetServiceLastAccessedDetailsInput
		arg3 []request.Option
	}
	getServiceLastAccessedDetailsWithContextReturns struct {
		result1 *iam.GetServiceLastAccessedDetailsOutput
		result2 error
	}
	getServiceLastAccessedDetailsWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetServiceLastAccessedDetailsOutput
		result2 error
	}
	GetServiceLastAccessedDetailsWithEntitiesStub        func(*iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error)
	getServiceLastAccessedDetailsWithEntitiesMutex       sync.RWMutex
	getServiceLastAccessedDetailsWithEntitiesArgsForCall []struct {
		arg1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
	}
	getServiceLastAccessedDetailsWithEntitiesReturns struct {
		result1 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
		result2 error
	}
	getServiceLastAccessedDetailsWithEntitiesReturnsOnCall map[int]struct {
		result1 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
		result2 error
	}
	GetServiceLastAccessedDetailsWithEntitiesRequestStub        func(*iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*request.Request, *iam.GetServiceLastAccessedDetailsWithEntitiesOutput)
	getServiceLastAccessedDetailsWithEntitiesRequestMutex       sync.RWMutex
	getServiceLastAccessedDetailsWithEntitiesRequestArgsForCall []struct {
		arg1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
	}
	getServiceLastAccessedDetailsWithEntitiesRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
	}
	getServiceLastAccessedDetailsWithEntitiesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
	}
	GetServiceLastAccessedDetailsWithEntitiesWithContextStub        func(context.Context, *iam.GetServiceLastAccessedDetailsWithEntitiesInput, ...request.Option) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error)
	getServiceLastAccessedDetailsWithEntitiesWithContextMutex       sync.RWMutex
	getServiceLastAccessedDetailsWithEntitiesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
		arg3 []request.Option
	}
	getServiceLastAccessedDetailsWithEntitiesWithContextReturns struct {
		result1 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
		result2 error
	}
	getServiceLastAccessedDetailsWithEntitiesWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
		result2 error
	}
	GetServiceLinkedRoleDeletionStatusStub        func(*iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error)
	getServiceLinkedRoleDeletionStatusMutex       sync.RWMutex
	getServiceLinkedRoleDeletionStatusArgsForCall []struct {
		arg1 *iam.GetServiceLinkedRoleDeletionStatusInput
	}
	getServiceLinkedRoleDeletionStatusReturns struct {
		result1 *iam.GetServiceLinkedRoleDeletionStatusOutput
		result2 error
	}
	getServiceLinkedRoleDeletionStatusReturnsOnCall map[int]struct {
		result1 *iam.GetServiceLinkedRoleDeletionStatusOutput
		result2 error
	}
	GetServiceLinkedRoleDeletionStatusRequestStub        func(*iam.GetServiceLinkedRoleDeletionStatusInput) (*request.Request, *iam.GetServiceLinkedRoleDeletionStatusOutput)
	getServiceLinkedRoleDeletionStatusRequestMutex       sync.RWMutex
	getServiceLinkedRoleDeletionStatusRequestArgsForCall []struct {
		arg1 *iam.GetServiceLinkedRoleDeletionStatusInput
	}
	getServiceLinkedRoleDeletionStatusRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetServiceLinkedRoleDeletionStatusOutput
	}
	getServiceLinkedRoleDeletionStatusRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetServiceLinkedRoleDeletionStatusOutput
	}
	GetServiceLinkedRoleDeletionStatusWithContextStub        func(context.Context, *iam.GetServiceLinkedRoleDeletionStatusInput, ...request.Option) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error)
	getServiceLinkedRoleDeletionStatusWithContextMutex       sync.RWMutex
	getServiceLinkedRoleDeletionStatusWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetServiceLinkedRoleDeletionStatusInput
		arg3 []request.Option
	}
	getServiceLinkedRoleDeletionStatusWithContextReturns struct {
		result1 *iam.GetServiceLinkedRoleDeletionStatusOutput
		result2 error
	}
	getServiceLinkedRoleDeletionStatusWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetServiceLinkedRoleDeletionStatusOutput
		result2 error
	}
	GetUserStub        func(*iam.GetUserInput) (*iam.GetUserOutput, error)
	getUserMutex       sync.RWMutex
	getUserArgsForCall []struct {
		arg1 *iam.GetUserInput
	}
	getUserReturns struct {
		result1 *iam.GetUserOutput
		result2 error
	}
	getUserReturnsOnCall map[int]struct {
		result1 *iam.GetUserOutput
		result2 error
	}
	GetUserPolicyStub        func(*iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error)
	getUserPolicyMutex       sync.RWMutex
	getUserPolicyArgsForCall []struct {
		arg1 *iam.GetUserPolicyInput
	}
	getUserPolicyReturns struct {
		result1 *iam.GetUserPolicyOutput
		result2 error
	}
	getUserPolicyReturnsOnCall map[int]struct {
		result1 *iam.GetUserPolicyOutput
		result2 error
	}
	GetUserPolicyRequestStub        func(*iam.GetUserPolicyInput) (*request.Request, *iam.GetUserPolicyOutput)
	getUserPolicyRequestMutex       sync.RWMutex
	getUserPolicyRequestArgsForCall []struct {
		arg1 *iam.GetUserPolicyInput
	}
	getUserPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetUserPolicyOutput
	}
	getUserPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetUserPolicyOutput
	}
	GetUserPolicyWithContextStub        func(context.Context, *iam.GetUserPolicyInput, ...request.Option) (*iam.GetUserPolicyOutput, error)
	getUserPolicyWithContextMutex       sync.RWMutex
	getUserPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetUserPolicyInput
		arg3 []request.Option
	}
	getUserPolicyWithContextReturns struct {
		result1 *iam.GetUserPolicyOutput
		result2 error
	}
	getUserPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetUserPolicyOutput
		result2 error
	}
	GetUserRequestStub        func(*iam.GetUserInput) (*request.Request, *iam.GetUserOutput)
	getUserRequestMutex       sync.RWMutex
	getUserRequestArgsForCall []struct {
		arg1 *iam.GetUserInput
	}
	getUserRequestReturns struct {
		result1 *request.Request
		result2 *iam.GetUserOutput
	}
	getUserRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.GetUserOutput
	}
	GetUserWithContextStub        func(context.Context, *iam.GetUserInput, ...request.Option) (*iam.GetUserOutput, error)
	getUserWithContextMutex       sync.RWMutex
	getUserWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetUserInput
		arg3 []request.Option
	}
	getUserWithContextReturns struct {
		result1 *iam.GetUserOutput
		result2 error
	}
	getUserWithContextReturnsOnCall map[int]struct {
		result1 *iam.GetUserOutput
		result2 error
	}
	ListAccessKeysStub        func(*iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error)
	listAccessKeysMutex       sync.RWMutex
	listAccessKeysArgsForCall []struct {
		arg1 *iam.ListAccessKeysInput
	}
	listAccessKeysReturns struct {
		result1 *iam.ListAccessKeysOutput
		result2 error
	}
	listAccessKeysReturnsOnCall map[int]struct {
		result1 *iam.ListAccessKeysOutput
		result2 error
	}
	ListAccessKeysPagesStub        func(*iam.ListAccessKeysInput, func(*iam.ListAccessKeysOutput, bool) bool) error
	listAccessKeysPagesMutex       sync.RWMutex
	listAccessKeysPagesArgsForCall []struct {
		arg1 *iam.ListAccessKeysInput
		arg2 func(*iam.ListAccessKeysOutput, bool) bool
	}
	listAccessKeysPagesReturns struct {
		result1 error
	}
	listAccessKeysPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListAccessKeysPagesWithContextStub        func(context.Context, *iam.ListAccessKeysInput, func(*iam.ListAccessKeysOutput, bool) bool, ...request.Option) error
	listAccessKeysPagesWithContextMutex       sync.RWMutex
	listAccessKeysPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListAccessKeysInput
		arg3 func(*iam.ListAccessKeysOutput, bool) bool
		arg4 []request.Option
	}
	listAccessKeysPagesWithContextReturns struct {
		result1 error
	}
	listAccessKeysPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListAccessKeysRequestStub        func(*iam.ListAccessKeysInput) (*request.Request, *iam.ListAccessKeysOutput)
	listAccessKeysRequestMutex       sync.RWMutex
	listAccessKeysRequestArgsForCall []struct {
		arg1 *iam.ListAccessKeysInput
	}
	listAccessKeysRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListAccessKeysOutput
	}
	listAccessKeysRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListAccessKeysOutput
	}
	ListAccessKeysWithContextStub        func(context.Context, *iam.ListAccessKeysInput, ...request.Option) (*iam.ListAccessKeysOutput, error)
	listAccessKeysWithContextMutex       sync.RWMutex
	listAccessKeysWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListAccessKeysInput
		arg3 []request.Option
	}
	listAccessKeysWithContextReturns struct {
		result1 *iam.ListAccessKeysOutput
		result2 error
	}
	listAccessKeysWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListAccessKeysOutput
		result2 error
	}
	ListAccountAliasesStub        func(*iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error)
	listAccountAliasesMutex       sync.RWMutex
	listAccountAliasesArgsForCall []struct {
		arg1 *iam.ListAccountAliasesInput
	}
	listAccountAliasesReturns struct {
		result1 *iam.ListAccountAliasesOutput
		result2 error
	}
	listAccountAliasesReturnsOnCall map[int]struct {
		result1 *iam.ListAccountAliasesOutput
		result2 error
	}
	ListAccountAliasesPagesStub        func(*iam.ListAccountAliasesInput, func(*iam.ListAccountAliasesOutput, bool) bool) error
	listAccountAliasesPagesMutex       sync.RWMutex
	listAccountAliasesPagesArgsForCall []struct {
		arg1 *iam.ListAccountAliasesInput
		arg2 func(*iam.ListAccountAliasesOutput, bool) bool
	}
	listAccountAliasesPagesReturns struct {
		result1 error
	}
	listAccountAliasesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListAccountAliasesPagesWithContextStub        func(context.Context, *iam.ListAccountAliasesInput, func(*iam.ListAccountAliasesOutput, bool) bool, ...request.Option) error
	listAccountAliasesPagesWithContextMutex       sync.RWMutex
	listAccountAliasesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListAccountAliasesInput
		arg3 func(*iam.ListAccountAliasesOutput, bool) bool
		arg4 []request.Option
	}
	listAccountAliasesPagesWithContextReturns struct {
		result1 error
	}
	listAccountAliasesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListAccountAliasesRequestStub        func(*iam.ListAccountAliasesInput) (*request.Request, *iam.ListAccountAliasesOutput)
	listAccountAliasesRequestMutex       sync.RWMutex
	listAccountAliasesRequestArgsForCall []struct {
		arg1 *iam.ListAccountAliasesInput
	}
	listAccountAliasesRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListAccountAliasesOutput
	}
	listAccountAliasesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListAccountAliasesOutput
	}
	ListAccountAliasesWithContextStub        func(context.Context, *iam.ListAccountAliasesInput, ...request.Option) (*iam.ListAccountAliasesOutput, error)
	listAccountAliasesWithContextMutex       sync.RWMutex
	listAccountAliasesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListAccountAliasesInput
		arg3 []request.Option
	}
	listAccountAliasesWithContextReturns struct {
		result1 *iam.ListAccountAliasesOutput
		result2 error
	}
	listAccountAliasesWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListAccountAliasesOutput
		result2 error
	}
	ListAttachedGroupPoliciesStub        func(*iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error)
	listAttachedGroupPoliciesMutex       sync.RWMutex
	listAttachedGroupPoliciesArgsForCall []struct {
		arg1 *iam.ListAttachedGroupPoliciesInput
	}
	listAttachedGroupPoliciesReturns struct {
		result1 *iam.ListAttachedGroupPoliciesOutput
		result2 error
	}
	listAttachedGroupPoliciesReturnsOnCall map[int]struct {
		result1 *iam.ListAttachedGroupPoliciesOutput
		result2 error
	}
	ListAttachedGroupPoliciesPagesStub        func(*iam.ListAttachedGroupPoliciesInput, func(*iam.ListAttachedGroupPoliciesOutput, bool) bool) error
	listAttachedGroupPoliciesPagesMutex       sync.RWMutex
	listAttachedGroupPoliciesPagesArgsForCall []struct {
		arg1 *iam.ListAttachedGroupPoliciesInput
		arg2 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
	}
	listAttachedGroupPoliciesPagesReturns struct {
		result1 error
	}
	listAttachedGroupPoliciesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListAttachedGroupPoliciesPagesWithContextStub        func(context.Context, *iam.ListAttachedGroupPoliciesInput, func(*iam.ListAttachedGroupPoliciesOutput, bool) bool, ...request.Option) error
	listAttachedGroupPoliciesPagesWithContextMutex       sync.RWMutex
	listAttachedGroupPoliciesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListAttachedGroupPoliciesInput
		arg3 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
		arg4 []request.Option
	}
	listAttachedGroupPoliciesPagesWithContextReturns struct {
		result1 error
	}
	listAttachedGroupPoliciesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListAttachedGroupPoliciesRequestStub        func(*iam.ListAttachedGroupPoliciesInput) (*request.Request, *iam.ListAttachedGroupPoliciesOutput)
	listAttachedGroupPoliciesRequestMutex       sync.RWMutex
	listAttachedGroupPoliciesRequestArgsForCall []struct {
		arg1 *iam.ListAttachedGroupPoliciesInput
	}
	listAttachedGroupPoliciesRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListAttachedGroupPoliciesOutput
	}
	listAttachedGroupPoliciesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListAttachedGroupPoliciesOutput
	}
	ListAttachedGroupPoliciesWithContextStub        func(context.Context, *iam.ListAttachedGroupPoliciesInput, ...request.Option) (*iam.ListAttachedGroupPoliciesOutput, error)
	listAttachedGroupPoliciesWithContextMutex       sync.RWMutex
	listAttachedGroupPoliciesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListAttachedGroupPoliciesInput
		arg3 []request.Option
	}
	listAttachedGroupPoliciesWithContextReturns struct {
		result1 *iam.ListAttachedGroupPoliciesOutput
		result2 error
	}
	listAttachedGroupPoliciesWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListAttachedGroupPoliciesOutput
		result2 error
	}
	ListAttachedRolePoliciesStub        func(*iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error)
	listAttachedRolePoliciesMutex       sync.RWMutex
	listAttachedRolePoliciesArgsForCall []struct {
		arg1 *iam.ListAttachedRolePoliciesInput
	}
	listAttachedRolePoliciesReturns struct {
		result1 *iam.ListAttachedRolePoliciesOutput
		result2 error
	}
	listAttachedRolePoliciesReturnsOnCall map[int]struct {
		result1 *iam.ListAttachedRolePoliciesOutput
		result2 error
	}
	ListAttachedRolePoliciesPagesStub        func(*iam.ListAttachedRolePoliciesInput, func(*iam.ListAttachedRolePoliciesOutput, bool) bool) error
	listAttachedRolePoliciesPagesMutex       sync.RWMutex
	listAttachedRolePoliciesPagesArgsForCall []struct {
		arg1 *iam.ListAttachedRolePoliciesInput
		arg2 func(*iam.ListAttachedRolePoliciesOutput, bool) bool
	}
	listAttachedRolePoliciesPagesReturns struct {
		result1 error
	}
	listAttachedRolePoliciesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListAttachedRolePoliciesPagesWithContextStub        func(context.Context, *iam.ListAttachedRolePoliciesInput, func(*iam.ListAttachedRolePoliciesOutput, bool) bool, ...request.Option) error
	listAttachedRolePoliciesPagesWithContextMutex       sync.RWMutex
	listAttachedRolePoliciesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListAttachedRolePoliciesInput
		arg3 func(*iam.ListAttachedRolePoliciesOutput, bool) bool
		arg4 []request.Option
	}
	listAttachedRolePoliciesPagesWithContextReturns struct {
		result1 error
	}
	listAttachedRolePoliciesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListAttachedRolePoliciesRequestStub        func(*iam.ListAttachedRolePoliciesInput) (*request.Request, *iam.ListAttachedRolePoliciesOutput)
	listAttachedRolePoliciesRequestMutex       sync.RWMutex
	listAttachedRolePoliciesRequestArgsForCall []struct {
		arg1 *iam.ListAttachedRolePoliciesInput
	}
	listAttachedRolePoliciesRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListAttachedRolePoliciesOutput
	}
	listAttachedRolePoliciesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListAttachedRolePoliciesOutput
	}
	ListAttachedRolePoliciesWithContextStub        func(context.Context, *iam.ListAttachedRolePoliciesInput, ...request.Option) (*iam.ListAttachedRolePoliciesOutput, error)
	listAttachedRolePoliciesWithContextMutex       sync.RWMutex
	listAttachedRolePoliciesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListAttachedRolePoliciesInput
		arg3 []request.Option
	}
	listAttachedRolePoliciesWithContextReturns struct {
		result1 *iam.ListAttachedRolePoliciesOutput
		result2 error
	}
	listAttachedRolePoliciesWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListAttachedRolePoliciesOutput
		result2 error
	}
	ListAttachedUserPoliciesStub        func(*iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error)
	listAttachedUserPoliciesMutex       sync.RWMutex
	listAttachedUserPoliciesArgsForCall []struct {
		arg1 *iam.ListAttachedUserPoliciesInput
	}
	listAttachedUserPoliciesReturns struct {
		result1 *iam.ListAttachedUserPoliciesOutput
		result2 error
	}
	listAttachedUserPoliciesReturnsOnCall map[int]struct {
		result1 *iam.ListAttachedUserPoliciesOutput
		result2 error
	}
	ListAttachedUserPoliciesPagesStub        func(*iam.ListAttachedUserPoliciesInput, func(*iam.ListAttachedUserPoliciesOutput, bool) bool) error
	listAttachedUserPoliciesPagesMutex       sync.RWMutex
	listAttachedUserPoliciesPagesArgsForCall []struct {
		arg1 *iam.ListAttachedUserPoliciesInput
		arg2 func(*iam.ListAttachedUserPoliciesOutput, bool) bool
	}
	listAttachedUserPoliciesPagesReturns struct {
		result1 error
	}
	listAttachedUserPoliciesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListAttachedUserPoliciesPagesWithContextStub        func(context.Context, *iam.ListAttachedUserPoliciesInput, func(*iam.ListAttachedUserPoliciesOutput, bool) bool, ...request.Option) error
	listAttachedUserPoliciesPagesWithContextMutex       sync.RWMutex
	listAttachedUserPoliciesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListAttachedUserPoliciesInput
		arg3 func(*iam.ListAttachedUserPoliciesOutput, bool) bool
		arg4 []request.Option
	}
	listAttachedUserPoliciesPagesWithContextReturns struct {
		result1 error
	}
	listAttachedUserPoliciesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListAttachedUserPoliciesRequestStub        func(*iam.ListAttachedUserPoliciesInput) (*request.Request, *iam.ListAttachedUserPoliciesOutput)
	listAttachedUserPoliciesRequestMutex       sync.RWMutex
	listAttachedUserPoliciesRequestArgsForCall []struct {
		arg1 *iam.ListAttachedUserPoliciesInput
	}
	listAttachedUserPoliciesRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListAttachedUserPoliciesOutput
	}
	listAttachedUserPoliciesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListAttachedUserPoliciesOutput
	}
	ListAttachedUserPoliciesWithContextStub        func(context.Context, *iam.ListAttachedUserPoliciesInput, ...request.Option) (*iam.ListAttachedUserPoliciesOutput, error)
	listAttachedUserPoliciesWithContextMutex       sync.RWMutex
	listAttachedUserPoliciesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListAttachedUserPoliciesInput
		arg3 []request.Option
	}
	listAttachedUserPoliciesWithContextReturns struct {
		result1 *iam.ListAttachedUserPoliciesOutput
		result2 error
	}
	listAttachedUserPoliciesWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListAttachedUserPoliciesOutput
		result2 error
	}
	ListEntitiesForPolicyStub        func(*iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error)
	listEntitiesForPolicyMutex       sync.RWMutex
	listEntitiesForPolicyArgsForCall []struct {
		arg1 *iam.ListEntitiesForPolicyInput
	}
	listEntitiesForPolicyReturns struct {
		result1 *iam.ListEntitiesForPolicyOutput
		result2 error
	}
	listEntitiesForPolicyReturnsOnCall map[int]struct {
		result1 *iam.ListEntitiesForPolicyOutput
		result2 error
	}
	ListEntitiesForPolicyPagesStub        func(*iam.ListEntitiesForPolicyInput, func(*iam.ListEntitiesForPolicyOutput, bool) bool) error
	listEntitiesForPolicyPagesMutex       sync.RWMutex
	listEntitiesForPolicyPagesArgsForCall []struct {
		arg1 *iam.ListEntitiesForPolicyInput
		arg2 func(*iam.ListEntitiesForPolicyOutput, bool) bool
	}
	listEntitiesForPolicyPagesReturns struct {
		result1 error
	}
	listEntitiesForPolicyPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListEntitiesForPolicyPagesWithContextStub        func(context.Context, *iam.ListEntitiesForPolicyInput, func(*iam.ListEntitiesForPolicyOutput, bool) bool, ...request.Option) error
	listEntitiesForPolicyPagesWithContextMutex       sync.RWMutex
	listEntitiesForPolicyPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListEntitiesForPolicyInput
		arg3 func(*iam.ListEntitiesForPolicyOutput, bool) bool
		arg4 []request.Option
	}
	listEntitiesForPolicyPagesWithContextReturns struct {
		result1 error
	}
	listEntitiesForPolicyPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListEntitiesForPolicyRequestStub        func(*iam.ListEntitiesForPolicyInput) (*request.Request, *iam.ListEntitiesForPolicyOutput)
	listEntitiesForPolicyRequestMutex       sync.RWMutex
	listEntitiesForPolicyRequestArgsForCall []struct {
		arg1 *iam.ListEntitiesForPolicyInput
	}
	listEntitiesForPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListEntitiesForPolicyOutput
	}
	listEntitiesForPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListEntitiesForPolicyOutput
	}
	ListEntitiesForPolicyWithContextStub        func(context.Context, *iam.ListEntitiesForPolicyInput, ...request.Option) (*iam.ListEntitiesForPolicyOutput, error)
	listEntitiesForPolicyWithContextMutex       sync.RWMutex
	listEntitiesForPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListEntitiesForPolicyInput
		arg3 []request.Option
	}
	listEntitiesForPolicyWithContextReturns struct {
		result1 *iam.ListEntitiesForPolicyOutput
		result2 error
	}
	listEntitiesForPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListEntitiesForPolicyOutput
		result2 error
	}
	ListGroupPoliciesStub        func(*iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error)
	listGroupPoliciesMutex       sync.RWMutex
	listGroupPoliciesArgsForCall []struct {
		arg1 *iam.ListGroupPoliciesInput
	}
	listGroupPoliciesReturns struct {
		result1 *iam.ListGroupPoliciesOutput
		result2 error
	}
	listGroupPoliciesReturnsOnCall map[int]struct {
		result1 *iam.ListGroupPoliciesOutput
		result2 error
	}
	ListGroupPoliciesPagesStub        func(*iam.ListGroupPoliciesInput, func(*iam.ListGroupPoliciesOutput, bool) bool) error
	listGroupPoliciesPagesMutex       sync.RWMutex
	listGroupPoliciesPagesArgsForCall []struct {
		arg1 *iam.ListGroupPoliciesInput
		arg2 func(*iam.ListGroupPoliciesOutput, bool) bool
	}
	listGroupPoliciesPagesReturns struct {
		result1 error
	}
	listGroupPoliciesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListGroupPoliciesPagesWithContextStub        func(context.Context, *iam.ListGroupPoliciesInput, func(*iam.ListGroupPoliciesOutput, bool) bool, ...request.Option) error
	listGroupPoliciesPagesWithContextMutex       sync.RWMutex
	listGroupPoliciesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListGroupPoliciesInput
		arg3 func(*iam.ListGroupPoliciesOutput, bool) bool
		arg4 []request.Option
	}
	listGroupPoliciesPagesWithContextReturns struct {
		result1 error
	}
	listGroupPoliciesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListGroupPoliciesRequestStub        func(*iam.ListGroupPoliciesInput) (*request.Request, *iam.ListGroupPoliciesOutput)
	listGroupPoliciesRequestMutex       sync.RWMutex
	listGroupPoliciesRequestArgsForCall []struct {
		arg1 *iam.ListGroupPoliciesInput
	}
	listGroupPoliciesRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListGroupPoliciesOutput
	}
	listGroupPoliciesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListGroupPoliciesOutput
	}
	ListGroupPoliciesWithContextStub        func(context.Context, *iam.ListGroupPoliciesInput, ...request.Option) (*iam.ListGroupPoliciesOutput, error)
	listGroupPoliciesWithContextMutex       sync.RWMutex
	listGroupPoliciesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListGroupPoliciesInput
		arg3 []request.Option
	}
	listGroupPoliciesWithContextReturns struct {
		result1 *iam.ListGroupPoliciesOutput
		result2 error
	}
	listGroupPoliciesWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListGroupPoliciesOutput
		result2 error
	}
	ListGroupsStub        func(*iam.ListGroupsInput) (*iam.ListGroupsOutput, error)
	listGroupsMutex       sync.RWMutex
	listGroupsArgsForCall []struct {
		arg1 *iam.ListGroupsInput
	}
	listGroupsReturns struct {
		result1 *iam.ListGroupsOutput
		result2 error
	}
	listGroupsReturnsOnCall map[int]struct {
		result1 *iam.ListGroupsOutput
		result2 error
	}
	ListGroupsForUserStub        func(*iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error)
	listGroupsForUserMutex       sync.RWMutex
	listGroupsForUserArgsForCall []struct {
		arg1 *iam.ListGroupsForUserInput
	}
	listGroupsForUserReturns struct {
		result1 *iam.ListGroupsForUserOutput
		result2 error
	}
	listGroupsForUserReturnsOnCall map[int]struct {
		result1 *iam.ListGroupsForUserOutput
		result2 error
	}
	ListGroupsForUserPagesStub        func(*iam.ListGroupsForUserInput, func(*iam.ListGroupsForUserOutput, bool) bool) error
	listGroupsForUserPagesMutex       sync.RWMutex
	listGroupsForUserPagesArgsForCall []struct {
		arg1 *iam.ListGroupsForUserInput
		arg2 func(*iam.ListGroupsForUserOutput, bool) bool
	}
	listGroupsForUserPagesReturns struct {
		result1 error
	}
	listGroupsForUserPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListGroupsForUserPagesWithContextStub        func(context.Context, *iam.ListGroupsForUserInput, func(*iam.ListGroupsForUserOutput, bool) bool, ...request.Option) error
	listGroupsForUserPagesWithContextMutex       sync.RWMutex
	listGroupsForUserPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListGroupsForUserInput
		arg3 func(*iam.ListGroupsForUserOutput, bool) bool
		arg4 []request.Option
	}
	listGroupsForUserPagesWithContextReturns struct {
		result1 error
	}
	listGroupsForUserPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListGroupsForUserRequestStub        func(*iam.ListGroupsForUserInput) (*request.Request, *iam.ListGroupsForUserOutput)
	listGroupsForUserRequestMutex       sync.RWMutex
	listGroupsForUserRequestArgsForCall []struct {
		arg1 *iam.ListGroupsForUserInput
	}
	listGroupsForUserRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListGroupsForUserOutput
	}
	listGroupsForUserRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListGroupsForUserOutput
	}
	ListGroupsForUserWithContextStub        func(context.Context, *iam.ListGroupsForUserInput, ...request.Option) (*iam.ListGroupsForUserOutput, error)
	listGroupsForUserWithContextMutex       sync.RWMutex
	listGroupsForUserWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListGroupsForUserInput
		arg3 []request.Option
	}
	listGroupsForUserWithContextReturns struct {
		result1 *iam.ListGroupsForUserOutput
		result2 error
	}
	listGroupsForUserWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListGroupsForUserOutput
		result2 error
	}
	ListGroupsPagesStub        func(*iam.ListGroupsInput, func(*iam.ListGroupsOutput, bool) bool) error
	listGroupsPagesMutex       sync.RWMutex
	listGroupsPagesArgsForCall []struct {
		arg1 *iam.ListGroupsInput
		arg2 func(*iam.ListGroupsOutput, bool) bool
	}
	listGroupsPagesReturns struct {
		result1 error
	}
	listGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListGroupsPagesWithContextStub        func(context.Context, *iam.ListGroupsInput, func(*iam.ListGroupsOutput, bool) bool, ...request.Option) error
	listGroupsPagesWithContextMutex       sync.RWMutex
	listGroupsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListGroupsInput
		arg3 func(*iam.ListGroupsOutput, bool) bool
		arg4 []request.Option
	}
	listGroupsPagesWithContextReturns struct {
		result1 error
	}
	listGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListGroupsRequestStub        func(*iam.ListGroupsInput) (*request.Request, *iam.ListGroupsOutput)
	listGroupsRequestMutex       sync.RWMutex
	listGroupsRequestArgsForCall []struct {
		arg1 *iam.ListGroupsInput
	}
	listGroupsRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListGroupsOutput
	}
	listGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListGroupsOutput
	}
	ListGroupsWithContextStub        func(context.Context, *iam.ListGroupsInput, ...request.Option) (*iam.ListGroupsOutput, error)
	listGroupsWithContextMutex       sync.RWMutex
	listGroupsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListGroupsInput
		arg3 []request.Option
	}
	listGroupsWithContextReturns struct {
		result1 *iam.ListGroupsOutput
		result2 error
	}
	listGroupsWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListGroupsOutput
		result2 error
	}
	ListInstanceProfilesStub        func(*iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error)
	listInstanceProfilesMutex       sync.RWMutex
	listInstanceProfilesArgsForCall []struct {
		arg1 *iam.ListInstanceProfilesInput
	}
	listInstanceProfilesReturns struct {
		result1 *iam.ListInstanceProfilesOutput
		result2 error
	}
	listInstanceProfilesReturnsOnCall map[int]struct {
		result1 *iam.ListInstanceProfilesOutput
		result2 error
	}
	ListInstanceProfilesForRoleStub        func(*iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error)
	listInstanceProfilesForRoleMutex       sync.RWMutex
	listInstanceProfilesForRoleArgsForCall []struct {
		arg1 *iam.ListInstanceProfilesForRoleInput
	}
	listInstanceProfilesForRoleReturns struct {
		result1 *iam.ListInstanceProfilesForRoleOutput
		result2 error
	}
	listInstanceProfilesForRoleReturnsOnCall map[int]struct {
		result1 *iam.ListInstanceProfilesForRoleOutput
		result2 error
	}
	ListInstanceProfilesForRolePagesStub        func(*iam.ListInstanceProfilesForRoleInput, func(*iam.ListInstanceProfilesForRoleOutput, bool) bool) error
	listInstanceProfilesForRolePagesMutex       sync.RWMutex
	listInstanceProfilesForRolePagesArgsForCall []struct {
		arg1 *iam.ListInstanceProfilesForRoleInput
		arg2 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
	}
	listInstanceProfilesForRolePagesReturns struct {
		result1 error
	}
	listInstanceProfilesForRolePagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListInstanceProfilesForRolePagesWithContextStub        func(context.Context, *iam.ListInstanceProfilesForRoleInput, func(*iam.ListInstanceProfilesForRoleOutput, bool) bool, ...request.Option) error
	listInstanceProfilesForRolePagesWithContextMutex       sync.RWMutex
	listInstanceProfilesForRolePagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListInstanceProfilesForRoleInput
		arg3 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
		arg4 []request.Option
	}
	listInstanceProfilesForRolePagesWithContextReturns struct {
		result1 error
	}
	listInstanceProfilesForRolePagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListInstanceProfilesForRoleRequestStub        func(*iam.ListInstanceProfilesForRoleInput) (*request.Request, *iam.ListInstanceProfilesForRoleOutput)
	listInstanceProfilesForRoleRequestMutex       sync.RWMutex
	listInstanceProfilesForRoleRequestArgsForCall []struct {
		arg1 *iam.ListInstanceProfilesForRoleInput
	}
	listInstanceProfilesForRoleRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListInstanceProfilesForRoleOutput
	}
	listInstanceProfilesForRoleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListInstanceProfilesForRoleOutput
	}
	ListInstanceProfilesForRoleWithContextStub        func(context.Context, *iam.ListInstanceProfilesForRoleInput, ...request.Option) (*iam.ListInstanceProfilesForRoleOutput, error)
	listInstanceProfilesForRoleWithContextMutex       sync.RWMutex
	listInstanceProfilesForRoleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListInstanceProfilesForRoleInput
		arg3 []request.Option
	}
	listInstanceProfilesForRoleWithContextReturns struct {
		result1 *iam.ListInstanceProfilesForRoleOutput
		result2 error
	}
	listInstanceProfilesForRoleWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListInstanceProfilesForRoleOutput
		result2 error
	}
	ListInstanceProfilesPagesStub        func(*iam.ListInstanceProfilesInput, func(*iam.ListInstanceProfilesOutput, bool) bool) error
	listInstanceProfilesPagesMutex       sync.RWMutex
	listInstanceProfilesPagesArgsForCall []struct {
		arg1 *iam.ListInstanceProfilesInput
		arg2 func(*iam.ListInstanceProfilesOutput, bool) bool
	}
	listInstanceProfilesPagesReturns struct {
		result1 error
	}
	listInstanceProfilesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListInstanceProfilesPagesWithContextStub        func(context.Context, *iam.ListInstanceProfilesInput, func(*iam.ListInstanceProfilesOutput, bool) bool, ...request.Option) error
	listInstanceProfilesPagesWithContextMutex       sync.RWMutex
	listInstanceProfilesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListInstanceProfilesInput
		arg3 func(*iam.ListInstanceProfilesOutput, bool) bool
		arg4 []request.Option
	}
	listInstanceProfilesPagesWithContextReturns struct {
		result1 error
	}
	listInstanceProfilesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListInstanceProfilesRequestStub        func(*iam.ListInstanceProfilesInput) (*request.Request, *iam.ListInstanceProfilesOutput)
	listInstanceProfilesRequestMutex       sync.RWMutex
	listInstanceProfilesRequestArgsForCall []struct {
		arg1 *iam.ListInstanceProfilesInput
	}
	listInstanceProfilesRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListInstanceProfilesOutput
	}
	listInstanceProfilesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListInstanceProfilesOutput
	}
	ListInstanceProfilesWithContextStub        func(context.Context, *iam.ListInstanceProfilesInput, ...request.Option) (*iam.ListInstanceProfilesOutput, error)
	listInstanceProfilesWithContextMutex       sync.RWMutex
	listInstanceProfilesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListInstanceProfilesInput
		arg3 []request.Option
	}
	listInstanceProfilesWithContextReturns struct {
		result1 *iam.ListInstanceProfilesOutput
		result2 error
	}
	listInstanceProfilesWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListInstanceProfilesOutput
		result2 error
	}
	ListMFADevicesStub        func(*iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error)
	listMFADevicesMutex       sync.RWMutex
	listMFADevicesArgsForCall []struct {
		arg1 *iam.ListMFADevicesInput
	}
	listMFADevicesReturns struct {
		result1 *iam.ListMFADevicesOutput
		result2 error
	}
	listMFADevicesReturnsOnCall map[int]struct {
		result1 *iam.ListMFADevicesOutput
		result2 error
	}
	ListMFADevicesPagesStub        func(*iam.ListMFADevicesInput, func(*iam.ListMFADevicesOutput, bool) bool) error
	listMFADevicesPagesMutex       sync.RWMutex
	listMFADevicesPagesArgsForCall []struct {
		arg1 *iam.ListMFADevicesInput
		arg2 func(*iam.ListMFADevicesOutput, bool) bool
	}
	listMFADevicesPagesReturns struct {
		result1 error
	}
	listMFADevicesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListMFADevicesPagesWithContextStub        func(context.Context, *iam.ListMFADevicesInput, func(*iam.ListMFADevicesOutput, bool) bool, ...request.Option) error
	listMFADevicesPagesWithContextMutex       sync.RWMutex
	listMFADevicesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListMFADevicesInput
		arg3 func(*iam.ListMFADevicesOutput, bool) bool
		arg4 []request.Option
	}
	listMFADevicesPagesWithContextReturns struct {
		result1 error
	}
	listMFADevicesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListMFADevicesRequestStub        func(*iam.ListMFADevicesInput) (*request.Request, *iam.ListMFADevicesOutput)
	listMFADevicesRequestMutex       sync.RWMutex
	listMFADevicesRequestArgsForCall []struct {
		arg1 *iam.ListMFADevicesInput
	}
	listMFADevicesRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListMFADevicesOutput
	}
	listMFADevicesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListMFADevicesOutput
	}
	ListMFADevicesWithContextStub        func(context.Context, *iam.ListMFADevicesInput, ...request.Option) (*iam.ListMFADevicesOutput, error)
	listMFADevicesWithContextMutex       sync.RWMutex
	listMFADevicesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListMFADevicesInput
		arg3 []request.Option
	}
	listMFADevicesWithContextReturns struct {
		result1 *iam.ListMFADevicesOutput
		result2 error
	}
	listMFADevicesWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListMFADevicesOutput
		result2 error
	}
	ListOpenIDConnectProvidersStub        func(*iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error)
	listOpenIDConnectProvidersMutex       sync.RWMutex
	listOpenIDConnectProvidersArgsForCall []struct {
		arg1 *iam.ListOpenIDConnectProvidersInput
	}
	listOpenIDConnectProvidersReturns struct {
		result1 *iam.ListOpenIDConnectProvidersOutput
		result2 error
	}
	listOpenIDConnectProvidersReturnsOnCall map[int]struct {
		result1 *iam.ListOpenIDConnectProvidersOutput
		result2 error
	}
	ListOpenIDConnectProvidersRequestStub        func(*iam.ListOpenIDConnectProvidersInput) (*request.Request, *iam.ListOpenIDConnectProvidersOutput)
	listOpenIDConnectProvidersRequestMutex       sync.RWMutex
	listOpenIDConnectProvidersRequestArgsForCall []struct {
		arg1 *iam.ListOpenIDConnectProvidersInput
	}
	listOpenIDConnectProvidersRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListOpenIDConnectProvidersOutput
	}
	listOpenIDConnectProvidersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListOpenIDConnectProvidersOutput
	}
	ListOpenIDConnectProvidersWithContextStub        func(context.Context, *iam.ListOpenIDConnectProvidersInput, ...request.Option) (*iam.ListOpenIDConnectProvidersOutput, error)
	listOpenIDConnectProvidersWithContextMutex       sync.RWMutex
	listOpenIDConnectProvidersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListOpenIDConnectProvidersInput
		arg3 []request.Option
	}
	listOpenIDConnectProvidersWithContextReturns struct {
		result1 *iam.ListOpenIDConnectProvidersOutput
		result2 error
	}
	listOpenIDConnectProvidersWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListOpenIDConnectProvidersOutput
		result2 error
	}
	ListPoliciesStub        func(*iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error)
	listPoliciesMutex       sync.RWMutex
	listPoliciesArgsForCall []struct {
		arg1 *iam.ListPoliciesInput
	}
	listPoliciesReturns struct {
		result1 *iam.ListPoliciesOutput
		result2 error
	}
	listPoliciesReturnsOnCall map[int]struct {
		result1 *iam.ListPoliciesOutput
		result2 error
	}
	ListPoliciesGrantingServiceAccessStub        func(*iam.ListPoliciesGrantingServiceAccessInput) (*iam.ListPoliciesGrantingServiceAccessOutput, error)
	listPoliciesGrantingServiceAccessMutex       sync.RWMutex
	listPoliciesGrantingServiceAccessArgsForCall []struct {
		arg1 *iam.ListPoliciesGrantingServiceAccessInput
	}
	listPoliciesGrantingServiceAccessReturns struct {
		result1 *iam.ListPoliciesGrantingServiceAccessOutput
		result2 error
	}
	listPoliciesGrantingServiceAccessReturnsOnCall map[int]struct {
		result1 *iam.ListPoliciesGrantingServiceAccessOutput
		result2 error
	}
	ListPoliciesGrantingServiceAccessRequestStub        func(*iam.ListPoliciesGrantingServiceAccessInput) (*request.Request, *iam.ListPoliciesGrantingServiceAccessOutput)
	listPoliciesGrantingServiceAccessRequestMutex       sync.RWMutex
	listPoliciesGrantingServiceAccessRequestArgsForCall []struct {
		arg1 *iam.ListPoliciesGrantingServiceAccessInput
	}
	listPoliciesGrantingServiceAccessRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListPoliciesGrantingServiceAccessOutput
	}
	listPoliciesGrantingServiceAccessRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListPoliciesGrantingServiceAccessOutput
	}
	ListPoliciesGrantingServiceAccessWithContextStub        func(context.Context, *iam.ListPoliciesGrantingServiceAccessInput, ...request.Option) (*iam.ListPoliciesGrantingServiceAccessOutput, error)
	listPoliciesGrantingServiceAccessWithContextMutex       sync.RWMutex
	listPoliciesGrantingServiceAccessWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListPoliciesGrantingServiceAccessInput
		arg3 []request.Option
	}
	listPoliciesGrantingServiceAccessWithContextReturns struct {
		result1 *iam.ListPoliciesGrantingServiceAccessOutput
		result2 error
	}
	listPoliciesGrantingServiceAccessWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListPoliciesGrantingServiceAccessOutput
		result2 error
	}
	ListPoliciesPagesStub        func(*iam.ListPoliciesInput, func(*iam.ListPoliciesOutput, bool) bool) error
	listPoliciesPagesMutex       sync.RWMutex
	listPoliciesPagesArgsForCall []struct {
		arg1 *iam.ListPoliciesInput
		arg2 func(*iam.ListPoliciesOutput, bool) bool
	}
	listPoliciesPagesReturns struct {
		result1 error
	}
	listPoliciesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListPoliciesPagesWithContextStub        func(context.Context, *iam.ListPoliciesInput, func(*iam.ListPoliciesOutput, bool) bool, ...request.Option) error
	listPoliciesPagesWithContextMutex       sync.RWMutex
	listPoliciesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListPoliciesInput
		arg3 func(*iam.ListPoliciesOutput, bool) bool
		arg4 []request.Option
	}
	listPoliciesPagesWithContextReturns struct {
		result1 error
	}
	listPoliciesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListPoliciesRequestStub        func(*iam.ListPoliciesInput) (*request.Request, *iam.ListPoliciesOutput)
	listPoliciesRequestMutex       sync.RWMutex
	listPoliciesRequestArgsForCall []struct {
		arg1 *iam.ListPoliciesInput
	}
	listPoliciesRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListPoliciesOutput
	}
	listPoliciesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListPoliciesOutput
	}
	ListPoliciesWithContextStub        func(context.Context, *iam.ListPoliciesInput, ...request.Option) (*iam.ListPoliciesOutput, error)
	listPoliciesWithContextMutex       sync.RWMutex
	listPoliciesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListPoliciesInput
		arg3 []request.Option
	}
	listPoliciesWithContextReturns struct {
		result1 *iam.ListPoliciesOutput
		result2 error
	}
	listPoliciesWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListPoliciesOutput
		result2 error
	}
	ListPolicyVersionsStub        func(*iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error)
	listPolicyVersionsMutex       sync.RWMutex
	listPolicyVersionsArgsForCall []struct {
		arg1 *iam.ListPolicyVersionsInput
	}
	listPolicyVersionsReturns struct {
		result1 *iam.ListPolicyVersionsOutput
		result2 error
	}
	listPolicyVersionsReturnsOnCall map[int]struct {
		result1 *iam.ListPolicyVersionsOutput
		result2 error
	}
	ListPolicyVersionsPagesStub        func(*iam.ListPolicyVersionsInput, func(*iam.ListPolicyVersionsOutput, bool) bool) error
	listPolicyVersionsPagesMutex       sync.RWMutex
	listPolicyVersionsPagesArgsForCall []struct {
		arg1 *iam.ListPolicyVersionsInput
		arg2 func(*iam.ListPolicyVersionsOutput, bool) bool
	}
	listPolicyVersionsPagesReturns struct {
		result1 error
	}
	listPolicyVersionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListPolicyVersionsPagesWithContextStub        func(context.Context, *iam.ListPolicyVersionsInput, func(*iam.ListPolicyVersionsOutput, bool) bool, ...request.Option) error
	listPolicyVersionsPagesWithContextMutex       sync.RWMutex
	listPolicyVersionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListPolicyVersionsInput
		arg3 func(*iam.ListPolicyVersionsOutput, bool) bool
		arg4 []request.Option
	}
	listPolicyVersionsPagesWithContextReturns struct {
		result1 error
	}
	listPolicyVersionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListPolicyVersionsRequestStub        func(*iam.ListPolicyVersionsInput) (*request.Request, *iam.ListPolicyVersionsOutput)
	listPolicyVersionsRequestMutex       sync.RWMutex
	listPolicyVersionsRequestArgsForCall []struct {
		arg1 *iam.ListPolicyVersionsInput
	}
	listPolicyVersionsRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListPolicyVersionsOutput
	}
	listPolicyVersionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListPolicyVersionsOutput
	}
	ListPolicyVersionsWithContextStub        func(context.Context, *iam.ListPolicyVersionsInput, ...request.Option) (*iam.ListPolicyVersionsOutput, error)
	listPolicyVersionsWithContextMutex       sync.RWMutex
	listPolicyVersionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListPolicyVersionsInput
		arg3 []request.Option
	}
	listPolicyVersionsWithContextReturns struct {
		result1 *iam.ListPolicyVersionsOutput
		result2 error
	}
	listPolicyVersionsWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListPolicyVersionsOutput
		result2 error
	}
	ListRolePoliciesStub        func(*iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error)
	listRolePoliciesMutex       sync.RWMutex
	listRolePoliciesArgsForCall []struct {
		arg1 *iam.ListRolePoliciesInput
	}
	listRolePoliciesReturns struct {
		result1 *iam.ListRolePoliciesOutput
		result2 error
	}
	listRolePoliciesReturnsOnCall map[int]struct {
		result1 *iam.ListRolePoliciesOutput
		result2 error
	}
	ListRolePoliciesPagesStub        func(*iam.ListRolePoliciesInput, func(*iam.ListRolePoliciesOutput, bool) bool) error
	listRolePoliciesPagesMutex       sync.RWMutex
	listRolePoliciesPagesArgsForCall []struct {
		arg1 *iam.ListRolePoliciesInput
		arg2 func(*iam.ListRolePoliciesOutput, bool) bool
	}
	listRolePoliciesPagesReturns struct {
		result1 error
	}
	listRolePoliciesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListRolePoliciesPagesWithContextStub        func(context.Context, *iam.ListRolePoliciesInput, func(*iam.ListRolePoliciesOutput, bool) bool, ...request.Option) error
	listRolePoliciesPagesWithContextMutex       sync.RWMutex
	listRolePoliciesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListRolePoliciesInput
		arg3 func(*iam.ListRolePoliciesOutput, bool) bool
		arg4 []request.Option
	}
	listRolePoliciesPagesWithContextReturns struct {
		result1 error
	}
	listRolePoliciesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListRolePoliciesRequestStub        func(*iam.ListRolePoliciesInput) (*request.Request, *iam.ListRolePoliciesOutput)
	listRolePoliciesRequestMutex       sync.RWMutex
	listRolePoliciesRequestArgsForCall []struct {
		arg1 *iam.ListRolePoliciesInput
	}
	listRolePoliciesRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListRolePoliciesOutput
	}
	listRolePoliciesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListRolePoliciesOutput
	}
	ListRolePoliciesWithContextStub        func(context.Context, *iam.ListRolePoliciesInput, ...request.Option) (*iam.ListRolePoliciesOutput, error)
	listRolePoliciesWithContextMutex       sync.RWMutex
	listRolePoliciesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListRolePoliciesInput
		arg3 []request.Option
	}
	listRolePoliciesWithContextReturns struct {
		result1 *iam.ListRolePoliciesOutput
		result2 error
	}
	listRolePoliciesWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListRolePoliciesOutput
		result2 error
	}
	ListRoleTagsStub        func(*iam.ListRoleTagsInput) (*iam.ListRoleTagsOutput, error)
	listRoleTagsMutex       sync.RWMutex
	listRoleTagsArgsForCall []struct {
		arg1 *iam.ListRoleTagsInput
	}
	listRoleTagsReturns struct {
		result1 *iam.ListRoleTagsOutput
		result2 error
	}
	listRoleTagsReturnsOnCall map[int]struct {
		result1 *iam.ListRoleTagsOutput
		result2 error
	}
	ListRoleTagsRequestStub        func(*iam.ListRoleTagsInput) (*request.Request, *iam.ListRoleTagsOutput)
	listRoleTagsRequestMutex       sync.RWMutex
	listRoleTagsRequestArgsForCall []struct {
		arg1 *iam.ListRoleTagsInput
	}
	listRoleTagsRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListRoleTagsOutput
	}
	listRoleTagsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListRoleTagsOutput
	}
	ListRoleTagsWithContextStub        func(context.Context, *iam.ListRoleTagsInput, ...request.Option) (*iam.ListRoleTagsOutput, error)
	listRoleTagsWithContextMutex       sync.RWMutex
	listRoleTagsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListRoleTagsInput
		arg3 []request.Option
	}
	listRoleTagsWithContextReturns struct {
		result1 *iam.ListRoleTagsOutput
		result2 error
	}
	listRoleTagsWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListRoleTagsOutput
		result2 error
	}
	ListRolesStub        func(*iam.ListRolesInput) (*iam.ListRolesOutput, error)
	listRolesMutex       sync.RWMutex
	listRolesArgsForCall []struct {
		arg1 *iam.ListRolesInput
	}
	listRolesReturns struct {
		result1 *iam.ListRolesOutput
		result2 error
	}
	listRolesReturnsOnCall map[int]struct {
		result1 *iam.ListRolesOutput
		result2 error
	}
	ListRolesPagesStub        func(*iam.ListRolesInput, func(*iam.ListRolesOutput, bool) bool) error
	listRolesPagesMutex       sync.RWMutex
	listRolesPagesArgsForCall []struct {
		arg1 *iam.ListRolesInput
		arg2 func(*iam.ListRolesOutput, bool) bool
	}
	listRolesPagesReturns struct {
		result1 error
	}
	listRolesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListRolesPagesWithContextStub        func(context.Context, *iam.ListRolesInput, func(*iam.ListRolesOutput, bool) bool, ...request.Option) error
	listRolesPagesWithContextMutex       sync.RWMutex
	listRolesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListRolesInput
		arg3 func(*iam.ListRolesOutput, bool) bool
		arg4 []request.Option
	}
	listRolesPagesWithContextReturns struct {
		result1 error
	}
	listRolesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListRolesRequestStub        func(*iam.ListRolesInput) (*request.Request, *iam.ListRolesOutput)
	listRolesRequestMutex       sync.RWMutex
	listRolesRequestArgsForCall []struct {
		arg1 *iam.ListRolesInput
	}
	listRolesRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListRolesOutput
	}
	listRolesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListRolesOutput
	}
	ListRolesWithContextStub        func(context.Context, *iam.ListRolesInput, ...request.Option) (*iam.ListRolesOutput, error)
	listRolesWithContextMutex       sync.RWMutex
	listRolesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListRolesInput
		arg3 []request.Option
	}
	listRolesWithContextReturns struct {
		result1 *iam.ListRolesOutput
		result2 error
	}
	listRolesWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListRolesOutput
		result2 error
	}
	ListSAMLProvidersStub        func(*iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error)
	listSAMLProvidersMutex       sync.RWMutex
	listSAMLProvidersArgsForCall []struct {
		arg1 *iam.ListSAMLProvidersInput
	}
	listSAMLProvidersReturns struct {
		result1 *iam.ListSAMLProvidersOutput
		result2 error
	}
	listSAMLProvidersReturnsOnCall map[int]struct {
		result1 *iam.ListSAMLProvidersOutput
		result2 error
	}
	ListSAMLProvidersRequestStub        func(*iam.ListSAMLProvidersInput) (*request.Request, *iam.ListSAMLProvidersOutput)
	listSAMLProvidersRequestMutex       sync.RWMutex
	listSAMLProvidersRequestArgsForCall []struct {
		arg1 *iam.ListSAMLProvidersInput
	}
	listSAMLProvidersRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListSAMLProvidersOutput
	}
	listSAMLProvidersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListSAMLProvidersOutput
	}
	ListSAMLProvidersWithContextStub        func(context.Context, *iam.ListSAMLProvidersInput, ...request.Option) (*iam.ListSAMLProvidersOutput, error)
	listSAMLProvidersWithContextMutex       sync.RWMutex
	listSAMLProvidersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListSAMLProvidersInput
		arg3 []request.Option
	}
	listSAMLProvidersWithContextReturns struct {
		result1 *iam.ListSAMLProvidersOutput
		result2 error
	}
	listSAMLProvidersWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListSAMLProvidersOutput
		result2 error
	}
	ListSSHPublicKeysStub        func(*iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error)
	listSSHPublicKeysMutex       sync.RWMutex
	listSSHPublicKeysArgsForCall []struct {
		arg1 *iam.ListSSHPublicKeysInput
	}
	listSSHPublicKeysReturns struct {
		result1 *iam.ListSSHPublicKeysOutput
		result2 error
	}
	listSSHPublicKeysReturnsOnCall map[int]struct {
		result1 *iam.ListSSHPublicKeysOutput
		result2 error
	}
	ListSSHPublicKeysPagesStub        func(*iam.ListSSHPublicKeysInput, func(*iam.ListSSHPublicKeysOutput, bool) bool) error
	listSSHPublicKeysPagesMutex       sync.RWMutex
	listSSHPublicKeysPagesArgsForCall []struct {
		arg1 *iam.ListSSHPublicKeysInput
		arg2 func(*iam.ListSSHPublicKeysOutput, bool) bool
	}
	listSSHPublicKeysPagesReturns struct {
		result1 error
	}
	listSSHPublicKeysPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListSSHPublicKeysPagesWithContextStub        func(context.Context, *iam.ListSSHPublicKeysInput, func(*iam.ListSSHPublicKeysOutput, bool) bool, ...request.Option) error
	listSSHPublicKeysPagesWithContextMutex       sync.RWMutex
	listSSHPublicKeysPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListSSHPublicKeysInput
		arg3 func(*iam.ListSSHPublicKeysOutput, bool) bool
		arg4 []request.Option
	}
	listSSHPublicKeysPagesWithContextReturns struct {
		result1 error
	}
	listSSHPublicKeysPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListSSHPublicKeysRequestStub        func(*iam.ListSSHPublicKeysInput) (*request.Request, *iam.ListSSHPublicKeysOutput)
	listSSHPublicKeysRequestMutex       sync.RWMutex
	listSSHPublicKeysRequestArgsForCall []struct {
		arg1 *iam.ListSSHPublicKeysInput
	}
	listSSHPublicKeysRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListSSHPublicKeysOutput
	}
	listSSHPublicKeysRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListSSHPublicKeysOutput
	}
	ListSSHPublicKeysWithContextStub        func(context.Context, *iam.ListSSHPublicKeysInput, ...request.Option) (*iam.ListSSHPublicKeysOutput, error)
	listSSHPublicKeysWithContextMutex       sync.RWMutex
	listSSHPublicKeysWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListSSHPublicKeysInput
		arg3 []request.Option
	}
	listSSHPublicKeysWithContextReturns struct {
		result1 *iam.ListSSHPublicKeysOutput
		result2 error
	}
	listSSHPublicKeysWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListSSHPublicKeysOutput
		result2 error
	}
	ListServerCertificatesStub        func(*iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error)
	listServerCertificatesMutex       sync.RWMutex
	listServerCertificatesArgsForCall []struct {
		arg1 *iam.ListServerCertificatesInput
	}
	listServerCertificatesReturns struct {
		result1 *iam.ListServerCertificatesOutput
		result2 error
	}
	listServerCertificatesReturnsOnCall map[int]struct {
		result1 *iam.ListServerCertificatesOutput
		result2 error
	}
	ListServerCertificatesPagesStub        func(*iam.ListServerCertificatesInput, func(*iam.ListServerCertificatesOutput, bool) bool) error
	listServerCertificatesPagesMutex       sync.RWMutex
	listServerCertificatesPagesArgsForCall []struct {
		arg1 *iam.ListServerCertificatesInput
		arg2 func(*iam.ListServerCertificatesOutput, bool) bool
	}
	listServerCertificatesPagesReturns struct {
		result1 error
	}
	listServerCertificatesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListServerCertificatesPagesWithContextStub        func(context.Context, *iam.ListServerCertificatesInput, func(*iam.ListServerCertificatesOutput, bool) bool, ...request.Option) error
	listServerCertificatesPagesWithContextMutex       sync.RWMutex
	listServerCertificatesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListServerCertificatesInput
		arg3 func(*iam.ListServerCertificatesOutput, bool) bool
		arg4 []request.Option
	}
	listServerCertificatesPagesWithContextReturns struct {
		result1 error
	}
	listServerCertificatesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListServerCertificatesRequestStub        func(*iam.ListServerCertificatesInput) (*request.Request, *iam.ListServerCertificatesOutput)
	listServerCertificatesRequestMutex       sync.RWMutex
	listServerCertificatesRequestArgsForCall []struct {
		arg1 *iam.ListServerCertificatesInput
	}
	listServerCertificatesRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListServerCertificatesOutput
	}
	listServerCertificatesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListServerCertificatesOutput
	}
	ListServerCertificatesWithContextStub        func(context.Context, *iam.ListServerCertificatesInput, ...request.Option) (*iam.ListServerCertificatesOutput, error)
	listServerCertificatesWithContextMutex       sync.RWMutex
	listServerCertificatesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListServerCertificatesInput
		arg3 []request.Option
	}
	listServerCertificatesWithContextReturns struct {
		result1 *iam.ListServerCertificatesOutput
		result2 error
	}
	listServerCertificatesWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListServerCertificatesOutput
		result2 error
	}
	ListServiceSpecificCredentialsStub        func(*iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error)
	listServiceSpecificCredentialsMutex       sync.RWMutex
	listServiceSpecificCredentialsArgsForCall []struct {
		arg1 *iam.ListServiceSpecificCredentialsInput
	}
	listServiceSpecificCredentialsReturns struct {
		result1 *iam.ListServiceSpecificCredentialsOutput
		result2 error
	}
	listServiceSpecificCredentialsReturnsOnCall map[int]struct {
		result1 *iam.ListServiceSpecificCredentialsOutput
		result2 error
	}
	ListServiceSpecificCredentialsRequestStub        func(*iam.ListServiceSpecificCredentialsInput) (*request.Request, *iam.ListServiceSpecificCredentialsOutput)
	listServiceSpecificCredentialsRequestMutex       sync.RWMutex
	listServiceSpecificCredentialsRequestArgsForCall []struct {
		arg1 *iam.ListServiceSpecificCredentialsInput
	}
	listServiceSpecificCredentialsRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListServiceSpecificCredentialsOutput
	}
	listServiceSpecificCredentialsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListServiceSpecificCredentialsOutput
	}
	ListServiceSpecificCredentialsWithContextStub        func(context.Context, *iam.ListServiceSpecificCredentialsInput, ...request.Option) (*iam.ListServiceSpecificCredentialsOutput, error)
	listServiceSpecificCredentialsWithContextMutex       sync.RWMutex
	listServiceSpecificCredentialsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListServiceSpecificCredentialsInput
		arg3 []request.Option
	}
	listServiceSpecificCredentialsWithContextReturns struct {
		result1 *iam.ListServiceSpecificCredentialsOutput
		result2 error
	}
	listServiceSpecificCredentialsWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListServiceSpecificCredentialsOutput
		result2 error
	}
	ListSigningCertificatesStub        func(*iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error)
	listSigningCertificatesMutex       sync.RWMutex
	listSigningCertificatesArgsForCall []struct {
		arg1 *iam.ListSigningCertificatesInput
	}
	listSigningCertificatesReturns struct {
		result1 *iam.ListSigningCertificatesOutput
		result2 error
	}
	listSigningCertificatesReturnsOnCall map[int]struct {
		result1 *iam.ListSigningCertificatesOutput
		result2 error
	}
	ListSigningCertificatesPagesStub        func(*iam.ListSigningCertificatesInput, func(*iam.ListSigningCertificatesOutput, bool) bool) error
	listSigningCertificatesPagesMutex       sync.RWMutex
	listSigningCertificatesPagesArgsForCall []struct {
		arg1 *iam.ListSigningCertificatesInput
		arg2 func(*iam.ListSigningCertificatesOutput, bool) bool
	}
	listSigningCertificatesPagesReturns struct {
		result1 error
	}
	listSigningCertificatesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListSigningCertificatesPagesWithContextStub        func(context.Context, *iam.ListSigningCertificatesInput, func(*iam.ListSigningCertificatesOutput, bool) bool, ...request.Option) error
	listSigningCertificatesPagesWithContextMutex       sync.RWMutex
	listSigningCertificatesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListSigningCertificatesInput
		arg3 func(*iam.ListSigningCertificatesOutput, bool) bool
		arg4 []request.Option
	}
	listSigningCertificatesPagesWithContextReturns struct {
		result1 error
	}
	listSigningCertificatesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListSigningCertificatesRequestStub        func(*iam.ListSigningCertificatesInput) (*request.Request, *iam.ListSigningCertificatesOutput)
	listSigningCertificatesRequestMutex       sync.RWMutex
	listSigningCertificatesRequestArgsForCall []struct {
		arg1 *iam.ListSigningCertificatesInput
	}
	listSigningCertificatesRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListSigningCertificatesOutput
	}
	listSigningCertificatesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListSigningCertificatesOutput
	}
	ListSigningCertificatesWithContextStub        func(context.Context, *iam.ListSigningCertificatesInput, ...request.Option) (*iam.ListSigningCertificatesOutput, error)
	listSigningCertificatesWithContextMutex       sync.RWMutex
	listSigningCertificatesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListSigningCertificatesInput
		arg3 []request.Option
	}
	listSigningCertificatesWithContextReturns struct {
		result1 *iam.ListSigningCertificatesOutput
		result2 error
	}
	listSigningCertificatesWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListSigningCertificatesOutput
		result2 error
	}
	ListUserPoliciesStub        func(*iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error)
	listUserPoliciesMutex       sync.RWMutex
	listUserPoliciesArgsForCall []struct {
		arg1 *iam.ListUserPoliciesInput
	}
	listUserPoliciesReturns struct {
		result1 *iam.ListUserPoliciesOutput
		result2 error
	}
	listUserPoliciesReturnsOnCall map[int]struct {
		result1 *iam.ListUserPoliciesOutput
		result2 error
	}
	ListUserPoliciesPagesStub        func(*iam.ListUserPoliciesInput, func(*iam.ListUserPoliciesOutput, bool) bool) error
	listUserPoliciesPagesMutex       sync.RWMutex
	listUserPoliciesPagesArgsForCall []struct {
		arg1 *iam.ListUserPoliciesInput
		arg2 func(*iam.ListUserPoliciesOutput, bool) bool
	}
	listUserPoliciesPagesReturns struct {
		result1 error
	}
	listUserPoliciesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListUserPoliciesPagesWithContextStub        func(context.Context, *iam.ListUserPoliciesInput, func(*iam.ListUserPoliciesOutput, bool) bool, ...request.Option) error
	listUserPoliciesPagesWithContextMutex       sync.RWMutex
	listUserPoliciesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListUserPoliciesInput
		arg3 func(*iam.ListUserPoliciesOutput, bool) bool
		arg4 []request.Option
	}
	listUserPoliciesPagesWithContextReturns struct {
		result1 error
	}
	listUserPoliciesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListUserPoliciesRequestStub        func(*iam.ListUserPoliciesInput) (*request.Request, *iam.ListUserPoliciesOutput)
	listUserPoliciesRequestMutex       sync.RWMutex
	listUserPoliciesRequestArgsForCall []struct {
		arg1 *iam.ListUserPoliciesInput
	}
	listUserPoliciesRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListUserPoliciesOutput
	}
	listUserPoliciesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListUserPoliciesOutput
	}
	ListUserPoliciesWithContextStub        func(context.Context, *iam.ListUserPoliciesInput, ...request.Option) (*iam.ListUserPoliciesOutput, error)
	listUserPoliciesWithContextMutex       sync.RWMutex
	listUserPoliciesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListUserPoliciesInput
		arg3 []request.Option
	}
	listUserPoliciesWithContextReturns struct {
		result1 *iam.ListUserPoliciesOutput
		result2 error
	}
	listUserPoliciesWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListUserPoliciesOutput
		result2 error
	}
	ListUserTagsStub        func(*iam.ListUserTagsInput) (*iam.ListUserTagsOutput, error)
	listUserTagsMutex       sync.RWMutex
	listUserTagsArgsForCall []struct {
		arg1 *iam.ListUserTagsInput
	}
	listUserTagsReturns struct {
		result1 *iam.ListUserTagsOutput
		result2 error
	}
	listUserTagsReturnsOnCall map[int]struct {
		result1 *iam.ListUserTagsOutput
		result2 error
	}
	ListUserTagsRequestStub        func(*iam.ListUserTagsInput) (*request.Request, *iam.ListUserTagsOutput)
	listUserTagsRequestMutex       sync.RWMutex
	listUserTagsRequestArgsForCall []struct {
		arg1 *iam.ListUserTagsInput
	}
	listUserTagsRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListUserTagsOutput
	}
	listUserTagsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListUserTagsOutput
	}
	ListUserTagsWithContextStub        func(context.Context, *iam.ListUserTagsInput, ...request.Option) (*iam.ListUserTagsOutput, error)
	listUserTagsWithContextMutex       sync.RWMutex
	listUserTagsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListUserTagsInput
		arg3 []request.Option
	}
	listUserTagsWithContextReturns struct {
		result1 *iam.ListUserTagsOutput
		result2 error
	}
	listUserTagsWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListUserTagsOutput
		result2 error
	}
	ListUsersStub        func(*iam.ListUsersInput) (*iam.ListUsersOutput, error)
	listUsersMutex       sync.RWMutex
	listUsersArgsForCall []struct {
		arg1 *iam.ListUsersInput
	}
	listUsersReturns struct {
		result1 *iam.ListUsersOutput
		result2 error
	}
	listUsersReturnsOnCall map[int]struct {
		result1 *iam.ListUsersOutput
		result2 error
	}
	ListUsersPagesStub        func(*iam.ListUsersInput, func(*iam.ListUsersOutput, bool) bool) error
	listUsersPagesMutex       sync.RWMutex
	listUsersPagesArgsForCall []struct {
		arg1 *iam.ListUsersInput
		arg2 func(*iam.ListUsersOutput, bool) bool
	}
	listUsersPagesReturns struct {
		result1 error
	}
	listUsersPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListUsersPagesWithContextStub        func(context.Context, *iam.ListUsersInput, func(*iam.ListUsersOutput, bool) bool, ...request.Option) error
	listUsersPagesWithContextMutex       sync.RWMutex
	listUsersPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListUsersInput
		arg3 func(*iam.ListUsersOutput, bool) bool
		arg4 []request.Option
	}
	listUsersPagesWithContextReturns struct {
		result1 error
	}
	listUsersPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListUsersRequestStub        func(*iam.ListUsersInput) (*request.Request, *iam.ListUsersOutput)
	listUsersRequestMutex       sync.RWMutex
	listUsersRequestArgsForCall []struct {
		arg1 *iam.ListUsersInput
	}
	listUsersRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListUsersOutput
	}
	listUsersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListUsersOutput
	}
	ListUsersWithContextStub        func(context.Context, *iam.ListUsersInput, ...request.Option) (*iam.ListUsersOutput, error)
	listUsersWithContextMutex       sync.RWMutex
	listUsersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListUsersInput
		arg3 []request.Option
	}
	listUsersWithContextReturns struct {
		result1 *iam.ListUsersOutput
		result2 error
	}
	listUsersWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListUsersOutput
		result2 error
	}
	ListVirtualMFADevicesStub        func(*iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error)
	listVirtualMFADevicesMutex       sync.RWMutex
	listVirtualMFADevicesArgsForCall []struct {
		arg1 *iam.ListVirtualMFADevicesInput
	}
	listVirtualMFADevicesReturns struct {
		result1 *iam.ListVirtualMFADevicesOutput
		result2 error
	}
	listVirtualMFADevicesReturnsOnCall map[int]struct {
		result1 *iam.ListVirtualMFADevicesOutput
		result2 error
	}
	ListVirtualMFADevicesPagesStub        func(*iam.ListVirtualMFADevicesInput, func(*iam.ListVirtualMFADevicesOutput, bool) bool) error
	listVirtualMFADevicesPagesMutex       sync.RWMutex
	listVirtualMFADevicesPagesArgsForCall []struct {
		arg1 *iam.ListVirtualMFADevicesInput
		arg2 func(*iam.ListVirtualMFADevicesOutput, bool) bool
	}
	listVirtualMFADevicesPagesReturns struct {
		result1 error
	}
	listVirtualMFADevicesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListVirtualMFADevicesPagesWithContextStub        func(context.Context, *iam.ListVirtualMFADevicesInput, func(*iam.ListVirtualMFADevicesOutput, bool) bool, ...request.Option) error
	listVirtualMFADevicesPagesWithContextMutex       sync.RWMutex
	listVirtualMFADevicesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListVirtualMFADevicesInput
		arg3 func(*iam.ListVirtualMFADevicesOutput, bool) bool
		arg4 []request.Option
	}
	listVirtualMFADevicesPagesWithContextReturns struct {
		result1 error
	}
	listVirtualMFADevicesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListVirtualMFADevicesRequestStub        func(*iam.ListVirtualMFADevicesInput) (*request.Request, *iam.ListVirtualMFADevicesOutput)
	listVirtualMFADevicesRequestMutex       sync.RWMutex
	listVirtualMFADevicesRequestArgsForCall []struct {
		arg1 *iam.ListVirtualMFADevicesInput
	}
	listVirtualMFADevicesRequestReturns struct {
		result1 *request.Request
		result2 *iam.ListVirtualMFADevicesOutput
	}
	listVirtualMFADevicesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ListVirtualMFADevicesOutput
	}
	ListVirtualMFADevicesWithContextStub        func(context.Context, *iam.ListVirtualMFADevicesInput, ...request.Option) (*iam.ListVirtualMFADevicesOutput, error)
	listVirtualMFADevicesWithContextMutex       sync.RWMutex
	listVirtualMFADevicesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ListVirtualMFADevicesInput
		arg3 []request.Option
	}
	listVirtualMFADevicesWithContextReturns struct {
		result1 *iam.ListVirtualMFADevicesOutput
		result2 error
	}
	listVirtualMFADevicesWithContextReturnsOnCall map[int]struct {
		result1 *iam.ListVirtualMFADevicesOutput
		result2 error
	}
	PutGroupPolicyStub        func(*iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error)
	putGroupPolicyMutex       sync.RWMutex
	putGroupPolicyArgsForCall []struct {
		arg1 *iam.PutGroupPolicyInput
	}
	putGroupPolicyReturns struct {
		result1 *iam.PutGroupPolicyOutput
		result2 error
	}
	putGroupPolicyReturnsOnCall map[int]struct {
		result1 *iam.PutGroupPolicyOutput
		result2 error
	}
	PutGroupPolicyRequestStub        func(*iam.PutGroupPolicyInput) (*request.Request, *iam.PutGroupPolicyOutput)
	putGroupPolicyRequestMutex       sync.RWMutex
	putGroupPolicyRequestArgsForCall []struct {
		arg1 *iam.PutGroupPolicyInput
	}
	putGroupPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.PutGroupPolicyOutput
	}
	putGroupPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.PutGroupPolicyOutput
	}
	PutGroupPolicyWithContextStub        func(context.Context, *iam.PutGroupPolicyInput, ...request.Option) (*iam.PutGroupPolicyOutput, error)
	putGroupPolicyWithContextMutex       sync.RWMutex
	putGroupPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.PutGroupPolicyInput
		arg3 []request.Option
	}
	putGroupPolicyWithContextReturns struct {
		result1 *iam.PutGroupPolicyOutput
		result2 error
	}
	putGroupPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.PutGroupPolicyOutput
		result2 error
	}
	PutRolePermissionsBoundaryStub        func(*iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error)
	putRolePermissionsBoundaryMutex       sync.RWMutex
	putRolePermissionsBoundaryArgsForCall []struct {
		arg1 *iam.PutRolePermissionsBoundaryInput
	}
	putRolePermissionsBoundaryReturns struct {
		result1 *iam.PutRolePermissionsBoundaryOutput
		result2 error
	}
	putRolePermissionsBoundaryReturnsOnCall map[int]struct {
		result1 *iam.PutRolePermissionsBoundaryOutput
		result2 error
	}
	PutRolePermissionsBoundaryRequestStub        func(*iam.PutRolePermissionsBoundaryInput) (*request.Request, *iam.PutRolePermissionsBoundaryOutput)
	putRolePermissionsBoundaryRequestMutex       sync.RWMutex
	putRolePermissionsBoundaryRequestArgsForCall []struct {
		arg1 *iam.PutRolePermissionsBoundaryInput
	}
	putRolePermissionsBoundaryRequestReturns struct {
		result1 *request.Request
		result2 *iam.PutRolePermissionsBoundaryOutput
	}
	putRolePermissionsBoundaryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.PutRolePermissionsBoundaryOutput
	}
	PutRolePermissionsBoundaryWithContextStub        func(context.Context, *iam.PutRolePermissionsBoundaryInput, ...request.Option) (*iam.PutRolePermissionsBoundaryOutput, error)
	putRolePermissionsBoundaryWithContextMutex       sync.RWMutex
	putRolePermissionsBoundaryWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.PutRolePermissionsBoundaryInput
		arg3 []request.Option
	}
	putRolePermissionsBoundaryWithContextReturns struct {
		result1 *iam.PutRolePermissionsBoundaryOutput
		result2 error
	}
	putRolePermissionsBoundaryWithContextReturnsOnCall map[int]struct {
		result1 *iam.PutRolePermissionsBoundaryOutput
		result2 error
	}
	PutRolePolicyStub        func(*iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error)
	putRolePolicyMutex       sync.RWMutex
	putRolePolicyArgsForCall []struct {
		arg1 *iam.PutRolePolicyInput
	}
	putRolePolicyReturns struct {
		result1 *iam.PutRolePolicyOutput
		result2 error
	}
	putRolePolicyReturnsOnCall map[int]struct {
		result1 *iam.PutRolePolicyOutput
		result2 error
	}
	PutRolePolicyRequestStub        func(*iam.PutRolePolicyInput) (*request.Request, *iam.PutRolePolicyOutput)
	putRolePolicyRequestMutex       sync.RWMutex
	putRolePolicyRequestArgsForCall []struct {
		arg1 *iam.PutRolePolicyInput
	}
	putRolePolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.PutRolePolicyOutput
	}
	putRolePolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.PutRolePolicyOutput
	}
	PutRolePolicyWithContextStub        func(context.Context, *iam.PutRolePolicyInput, ...request.Option) (*iam.PutRolePolicyOutput, error)
	putRolePolicyWithContextMutex       sync.RWMutex
	putRolePolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.PutRolePolicyInput
		arg3 []request.Option
	}
	putRolePolicyWithContextReturns struct {
		result1 *iam.PutRolePolicyOutput
		result2 error
	}
	putRolePolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.PutRolePolicyOutput
		result2 error
	}
	PutUserPermissionsBoundaryStub        func(*iam.PutUserPermissionsBoundaryInput) (*iam.PutUserPermissionsBoundaryOutput, error)
	putUserPermissionsBoundaryMutex       sync.RWMutex
	putUserPermissionsBoundaryArgsForCall []struct {
		arg1 *iam.PutUserPermissionsBoundaryInput
	}
	putUserPermissionsBoundaryReturns struct {
		result1 *iam.PutUserPermissionsBoundaryOutput
		result2 error
	}
	putUserPermissionsBoundaryReturnsOnCall map[int]struct {
		result1 *iam.PutUserPermissionsBoundaryOutput
		result2 error
	}
	PutUserPermissionsBoundaryRequestStub        func(*iam.PutUserPermissionsBoundaryInput) (*request.Request, *iam.PutUserPermissionsBoundaryOutput)
	putUserPermissionsBoundaryRequestMutex       sync.RWMutex
	putUserPermissionsBoundaryRequestArgsForCall []struct {
		arg1 *iam.PutUserPermissionsBoundaryInput
	}
	putUserPermissionsBoundaryRequestReturns struct {
		result1 *request.Request
		result2 *iam.PutUserPermissionsBoundaryOutput
	}
	putUserPermissionsBoundaryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.PutUserPermissionsBoundaryOutput
	}
	PutUserPermissionsBoundaryWithContextStub        func(context.Context, *iam.PutUserPermissionsBoundaryInput, ...request.Option) (*iam.PutUserPermissionsBoundaryOutput, error)
	putUserPermissionsBoundaryWithContextMutex       sync.RWMutex
	putUserPermissionsBoundaryWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.PutUserPermissionsBoundaryInput
		arg3 []request.Option
	}
	putUserPermissionsBoundaryWithContextReturns struct {
		result1 *iam.PutUserPermissionsBoundaryOutput
		result2 error
	}
	putUserPermissionsBoundaryWithContextReturnsOnCall map[int]struct {
		result1 *iam.PutUserPermissionsBoundaryOutput
		result2 error
	}
	PutUserPolicyStub        func(*iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error)
	putUserPolicyMutex       sync.RWMutex
	putUserPolicyArgsForCall []struct {
		arg1 *iam.PutUserPolicyInput
	}
	putUserPolicyReturns struct {
		result1 *iam.PutUserPolicyOutput
		result2 error
	}
	putUserPolicyReturnsOnCall map[int]struct {
		result1 *iam.PutUserPolicyOutput
		result2 error
	}
	PutUserPolicyRequestStub        func(*iam.PutUserPolicyInput) (*request.Request, *iam.PutUserPolicyOutput)
	putUserPolicyRequestMutex       sync.RWMutex
	putUserPolicyRequestArgsForCall []struct {
		arg1 *iam.PutUserPolicyInput
	}
	putUserPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.PutUserPolicyOutput
	}
	putUserPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.PutUserPolicyOutput
	}
	PutUserPolicyWithContextStub        func(context.Context, *iam.PutUserPolicyInput, ...request.Option) (*iam.PutUserPolicyOutput, error)
	putUserPolicyWithContextMutex       sync.RWMutex
	putUserPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.PutUserPolicyInput
		arg3 []request.Option
	}
	putUserPolicyWithContextReturns struct {
		result1 *iam.PutUserPolicyOutput
		result2 error
	}
	putUserPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.PutUserPolicyOutput
		result2 error
	}
	RemoveClientIDFromOpenIDConnectProviderStub        func(*iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error)
	removeClientIDFromOpenIDConnectProviderMutex       sync.RWMutex
	removeClientIDFromOpenIDConnectProviderArgsForCall []struct {
		arg1 *iam.RemoveClientIDFromOpenIDConnectProviderInput
	}
	removeClientIDFromOpenIDConnectProviderReturns struct {
		result1 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
		result2 error
	}
	removeClientIDFromOpenIDConnectProviderReturnsOnCall map[int]struct {
		result1 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
		result2 error
	}
	RemoveClientIDFromOpenIDConnectProviderRequestStub        func(*iam.RemoveClientIDFromOpenIDConnectProviderInput) (*request.Request, *iam.RemoveClientIDFromOpenIDConnectProviderOutput)
	removeClientIDFromOpenIDConnectProviderRequestMutex       sync.RWMutex
	removeClientIDFromOpenIDConnectProviderRequestArgsForCall []struct {
		arg1 *iam.RemoveClientIDFromOpenIDConnectProviderInput
	}
	removeClientIDFromOpenIDConnectProviderRequestReturns struct {
		result1 *request.Request
		result2 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
	}
	removeClientIDFromOpenIDConnectProviderRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
	}
	RemoveClientIDFromOpenIDConnectProviderWithContextStub        func(context.Context, *iam.RemoveClientIDFromOpenIDConnectProviderInput, ...request.Option) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error)
	removeClientIDFromOpenIDConnectProviderWithContextMutex       sync.RWMutex
	removeClientIDFromOpenIDConnectProviderWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.RemoveClientIDFromOpenIDConnectProviderInput
		arg3 []request.Option
	}
	removeClientIDFromOpenIDConnectProviderWithContextReturns struct {
		result1 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
		result2 error
	}
	removeClientIDFromOpenIDConnectProviderWithContextReturnsOnCall map[int]struct {
		result1 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
		result2 error
	}
	RemoveRoleFromInstanceProfileStub        func(*iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error)
	removeRoleFromInstanceProfileMutex       sync.RWMutex
	removeRoleFromInstanceProfileArgsForCall []struct {
		arg1 *iam.RemoveRoleFromInstanceProfileInput
	}
	removeRoleFromInstanceProfileReturns struct {
		result1 *iam.RemoveRoleFromInstanceProfileOutput
		result2 error
	}
	removeRoleFromInstanceProfileReturnsOnCall map[int]struct {
		result1 *iam.RemoveRoleFromInstanceProfileOutput
		result2 error
	}
	RemoveRoleFromInstanceProfileRequestStub        func(*iam.RemoveRoleFromInstanceProfileInput) (*request.Request, *iam.RemoveRoleFromInstanceProfileOutput)
	removeRoleFromInstanceProfileRequestMutex       sync.RWMutex
	removeRoleFromInstanceProfileRequestArgsForCall []struct {
		arg1 *iam.RemoveRoleFromInstanceProfileInput
	}
	removeRoleFromInstanceProfileRequestReturns struct {
		result1 *request.Request
		result2 *iam.RemoveRoleFromInstanceProfileOutput
	}
	removeRoleFromInstanceProfileRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.RemoveRoleFromInstanceProfileOutput
	}
	RemoveRoleFromInstanceProfileWithContextStub        func(context.Context, *iam.RemoveRoleFromInstanceProfileInput, ...request.Option) (*iam.RemoveRoleFromInstanceProfileOutput, error)
	removeRoleFromInstanceProfileWithContextMutex       sync.RWMutex
	removeRoleFromInstanceProfileWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.RemoveRoleFromInstanceProfileInput
		arg3 []request.Option
	}
	removeRoleFromInstanceProfileWithContextReturns struct {
		result1 *iam.RemoveRoleFromInstanceProfileOutput
		result2 error
	}
	removeRoleFromInstanceProfileWithContextReturnsOnCall map[int]struct {
		result1 *iam.RemoveRoleFromInstanceProfileOutput
		result2 error
	}
	RemoveUserFromGroupStub        func(*iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error)
	removeUserFromGroupMutex       sync.RWMutex
	removeUserFromGroupArgsForCall []struct {
		arg1 *iam.RemoveUserFromGroupInput
	}
	removeUserFromGroupReturns struct {
		result1 *iam.RemoveUserFromGroupOutput
		result2 error
	}
	removeUserFromGroupReturnsOnCall map[int]struct {
		result1 *iam.RemoveUserFromGroupOutput
		result2 error
	}
	RemoveUserFromGroupRequestStub        func(*iam.RemoveUserFromGroupInput) (*request.Request, *iam.RemoveUserFromGroupOutput)
	removeUserFromGroupRequestMutex       sync.RWMutex
	removeUserFromGroupRequestArgsForCall []struct {
		arg1 *iam.RemoveUserFromGroupInput
	}
	removeUserFromGroupRequestReturns struct {
		result1 *request.Request
		result2 *iam.RemoveUserFromGroupOutput
	}
	removeUserFromGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.RemoveUserFromGroupOutput
	}
	RemoveUserFromGroupWithContextStub        func(context.Context, *iam.RemoveUserFromGroupInput, ...request.Option) (*iam.RemoveUserFromGroupOutput, error)
	removeUserFromGroupWithContextMutex       sync.RWMutex
	removeUserFromGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.RemoveUserFromGroupInput
		arg3 []request.Option
	}
	removeUserFromGroupWithContextReturns struct {
		result1 *iam.RemoveUserFromGroupOutput
		result2 error
	}
	removeUserFromGroupWithContextReturnsOnCall map[int]struct {
		result1 *iam.RemoveUserFromGroupOutput
		result2 error
	}
	ResetServiceSpecificCredentialStub        func(*iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error)
	resetServiceSpecificCredentialMutex       sync.RWMutex
	resetServiceSpecificCredentialArgsForCall []struct {
		arg1 *iam.ResetServiceSpecificCredentialInput
	}
	resetServiceSpecificCredentialReturns struct {
		result1 *iam.ResetServiceSpecificCredentialOutput
		result2 error
	}
	resetServiceSpecificCredentialReturnsOnCall map[int]struct {
		result1 *iam.ResetServiceSpecificCredentialOutput
		result2 error
	}
	ResetServiceSpecificCredentialRequestStub        func(*iam.ResetServiceSpecificCredentialInput) (*request.Request, *iam.ResetServiceSpecificCredentialOutput)
	resetServiceSpecificCredentialRequestMutex       sync.RWMutex
	resetServiceSpecificCredentialRequestArgsForCall []struct {
		arg1 *iam.ResetServiceSpecificCredentialInput
	}
	resetServiceSpecificCredentialRequestReturns struct {
		result1 *request.Request
		result2 *iam.ResetServiceSpecificCredentialOutput
	}
	resetServiceSpecificCredentialRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ResetServiceSpecificCredentialOutput
	}
	ResetServiceSpecificCredentialWithContextStub        func(context.Context, *iam.ResetServiceSpecificCredentialInput, ...request.Option) (*iam.ResetServiceSpecificCredentialOutput, error)
	resetServiceSpecificCredentialWithContextMutex       sync.RWMutex
	resetServiceSpecificCredentialWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ResetServiceSpecificCredentialInput
		arg3 []request.Option
	}
	resetServiceSpecificCredentialWithContextReturns struct {
		result1 *iam.ResetServiceSpecificCredentialOutput
		result2 error
	}
	resetServiceSpecificCredentialWithContextReturnsOnCall map[int]struct {
		result1 *iam.ResetServiceSpecificCredentialOutput
		result2 error
	}
	ResyncMFADeviceStub        func(*iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error)
	resyncMFADeviceMutex       sync.RWMutex
	resyncMFADeviceArgsForCall []struct {
		arg1 *iam.ResyncMFADeviceInput
	}
	resyncMFADeviceReturns struct {
		result1 *iam.ResyncMFADeviceOutput
		result2 error
	}
	resyncMFADeviceReturnsOnCall map[int]struct {
		result1 *iam.ResyncMFADeviceOutput
		result2 error
	}
	ResyncMFADeviceRequestStub        func(*iam.ResyncMFADeviceInput) (*request.Request, *iam.ResyncMFADeviceOutput)
	resyncMFADeviceRequestMutex       sync.RWMutex
	resyncMFADeviceRequestArgsForCall []struct {
		arg1 *iam.ResyncMFADeviceInput
	}
	resyncMFADeviceRequestReturns struct {
		result1 *request.Request
		result2 *iam.ResyncMFADeviceOutput
	}
	resyncMFADeviceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.ResyncMFADeviceOutput
	}
	ResyncMFADeviceWithContextStub        func(context.Context, *iam.ResyncMFADeviceInput, ...request.Option) (*iam.ResyncMFADeviceOutput, error)
	resyncMFADeviceWithContextMutex       sync.RWMutex
	resyncMFADeviceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.ResyncMFADeviceInput
		arg3 []request.Option
	}
	resyncMFADeviceWithContextReturns struct {
		result1 *iam.ResyncMFADeviceOutput
		result2 error
	}
	resyncMFADeviceWithContextReturnsOnCall map[int]struct {
		result1 *iam.ResyncMFADeviceOutput
		result2 error
	}
	SetDefaultPolicyVersionStub        func(*iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error)
	setDefaultPolicyVersionMutex       sync.RWMutex
	setDefaultPolicyVersionArgsForCall []struct {
		arg1 *iam.SetDefaultPolicyVersionInput
	}
	setDefaultPolicyVersionReturns struct {
		result1 *iam.SetDefaultPolicyVersionOutput
		result2 error
	}
	setDefaultPolicyVersionReturnsOnCall map[int]struct {
		result1 *iam.SetDefaultPolicyVersionOutput
		result2 error
	}
	SetDefaultPolicyVersionRequestStub        func(*iam.SetDefaultPolicyVersionInput) (*request.Request, *iam.SetDefaultPolicyVersionOutput)
	setDefaultPolicyVersionRequestMutex       sync.RWMutex
	setDefaultPolicyVersionRequestArgsForCall []struct {
		arg1 *iam.SetDefaultPolicyVersionInput
	}
	setDefaultPolicyVersionRequestReturns struct {
		result1 *request.Request
		result2 *iam.SetDefaultPolicyVersionOutput
	}
	setDefaultPolicyVersionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.SetDefaultPolicyVersionOutput
	}
	SetDefaultPolicyVersionWithContextStub        func(context.Context, *iam.SetDefaultPolicyVersionInput, ...request.Option) (*iam.SetDefaultPolicyVersionOutput, error)
	setDefaultPolicyVersionWithContextMutex       sync.RWMutex
	setDefaultPolicyVersionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.SetDefaultPolicyVersionInput
		arg3 []request.Option
	}
	setDefaultPolicyVersionWithContextReturns struct {
		result1 *iam.SetDefaultPolicyVersionOutput
		result2 error
	}
	setDefaultPolicyVersionWithContextReturnsOnCall map[int]struct {
		result1 *iam.SetDefaultPolicyVersionOutput
		result2 error
	}
	SetSecurityTokenServicePreferencesStub        func(*iam.SetSecurityTokenServicePreferencesInput) (*iam.SetSecurityTokenServicePreferencesOutput, error)
	setSecurityTokenServicePreferencesMutex       sync.RWMutex
	setSecurityTokenServicePreferencesArgsForCall []struct {
		arg1 *iam.SetSecurityTokenServicePreferencesInput
	}
	setSecurityTokenServicePreferencesReturns struct {
		result1 *iam.SetSecurityTokenServicePreferencesOutput
		result2 error
	}
	setSecurityTokenServicePreferencesReturnsOnCall map[int]struct {
		result1 *iam.SetSecurityTokenServicePreferencesOutput
		result2 error
	}
	SetSecurityTokenServicePreferencesRequestStub        func(*iam.SetSecurityTokenServicePreferencesInput) (*request.Request, *iam.SetSecurityTokenServicePreferencesOutput)
	setSecurityTokenServicePreferencesRequestMutex       sync.RWMutex
	setSecurityTokenServicePreferencesRequestArgsForCall []struct {
		arg1 *iam.SetSecurityTokenServicePreferencesInput
	}
	setSecurityTokenServicePreferencesRequestReturns struct {
		result1 *request.Request
		result2 *iam.SetSecurityTokenServicePreferencesOutput
	}
	setSecurityTokenServicePreferencesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.SetSecurityTokenServicePreferencesOutput
	}
	SetSecurityTokenServicePreferencesWithContextStub        func(context.Context, *iam.SetSecurityTokenServicePreferencesInput, ...request.Option) (*iam.SetSecurityTokenServicePreferencesOutput, error)
	setSecurityTokenServicePreferencesWithContextMutex       sync.RWMutex
	setSecurityTokenServicePreferencesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.SetSecurityTokenServicePreferencesInput
		arg3 []request.Option
	}
	setSecurityTokenServicePreferencesWithContextReturns struct {
		result1 *iam.SetSecurityTokenServicePreferencesOutput
		result2 error
	}
	setSecurityTokenServicePreferencesWithContextReturnsOnCall map[int]struct {
		result1 *iam.SetSecurityTokenServicePreferencesOutput
		result2 error
	}
	SimulateCustomPolicyStub        func(*iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error)
	simulateCustomPolicyMutex       sync.RWMutex
	simulateCustomPolicyArgsForCall []struct {
		arg1 *iam.SimulateCustomPolicyInput
	}
	simulateCustomPolicyReturns struct {
		result1 *iam.SimulatePolicyResponse
		result2 error
	}
	simulateCustomPolicyReturnsOnCall map[int]struct {
		result1 *iam.SimulatePolicyResponse
		result2 error
	}
	SimulateCustomPolicyPagesStub        func(*iam.SimulateCustomPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool) error
	simulateCustomPolicyPagesMutex       sync.RWMutex
	simulateCustomPolicyPagesArgsForCall []struct {
		arg1 *iam.SimulateCustomPolicyInput
		arg2 func(*iam.SimulatePolicyResponse, bool) bool
	}
	simulateCustomPolicyPagesReturns struct {
		result1 error
	}
	simulateCustomPolicyPagesReturnsOnCall map[int]struct {
		result1 error
	}
	SimulateCustomPolicyPagesWithContextStub        func(context.Context, *iam.SimulateCustomPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool, ...request.Option) error
	simulateCustomPolicyPagesWithContextMutex       sync.RWMutex
	simulateCustomPolicyPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.SimulateCustomPolicyInput
		arg3 func(*iam.SimulatePolicyResponse, bool) bool
		arg4 []request.Option
	}
	simulateCustomPolicyPagesWithContextReturns struct {
		result1 error
	}
	simulateCustomPolicyPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	SimulateCustomPolicyRequestStub        func(*iam.SimulateCustomPolicyInput) (*request.Request, *iam.SimulatePolicyResponse)
	simulateCustomPolicyRequestMutex       sync.RWMutex
	simulateCustomPolicyRequestArgsForCall []struct {
		arg1 *iam.SimulateCustomPolicyInput
	}
	simulateCustomPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.SimulatePolicyResponse
	}
	simulateCustomPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.SimulatePolicyResponse
	}
	SimulateCustomPolicyWithContextStub        func(context.Context, *iam.SimulateCustomPolicyInput, ...request.Option) (*iam.SimulatePolicyResponse, error)
	simulateCustomPolicyWithContextMutex       sync.RWMutex
	simulateCustomPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.SimulateCustomPolicyInput
		arg3 []request.Option
	}
	simulateCustomPolicyWithContextReturns struct {
		result1 *iam.SimulatePolicyResponse
		result2 error
	}
	simulateCustomPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.SimulatePolicyResponse
		result2 error
	}
	SimulatePrincipalPolicyStub        func(*iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error)
	simulatePrincipalPolicyMutex       sync.RWMutex
	simulatePrincipalPolicyArgsForCall []struct {
		arg1 *iam.SimulatePrincipalPolicyInput
	}
	simulatePrincipalPolicyReturns struct {
		result1 *iam.SimulatePolicyResponse
		result2 error
	}
	simulatePrincipalPolicyReturnsOnCall map[int]struct {
		result1 *iam.SimulatePolicyResponse
		result2 error
	}
	SimulatePrincipalPolicyPagesStub        func(*iam.SimulatePrincipalPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool) error
	simulatePrincipalPolicyPagesMutex       sync.RWMutex
	simulatePrincipalPolicyPagesArgsForCall []struct {
		arg1 *iam.SimulatePrincipalPolicyInput
		arg2 func(*iam.SimulatePolicyResponse, bool) bool
	}
	simulatePrincipalPolicyPagesReturns struct {
		result1 error
	}
	simulatePrincipalPolicyPagesReturnsOnCall map[int]struct {
		result1 error
	}
	SimulatePrincipalPolicyPagesWithContextStub        func(context.Context, *iam.SimulatePrincipalPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool, ...request.Option) error
	simulatePrincipalPolicyPagesWithContextMutex       sync.RWMutex
	simulatePrincipalPolicyPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.SimulatePrincipalPolicyInput
		arg3 func(*iam.SimulatePolicyResponse, bool) bool
		arg4 []request.Option
	}
	simulatePrincipalPolicyPagesWithContextReturns struct {
		result1 error
	}
	simulatePrincipalPolicyPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	SimulatePrincipalPolicyRequestStub        func(*iam.SimulatePrincipalPolicyInput) (*request.Request, *iam.SimulatePolicyResponse)
	simulatePrincipalPolicyRequestMutex       sync.RWMutex
	simulatePrincipalPolicyRequestArgsForCall []struct {
		arg1 *iam.SimulatePrincipalPolicyInput
	}
	simulatePrincipalPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.SimulatePolicyResponse
	}
	simulatePrincipalPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.SimulatePolicyResponse
	}
	SimulatePrincipalPolicyWithContextStub        func(context.Context, *iam.SimulatePrincipalPolicyInput, ...request.Option) (*iam.SimulatePolicyResponse, error)
	simulatePrincipalPolicyWithContextMutex       sync.RWMutex
	simulatePrincipalPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.SimulatePrincipalPolicyInput
		arg3 []request.Option
	}
	simulatePrincipalPolicyWithContextReturns struct {
		result1 *iam.SimulatePolicyResponse
		result2 error
	}
	simulatePrincipalPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.SimulatePolicyResponse
		result2 error
	}
	TagRoleStub        func(*iam.TagRoleInput) (*iam.TagRoleOutput, error)
	tagRoleMutex       sync.RWMutex
	tagRoleArgsForCall []struct {
		arg1 *iam.TagRoleInput
	}
	tagRoleReturns struct {
		result1 *iam.TagRoleOutput
		result2 error
	}
	tagRoleReturnsOnCall map[int]struct {
		result1 *iam.TagRoleOutput
		result2 error
	}
	TagRoleRequestStub        func(*iam.TagRoleInput) (*request.Request, *iam.TagRoleOutput)
	tagRoleRequestMutex       sync.RWMutex
	tagRoleRequestArgsForCall []struct {
		arg1 *iam.TagRoleInput
	}
	tagRoleRequestReturns struct {
		result1 *request.Request
		result2 *iam.TagRoleOutput
	}
	tagRoleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.TagRoleOutput
	}
	TagRoleWithContextStub        func(context.Context, *iam.TagRoleInput, ...request.Option) (*iam.TagRoleOutput, error)
	tagRoleWithContextMutex       sync.RWMutex
	tagRoleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.TagRoleInput
		arg3 []request.Option
	}
	tagRoleWithContextReturns struct {
		result1 *iam.TagRoleOutput
		result2 error
	}
	tagRoleWithContextReturnsOnCall map[int]struct {
		result1 *iam.TagRoleOutput
		result2 error
	}
	TagUserStub        func(*iam.TagUserInput) (*iam.TagUserOutput, error)
	tagUserMutex       sync.RWMutex
	tagUserArgsForCall []struct {
		arg1 *iam.TagUserInput
	}
	tagUserReturns struct {
		result1 *iam.TagUserOutput
		result2 error
	}
	tagUserReturnsOnCall map[int]struct {
		result1 *iam.TagUserOutput
		result2 error
	}
	TagUserRequestStub        func(*iam.TagUserInput) (*request.Request, *iam.TagUserOutput)
	tagUserRequestMutex       sync.RWMutex
	tagUserRequestArgsForCall []struct {
		arg1 *iam.TagUserInput
	}
	tagUserRequestReturns struct {
		result1 *request.Request
		result2 *iam.TagUserOutput
	}
	tagUserRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.TagUserOutput
	}
	TagUserWithContextStub        func(context.Context, *iam.TagUserInput, ...request.Option) (*iam.TagUserOutput, error)
	tagUserWithContextMutex       sync.RWMutex
	tagUserWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.TagUserInput
		arg3 []request.Option
	}
	tagUserWithContextReturns struct {
		result1 *iam.TagUserOutput
		result2 error
	}
	tagUserWithContextReturnsOnCall map[int]struct {
		result1 *iam.TagUserOutput
		result2 error
	}
	UntagRoleStub        func(*iam.UntagRoleInput) (*iam.UntagRoleOutput, error)
	untagRoleMutex       sync.RWMutex
	untagRoleArgsForCall []struct {
		arg1 *iam.UntagRoleInput
	}
	untagRoleReturns struct {
		result1 *iam.UntagRoleOutput
		result2 error
	}
	untagRoleReturnsOnCall map[int]struct {
		result1 *iam.UntagRoleOutput
		result2 error
	}
	UntagRoleRequestStub        func(*iam.UntagRoleInput) (*request.Request, *iam.UntagRoleOutput)
	untagRoleRequestMutex       sync.RWMutex
	untagRoleRequestArgsForCall []struct {
		arg1 *iam.UntagRoleInput
	}
	untagRoleRequestReturns struct {
		result1 *request.Request
		result2 *iam.UntagRoleOutput
	}
	untagRoleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UntagRoleOutput
	}
	UntagRoleWithContextStub        func(context.Context, *iam.UntagRoleInput, ...request.Option) (*iam.UntagRoleOutput, error)
	untagRoleWithContextMutex       sync.RWMutex
	untagRoleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UntagRoleInput
		arg3 []request.Option
	}
	untagRoleWithContextReturns struct {
		result1 *iam.UntagRoleOutput
		result2 error
	}
	untagRoleWithContextReturnsOnCall map[int]struct {
		result1 *iam.UntagRoleOutput
		result2 error
	}
	UntagUserStub        func(*iam.UntagUserInput) (*iam.UntagUserOutput, error)
	untagUserMutex       sync.RWMutex
	untagUserArgsForCall []struct {
		arg1 *iam.UntagUserInput
	}
	untagUserReturns struct {
		result1 *iam.UntagUserOutput
		result2 error
	}
	untagUserReturnsOnCall map[int]struct {
		result1 *iam.UntagUserOutput
		result2 error
	}
	UntagUserRequestStub        func(*iam.UntagUserInput) (*request.Request, *iam.UntagUserOutput)
	untagUserRequestMutex       sync.RWMutex
	untagUserRequestArgsForCall []struct {
		arg1 *iam.UntagUserInput
	}
	untagUserRequestReturns struct {
		result1 *request.Request
		result2 *iam.UntagUserOutput
	}
	untagUserRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UntagUserOutput
	}
	UntagUserWithContextStub        func(context.Context, *iam.UntagUserInput, ...request.Option) (*iam.UntagUserOutput, error)
	untagUserWithContextMutex       sync.RWMutex
	untagUserWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UntagUserInput
		arg3 []request.Option
	}
	untagUserWithContextReturns struct {
		result1 *iam.UntagUserOutput
		result2 error
	}
	untagUserWithContextReturnsOnCall map[int]struct {
		result1 *iam.UntagUserOutput
		result2 error
	}
	UpdateAccessKeyStub        func(*iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error)
	updateAccessKeyMutex       sync.RWMutex
	updateAccessKeyArgsForCall []struct {
		arg1 *iam.UpdateAccessKeyInput
	}
	updateAccessKeyReturns struct {
		result1 *iam.UpdateAccessKeyOutput
		result2 error
	}
	updateAccessKeyReturnsOnCall map[int]struct {
		result1 *iam.UpdateAccessKeyOutput
		result2 error
	}
	UpdateAccessKeyRequestStub        func(*iam.UpdateAccessKeyInput) (*request.Request, *iam.UpdateAccessKeyOutput)
	updateAccessKeyRequestMutex       sync.RWMutex
	updateAccessKeyRequestArgsForCall []struct {
		arg1 *iam.UpdateAccessKeyInput
	}
	updateAccessKeyRequestReturns struct {
		result1 *request.Request
		result2 *iam.UpdateAccessKeyOutput
	}
	updateAccessKeyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UpdateAccessKeyOutput
	}
	UpdateAccessKeyWithContextStub        func(context.Context, *iam.UpdateAccessKeyInput, ...request.Option) (*iam.UpdateAccessKeyOutput, error)
	updateAccessKeyWithContextMutex       sync.RWMutex
	updateAccessKeyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UpdateAccessKeyInput
		arg3 []request.Option
	}
	updateAccessKeyWithContextReturns struct {
		result1 *iam.UpdateAccessKeyOutput
		result2 error
	}
	updateAccessKeyWithContextReturnsOnCall map[int]struct {
		result1 *iam.UpdateAccessKeyOutput
		result2 error
	}
	UpdateAccountPasswordPolicyStub        func(*iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error)
	updateAccountPasswordPolicyMutex       sync.RWMutex
	updateAccountPasswordPolicyArgsForCall []struct {
		arg1 *iam.UpdateAccountPasswordPolicyInput
	}
	updateAccountPasswordPolicyReturns struct {
		result1 *iam.UpdateAccountPasswordPolicyOutput
		result2 error
	}
	updateAccountPasswordPolicyReturnsOnCall map[int]struct {
		result1 *iam.UpdateAccountPasswordPolicyOutput
		result2 error
	}
	UpdateAccountPasswordPolicyRequestStub        func(*iam.UpdateAccountPasswordPolicyInput) (*request.Request, *iam.UpdateAccountPasswordPolicyOutput)
	updateAccountPasswordPolicyRequestMutex       sync.RWMutex
	updateAccountPasswordPolicyRequestArgsForCall []struct {
		arg1 *iam.UpdateAccountPasswordPolicyInput
	}
	updateAccountPasswordPolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.UpdateAccountPasswordPolicyOutput
	}
	updateAccountPasswordPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UpdateAccountPasswordPolicyOutput
	}
	UpdateAccountPasswordPolicyWithContextStub        func(context.Context, *iam.UpdateAccountPasswordPolicyInput, ...request.Option) (*iam.UpdateAccountPasswordPolicyOutput, error)
	updateAccountPasswordPolicyWithContextMutex       sync.RWMutex
	updateAccountPasswordPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UpdateAccountPasswordPolicyInput
		arg3 []request.Option
	}
	updateAccountPasswordPolicyWithContextReturns struct {
		result1 *iam.UpdateAccountPasswordPolicyOutput
		result2 error
	}
	updateAccountPasswordPolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.UpdateAccountPasswordPolicyOutput
		result2 error
	}
	UpdateAssumeRolePolicyStub        func(*iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error)
	updateAssumeRolePolicyMutex       sync.RWMutex
	updateAssumeRolePolicyArgsForCall []struct {
		arg1 *iam.UpdateAssumeRolePolicyInput
	}
	updateAssumeRolePolicyReturns struct {
		result1 *iam.UpdateAssumeRolePolicyOutput
		result2 error
	}
	updateAssumeRolePolicyReturnsOnCall map[int]struct {
		result1 *iam.UpdateAssumeRolePolicyOutput
		result2 error
	}
	UpdateAssumeRolePolicyRequestStub        func(*iam.UpdateAssumeRolePolicyInput) (*request.Request, *iam.UpdateAssumeRolePolicyOutput)
	updateAssumeRolePolicyRequestMutex       sync.RWMutex
	updateAssumeRolePolicyRequestArgsForCall []struct {
		arg1 *iam.UpdateAssumeRolePolicyInput
	}
	updateAssumeRolePolicyRequestReturns struct {
		result1 *request.Request
		result2 *iam.UpdateAssumeRolePolicyOutput
	}
	updateAssumeRolePolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UpdateAssumeRolePolicyOutput
	}
	UpdateAssumeRolePolicyWithContextStub        func(context.Context, *iam.UpdateAssumeRolePolicyInput, ...request.Option) (*iam.UpdateAssumeRolePolicyOutput, error)
	updateAssumeRolePolicyWithContextMutex       sync.RWMutex
	updateAssumeRolePolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UpdateAssumeRolePolicyInput
		arg3 []request.Option
	}
	updateAssumeRolePolicyWithContextReturns struct {
		result1 *iam.UpdateAssumeRolePolicyOutput
		result2 error
	}
	updateAssumeRolePolicyWithContextReturnsOnCall map[int]struct {
		result1 *iam.UpdateAssumeRolePolicyOutput
		result2 error
	}
	UpdateGroupStub        func(*iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error)
	updateGroupMutex       sync.RWMutex
	updateGroupArgsForCall []struct {
		arg1 *iam.UpdateGroupInput
	}
	updateGroupReturns struct {
		result1 *iam.UpdateGroupOutput
		result2 error
	}
	updateGroupReturnsOnCall map[int]struct {
		result1 *iam.UpdateGroupOutput
		result2 error
	}
	UpdateGroupRequestStub        func(*iam.UpdateGroupInput) (*request.Request, *iam.UpdateGroupOutput)
	updateGroupRequestMutex       sync.RWMutex
	updateGroupRequestArgsForCall []struct {
		arg1 *iam.UpdateGroupInput
	}
	updateGroupRequestReturns struct {
		result1 *request.Request
		result2 *iam.UpdateGroupOutput
	}
	updateGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UpdateGroupOutput
	}
	UpdateGroupWithContextStub        func(context.Context, *iam.UpdateGroupInput, ...request.Option) (*iam.UpdateGroupOutput, error)
	updateGroupWithContextMutex       sync.RWMutex
	updateGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UpdateGroupInput
		arg3 []request.Option
	}
	updateGroupWithContextReturns struct {
		result1 *iam.UpdateGroupOutput
		result2 error
	}
	updateGroupWithContextReturnsOnCall map[int]struct {
		result1 *iam.UpdateGroupOutput
		result2 error
	}
	UpdateLoginProfileStub        func(*iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error)
	updateLoginProfileMutex       sync.RWMutex
	updateLoginProfileArgsForCall []struct {
		arg1 *iam.UpdateLoginProfileInput
	}
	updateLoginProfileReturns struct {
		result1 *iam.UpdateLoginProfileOutput
		result2 error
	}
	updateLoginProfileReturnsOnCall map[int]struct {
		result1 *iam.UpdateLoginProfileOutput
		result2 error
	}
	UpdateLoginProfileRequestStub        func(*iam.UpdateLoginProfileInput) (*request.Request, *iam.UpdateLoginProfileOutput)
	updateLoginProfileRequestMutex       sync.RWMutex
	updateLoginProfileRequestArgsForCall []struct {
		arg1 *iam.UpdateLoginProfileInput
	}
	updateLoginProfileRequestReturns struct {
		result1 *request.Request
		result2 *iam.UpdateLoginProfileOutput
	}
	updateLoginProfileRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UpdateLoginProfileOutput
	}
	UpdateLoginProfileWithContextStub        func(context.Context, *iam.UpdateLoginProfileInput, ...request.Option) (*iam.UpdateLoginProfileOutput, error)
	updateLoginProfileWithContextMutex       sync.RWMutex
	updateLoginProfileWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UpdateLoginProfileInput
		arg3 []request.Option
	}
	updateLoginProfileWithContextReturns struct {
		result1 *iam.UpdateLoginProfileOutput
		result2 error
	}
	updateLoginProfileWithContextReturnsOnCall map[int]struct {
		result1 *iam.UpdateLoginProfileOutput
		result2 error
	}
	UpdateOpenIDConnectProviderThumbprintStub        func(*iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error)
	updateOpenIDConnectProviderThumbprintMutex       sync.RWMutex
	updateOpenIDConnectProviderThumbprintArgsForCall []struct {
		arg1 *iam.UpdateOpenIDConnectProviderThumbprintInput
	}
	updateOpenIDConnectProviderThumbprintReturns struct {
		result1 *iam.UpdateOpenIDConnectProviderThumbprintOutput
		result2 error
	}
	updateOpenIDConnectProviderThumbprintReturnsOnCall map[int]struct {
		result1 *iam.UpdateOpenIDConnectProviderThumbprintOutput
		result2 error
	}
	UpdateOpenIDConnectProviderThumbprintRequestStub        func(*iam.UpdateOpenIDConnectProviderThumbprintInput) (*request.Request, *iam.UpdateOpenIDConnectProviderThumbprintOutput)
	updateOpenIDConnectProviderThumbprintRequestMutex       sync.RWMutex
	updateOpenIDConnectProviderThumbprintRequestArgsForCall []struct {
		arg1 *iam.UpdateOpenIDConnectProviderThumbprintInput
	}
	updateOpenIDConnectProviderThumbprintRequestReturns struct {
		result1 *request.Request
		result2 *iam.UpdateOpenIDConnectProviderThumbprintOutput
	}
	updateOpenIDConnectProviderThumbprintRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UpdateOpenIDConnectProviderThumbprintOutput
	}
	UpdateOpenIDConnectProviderThumbprintWithContextStub        func(context.Context, *iam.UpdateOpenIDConnectProviderThumbprintInput, ...request.Option) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error)
	updateOpenIDConnectProviderThumbprintWithContextMutex       sync.RWMutex
	updateOpenIDConnectProviderThumbprintWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UpdateOpenIDConnectProviderThumbprintInput
		arg3 []request.Option
	}
	updateOpenIDConnectProviderThumbprintWithContextReturns struct {
		result1 *iam.UpdateOpenIDConnectProviderThumbprintOutput
		result2 error
	}
	updateOpenIDConnectProviderThumbprintWithContextReturnsOnCall map[int]struct {
		result1 *iam.UpdateOpenIDConnectProviderThumbprintOutput
		result2 error
	}
	UpdateRoleStub        func(*iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error)
	updateRoleMutex       sync.RWMutex
	updateRoleArgsForCall []struct {
		arg1 *iam.UpdateRoleInput
	}
	updateRoleReturns struct {
		result1 *iam.UpdateRoleOutput
		result2 error
	}
	updateRoleReturnsOnCall map[int]struct {
		result1 *iam.UpdateRoleOutput
		result2 error
	}
	UpdateRoleDescriptionStub        func(*iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error)
	updateRoleDescriptionMutex       sync.RWMutex
	updateRoleDescriptionArgsForCall []struct {
		arg1 *iam.UpdateRoleDescriptionInput
	}
	updateRoleDescriptionReturns struct {
		result1 *iam.UpdateRoleDescriptionOutput
		result2 error
	}
	updateRoleDescriptionReturnsOnCall map[int]struct {
		result1 *iam.UpdateRoleDescriptionOutput
		result2 error
	}
	UpdateRoleDescriptionRequestStub        func(*iam.UpdateRoleDescriptionInput) (*request.Request, *iam.UpdateRoleDescriptionOutput)
	updateRoleDescriptionRequestMutex       sync.RWMutex
	updateRoleDescriptionRequestArgsForCall []struct {
		arg1 *iam.UpdateRoleDescriptionInput
	}
	updateRoleDescriptionRequestReturns struct {
		result1 *request.Request
		result2 *iam.UpdateRoleDescriptionOutput
	}
	updateRoleDescriptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UpdateRoleDescriptionOutput
	}
	UpdateRoleDescriptionWithContextStub        func(context.Context, *iam.UpdateRoleDescriptionInput, ...request.Option) (*iam.UpdateRoleDescriptionOutput, error)
	updateRoleDescriptionWithContextMutex       sync.RWMutex
	updateRoleDescriptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UpdateRoleDescriptionInput
		arg3 []request.Option
	}
	updateRoleDescriptionWithContextReturns struct {
		result1 *iam.UpdateRoleDescriptionOutput
		result2 error
	}
	updateRoleDescriptionWithContextReturnsOnCall map[int]struct {
		result1 *iam.UpdateRoleDescriptionOutput
		result2 error
	}
	UpdateRoleRequestStub        func(*iam.UpdateRoleInput) (*request.Request, *iam.UpdateRoleOutput)
	updateRoleRequestMutex       sync.RWMutex
	updateRoleRequestArgsForCall []struct {
		arg1 *iam.UpdateRoleInput
	}
	updateRoleRequestReturns struct {
		result1 *request.Request
		result2 *iam.UpdateRoleOutput
	}
	updateRoleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UpdateRoleOutput
	}
	UpdateRoleWithContextStub        func(context.Context, *iam.UpdateRoleInput, ...request.Option) (*iam.UpdateRoleOutput, error)
	updateRoleWithContextMutex       sync.RWMutex
	updateRoleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UpdateRoleInput
		arg3 []request.Option
	}
	updateRoleWithContextReturns struct {
		result1 *iam.UpdateRoleOutput
		result2 error
	}
	updateRoleWithContextReturnsOnCall map[int]struct {
		result1 *iam.UpdateRoleOutput
		result2 error
	}
	UpdateSAMLProviderStub        func(*iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error)
	updateSAMLProviderMutex       sync.RWMutex
	updateSAMLProviderArgsForCall []struct {
		arg1 *iam.UpdateSAMLProviderInput
	}
	updateSAMLProviderReturns struct {
		result1 *iam.UpdateSAMLProviderOutput
		result2 error
	}
	updateSAMLProviderReturnsOnCall map[int]struct {
		result1 *iam.UpdateSAMLProviderOutput
		result2 error
	}
	UpdateSAMLProviderRequestStub        func(*iam.UpdateSAMLProviderInput) (*request.Request, *iam.UpdateSAMLProviderOutput)
	updateSAMLProviderRequestMutex       sync.RWMutex
	updateSAMLProviderRequestArgsForCall []struct {
		arg1 *iam.UpdateSAMLProviderInput
	}
	updateSAMLProviderRequestReturns struct {
		result1 *request.Request
		result2 *iam.UpdateSAMLProviderOutput
	}
	updateSAMLProviderRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UpdateSAMLProviderOutput
	}
	UpdateSAMLProviderWithContextStub        func(context.Context, *iam.UpdateSAMLProviderInput, ...request.Option) (*iam.UpdateSAMLProviderOutput, error)
	updateSAMLProviderWithContextMutex       sync.RWMutex
	updateSAMLProviderWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UpdateSAMLProviderInput
		arg3 []request.Option
	}
	updateSAMLProviderWithContextReturns struct {
		result1 *iam.UpdateSAMLProviderOutput
		result2 error
	}
	updateSAMLProviderWithContextReturnsOnCall map[int]struct {
		result1 *iam.UpdateSAMLProviderOutput
		result2 error
	}
	UpdateSSHPublicKeyStub        func(*iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error)
	updateSSHPublicKeyMutex       sync.RWMutex
	updateSSHPublicKeyArgsForCall []struct {
		arg1 *iam.UpdateSSHPublicKeyInput
	}
	updateSSHPublicKeyReturns struct {
		result1 *iam.UpdateSSHPublicKeyOutput
		result2 error
	}
	updateSSHPublicKeyReturnsOnCall map[int]struct {
		result1 *iam.UpdateSSHPublicKeyOutput
		result2 error
	}
	UpdateSSHPublicKeyRequestStub        func(*iam.UpdateSSHPublicKeyInput) (*request.Request, *iam.UpdateSSHPublicKeyOutput)
	updateSSHPublicKeyRequestMutex       sync.RWMutex
	updateSSHPublicKeyRequestArgsForCall []struct {
		arg1 *iam.UpdateSSHPublicKeyInput
	}
	updateSSHPublicKeyRequestReturns struct {
		result1 *request.Request
		result2 *iam.UpdateSSHPublicKeyOutput
	}
	updateSSHPublicKeyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UpdateSSHPublicKeyOutput
	}
	UpdateSSHPublicKeyWithContextStub        func(context.Context, *iam.UpdateSSHPublicKeyInput, ...request.Option) (*iam.UpdateSSHPublicKeyOutput, error)
	updateSSHPublicKeyWithContextMutex       sync.RWMutex
	updateSSHPublicKeyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UpdateSSHPublicKeyInput
		arg3 []request.Option
	}
	updateSSHPublicKeyWithContextReturns struct {
		result1 *iam.UpdateSSHPublicKeyOutput
		result2 error
	}
	updateSSHPublicKeyWithContextReturnsOnCall map[int]struct {
		result1 *iam.UpdateSSHPublicKeyOutput
		result2 error
	}
	UpdateServerCertificateStub        func(*iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error)
	updateServerCertificateMutex       sync.RWMutex
	updateServerCertificateArgsForCall []struct {
		arg1 *iam.UpdateServerCertificateInput
	}
	updateServerCertificateReturns struct {
		result1 *iam.UpdateServerCertificateOutput
		result2 error
	}
	updateServerCertificateReturnsOnCall map[int]struct {
		result1 *iam.UpdateServerCertificateOutput
		result2 error
	}
	UpdateServerCertificateRequestStub        func(*iam.UpdateServerCertificateInput) (*request.Request, *iam.UpdateServerCertificateOutput)
	updateServerCertificateRequestMutex       sync.RWMutex
	updateServerCertificateRequestArgsForCall []struct {
		arg1 *iam.UpdateServerCertificateInput
	}
	updateServerCertificateRequestReturns struct {
		result1 *request.Request
		result2 *iam.UpdateServerCertificateOutput
	}
	updateServerCertificateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UpdateServerCertificateOutput
	}
	UpdateServerCertificateWithContextStub        func(context.Context, *iam.UpdateServerCertificateInput, ...request.Option) (*iam.UpdateServerCertificateOutput, error)
	updateServerCertificateWithContextMutex       sync.RWMutex
	updateServerCertificateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UpdateServerCertificateInput
		arg3 []request.Option
	}
	updateServerCertificateWithContextReturns struct {
		result1 *iam.UpdateServerCertificateOutput
		result2 error
	}
	updateServerCertificateWithContextReturnsOnCall map[int]struct {
		result1 *iam.UpdateServerCertificateOutput
		result2 error
	}
	UpdateServiceSpecificCredentialStub        func(*iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error)
	updateServiceSpecificCredentialMutex       sync.RWMutex
	updateServiceSpecificCredentialArgsForCall []struct {
		arg1 *iam.UpdateServiceSpecificCredentialInput
	}
	updateServiceSpecificCredentialReturns struct {
		result1 *iam.UpdateServiceSpecificCredentialOutput
		result2 error
	}
	updateServiceSpecificCredentialReturnsOnCall map[int]struct {
		result1 *iam.UpdateServiceSpecificCredentialOutput
		result2 error
	}
	UpdateServiceSpecificCredentialRequestStub        func(*iam.UpdateServiceSpecificCredentialInput) (*request.Request, *iam.UpdateServiceSpecificCredentialOutput)
	updateServiceSpecificCredentialRequestMutex       sync.RWMutex
	updateServiceSpecificCredentialRequestArgsForCall []struct {
		arg1 *iam.UpdateServiceSpecificCredentialInput
	}
	updateServiceSpecificCredentialRequestReturns struct {
		result1 *request.Request
		result2 *iam.UpdateServiceSpecificCredentialOutput
	}
	updateServiceSpecificCredentialRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UpdateServiceSpecificCredentialOutput
	}
	UpdateServiceSpecificCredentialWithContextStub        func(context.Context, *iam.UpdateServiceSpecificCredentialInput, ...request.Option) (*iam.UpdateServiceSpecificCredentialOutput, error)
	updateServiceSpecificCredentialWithContextMutex       sync.RWMutex
	updateServiceSpecificCredentialWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UpdateServiceSpecificCredentialInput
		arg3 []request.Option
	}
	updateServiceSpecificCredentialWithContextReturns struct {
		result1 *iam.UpdateServiceSpecificCredentialOutput
		result2 error
	}
	updateServiceSpecificCredentialWithContextReturnsOnCall map[int]struct {
		result1 *iam.UpdateServiceSpecificCredentialOutput
		result2 error
	}
	UpdateSigningCertificateStub        func(*iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error)
	updateSigningCertificateMutex       sync.RWMutex
	updateSigningCertificateArgsForCall []struct {
		arg1 *iam.UpdateSigningCertificateInput
	}
	updateSigningCertificateReturns struct {
		result1 *iam.UpdateSigningCertificateOutput
		result2 error
	}
	updateSigningCertificateReturnsOnCall map[int]struct {
		result1 *iam.UpdateSigningCertificateOutput
		result2 error
	}
	UpdateSigningCertificateRequestStub        func(*iam.UpdateSigningCertificateInput) (*request.Request, *iam.UpdateSigningCertificateOutput)
	updateSigningCertificateRequestMutex       sync.RWMutex
	updateSigningCertificateRequestArgsForCall []struct {
		arg1 *iam.UpdateSigningCertificateInput
	}
	updateSigningCertificateRequestReturns struct {
		result1 *request.Request
		result2 *iam.UpdateSigningCertificateOutput
	}
	updateSigningCertificateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UpdateSigningCertificateOutput
	}
	UpdateSigningCertificateWithContextStub        func(context.Context, *iam.UpdateSigningCertificateInput, ...request.Option) (*iam.UpdateSigningCertificateOutput, error)
	updateSigningCertificateWithContextMutex       sync.RWMutex
	updateSigningCertificateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UpdateSigningCertificateInput
		arg3 []request.Option
	}
	updateSigningCertificateWithContextReturns struct {
		result1 *iam.UpdateSigningCertificateOutput
		result2 error
	}
	updateSigningCertificateWithContextReturnsOnCall map[int]struct {
		result1 *iam.UpdateSigningCertificateOutput
		result2 error
	}
	UpdateUserStub        func(*iam.UpdateUserInput) (*iam.UpdateUserOutput, error)
	updateUserMutex       sync.RWMutex
	updateUserArgsForCall []struct {
		arg1 *iam.UpdateUserInput
	}
	updateUserReturns struct {
		result1 *iam.UpdateUserOutput
		result2 error
	}
	updateUserReturnsOnCall map[int]struct {
		result1 *iam.UpdateUserOutput
		result2 error
	}
	UpdateUserRequestStub        func(*iam.UpdateUserInput) (*request.Request, *iam.UpdateUserOutput)
	updateUserRequestMutex       sync.RWMutex
	updateUserRequestArgsForCall []struct {
		arg1 *iam.UpdateUserInput
	}
	updateUserRequestReturns struct {
		result1 *request.Request
		result2 *iam.UpdateUserOutput
	}
	updateUserRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UpdateUserOutput
	}
	UpdateUserWithContextStub        func(context.Context, *iam.UpdateUserInput, ...request.Option) (*iam.UpdateUserOutput, error)
	updateUserWithContextMutex       sync.RWMutex
	updateUserWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UpdateUserInput
		arg3 []request.Option
	}
	updateUserWithContextReturns struct {
		result1 *iam.UpdateUserOutput
		result2 error
	}
	updateUserWithContextReturnsOnCall map[int]struct {
		result1 *iam.UpdateUserOutput
		result2 error
	}
	UploadSSHPublicKeyStub        func(*iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error)
	uploadSSHPublicKeyMutex       sync.RWMutex
	uploadSSHPublicKeyArgsForCall []struct {
		arg1 *iam.UploadSSHPublicKeyInput
	}
	uploadSSHPublicKeyReturns struct {
		result1 *iam.UploadSSHPublicKeyOutput
		result2 error
	}
	uploadSSHPublicKeyReturnsOnCall map[int]struct {
		result1 *iam.UploadSSHPublicKeyOutput
		result2 error
	}
	UploadSSHPublicKeyRequestStub        func(*iam.UploadSSHPublicKeyInput) (*request.Request, *iam.UploadSSHPublicKeyOutput)
	uploadSSHPublicKeyRequestMutex       sync.RWMutex
	uploadSSHPublicKeyRequestArgsForCall []struct {
		arg1 *iam.UploadSSHPublicKeyInput
	}
	uploadSSHPublicKeyRequestReturns struct {
		result1 *request.Request
		result2 *iam.UploadSSHPublicKeyOutput
	}
	uploadSSHPublicKeyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UploadSSHPublicKeyOutput
	}
	UploadSSHPublicKeyWithContextStub        func(context.Context, *iam.UploadSSHPublicKeyInput, ...request.Option) (*iam.UploadSSHPublicKeyOutput, error)
	uploadSSHPublicKeyWithContextMutex       sync.RWMutex
	uploadSSHPublicKeyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UploadSSHPublicKeyInput
		arg3 []request.Option
	}
	uploadSSHPublicKeyWithContextReturns struct {
		result1 *iam.UploadSSHPublicKeyOutput
		result2 error
	}
	uploadSSHPublicKeyWithContextReturnsOnCall map[int]struct {
		result1 *iam.UploadSSHPublicKeyOutput
		result2 error
	}
	UploadServerCertificateStub        func(*iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error)
	uploadServerCertificateMutex       sync.RWMutex
	uploadServerCertificateArgsForCall []struct {
		arg1 *iam.UploadServerCertificateInput
	}
	uploadServerCertificateReturns struct {
		result1 *iam.UploadServerCertificateOutput
		result2 error
	}
	uploadServerCertificateReturnsOnCall map[int]struct {
		result1 *iam.UploadServerCertificateOutput
		result2 error
	}
	UploadServerCertificateRequestStub        func(*iam.UploadServerCertificateInput) (*request.Request, *iam.UploadServerCertificateOutput)
	uploadServerCertificateRequestMutex       sync.RWMutex
	uploadServerCertificateRequestArgsForCall []struct {
		arg1 *iam.UploadServerCertificateInput
	}
	uploadServerCertificateRequestReturns struct {
		result1 *request.Request
		result2 *iam.UploadServerCertificateOutput
	}
	uploadServerCertificateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UploadServerCertificateOutput
	}
	UploadServerCertificateWithContextStub        func(context.Context, *iam.UploadServerCertificateInput, ...request.Option) (*iam.UploadServerCertificateOutput, error)
	uploadServerCertificateWithContextMutex       sync.RWMutex
	uploadServerCertificateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UploadServerCertificateInput
		arg3 []request.Option
	}
	uploadServerCertificateWithContextReturns struct {
		result1 *iam.UploadServerCertificateOutput
		result2 error
	}
	uploadServerCertificateWithContextReturnsOnCall map[int]struct {
		result1 *iam.UploadServerCertificateOutput
		result2 error
	}
	UploadSigningCertificateStub        func(*iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error)
	uploadSigningCertificateMutex       sync.RWMutex
	uploadSigningCertificateArgsForCall []struct {
		arg1 *iam.UploadSigningCertificateInput
	}
	uploadSigningCertificateReturns struct {
		result1 *iam.UploadSigningCertificateOutput
		result2 error
	}
	uploadSigningCertificateReturnsOnCall map[int]struct {
		result1 *iam.UploadSigningCertificateOutput
		result2 error
	}
	UploadSigningCertificateRequestStub        func(*iam.UploadSigningCertificateInput) (*request.Request, *iam.UploadSigningCertificateOutput)
	uploadSigningCertificateRequestMutex       sync.RWMutex
	uploadSigningCertificateRequestArgsForCall []struct {
		arg1 *iam.UploadSigningCertificateInput
	}
	uploadSigningCertificateRequestReturns struct {
		result1 *request.Request
		result2 *iam.UploadSigningCertificateOutput
	}
	uploadSigningCertificateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *iam.UploadSigningCertificateOutput
	}
	UploadSigningCertificateWithContextStub        func(context.Context, *iam.UploadSigningCertificateInput, ...request.Option) (*iam.UploadSigningCertificateOutput, error)
	uploadSigningCertificateWithContextMutex       sync.RWMutex
	uploadSigningCertificateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.UploadSigningCertificateInput
		arg3 []request.Option
	}
	uploadSigningCertificateWithContextReturns struct {
		result1 *iam.UploadSigningCertificateOutput
		result2 error
	}
	uploadSigningCertificateWithContextReturnsOnCall map[int]struct {
		result1 *iam.UploadSigningCertificateOutput
		result2 error
	}
	WaitUntilInstanceProfileExistsStub        func(*iam.GetInstanceProfileInput) error
	waitUntilInstanceProfileExistsMutex       sync.RWMutex
	waitUntilInstanceProfileExistsArgsForCall []struct {
		arg1 *iam.GetInstanceProfileInput
	}
	waitUntilInstanceProfileExistsReturns struct {
		result1 error
	}
	waitUntilInstanceProfileExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilInstanceProfileExistsWithContextStub        func(context.Context, *iam.GetInstanceProfileInput, ...request.WaiterOption) error
	waitUntilInstanceProfileExistsWithContextMutex       sync.RWMutex
	waitUntilInstanceProfileExistsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetInstanceProfileInput
		arg3 []request.WaiterOption
	}
	waitUntilInstanceProfileExistsWithContextReturns struct {
		result1 error
	}
	waitUntilInstanceProfileExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilPolicyExistsStub        func(*iam.GetPolicyInput) error
	waitUntilPolicyExistsMutex       sync.RWMutex
	waitUntilPolicyExistsArgsForCall []struct {
		arg1 *iam.GetPolicyInput
	}
	waitUntilPolicyExistsReturns struct {
		result1 error
	}
	waitUntilPolicyExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilPolicyExistsWithContextStub        func(context.Context, *iam.GetPolicyInput, ...request.WaiterOption) error
	waitUntilPolicyExistsWithContextMutex       sync.RWMutex
	waitUntilPolicyExistsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetPolicyInput
		arg3 []request.WaiterOption
	}
	waitUntilPolicyExistsWithContextReturns struct {
		result1 error
	}
	waitUntilPolicyExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilRoleExistsStub        func(*iam.GetRoleInput) error
	waitUntilRoleExistsMutex       sync.RWMutex
	waitUntilRoleExistsArgsForCall []struct {
		arg1 *iam.GetRoleInput
	}
	waitUntilRoleExistsReturns struct {
		result1 error
	}
	waitUntilRoleExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilRoleExistsWithContextStub        func(context.Context, *iam.GetRoleInput, ...request.WaiterOption) error
	waitUntilRoleExistsWithContextMutex       sync.RWMutex
	waitUntilRoleExistsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetRoleInput
		arg3 []request.WaiterOption
	}
	waitUntilRoleExistsWithContextReturns struct {
		result1 error
	}
	waitUntilRoleExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilUserExistsStub        func(*iam.GetUserInput) error
	waitUntilUserExistsMutex       sync.RWMutex
	waitUntilUserExistsArgsForCall []struct {
		arg1 *iam.GetUserInput
	}
	waitUntilUserExistsReturns struct {
		result1 error
	}
	waitUntilUserExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilUserExistsWithContextStub        func(context.Context, *iam.GetUserInput, ...request.WaiterOption) error
	waitUntilUserExistsWithContextMutex       sync.RWMutex
	waitUntilUserExistsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetUserInput
		arg3 []request.WaiterOption
	}
	waitUntilUserExistsWithContextReturns struct {
		result1 error
	}
	waitUntilUserExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProvider(arg1 *iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	fake.addClientIDToOpenIDConnectProviderMutex.Lock()
	ret, specificReturn := fake.addClientIDToOpenIDConnectProviderReturnsOnCall[len(fake.addClientIDToOpenIDConnectProviderArgsForCall)]
	fake.addClientIDToOpenIDConnectProviderArgsForCall = append(fake.addClientIDToOpenIDConnectProviderArgsForCall, struct {
		arg1 *iam.AddClientIDToOpenIDConnectProviderInput
	}{arg1})
	fake.recordInvocation("AddClientIDToOpenIDConnectProvider", []interface{}{arg1})
	fake.addClientIDToOpenIDConnectProviderMutex.Unlock()
	if fake.AddClientIDToOpenIDConnectProviderStub != nil {
		return fake.AddClientIDToOpenIDConnectProviderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addClientIDToOpenIDConnectProviderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProviderCallCount() int {
	fake.addClientIDToOpenIDConnectProviderMutex.RLock()
	defer fake.addClientIDToOpenIDConnectProviderMutex.RUnlock()
	return len(fake.addClientIDToOpenIDConnectProviderArgsForCall)
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProviderCalls(stub func(*iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error)) {
	fake.addClientIDToOpenIDConnectProviderMutex.Lock()
	defer fake.addClientIDToOpenIDConnectProviderMutex.Unlock()
	fake.AddClientIDToOpenIDConnectProviderStub = stub
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProviderArgsForCall(i int) *iam.AddClientIDToOpenIDConnectProviderInput {
	fake.addClientIDToOpenIDConnectProviderMutex.RLock()
	defer fake.addClientIDToOpenIDConnectProviderMutex.RUnlock()
	argsForCall := fake.addClientIDToOpenIDConnectProviderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProviderReturns(result1 *iam.AddClientIDToOpenIDConnectProviderOutput, result2 error) {
	fake.addClientIDToOpenIDConnectProviderMutex.Lock()
	defer fake.addClientIDToOpenIDConnectProviderMutex.Unlock()
	fake.AddClientIDToOpenIDConnectProviderStub = nil
	fake.addClientIDToOpenIDConnectProviderReturns = struct {
		result1 *iam.AddClientIDToOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProviderReturnsOnCall(i int, result1 *iam.AddClientIDToOpenIDConnectProviderOutput, result2 error) {
	fake.addClientIDToOpenIDConnectProviderMutex.Lock()
	defer fake.addClientIDToOpenIDConnectProviderMutex.Unlock()
	fake.AddClientIDToOpenIDConnectProviderStub = nil
	if fake.addClientIDToOpenIDConnectProviderReturnsOnCall == nil {
		fake.addClientIDToOpenIDConnectProviderReturnsOnCall = make(map[int]struct {
			result1 *iam.AddClientIDToOpenIDConnectProviderOutput
			result2 error
		})
	}
	fake.addClientIDToOpenIDConnectProviderReturnsOnCall[i] = struct {
		result1 *iam.AddClientIDToOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProviderRequest(arg1 *iam.AddClientIDToOpenIDConnectProviderInput) (*request.Request, *iam.AddClientIDToOpenIDConnectProviderOutput) {
	fake.addClientIDToOpenIDConnectProviderRequestMutex.Lock()
	ret, specificReturn := fake.addClientIDToOpenIDConnectProviderRequestReturnsOnCall[len(fake.addClientIDToOpenIDConnectProviderRequestArgsForCall)]
	fake.addClientIDToOpenIDConnectProviderRequestArgsForCall = append(fake.addClientIDToOpenIDConnectProviderRequestArgsForCall, struct {
		arg1 *iam.AddClientIDToOpenIDConnectProviderInput
	}{arg1})
	fake.recordInvocation("AddClientIDToOpenIDConnectProviderRequest", []interface{}{arg1})
	fake.addClientIDToOpenIDConnectProviderRequestMutex.Unlock()
	if fake.AddClientIDToOpenIDConnectProviderRequestStub != nil {
		return fake.AddClientIDToOpenIDConnectProviderRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addClientIDToOpenIDConnectProviderRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProviderRequestCallCount() int {
	fake.addClientIDToOpenIDConnectProviderRequestMutex.RLock()
	defer fake.addClientIDToOpenIDConnectProviderRequestMutex.RUnlock()
	return len(fake.addClientIDToOpenIDConnectProviderRequestArgsForCall)
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProviderRequestCalls(stub func(*iam.AddClientIDToOpenIDConnectProviderInput) (*request.Request, *iam.AddClientIDToOpenIDConnectProviderOutput)) {
	fake.addClientIDToOpenIDConnectProviderRequestMutex.Lock()
	defer fake.addClientIDToOpenIDConnectProviderRequestMutex.Unlock()
	fake.AddClientIDToOpenIDConnectProviderRequestStub = stub
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProviderRequestArgsForCall(i int) *iam.AddClientIDToOpenIDConnectProviderInput {
	fake.addClientIDToOpenIDConnectProviderRequestMutex.RLock()
	defer fake.addClientIDToOpenIDConnectProviderRequestMutex.RUnlock()
	argsForCall := fake.addClientIDToOpenIDConnectProviderRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProviderRequestReturns(result1 *request.Request, result2 *iam.AddClientIDToOpenIDConnectProviderOutput) {
	fake.addClientIDToOpenIDConnectProviderRequestMutex.Lock()
	defer fake.addClientIDToOpenIDConnectProviderRequestMutex.Unlock()
	fake.AddClientIDToOpenIDConnectProviderRequestStub = nil
	fake.addClientIDToOpenIDConnectProviderRequestReturns = struct {
		result1 *request.Request
		result2 *iam.AddClientIDToOpenIDConnectProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProviderRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.AddClientIDToOpenIDConnectProviderOutput) {
	fake.addClientIDToOpenIDConnectProviderRequestMutex.Lock()
	defer fake.addClientIDToOpenIDConnectProviderRequestMutex.Unlock()
	fake.AddClientIDToOpenIDConnectProviderRequestStub = nil
	if fake.addClientIDToOpenIDConnectProviderRequestReturnsOnCall == nil {
		fake.addClientIDToOpenIDConnectProviderRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.AddClientIDToOpenIDConnectProviderOutput
		})
	}
	fake.addClientIDToOpenIDConnectProviderRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.AddClientIDToOpenIDConnectProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProviderWithContext(arg1 context.Context, arg2 *iam.AddClientIDToOpenIDConnectProviderInput, arg3 ...request.Option) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	fake.addClientIDToOpenIDConnectProviderWithContextMutex.Lock()
	ret, specificReturn := fake.addClientIDToOpenIDConnectProviderWithContextReturnsOnCall[len(fake.addClientIDToOpenIDConnectProviderWithContextArgsForCall)]
	fake.addClientIDToOpenIDConnectProviderWithContextArgsForCall = append(fake.addClientIDToOpenIDConnectProviderWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.AddClientIDToOpenIDConnectProviderInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AddClientIDToOpenIDConnectProviderWithContext", []interface{}{arg1, arg2, arg3})
	fake.addClientIDToOpenIDConnectProviderWithContextMutex.Unlock()
	if fake.AddClientIDToOpenIDConnectProviderWithContextStub != nil {
		return fake.AddClientIDToOpenIDConnectProviderWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addClientIDToOpenIDConnectProviderWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProviderWithContextCallCount() int {
	fake.addClientIDToOpenIDConnectProviderWithContextMutex.RLock()
	defer fake.addClientIDToOpenIDConnectProviderWithContextMutex.RUnlock()
	return len(fake.addClientIDToOpenIDConnectProviderWithContextArgsForCall)
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProviderWithContextCalls(stub func(context.Context, *iam.AddClientIDToOpenIDConnectProviderInput, ...request.Option) (*iam.AddClientIDToOpenIDConnectProviderOutput, error)) {
	fake.addClientIDToOpenIDConnectProviderWithContextMutex.Lock()
	defer fake.addClientIDToOpenIDConnectProviderWithContextMutex.Unlock()
	fake.AddClientIDToOpenIDConnectProviderWithContextStub = stub
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProviderWithContextArgsForCall(i int) (context.Context, *iam.AddClientIDToOpenIDConnectProviderInput, []request.Option) {
	fake.addClientIDToOpenIDConnectProviderWithContextMutex.RLock()
	defer fake.addClientIDToOpenIDConnectProviderWithContextMutex.RUnlock()
	argsForCall := fake.addClientIDToOpenIDConnectProviderWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProviderWithContextReturns(result1 *iam.AddClientIDToOpenIDConnectProviderOutput, result2 error) {
	fake.addClientIDToOpenIDConnectProviderWithContextMutex.Lock()
	defer fake.addClientIDToOpenIDConnectProviderWithContextMutex.Unlock()
	fake.AddClientIDToOpenIDConnectProviderWithContextStub = nil
	fake.addClientIDToOpenIDConnectProviderWithContextReturns = struct {
		result1 *iam.AddClientIDToOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AddClientIDToOpenIDConnectProviderWithContextReturnsOnCall(i int, result1 *iam.AddClientIDToOpenIDConnectProviderOutput, result2 error) {
	fake.addClientIDToOpenIDConnectProviderWithContextMutex.Lock()
	defer fake.addClientIDToOpenIDConnectProviderWithContextMutex.Unlock()
	fake.AddClientIDToOpenIDConnectProviderWithContextStub = nil
	if fake.addClientIDToOpenIDConnectProviderWithContextReturnsOnCall == nil {
		fake.addClientIDToOpenIDConnectProviderWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.AddClientIDToOpenIDConnectProviderOutput
			result2 error
		})
	}
	fake.addClientIDToOpenIDConnectProviderWithContextReturnsOnCall[i] = struct {
		result1 *iam.AddClientIDToOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfile(arg1 *iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error) {
	fake.addRoleToInstanceProfileMutex.Lock()
	ret, specificReturn := fake.addRoleToInstanceProfileReturnsOnCall[len(fake.addRoleToInstanceProfileArgsForCall)]
	fake.addRoleToInstanceProfileArgsForCall = append(fake.addRoleToInstanceProfileArgsForCall, struct {
		arg1 *iam.AddRoleToInstanceProfileInput
	}{arg1})
	fake.recordInvocation("AddRoleToInstanceProfile", []interface{}{arg1})
	fake.addRoleToInstanceProfileMutex.Unlock()
	if fake.AddRoleToInstanceProfileStub != nil {
		return fake.AddRoleToInstanceProfileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addRoleToInstanceProfileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfileCallCount() int {
	fake.addRoleToInstanceProfileMutex.RLock()
	defer fake.addRoleToInstanceProfileMutex.RUnlock()
	return len(fake.addRoleToInstanceProfileArgsForCall)
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfileCalls(stub func(*iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error)) {
	fake.addRoleToInstanceProfileMutex.Lock()
	defer fake.addRoleToInstanceProfileMutex.Unlock()
	fake.AddRoleToInstanceProfileStub = stub
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfileArgsForCall(i int) *iam.AddRoleToInstanceProfileInput {
	fake.addRoleToInstanceProfileMutex.RLock()
	defer fake.addRoleToInstanceProfileMutex.RUnlock()
	argsForCall := fake.addRoleToInstanceProfileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfileReturns(result1 *iam.AddRoleToInstanceProfileOutput, result2 error) {
	fake.addRoleToInstanceProfileMutex.Lock()
	defer fake.addRoleToInstanceProfileMutex.Unlock()
	fake.AddRoleToInstanceProfileStub = nil
	fake.addRoleToInstanceProfileReturns = struct {
		result1 *iam.AddRoleToInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfileReturnsOnCall(i int, result1 *iam.AddRoleToInstanceProfileOutput, result2 error) {
	fake.addRoleToInstanceProfileMutex.Lock()
	defer fake.addRoleToInstanceProfileMutex.Unlock()
	fake.AddRoleToInstanceProfileStub = nil
	if fake.addRoleToInstanceProfileReturnsOnCall == nil {
		fake.addRoleToInstanceProfileReturnsOnCall = make(map[int]struct {
			result1 *iam.AddRoleToInstanceProfileOutput
			result2 error
		})
	}
	fake.addRoleToInstanceProfileReturnsOnCall[i] = struct {
		result1 *iam.AddRoleToInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfileRequest(arg1 *iam.AddRoleToInstanceProfileInput) (*request.Request, *iam.AddRoleToInstanceProfileOutput) {
	fake.addRoleToInstanceProfileRequestMutex.Lock()
	ret, specificReturn := fake.addRoleToInstanceProfileRequestReturnsOnCall[len(fake.addRoleToInstanceProfileRequestArgsForCall)]
	fake.addRoleToInstanceProfileRequestArgsForCall = append(fake.addRoleToInstanceProfileRequestArgsForCall, struct {
		arg1 *iam.AddRoleToInstanceProfileInput
	}{arg1})
	fake.recordInvocation("AddRoleToInstanceProfileRequest", []interface{}{arg1})
	fake.addRoleToInstanceProfileRequestMutex.Unlock()
	if fake.AddRoleToInstanceProfileRequestStub != nil {
		return fake.AddRoleToInstanceProfileRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addRoleToInstanceProfileRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfileRequestCallCount() int {
	fake.addRoleToInstanceProfileRequestMutex.RLock()
	defer fake.addRoleToInstanceProfileRequestMutex.RUnlock()
	return len(fake.addRoleToInstanceProfileRequestArgsForCall)
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfileRequestCalls(stub func(*iam.AddRoleToInstanceProfileInput) (*request.Request, *iam.AddRoleToInstanceProfileOutput)) {
	fake.addRoleToInstanceProfileRequestMutex.Lock()
	defer fake.addRoleToInstanceProfileRequestMutex.Unlock()
	fake.AddRoleToInstanceProfileRequestStub = stub
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfileRequestArgsForCall(i int) *iam.AddRoleToInstanceProfileInput {
	fake.addRoleToInstanceProfileRequestMutex.RLock()
	defer fake.addRoleToInstanceProfileRequestMutex.RUnlock()
	argsForCall := fake.addRoleToInstanceProfileRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfileRequestReturns(result1 *request.Request, result2 *iam.AddRoleToInstanceProfileOutput) {
	fake.addRoleToInstanceProfileRequestMutex.Lock()
	defer fake.addRoleToInstanceProfileRequestMutex.Unlock()
	fake.AddRoleToInstanceProfileRequestStub = nil
	fake.addRoleToInstanceProfileRequestReturns = struct {
		result1 *request.Request
		result2 *iam.AddRoleToInstanceProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfileRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.AddRoleToInstanceProfileOutput) {
	fake.addRoleToInstanceProfileRequestMutex.Lock()
	defer fake.addRoleToInstanceProfileRequestMutex.Unlock()
	fake.AddRoleToInstanceProfileRequestStub = nil
	if fake.addRoleToInstanceProfileRequestReturnsOnCall == nil {
		fake.addRoleToInstanceProfileRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.AddRoleToInstanceProfileOutput
		})
	}
	fake.addRoleToInstanceProfileRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.AddRoleToInstanceProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfileWithContext(arg1 context.Context, arg2 *iam.AddRoleToInstanceProfileInput, arg3 ...request.Option) (*iam.AddRoleToInstanceProfileOutput, error) {
	fake.addRoleToInstanceProfileWithContextMutex.Lock()
	ret, specificReturn := fake.addRoleToInstanceProfileWithContextReturnsOnCall[len(fake.addRoleToInstanceProfileWithContextArgsForCall)]
	fake.addRoleToInstanceProfileWithContextArgsForCall = append(fake.addRoleToInstanceProfileWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.AddRoleToInstanceProfileInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AddRoleToInstanceProfileWithContext", []interface{}{arg1, arg2, arg3})
	fake.addRoleToInstanceProfileWithContextMutex.Unlock()
	if fake.AddRoleToInstanceProfileWithContextStub != nil {
		return fake.AddRoleToInstanceProfileWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addRoleToInstanceProfileWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfileWithContextCallCount() int {
	fake.addRoleToInstanceProfileWithContextMutex.RLock()
	defer fake.addRoleToInstanceProfileWithContextMutex.RUnlock()
	return len(fake.addRoleToInstanceProfileWithContextArgsForCall)
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfileWithContextCalls(stub func(context.Context, *iam.AddRoleToInstanceProfileInput, ...request.Option) (*iam.AddRoleToInstanceProfileOutput, error)) {
	fake.addRoleToInstanceProfileWithContextMutex.Lock()
	defer fake.addRoleToInstanceProfileWithContextMutex.Unlock()
	fake.AddRoleToInstanceProfileWithContextStub = stub
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfileWithContextArgsForCall(i int) (context.Context, *iam.AddRoleToInstanceProfileInput, []request.Option) {
	fake.addRoleToInstanceProfileWithContextMutex.RLock()
	defer fake.addRoleToInstanceProfileWithContextMutex.RUnlock()
	argsForCall := fake.addRoleToInstanceProfileWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfileWithContextReturns(result1 *iam.AddRoleToInstanceProfileOutput, result2 error) {
	fake.addRoleToInstanceProfileWithContextMutex.Lock()
	defer fake.addRoleToInstanceProfileWithContextMutex.Unlock()
	fake.AddRoleToInstanceProfileWithContextStub = nil
	fake.addRoleToInstanceProfileWithContextReturns = struct {
		result1 *iam.AddRoleToInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AddRoleToInstanceProfileWithContextReturnsOnCall(i int, result1 *iam.AddRoleToInstanceProfileOutput, result2 error) {
	fake.addRoleToInstanceProfileWithContextMutex.Lock()
	defer fake.addRoleToInstanceProfileWithContextMutex.Unlock()
	fake.AddRoleToInstanceProfileWithContextStub = nil
	if fake.addRoleToInstanceProfileWithContextReturnsOnCall == nil {
		fake.addRoleToInstanceProfileWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.AddRoleToInstanceProfileOutput
			result2 error
		})
	}
	fake.addRoleToInstanceProfileWithContextReturnsOnCall[i] = struct {
		result1 *iam.AddRoleToInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AddUserToGroup(arg1 *iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error) {
	fake.addUserToGroupMutex.Lock()
	ret, specificReturn := fake.addUserToGroupReturnsOnCall[len(fake.addUserToGroupArgsForCall)]
	fake.addUserToGroupArgsForCall = append(fake.addUserToGroupArgsForCall, struct {
		arg1 *iam.AddUserToGroupInput
	}{arg1})
	fake.recordInvocation("AddUserToGroup", []interface{}{arg1})
	fake.addUserToGroupMutex.Unlock()
	if fake.AddUserToGroupStub != nil {
		return fake.AddUserToGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addUserToGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AddUserToGroupCallCount() int {
	fake.addUserToGroupMutex.RLock()
	defer fake.addUserToGroupMutex.RUnlock()
	return len(fake.addUserToGroupArgsForCall)
}

func (fake *FakeIAMAPI) AddUserToGroupCalls(stub func(*iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error)) {
	fake.addUserToGroupMutex.Lock()
	defer fake.addUserToGroupMutex.Unlock()
	fake.AddUserToGroupStub = stub
}

func (fake *FakeIAMAPI) AddUserToGroupArgsForCall(i int) *iam.AddUserToGroupInput {
	fake.addUserToGroupMutex.RLock()
	defer fake.addUserToGroupMutex.RUnlock()
	argsForCall := fake.addUserToGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) AddUserToGroupReturns(result1 *iam.AddUserToGroupOutput, result2 error) {
	fake.addUserToGroupMutex.Lock()
	defer fake.addUserToGroupMutex.Unlock()
	fake.AddUserToGroupStub = nil
	fake.addUserToGroupReturns = struct {
		result1 *iam.AddUserToGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AddUserToGroupReturnsOnCall(i int, result1 *iam.AddUserToGroupOutput, result2 error) {
	fake.addUserToGroupMutex.Lock()
	defer fake.addUserToGroupMutex.Unlock()
	fake.AddUserToGroupStub = nil
	if fake.addUserToGroupReturnsOnCall == nil {
		fake.addUserToGroupReturnsOnCall = make(map[int]struct {
			result1 *iam.AddUserToGroupOutput
			result2 error
		})
	}
	fake.addUserToGroupReturnsOnCall[i] = struct {
		result1 *iam.AddUserToGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AddUserToGroupRequest(arg1 *iam.AddUserToGroupInput) (*request.Request, *iam.AddUserToGroupOutput) {
	fake.addUserToGroupRequestMutex.Lock()
	ret, specificReturn := fake.addUserToGroupRequestReturnsOnCall[len(fake.addUserToGroupRequestArgsForCall)]
	fake.addUserToGroupRequestArgsForCall = append(fake.addUserToGroupRequestArgsForCall, struct {
		arg1 *iam.AddUserToGroupInput
	}{arg1})
	fake.recordInvocation("AddUserToGroupRequest", []interface{}{arg1})
	fake.addUserToGroupRequestMutex.Unlock()
	if fake.AddUserToGroupRequestStub != nil {
		return fake.AddUserToGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addUserToGroupRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AddUserToGroupRequestCallCount() int {
	fake.addUserToGroupRequestMutex.RLock()
	defer fake.addUserToGroupRequestMutex.RUnlock()
	return len(fake.addUserToGroupRequestArgsForCall)
}

func (fake *FakeIAMAPI) AddUserToGroupRequestCalls(stub func(*iam.AddUserToGroupInput) (*request.Request, *iam.AddUserToGroupOutput)) {
	fake.addUserToGroupRequestMutex.Lock()
	defer fake.addUserToGroupRequestMutex.Unlock()
	fake.AddUserToGroupRequestStub = stub
}

func (fake *FakeIAMAPI) AddUserToGroupRequestArgsForCall(i int) *iam.AddUserToGroupInput {
	fake.addUserToGroupRequestMutex.RLock()
	defer fake.addUserToGroupRequestMutex.RUnlock()
	argsForCall := fake.addUserToGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) AddUserToGroupRequestReturns(result1 *request.Request, result2 *iam.AddUserToGroupOutput) {
	fake.addUserToGroupRequestMutex.Lock()
	defer fake.addUserToGroupRequestMutex.Unlock()
	fake.AddUserToGroupRequestStub = nil
	fake.addUserToGroupRequestReturns = struct {
		result1 *request.Request
		result2 *iam.AddUserToGroupOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) AddUserToGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.AddUserToGroupOutput) {
	fake.addUserToGroupRequestMutex.Lock()
	defer fake.addUserToGroupRequestMutex.Unlock()
	fake.AddUserToGroupRequestStub = nil
	if fake.addUserToGroupRequestReturnsOnCall == nil {
		fake.addUserToGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.AddUserToGroupOutput
		})
	}
	fake.addUserToGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.AddUserToGroupOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) AddUserToGroupWithContext(arg1 context.Context, arg2 *iam.AddUserToGroupInput, arg3 ...request.Option) (*iam.AddUserToGroupOutput, error) {
	fake.addUserToGroupWithContextMutex.Lock()
	ret, specificReturn := fake.addUserToGroupWithContextReturnsOnCall[len(fake.addUserToGroupWithContextArgsForCall)]
	fake.addUserToGroupWithContextArgsForCall = append(fake.addUserToGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.AddUserToGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AddUserToGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.addUserToGroupWithContextMutex.Unlock()
	if fake.AddUserToGroupWithContextStub != nil {
		return fake.AddUserToGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addUserToGroupWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AddUserToGroupWithContextCallCount() int {
	fake.addUserToGroupWithContextMutex.RLock()
	defer fake.addUserToGroupWithContextMutex.RUnlock()
	return len(fake.addUserToGroupWithContextArgsForCall)
}

func (fake *FakeIAMAPI) AddUserToGroupWithContextCalls(stub func(context.Context, *iam.AddUserToGroupInput, ...request.Option) (*iam.AddUserToGroupOutput, error)) {
	fake.addUserToGroupWithContextMutex.Lock()
	defer fake.addUserToGroupWithContextMutex.Unlock()
	fake.AddUserToGroupWithContextStub = stub
}

func (fake *FakeIAMAPI) AddUserToGroupWithContextArgsForCall(i int) (context.Context, *iam.AddUserToGroupInput, []request.Option) {
	fake.addUserToGroupWithContextMutex.RLock()
	defer fake.addUserToGroupWithContextMutex.RUnlock()
	argsForCall := fake.addUserToGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) AddUserToGroupWithContextReturns(result1 *iam.AddUserToGroupOutput, result2 error) {
	fake.addUserToGroupWithContextMutex.Lock()
	defer fake.addUserToGroupWithContextMutex.Unlock()
	fake.AddUserToGroupWithContextStub = nil
	fake.addUserToGroupWithContextReturns = struct {
		result1 *iam.AddUserToGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AddUserToGroupWithContextReturnsOnCall(i int, result1 *iam.AddUserToGroupOutput, result2 error) {
	fake.addUserToGroupWithContextMutex.Lock()
	defer fake.addUserToGroupWithContextMutex.Unlock()
	fake.AddUserToGroupWithContextStub = nil
	if fake.addUserToGroupWithContextReturnsOnCall == nil {
		fake.addUserToGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.AddUserToGroupOutput
			result2 error
		})
	}
	fake.addUserToGroupWithContextReturnsOnCall[i] = struct {
		result1 *iam.AddUserToGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachGroupPolicy(arg1 *iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error) {
	fake.attachGroupPolicyMutex.Lock()
	ret, specificReturn := fake.attachGroupPolicyReturnsOnCall[len(fake.attachGroupPolicyArgsForCall)]
	fake.attachGroupPolicyArgsForCall = append(fake.attachGroupPolicyArgsForCall, struct {
		arg1 *iam.AttachGroupPolicyInput
	}{arg1})
	fake.recordInvocation("AttachGroupPolicy", []interface{}{arg1})
	fake.attachGroupPolicyMutex.Unlock()
	if fake.AttachGroupPolicyStub != nil {
		return fake.AttachGroupPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachGroupPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AttachGroupPolicyCallCount() int {
	fake.attachGroupPolicyMutex.RLock()
	defer fake.attachGroupPolicyMutex.RUnlock()
	return len(fake.attachGroupPolicyArgsForCall)
}

func (fake *FakeIAMAPI) AttachGroupPolicyCalls(stub func(*iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error)) {
	fake.attachGroupPolicyMutex.Lock()
	defer fake.attachGroupPolicyMutex.Unlock()
	fake.AttachGroupPolicyStub = stub
}

func (fake *FakeIAMAPI) AttachGroupPolicyArgsForCall(i int) *iam.AttachGroupPolicyInput {
	fake.attachGroupPolicyMutex.RLock()
	defer fake.attachGroupPolicyMutex.RUnlock()
	argsForCall := fake.attachGroupPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) AttachGroupPolicyReturns(result1 *iam.AttachGroupPolicyOutput, result2 error) {
	fake.attachGroupPolicyMutex.Lock()
	defer fake.attachGroupPolicyMutex.Unlock()
	fake.AttachGroupPolicyStub = nil
	fake.attachGroupPolicyReturns = struct {
		result1 *iam.AttachGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachGroupPolicyReturnsOnCall(i int, result1 *iam.AttachGroupPolicyOutput, result2 error) {
	fake.attachGroupPolicyMutex.Lock()
	defer fake.attachGroupPolicyMutex.Unlock()
	fake.AttachGroupPolicyStub = nil
	if fake.attachGroupPolicyReturnsOnCall == nil {
		fake.attachGroupPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.AttachGroupPolicyOutput
			result2 error
		})
	}
	fake.attachGroupPolicyReturnsOnCall[i] = struct {
		result1 *iam.AttachGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachGroupPolicyRequest(arg1 *iam.AttachGroupPolicyInput) (*request.Request, *iam.AttachGroupPolicyOutput) {
	fake.attachGroupPolicyRequestMutex.Lock()
	ret, specificReturn := fake.attachGroupPolicyRequestReturnsOnCall[len(fake.attachGroupPolicyRequestArgsForCall)]
	fake.attachGroupPolicyRequestArgsForCall = append(fake.attachGroupPolicyRequestArgsForCall, struct {
		arg1 *iam.AttachGroupPolicyInput
	}{arg1})
	fake.recordInvocation("AttachGroupPolicyRequest", []interface{}{arg1})
	fake.attachGroupPolicyRequestMutex.Unlock()
	if fake.AttachGroupPolicyRequestStub != nil {
		return fake.AttachGroupPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachGroupPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AttachGroupPolicyRequestCallCount() int {
	fake.attachGroupPolicyRequestMutex.RLock()
	defer fake.attachGroupPolicyRequestMutex.RUnlock()
	return len(fake.attachGroupPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) AttachGroupPolicyRequestCalls(stub func(*iam.AttachGroupPolicyInput) (*request.Request, *iam.AttachGroupPolicyOutput)) {
	fake.attachGroupPolicyRequestMutex.Lock()
	defer fake.attachGroupPolicyRequestMutex.Unlock()
	fake.AttachGroupPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) AttachGroupPolicyRequestArgsForCall(i int) *iam.AttachGroupPolicyInput {
	fake.attachGroupPolicyRequestMutex.RLock()
	defer fake.attachGroupPolicyRequestMutex.RUnlock()
	argsForCall := fake.attachGroupPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) AttachGroupPolicyRequestReturns(result1 *request.Request, result2 *iam.AttachGroupPolicyOutput) {
	fake.attachGroupPolicyRequestMutex.Lock()
	defer fake.attachGroupPolicyRequestMutex.Unlock()
	fake.AttachGroupPolicyRequestStub = nil
	fake.attachGroupPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.AttachGroupPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachGroupPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.AttachGroupPolicyOutput) {
	fake.attachGroupPolicyRequestMutex.Lock()
	defer fake.attachGroupPolicyRequestMutex.Unlock()
	fake.AttachGroupPolicyRequestStub = nil
	if fake.attachGroupPolicyRequestReturnsOnCall == nil {
		fake.attachGroupPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.AttachGroupPolicyOutput
		})
	}
	fake.attachGroupPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.AttachGroupPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachGroupPolicyWithContext(arg1 context.Context, arg2 *iam.AttachGroupPolicyInput, arg3 ...request.Option) (*iam.AttachGroupPolicyOutput, error) {
	fake.attachGroupPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.attachGroupPolicyWithContextReturnsOnCall[len(fake.attachGroupPolicyWithContextArgsForCall)]
	fake.attachGroupPolicyWithContextArgsForCall = append(fake.attachGroupPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.AttachGroupPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AttachGroupPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.attachGroupPolicyWithContextMutex.Unlock()
	if fake.AttachGroupPolicyWithContextStub != nil {
		return fake.AttachGroupPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachGroupPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AttachGroupPolicyWithContextCallCount() int {
	fake.attachGroupPolicyWithContextMutex.RLock()
	defer fake.attachGroupPolicyWithContextMutex.RUnlock()
	return len(fake.attachGroupPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) AttachGroupPolicyWithContextCalls(stub func(context.Context, *iam.AttachGroupPolicyInput, ...request.Option) (*iam.AttachGroupPolicyOutput, error)) {
	fake.attachGroupPolicyWithContextMutex.Lock()
	defer fake.attachGroupPolicyWithContextMutex.Unlock()
	fake.AttachGroupPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) AttachGroupPolicyWithContextArgsForCall(i int) (context.Context, *iam.AttachGroupPolicyInput, []request.Option) {
	fake.attachGroupPolicyWithContextMutex.RLock()
	defer fake.attachGroupPolicyWithContextMutex.RUnlock()
	argsForCall := fake.attachGroupPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) AttachGroupPolicyWithContextReturns(result1 *iam.AttachGroupPolicyOutput, result2 error) {
	fake.attachGroupPolicyWithContextMutex.Lock()
	defer fake.attachGroupPolicyWithContextMutex.Unlock()
	fake.AttachGroupPolicyWithContextStub = nil
	fake.attachGroupPolicyWithContextReturns = struct {
		result1 *iam.AttachGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachGroupPolicyWithContextReturnsOnCall(i int, result1 *iam.AttachGroupPolicyOutput, result2 error) {
	fake.attachGroupPolicyWithContextMutex.Lock()
	defer fake.attachGroupPolicyWithContextMutex.Unlock()
	fake.AttachGroupPolicyWithContextStub = nil
	if fake.attachGroupPolicyWithContextReturnsOnCall == nil {
		fake.attachGroupPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.AttachGroupPolicyOutput
			result2 error
		})
	}
	fake.attachGroupPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.AttachGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachRolePolicy(arg1 *iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error) {
	fake.attachRolePolicyMutex.Lock()
	ret, specificReturn := fake.attachRolePolicyReturnsOnCall[len(fake.attachRolePolicyArgsForCall)]
	fake.attachRolePolicyArgsForCall = append(fake.attachRolePolicyArgsForCall, struct {
		arg1 *iam.AttachRolePolicyInput
	}{arg1})
	fake.recordInvocation("AttachRolePolicy", []interface{}{arg1})
	fake.attachRolePolicyMutex.Unlock()
	if fake.AttachRolePolicyStub != nil {
		return fake.AttachRolePolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachRolePolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AttachRolePolicyCallCount() int {
	fake.attachRolePolicyMutex.RLock()
	defer fake.attachRolePolicyMutex.RUnlock()
	return len(fake.attachRolePolicyArgsForCall)
}

func (fake *FakeIAMAPI) AttachRolePolicyCalls(stub func(*iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error)) {
	fake.attachRolePolicyMutex.Lock()
	defer fake.attachRolePolicyMutex.Unlock()
	fake.AttachRolePolicyStub = stub
}

func (fake *FakeIAMAPI) AttachRolePolicyArgsForCall(i int) *iam.AttachRolePolicyInput {
	fake.attachRolePolicyMutex.RLock()
	defer fake.attachRolePolicyMutex.RUnlock()
	argsForCall := fake.attachRolePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) AttachRolePolicyReturns(result1 *iam.AttachRolePolicyOutput, result2 error) {
	fake.attachRolePolicyMutex.Lock()
	defer fake.attachRolePolicyMutex.Unlock()
	fake.AttachRolePolicyStub = nil
	fake.attachRolePolicyReturns = struct {
		result1 *iam.AttachRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachRolePolicyReturnsOnCall(i int, result1 *iam.AttachRolePolicyOutput, result2 error) {
	fake.attachRolePolicyMutex.Lock()
	defer fake.attachRolePolicyMutex.Unlock()
	fake.AttachRolePolicyStub = nil
	if fake.attachRolePolicyReturnsOnCall == nil {
		fake.attachRolePolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.AttachRolePolicyOutput
			result2 error
		})
	}
	fake.attachRolePolicyReturnsOnCall[i] = struct {
		result1 *iam.AttachRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachRolePolicyRequest(arg1 *iam.AttachRolePolicyInput) (*request.Request, *iam.AttachRolePolicyOutput) {
	fake.attachRolePolicyRequestMutex.Lock()
	ret, specificReturn := fake.attachRolePolicyRequestReturnsOnCall[len(fake.attachRolePolicyRequestArgsForCall)]
	fake.attachRolePolicyRequestArgsForCall = append(fake.attachRolePolicyRequestArgsForCall, struct {
		arg1 *iam.AttachRolePolicyInput
	}{arg1})
	fake.recordInvocation("AttachRolePolicyRequest", []interface{}{arg1})
	fake.attachRolePolicyRequestMutex.Unlock()
	if fake.AttachRolePolicyRequestStub != nil {
		return fake.AttachRolePolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachRolePolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AttachRolePolicyRequestCallCount() int {
	fake.attachRolePolicyRequestMutex.RLock()
	defer fake.attachRolePolicyRequestMutex.RUnlock()
	return len(fake.attachRolePolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) AttachRolePolicyRequestCalls(stub func(*iam.AttachRolePolicyInput) (*request.Request, *iam.AttachRolePolicyOutput)) {
	fake.attachRolePolicyRequestMutex.Lock()
	defer fake.attachRolePolicyRequestMutex.Unlock()
	fake.AttachRolePolicyRequestStub = stub
}

func (fake *FakeIAMAPI) AttachRolePolicyRequestArgsForCall(i int) *iam.AttachRolePolicyInput {
	fake.attachRolePolicyRequestMutex.RLock()
	defer fake.attachRolePolicyRequestMutex.RUnlock()
	argsForCall := fake.attachRolePolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) AttachRolePolicyRequestReturns(result1 *request.Request, result2 *iam.AttachRolePolicyOutput) {
	fake.attachRolePolicyRequestMutex.Lock()
	defer fake.attachRolePolicyRequestMutex.Unlock()
	fake.AttachRolePolicyRequestStub = nil
	fake.attachRolePolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.AttachRolePolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachRolePolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.AttachRolePolicyOutput) {
	fake.attachRolePolicyRequestMutex.Lock()
	defer fake.attachRolePolicyRequestMutex.Unlock()
	fake.AttachRolePolicyRequestStub = nil
	if fake.attachRolePolicyRequestReturnsOnCall == nil {
		fake.attachRolePolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.AttachRolePolicyOutput
		})
	}
	fake.attachRolePolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.AttachRolePolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachRolePolicyWithContext(arg1 context.Context, arg2 *iam.AttachRolePolicyInput, arg3 ...request.Option) (*iam.AttachRolePolicyOutput, error) {
	fake.attachRolePolicyWithContextMutex.Lock()
	ret, specificReturn := fake.attachRolePolicyWithContextReturnsOnCall[len(fake.attachRolePolicyWithContextArgsForCall)]
	fake.attachRolePolicyWithContextArgsForCall = append(fake.attachRolePolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.AttachRolePolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AttachRolePolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.attachRolePolicyWithContextMutex.Unlock()
	if fake.AttachRolePolicyWithContextStub != nil {
		return fake.AttachRolePolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachRolePolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AttachRolePolicyWithContextCallCount() int {
	fake.attachRolePolicyWithContextMutex.RLock()
	defer fake.attachRolePolicyWithContextMutex.RUnlock()
	return len(fake.attachRolePolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) AttachRolePolicyWithContextCalls(stub func(context.Context, *iam.AttachRolePolicyInput, ...request.Option) (*iam.AttachRolePolicyOutput, error)) {
	fake.attachRolePolicyWithContextMutex.Lock()
	defer fake.attachRolePolicyWithContextMutex.Unlock()
	fake.AttachRolePolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) AttachRolePolicyWithContextArgsForCall(i int) (context.Context, *iam.AttachRolePolicyInput, []request.Option) {
	fake.attachRolePolicyWithContextMutex.RLock()
	defer fake.attachRolePolicyWithContextMutex.RUnlock()
	argsForCall := fake.attachRolePolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) AttachRolePolicyWithContextReturns(result1 *iam.AttachRolePolicyOutput, result2 error) {
	fake.attachRolePolicyWithContextMutex.Lock()
	defer fake.attachRolePolicyWithContextMutex.Unlock()
	fake.AttachRolePolicyWithContextStub = nil
	fake.attachRolePolicyWithContextReturns = struct {
		result1 *iam.AttachRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachRolePolicyWithContextReturnsOnCall(i int, result1 *iam.AttachRolePolicyOutput, result2 error) {
	fake.attachRolePolicyWithContextMutex.Lock()
	defer fake.attachRolePolicyWithContextMutex.Unlock()
	fake.AttachRolePolicyWithContextStub = nil
	if fake.attachRolePolicyWithContextReturnsOnCall == nil {
		fake.attachRolePolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.AttachRolePolicyOutput
			result2 error
		})
	}
	fake.attachRolePolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.AttachRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachUserPolicy(arg1 *iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error) {
	fake.attachUserPolicyMutex.Lock()
	ret, specificReturn := fake.attachUserPolicyReturnsOnCall[len(fake.attachUserPolicyArgsForCall)]
	fake.attachUserPolicyArgsForCall = append(fake.attachUserPolicyArgsForCall, struct {
		arg1 *iam.AttachUserPolicyInput
	}{arg1})
	fake.recordInvocation("AttachUserPolicy", []interface{}{arg1})
	fake.attachUserPolicyMutex.Unlock()
	if fake.AttachUserPolicyStub != nil {
		return fake.AttachUserPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachUserPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AttachUserPolicyCallCount() int {
	fake.attachUserPolicyMutex.RLock()
	defer fake.attachUserPolicyMutex.RUnlock()
	return len(fake.attachUserPolicyArgsForCall)
}

func (fake *FakeIAMAPI) AttachUserPolicyCalls(stub func(*iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error)) {
	fake.attachUserPolicyMutex.Lock()
	defer fake.attachUserPolicyMutex.Unlock()
	fake.AttachUserPolicyStub = stub
}

func (fake *FakeIAMAPI) AttachUserPolicyArgsForCall(i int) *iam.AttachUserPolicyInput {
	fake.attachUserPolicyMutex.RLock()
	defer fake.attachUserPolicyMutex.RUnlock()
	argsForCall := fake.attachUserPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) AttachUserPolicyReturns(result1 *iam.AttachUserPolicyOutput, result2 error) {
	fake.attachUserPolicyMutex.Lock()
	defer fake.attachUserPolicyMutex.Unlock()
	fake.AttachUserPolicyStub = nil
	fake.attachUserPolicyReturns = struct {
		result1 *iam.AttachUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachUserPolicyReturnsOnCall(i int, result1 *iam.AttachUserPolicyOutput, result2 error) {
	fake.attachUserPolicyMutex.Lock()
	defer fake.attachUserPolicyMutex.Unlock()
	fake.AttachUserPolicyStub = nil
	if fake.attachUserPolicyReturnsOnCall == nil {
		fake.attachUserPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.AttachUserPolicyOutput
			result2 error
		})
	}
	fake.attachUserPolicyReturnsOnCall[i] = struct {
		result1 *iam.AttachUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachUserPolicyRequest(arg1 *iam.AttachUserPolicyInput) (*request.Request, *iam.AttachUserPolicyOutput) {
	fake.attachUserPolicyRequestMutex.Lock()
	ret, specificReturn := fake.attachUserPolicyRequestReturnsOnCall[len(fake.attachUserPolicyRequestArgsForCall)]
	fake.attachUserPolicyRequestArgsForCall = append(fake.attachUserPolicyRequestArgsForCall, struct {
		arg1 *iam.AttachUserPolicyInput
	}{arg1})
	fake.recordInvocation("AttachUserPolicyRequest", []interface{}{arg1})
	fake.attachUserPolicyRequestMutex.Unlock()
	if fake.AttachUserPolicyRequestStub != nil {
		return fake.AttachUserPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachUserPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AttachUserPolicyRequestCallCount() int {
	fake.attachUserPolicyRequestMutex.RLock()
	defer fake.attachUserPolicyRequestMutex.RUnlock()
	return len(fake.attachUserPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) AttachUserPolicyRequestCalls(stub func(*iam.AttachUserPolicyInput) (*request.Request, *iam.AttachUserPolicyOutput)) {
	fake.attachUserPolicyRequestMutex.Lock()
	defer fake.attachUserPolicyRequestMutex.Unlock()
	fake.AttachUserPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) AttachUserPolicyRequestArgsForCall(i int) *iam.AttachUserPolicyInput {
	fake.attachUserPolicyRequestMutex.RLock()
	defer fake.attachUserPolicyRequestMutex.RUnlock()
	argsForCall := fake.attachUserPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) AttachUserPolicyRequestReturns(result1 *request.Request, result2 *iam.AttachUserPolicyOutput) {
	fake.attachUserPolicyRequestMutex.Lock()
	defer fake.attachUserPolicyRequestMutex.Unlock()
	fake.AttachUserPolicyRequestStub = nil
	fake.attachUserPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.AttachUserPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachUserPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.AttachUserPolicyOutput) {
	fake.attachUserPolicyRequestMutex.Lock()
	defer fake.attachUserPolicyRequestMutex.Unlock()
	fake.AttachUserPolicyRequestStub = nil
	if fake.attachUserPolicyRequestReturnsOnCall == nil {
		fake.attachUserPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.AttachUserPolicyOutput
		})
	}
	fake.attachUserPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.AttachUserPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachUserPolicyWithContext(arg1 context.Context, arg2 *iam.AttachUserPolicyInput, arg3 ...request.Option) (*iam.AttachUserPolicyOutput, error) {
	fake.attachUserPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.attachUserPolicyWithContextReturnsOnCall[len(fake.attachUserPolicyWithContextArgsForCall)]
	fake.attachUserPolicyWithContextArgsForCall = append(fake.attachUserPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.AttachUserPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AttachUserPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.attachUserPolicyWithContextMutex.Unlock()
	if fake.AttachUserPolicyWithContextStub != nil {
		return fake.AttachUserPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachUserPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) AttachUserPolicyWithContextCallCount() int {
	fake.attachUserPolicyWithContextMutex.RLock()
	defer fake.attachUserPolicyWithContextMutex.RUnlock()
	return len(fake.attachUserPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) AttachUserPolicyWithContextCalls(stub func(context.Context, *iam.AttachUserPolicyInput, ...request.Option) (*iam.AttachUserPolicyOutput, error)) {
	fake.attachUserPolicyWithContextMutex.Lock()
	defer fake.attachUserPolicyWithContextMutex.Unlock()
	fake.AttachUserPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) AttachUserPolicyWithContextArgsForCall(i int) (context.Context, *iam.AttachUserPolicyInput, []request.Option) {
	fake.attachUserPolicyWithContextMutex.RLock()
	defer fake.attachUserPolicyWithContextMutex.RUnlock()
	argsForCall := fake.attachUserPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) AttachUserPolicyWithContextReturns(result1 *iam.AttachUserPolicyOutput, result2 error) {
	fake.attachUserPolicyWithContextMutex.Lock()
	defer fake.attachUserPolicyWithContextMutex.Unlock()
	fake.AttachUserPolicyWithContextStub = nil
	fake.attachUserPolicyWithContextReturns = struct {
		result1 *iam.AttachUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) AttachUserPolicyWithContextReturnsOnCall(i int, result1 *iam.AttachUserPolicyOutput, result2 error) {
	fake.attachUserPolicyWithContextMutex.Lock()
	defer fake.attachUserPolicyWithContextMutex.Unlock()
	fake.AttachUserPolicyWithContextStub = nil
	if fake.attachUserPolicyWithContextReturnsOnCall == nil {
		fake.attachUserPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.AttachUserPolicyOutput
			result2 error
		})
	}
	fake.attachUserPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.AttachUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ChangePassword(arg1 *iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error) {
	fake.changePasswordMutex.Lock()
	ret, specificReturn := fake.changePasswordReturnsOnCall[len(fake.changePasswordArgsForCall)]
	fake.changePasswordArgsForCall = append(fake.changePasswordArgsForCall, struct {
		arg1 *iam.ChangePasswordInput
	}{arg1})
	fake.recordInvocation("ChangePassword", []interface{}{arg1})
	fake.changePasswordMutex.Unlock()
	if fake.ChangePasswordStub != nil {
		return fake.ChangePasswordStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.changePasswordReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ChangePasswordCallCount() int {
	fake.changePasswordMutex.RLock()
	defer fake.changePasswordMutex.RUnlock()
	return len(fake.changePasswordArgsForCall)
}

func (fake *FakeIAMAPI) ChangePasswordCalls(stub func(*iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error)) {
	fake.changePasswordMutex.Lock()
	defer fake.changePasswordMutex.Unlock()
	fake.ChangePasswordStub = stub
}

func (fake *FakeIAMAPI) ChangePasswordArgsForCall(i int) *iam.ChangePasswordInput {
	fake.changePasswordMutex.RLock()
	defer fake.changePasswordMutex.RUnlock()
	argsForCall := fake.changePasswordArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ChangePasswordReturns(result1 *iam.ChangePasswordOutput, result2 error) {
	fake.changePasswordMutex.Lock()
	defer fake.changePasswordMutex.Unlock()
	fake.ChangePasswordStub = nil
	fake.changePasswordReturns = struct {
		result1 *iam.ChangePasswordOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ChangePasswordReturnsOnCall(i int, result1 *iam.ChangePasswordOutput, result2 error) {
	fake.changePasswordMutex.Lock()
	defer fake.changePasswordMutex.Unlock()
	fake.ChangePasswordStub = nil
	if fake.changePasswordReturnsOnCall == nil {
		fake.changePasswordReturnsOnCall = make(map[int]struct {
			result1 *iam.ChangePasswordOutput
			result2 error
		})
	}
	fake.changePasswordReturnsOnCall[i] = struct {
		result1 *iam.ChangePasswordOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ChangePasswordRequest(arg1 *iam.ChangePasswordInput) (*request.Request, *iam.ChangePasswordOutput) {
	fake.changePasswordRequestMutex.Lock()
	ret, specificReturn := fake.changePasswordRequestReturnsOnCall[len(fake.changePasswordRequestArgsForCall)]
	fake.changePasswordRequestArgsForCall = append(fake.changePasswordRequestArgsForCall, struct {
		arg1 *iam.ChangePasswordInput
	}{arg1})
	fake.recordInvocation("ChangePasswordRequest", []interface{}{arg1})
	fake.changePasswordRequestMutex.Unlock()
	if fake.ChangePasswordRequestStub != nil {
		return fake.ChangePasswordRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.changePasswordRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ChangePasswordRequestCallCount() int {
	fake.changePasswordRequestMutex.RLock()
	defer fake.changePasswordRequestMutex.RUnlock()
	return len(fake.changePasswordRequestArgsForCall)
}

func (fake *FakeIAMAPI) ChangePasswordRequestCalls(stub func(*iam.ChangePasswordInput) (*request.Request, *iam.ChangePasswordOutput)) {
	fake.changePasswordRequestMutex.Lock()
	defer fake.changePasswordRequestMutex.Unlock()
	fake.ChangePasswordRequestStub = stub
}

func (fake *FakeIAMAPI) ChangePasswordRequestArgsForCall(i int) *iam.ChangePasswordInput {
	fake.changePasswordRequestMutex.RLock()
	defer fake.changePasswordRequestMutex.RUnlock()
	argsForCall := fake.changePasswordRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ChangePasswordRequestReturns(result1 *request.Request, result2 *iam.ChangePasswordOutput) {
	fake.changePasswordRequestMutex.Lock()
	defer fake.changePasswordRequestMutex.Unlock()
	fake.ChangePasswordRequestStub = nil
	fake.changePasswordRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ChangePasswordOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ChangePasswordRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ChangePasswordOutput) {
	fake.changePasswordRequestMutex.Lock()
	defer fake.changePasswordRequestMutex.Unlock()
	fake.ChangePasswordRequestStub = nil
	if fake.changePasswordRequestReturnsOnCall == nil {
		fake.changePasswordRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ChangePasswordOutput
		})
	}
	fake.changePasswordRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ChangePasswordOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ChangePasswordWithContext(arg1 context.Context, arg2 *iam.ChangePasswordInput, arg3 ...request.Option) (*iam.ChangePasswordOutput, error) {
	fake.changePasswordWithContextMutex.Lock()
	ret, specificReturn := fake.changePasswordWithContextReturnsOnCall[len(fake.changePasswordWithContextArgsForCall)]
	fake.changePasswordWithContextArgsForCall = append(fake.changePasswordWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ChangePasswordInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ChangePasswordWithContext", []interface{}{arg1, arg2, arg3})
	fake.changePasswordWithContextMutex.Unlock()
	if fake.ChangePasswordWithContextStub != nil {
		return fake.ChangePasswordWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.changePasswordWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ChangePasswordWithContextCallCount() int {
	fake.changePasswordWithContextMutex.RLock()
	defer fake.changePasswordWithContextMutex.RUnlock()
	return len(fake.changePasswordWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ChangePasswordWithContextCalls(stub func(context.Context, *iam.ChangePasswordInput, ...request.Option) (*iam.ChangePasswordOutput, error)) {
	fake.changePasswordWithContextMutex.Lock()
	defer fake.changePasswordWithContextMutex.Unlock()
	fake.ChangePasswordWithContextStub = stub
}

func (fake *FakeIAMAPI) ChangePasswordWithContextArgsForCall(i int) (context.Context, *iam.ChangePasswordInput, []request.Option) {
	fake.changePasswordWithContextMutex.RLock()
	defer fake.changePasswordWithContextMutex.RUnlock()
	argsForCall := fake.changePasswordWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ChangePasswordWithContextReturns(result1 *iam.ChangePasswordOutput, result2 error) {
	fake.changePasswordWithContextMutex.Lock()
	defer fake.changePasswordWithContextMutex.Unlock()
	fake.ChangePasswordWithContextStub = nil
	fake.changePasswordWithContextReturns = struct {
		result1 *iam.ChangePasswordOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ChangePasswordWithContextReturnsOnCall(i int, result1 *iam.ChangePasswordOutput, result2 error) {
	fake.changePasswordWithContextMutex.Lock()
	defer fake.changePasswordWithContextMutex.Unlock()
	fake.ChangePasswordWithContextStub = nil
	if fake.changePasswordWithContextReturnsOnCall == nil {
		fake.changePasswordWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ChangePasswordOutput
			result2 error
		})
	}
	fake.changePasswordWithContextReturnsOnCall[i] = struct {
		result1 *iam.ChangePasswordOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateAccessKey(arg1 *iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error) {
	fake.createAccessKeyMutex.Lock()
	ret, specificReturn := fake.createAccessKeyReturnsOnCall[len(fake.createAccessKeyArgsForCall)]
	fake.createAccessKeyArgsForCall = append(fake.createAccessKeyArgsForCall, struct {
		arg1 *iam.CreateAccessKeyInput
	}{arg1})
	fake.recordInvocation("CreateAccessKey", []interface{}{arg1})
	fake.createAccessKeyMutex.Unlock()
	if fake.CreateAccessKeyStub != nil {
		return fake.CreateAccessKeyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createAccessKeyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateAccessKeyCallCount() int {
	fake.createAccessKeyMutex.RLock()
	defer fake.createAccessKeyMutex.RUnlock()
	return len(fake.createAccessKeyArgsForCall)
}

func (fake *FakeIAMAPI) CreateAccessKeyCalls(stub func(*iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error)) {
	fake.createAccessKeyMutex.Lock()
	defer fake.createAccessKeyMutex.Unlock()
	fake.CreateAccessKeyStub = stub
}

func (fake *FakeIAMAPI) CreateAccessKeyArgsForCall(i int) *iam.CreateAccessKeyInput {
	fake.createAccessKeyMutex.RLock()
	defer fake.createAccessKeyMutex.RUnlock()
	argsForCall := fake.createAccessKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateAccessKeyReturns(result1 *iam.CreateAccessKeyOutput, result2 error) {
	fake.createAccessKeyMutex.Lock()
	defer fake.createAccessKeyMutex.Unlock()
	fake.CreateAccessKeyStub = nil
	fake.createAccessKeyReturns = struct {
		result1 *iam.CreateAccessKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateAccessKeyReturnsOnCall(i int, result1 *iam.CreateAccessKeyOutput, result2 error) {
	fake.createAccessKeyMutex.Lock()
	defer fake.createAccessKeyMutex.Unlock()
	fake.CreateAccessKeyStub = nil
	if fake.createAccessKeyReturnsOnCall == nil {
		fake.createAccessKeyReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateAccessKeyOutput
			result2 error
		})
	}
	fake.createAccessKeyReturnsOnCall[i] = struct {
		result1 *iam.CreateAccessKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateAccessKeyRequest(arg1 *iam.CreateAccessKeyInput) (*request.Request, *iam.CreateAccessKeyOutput) {
	fake.createAccessKeyRequestMutex.Lock()
	ret, specificReturn := fake.createAccessKeyRequestReturnsOnCall[len(fake.createAccessKeyRequestArgsForCall)]
	fake.createAccessKeyRequestArgsForCall = append(fake.createAccessKeyRequestArgsForCall, struct {
		arg1 *iam.CreateAccessKeyInput
	}{arg1})
	fake.recordInvocation("CreateAccessKeyRequest", []interface{}{arg1})
	fake.createAccessKeyRequestMutex.Unlock()
	if fake.CreateAccessKeyRequestStub != nil {
		return fake.CreateAccessKeyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createAccessKeyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateAccessKeyRequestCallCount() int {
	fake.createAccessKeyRequestMutex.RLock()
	defer fake.createAccessKeyRequestMutex.RUnlock()
	return len(fake.createAccessKeyRequestArgsForCall)
}

func (fake *FakeIAMAPI) CreateAccessKeyRequestCalls(stub func(*iam.CreateAccessKeyInput) (*request.Request, *iam.CreateAccessKeyOutput)) {
	fake.createAccessKeyRequestMutex.Lock()
	defer fake.createAccessKeyRequestMutex.Unlock()
	fake.CreateAccessKeyRequestStub = stub
}

func (fake *FakeIAMAPI) CreateAccessKeyRequestArgsForCall(i int) *iam.CreateAccessKeyInput {
	fake.createAccessKeyRequestMutex.RLock()
	defer fake.createAccessKeyRequestMutex.RUnlock()
	argsForCall := fake.createAccessKeyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateAccessKeyRequestReturns(result1 *request.Request, result2 *iam.CreateAccessKeyOutput) {
	fake.createAccessKeyRequestMutex.Lock()
	defer fake.createAccessKeyRequestMutex.Unlock()
	fake.CreateAccessKeyRequestStub = nil
	fake.createAccessKeyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.CreateAccessKeyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateAccessKeyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.CreateAccessKeyOutput) {
	fake.createAccessKeyRequestMutex.Lock()
	defer fake.createAccessKeyRequestMutex.Unlock()
	fake.CreateAccessKeyRequestStub = nil
	if fake.createAccessKeyRequestReturnsOnCall == nil {
		fake.createAccessKeyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.CreateAccessKeyOutput
		})
	}
	fake.createAccessKeyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.CreateAccessKeyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateAccessKeyWithContext(arg1 context.Context, arg2 *iam.CreateAccessKeyInput, arg3 ...request.Option) (*iam.CreateAccessKeyOutput, error) {
	fake.createAccessKeyWithContextMutex.Lock()
	ret, specificReturn := fake.createAccessKeyWithContextReturnsOnCall[len(fake.createAccessKeyWithContextArgsForCall)]
	fake.createAccessKeyWithContextArgsForCall = append(fake.createAccessKeyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.CreateAccessKeyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateAccessKeyWithContext", []interface{}{arg1, arg2, arg3})
	fake.createAccessKeyWithContextMutex.Unlock()
	if fake.CreateAccessKeyWithContextStub != nil {
		return fake.CreateAccessKeyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createAccessKeyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateAccessKeyWithContextCallCount() int {
	fake.createAccessKeyWithContextMutex.RLock()
	defer fake.createAccessKeyWithContextMutex.RUnlock()
	return len(fake.createAccessKeyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) CreateAccessKeyWithContextCalls(stub func(context.Context, *iam.CreateAccessKeyInput, ...request.Option) (*iam.CreateAccessKeyOutput, error)) {
	fake.createAccessKeyWithContextMutex.Lock()
	defer fake.createAccessKeyWithContextMutex.Unlock()
	fake.CreateAccessKeyWithContextStub = stub
}

func (fake *FakeIAMAPI) CreateAccessKeyWithContextArgsForCall(i int) (context.Context, *iam.CreateAccessKeyInput, []request.Option) {
	fake.createAccessKeyWithContextMutex.RLock()
	defer fake.createAccessKeyWithContextMutex.RUnlock()
	argsForCall := fake.createAccessKeyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) CreateAccessKeyWithContextReturns(result1 *iam.CreateAccessKeyOutput, result2 error) {
	fake.createAccessKeyWithContextMutex.Lock()
	defer fake.createAccessKeyWithContextMutex.Unlock()
	fake.CreateAccessKeyWithContextStub = nil
	fake.createAccessKeyWithContextReturns = struct {
		result1 *iam.CreateAccessKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateAccessKeyWithContextReturnsOnCall(i int, result1 *iam.CreateAccessKeyOutput, result2 error) {
	fake.createAccessKeyWithContextMutex.Lock()
	defer fake.createAccessKeyWithContextMutex.Unlock()
	fake.CreateAccessKeyWithContextStub = nil
	if fake.createAccessKeyWithContextReturnsOnCall == nil {
		fake.createAccessKeyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateAccessKeyOutput
			result2 error
		})
	}
	fake.createAccessKeyWithContextReturnsOnCall[i] = struct {
		result1 *iam.CreateAccessKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateAccountAlias(arg1 *iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error) {
	fake.createAccountAliasMutex.Lock()
	ret, specificReturn := fake.createAccountAliasReturnsOnCall[len(fake.createAccountAliasArgsForCall)]
	fake.createAccountAliasArgsForCall = append(fake.createAccountAliasArgsForCall, struct {
		arg1 *iam.CreateAccountAliasInput
	}{arg1})
	fake.recordInvocation("CreateAccountAlias", []interface{}{arg1})
	fake.createAccountAliasMutex.Unlock()
	if fake.CreateAccountAliasStub != nil {
		return fake.CreateAccountAliasStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createAccountAliasReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateAccountAliasCallCount() int {
	fake.createAccountAliasMutex.RLock()
	defer fake.createAccountAliasMutex.RUnlock()
	return len(fake.createAccountAliasArgsForCall)
}

func (fake *FakeIAMAPI) CreateAccountAliasCalls(stub func(*iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error)) {
	fake.createAccountAliasMutex.Lock()
	defer fake.createAccountAliasMutex.Unlock()
	fake.CreateAccountAliasStub = stub
}

func (fake *FakeIAMAPI) CreateAccountAliasArgsForCall(i int) *iam.CreateAccountAliasInput {
	fake.createAccountAliasMutex.RLock()
	defer fake.createAccountAliasMutex.RUnlock()
	argsForCall := fake.createAccountAliasArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateAccountAliasReturns(result1 *iam.CreateAccountAliasOutput, result2 error) {
	fake.createAccountAliasMutex.Lock()
	defer fake.createAccountAliasMutex.Unlock()
	fake.CreateAccountAliasStub = nil
	fake.createAccountAliasReturns = struct {
		result1 *iam.CreateAccountAliasOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateAccountAliasReturnsOnCall(i int, result1 *iam.CreateAccountAliasOutput, result2 error) {
	fake.createAccountAliasMutex.Lock()
	defer fake.createAccountAliasMutex.Unlock()
	fake.CreateAccountAliasStub = nil
	if fake.createAccountAliasReturnsOnCall == nil {
		fake.createAccountAliasReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateAccountAliasOutput
			result2 error
		})
	}
	fake.createAccountAliasReturnsOnCall[i] = struct {
		result1 *iam.CreateAccountAliasOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateAccountAliasRequest(arg1 *iam.CreateAccountAliasInput) (*request.Request, *iam.CreateAccountAliasOutput) {
	fake.createAccountAliasRequestMutex.Lock()
	ret, specificReturn := fake.createAccountAliasRequestReturnsOnCall[len(fake.createAccountAliasRequestArgsForCall)]
	fake.createAccountAliasRequestArgsForCall = append(fake.createAccountAliasRequestArgsForCall, struct {
		arg1 *iam.CreateAccountAliasInput
	}{arg1})
	fake.recordInvocation("CreateAccountAliasRequest", []interface{}{arg1})
	fake.createAccountAliasRequestMutex.Unlock()
	if fake.CreateAccountAliasRequestStub != nil {
		return fake.CreateAccountAliasRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createAccountAliasRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateAccountAliasRequestCallCount() int {
	fake.createAccountAliasRequestMutex.RLock()
	defer fake.createAccountAliasRequestMutex.RUnlock()
	return len(fake.createAccountAliasRequestArgsForCall)
}

func (fake *FakeIAMAPI) CreateAccountAliasRequestCalls(stub func(*iam.CreateAccountAliasInput) (*request.Request, *iam.CreateAccountAliasOutput)) {
	fake.createAccountAliasRequestMutex.Lock()
	defer fake.createAccountAliasRequestMutex.Unlock()
	fake.CreateAccountAliasRequestStub = stub
}

func (fake *FakeIAMAPI) CreateAccountAliasRequestArgsForCall(i int) *iam.CreateAccountAliasInput {
	fake.createAccountAliasRequestMutex.RLock()
	defer fake.createAccountAliasRequestMutex.RUnlock()
	argsForCall := fake.createAccountAliasRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateAccountAliasRequestReturns(result1 *request.Request, result2 *iam.CreateAccountAliasOutput) {
	fake.createAccountAliasRequestMutex.Lock()
	defer fake.createAccountAliasRequestMutex.Unlock()
	fake.CreateAccountAliasRequestStub = nil
	fake.createAccountAliasRequestReturns = struct {
		result1 *request.Request
		result2 *iam.CreateAccountAliasOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateAccountAliasRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.CreateAccountAliasOutput) {
	fake.createAccountAliasRequestMutex.Lock()
	defer fake.createAccountAliasRequestMutex.Unlock()
	fake.CreateAccountAliasRequestStub = nil
	if fake.createAccountAliasRequestReturnsOnCall == nil {
		fake.createAccountAliasRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.CreateAccountAliasOutput
		})
	}
	fake.createAccountAliasRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.CreateAccountAliasOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateAccountAliasWithContext(arg1 context.Context, arg2 *iam.CreateAccountAliasInput, arg3 ...request.Option) (*iam.CreateAccountAliasOutput, error) {
	fake.createAccountAliasWithContextMutex.Lock()
	ret, specificReturn := fake.createAccountAliasWithContextReturnsOnCall[len(fake.createAccountAliasWithContextArgsForCall)]
	fake.createAccountAliasWithContextArgsForCall = append(fake.createAccountAliasWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.CreateAccountAliasInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateAccountAliasWithContext", []interface{}{arg1, arg2, arg3})
	fake.createAccountAliasWithContextMutex.Unlock()
	if fake.CreateAccountAliasWithContextStub != nil {
		return fake.CreateAccountAliasWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createAccountAliasWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateAccountAliasWithContextCallCount() int {
	fake.createAccountAliasWithContextMutex.RLock()
	defer fake.createAccountAliasWithContextMutex.RUnlock()
	return len(fake.createAccountAliasWithContextArgsForCall)
}

func (fake *FakeIAMAPI) CreateAccountAliasWithContextCalls(stub func(context.Context, *iam.CreateAccountAliasInput, ...request.Option) (*iam.CreateAccountAliasOutput, error)) {
	fake.createAccountAliasWithContextMutex.Lock()
	defer fake.createAccountAliasWithContextMutex.Unlock()
	fake.CreateAccountAliasWithContextStub = stub
}

func (fake *FakeIAMAPI) CreateAccountAliasWithContextArgsForCall(i int) (context.Context, *iam.CreateAccountAliasInput, []request.Option) {
	fake.createAccountAliasWithContextMutex.RLock()
	defer fake.createAccountAliasWithContextMutex.RUnlock()
	argsForCall := fake.createAccountAliasWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) CreateAccountAliasWithContextReturns(result1 *iam.CreateAccountAliasOutput, result2 error) {
	fake.createAccountAliasWithContextMutex.Lock()
	defer fake.createAccountAliasWithContextMutex.Unlock()
	fake.CreateAccountAliasWithContextStub = nil
	fake.createAccountAliasWithContextReturns = struct {
		result1 *iam.CreateAccountAliasOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateAccountAliasWithContextReturnsOnCall(i int, result1 *iam.CreateAccountAliasOutput, result2 error) {
	fake.createAccountAliasWithContextMutex.Lock()
	defer fake.createAccountAliasWithContextMutex.Unlock()
	fake.CreateAccountAliasWithContextStub = nil
	if fake.createAccountAliasWithContextReturnsOnCall == nil {
		fake.createAccountAliasWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateAccountAliasOutput
			result2 error
		})
	}
	fake.createAccountAliasWithContextReturnsOnCall[i] = struct {
		result1 *iam.CreateAccountAliasOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateGroup(arg1 *iam.CreateGroupInput) (*iam.CreateGroupOutput, error) {
	fake.createGroupMutex.Lock()
	ret, specificReturn := fake.createGroupReturnsOnCall[len(fake.createGroupArgsForCall)]
	fake.createGroupArgsForCall = append(fake.createGroupArgsForCall, struct {
		arg1 *iam.CreateGroupInput
	}{arg1})
	fake.recordInvocation("CreateGroup", []interface{}{arg1})
	fake.createGroupMutex.Unlock()
	if fake.CreateGroupStub != nil {
		return fake.CreateGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateGroupCallCount() int {
	fake.createGroupMutex.RLock()
	defer fake.createGroupMutex.RUnlock()
	return len(fake.createGroupArgsForCall)
}

func (fake *FakeIAMAPI) CreateGroupCalls(stub func(*iam.CreateGroupInput) (*iam.CreateGroupOutput, error)) {
	fake.createGroupMutex.Lock()
	defer fake.createGroupMutex.Unlock()
	fake.CreateGroupStub = stub
}

func (fake *FakeIAMAPI) CreateGroupArgsForCall(i int) *iam.CreateGroupInput {
	fake.createGroupMutex.RLock()
	defer fake.createGroupMutex.RUnlock()
	argsForCall := fake.createGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateGroupReturns(result1 *iam.CreateGroupOutput, result2 error) {
	fake.createGroupMutex.Lock()
	defer fake.createGroupMutex.Unlock()
	fake.CreateGroupStub = nil
	fake.createGroupReturns = struct {
		result1 *iam.CreateGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateGroupReturnsOnCall(i int, result1 *iam.CreateGroupOutput, result2 error) {
	fake.createGroupMutex.Lock()
	defer fake.createGroupMutex.Unlock()
	fake.CreateGroupStub = nil
	if fake.createGroupReturnsOnCall == nil {
		fake.createGroupReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateGroupOutput
			result2 error
		})
	}
	fake.createGroupReturnsOnCall[i] = struct {
		result1 *iam.CreateGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateGroupRequest(arg1 *iam.CreateGroupInput) (*request.Request, *iam.CreateGroupOutput) {
	fake.createGroupRequestMutex.Lock()
	ret, specificReturn := fake.createGroupRequestReturnsOnCall[len(fake.createGroupRequestArgsForCall)]
	fake.createGroupRequestArgsForCall = append(fake.createGroupRequestArgsForCall, struct {
		arg1 *iam.CreateGroupInput
	}{arg1})
	fake.recordInvocation("CreateGroupRequest", []interface{}{arg1})
	fake.createGroupRequestMutex.Unlock()
	if fake.CreateGroupRequestStub != nil {
		return fake.CreateGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createGroupRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateGroupRequestCallCount() int {
	fake.createGroupRequestMutex.RLock()
	defer fake.createGroupRequestMutex.RUnlock()
	return len(fake.createGroupRequestArgsForCall)
}

func (fake *FakeIAMAPI) CreateGroupRequestCalls(stub func(*iam.CreateGroupInput) (*request.Request, *iam.CreateGroupOutput)) {
	fake.createGroupRequestMutex.Lock()
	defer fake.createGroupRequestMutex.Unlock()
	fake.CreateGroupRequestStub = stub
}

func (fake *FakeIAMAPI) CreateGroupRequestArgsForCall(i int) *iam.CreateGroupInput {
	fake.createGroupRequestMutex.RLock()
	defer fake.createGroupRequestMutex.RUnlock()
	argsForCall := fake.createGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateGroupRequestReturns(result1 *request.Request, result2 *iam.CreateGroupOutput) {
	fake.createGroupRequestMutex.Lock()
	defer fake.createGroupRequestMutex.Unlock()
	fake.CreateGroupRequestStub = nil
	fake.createGroupRequestReturns = struct {
		result1 *request.Request
		result2 *iam.CreateGroupOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.CreateGroupOutput) {
	fake.createGroupRequestMutex.Lock()
	defer fake.createGroupRequestMutex.Unlock()
	fake.CreateGroupRequestStub = nil
	if fake.createGroupRequestReturnsOnCall == nil {
		fake.createGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.CreateGroupOutput
		})
	}
	fake.createGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.CreateGroupOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateGroupWithContext(arg1 context.Context, arg2 *iam.CreateGroupInput, arg3 ...request.Option) (*iam.CreateGroupOutput, error) {
	fake.createGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createGroupWithContextReturnsOnCall[len(fake.createGroupWithContextArgsForCall)]
	fake.createGroupWithContextArgsForCall = append(fake.createGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.CreateGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createGroupWithContextMutex.Unlock()
	if fake.CreateGroupWithContextStub != nil {
		return fake.CreateGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createGroupWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateGroupWithContextCallCount() int {
	fake.createGroupWithContextMutex.RLock()
	defer fake.createGroupWithContextMutex.RUnlock()
	return len(fake.createGroupWithContextArgsForCall)
}

func (fake *FakeIAMAPI) CreateGroupWithContextCalls(stub func(context.Context, *iam.CreateGroupInput, ...request.Option) (*iam.CreateGroupOutput, error)) {
	fake.createGroupWithContextMutex.Lock()
	defer fake.createGroupWithContextMutex.Unlock()
	fake.CreateGroupWithContextStub = stub
}

func (fake *FakeIAMAPI) CreateGroupWithContextArgsForCall(i int) (context.Context, *iam.CreateGroupInput, []request.Option) {
	fake.createGroupWithContextMutex.RLock()
	defer fake.createGroupWithContextMutex.RUnlock()
	argsForCall := fake.createGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) CreateGroupWithContextReturns(result1 *iam.CreateGroupOutput, result2 error) {
	fake.createGroupWithContextMutex.Lock()
	defer fake.createGroupWithContextMutex.Unlock()
	fake.CreateGroupWithContextStub = nil
	fake.createGroupWithContextReturns = struct {
		result1 *iam.CreateGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateGroupWithContextReturnsOnCall(i int, result1 *iam.CreateGroupOutput, result2 error) {
	fake.createGroupWithContextMutex.Lock()
	defer fake.createGroupWithContextMutex.Unlock()
	fake.CreateGroupWithContextStub = nil
	if fake.createGroupWithContextReturnsOnCall == nil {
		fake.createGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateGroupOutput
			result2 error
		})
	}
	fake.createGroupWithContextReturnsOnCall[i] = struct {
		result1 *iam.CreateGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateInstanceProfile(arg1 *iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error) {
	fake.createInstanceProfileMutex.Lock()
	ret, specificReturn := fake.createInstanceProfileReturnsOnCall[len(fake.createInstanceProfileArgsForCall)]
	fake.createInstanceProfileArgsForCall = append(fake.createInstanceProfileArgsForCall, struct {
		arg1 *iam.CreateInstanceProfileInput
	}{arg1})
	fake.recordInvocation("CreateInstanceProfile", []interface{}{arg1})
	fake.createInstanceProfileMutex.Unlock()
	if fake.CreateInstanceProfileStub != nil {
		return fake.CreateInstanceProfileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createInstanceProfileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateInstanceProfileCallCount() int {
	fake.createInstanceProfileMutex.RLock()
	defer fake.createInstanceProfileMutex.RUnlock()
	return len(fake.createInstanceProfileArgsForCall)
}

func (fake *FakeIAMAPI) CreateInstanceProfileCalls(stub func(*iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error)) {
	fake.createInstanceProfileMutex.Lock()
	defer fake.createInstanceProfileMutex.Unlock()
	fake.CreateInstanceProfileStub = stub
}

func (fake *FakeIAMAPI) CreateInstanceProfileArgsForCall(i int) *iam.CreateInstanceProfileInput {
	fake.createInstanceProfileMutex.RLock()
	defer fake.createInstanceProfileMutex.RUnlock()
	argsForCall := fake.createInstanceProfileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateInstanceProfileReturns(result1 *iam.CreateInstanceProfileOutput, result2 error) {
	fake.createInstanceProfileMutex.Lock()
	defer fake.createInstanceProfileMutex.Unlock()
	fake.CreateInstanceProfileStub = nil
	fake.createInstanceProfileReturns = struct {
		result1 *iam.CreateInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateInstanceProfileReturnsOnCall(i int, result1 *iam.CreateInstanceProfileOutput, result2 error) {
	fake.createInstanceProfileMutex.Lock()
	defer fake.createInstanceProfileMutex.Unlock()
	fake.CreateInstanceProfileStub = nil
	if fake.createInstanceProfileReturnsOnCall == nil {
		fake.createInstanceProfileReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateInstanceProfileOutput
			result2 error
		})
	}
	fake.createInstanceProfileReturnsOnCall[i] = struct {
		result1 *iam.CreateInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateInstanceProfileRequest(arg1 *iam.CreateInstanceProfileInput) (*request.Request, *iam.CreateInstanceProfileOutput) {
	fake.createInstanceProfileRequestMutex.Lock()
	ret, specificReturn := fake.createInstanceProfileRequestReturnsOnCall[len(fake.createInstanceProfileRequestArgsForCall)]
	fake.createInstanceProfileRequestArgsForCall = append(fake.createInstanceProfileRequestArgsForCall, struct {
		arg1 *iam.CreateInstanceProfileInput
	}{arg1})
	fake.recordInvocation("CreateInstanceProfileRequest", []interface{}{arg1})
	fake.createInstanceProfileRequestMutex.Unlock()
	if fake.CreateInstanceProfileRequestStub != nil {
		return fake.CreateInstanceProfileRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createInstanceProfileRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateInstanceProfileRequestCallCount() int {
	fake.createInstanceProfileRequestMutex.RLock()
	defer fake.createInstanceProfileRequestMutex.RUnlock()
	return len(fake.createInstanceProfileRequestArgsForCall)
}

func (fake *FakeIAMAPI) CreateInstanceProfileRequestCalls(stub func(*iam.CreateInstanceProfileInput) (*request.Request, *iam.CreateInstanceProfileOutput)) {
	fake.createInstanceProfileRequestMutex.Lock()
	defer fake.createInstanceProfileRequestMutex.Unlock()
	fake.CreateInstanceProfileRequestStub = stub
}

func (fake *FakeIAMAPI) CreateInstanceProfileRequestArgsForCall(i int) *iam.CreateInstanceProfileInput {
	fake.createInstanceProfileRequestMutex.RLock()
	defer fake.createInstanceProfileRequestMutex.RUnlock()
	argsForCall := fake.createInstanceProfileRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateInstanceProfileRequestReturns(result1 *request.Request, result2 *iam.CreateInstanceProfileOutput) {
	fake.createInstanceProfileRequestMutex.Lock()
	defer fake.createInstanceProfileRequestMutex.Unlock()
	fake.CreateInstanceProfileRequestStub = nil
	fake.createInstanceProfileRequestReturns = struct {
		result1 *request.Request
		result2 *iam.CreateInstanceProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateInstanceProfileRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.CreateInstanceProfileOutput) {
	fake.createInstanceProfileRequestMutex.Lock()
	defer fake.createInstanceProfileRequestMutex.Unlock()
	fake.CreateInstanceProfileRequestStub = nil
	if fake.createInstanceProfileRequestReturnsOnCall == nil {
		fake.createInstanceProfileRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.CreateInstanceProfileOutput
		})
	}
	fake.createInstanceProfileRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.CreateInstanceProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateInstanceProfileWithContext(arg1 context.Context, arg2 *iam.CreateInstanceProfileInput, arg3 ...request.Option) (*iam.CreateInstanceProfileOutput, error) {
	fake.createInstanceProfileWithContextMutex.Lock()
	ret, specificReturn := fake.createInstanceProfileWithContextReturnsOnCall[len(fake.createInstanceProfileWithContextArgsForCall)]
	fake.createInstanceProfileWithContextArgsForCall = append(fake.createInstanceProfileWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.CreateInstanceProfileInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateInstanceProfileWithContext", []interface{}{arg1, arg2, arg3})
	fake.createInstanceProfileWithContextMutex.Unlock()
	if fake.CreateInstanceProfileWithContextStub != nil {
		return fake.CreateInstanceProfileWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createInstanceProfileWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateInstanceProfileWithContextCallCount() int {
	fake.createInstanceProfileWithContextMutex.RLock()
	defer fake.createInstanceProfileWithContextMutex.RUnlock()
	return len(fake.createInstanceProfileWithContextArgsForCall)
}

func (fake *FakeIAMAPI) CreateInstanceProfileWithContextCalls(stub func(context.Context, *iam.CreateInstanceProfileInput, ...request.Option) (*iam.CreateInstanceProfileOutput, error)) {
	fake.createInstanceProfileWithContextMutex.Lock()
	defer fake.createInstanceProfileWithContextMutex.Unlock()
	fake.CreateInstanceProfileWithContextStub = stub
}

func (fake *FakeIAMAPI) CreateInstanceProfileWithContextArgsForCall(i int) (context.Context, *iam.CreateInstanceProfileInput, []request.Option) {
	fake.createInstanceProfileWithContextMutex.RLock()
	defer fake.createInstanceProfileWithContextMutex.RUnlock()
	argsForCall := fake.createInstanceProfileWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) CreateInstanceProfileWithContextReturns(result1 *iam.CreateInstanceProfileOutput, result2 error) {
	fake.createInstanceProfileWithContextMutex.Lock()
	defer fake.createInstanceProfileWithContextMutex.Unlock()
	fake.CreateInstanceProfileWithContextStub = nil
	fake.createInstanceProfileWithContextReturns = struct {
		result1 *iam.CreateInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateInstanceProfileWithContextReturnsOnCall(i int, result1 *iam.CreateInstanceProfileOutput, result2 error) {
	fake.createInstanceProfileWithContextMutex.Lock()
	defer fake.createInstanceProfileWithContextMutex.Unlock()
	fake.CreateInstanceProfileWithContextStub = nil
	if fake.createInstanceProfileWithContextReturnsOnCall == nil {
		fake.createInstanceProfileWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateInstanceProfileOutput
			result2 error
		})
	}
	fake.createInstanceProfileWithContextReturnsOnCall[i] = struct {
		result1 *iam.CreateInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateLoginProfile(arg1 *iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error) {
	fake.createLoginProfileMutex.Lock()
	ret, specificReturn := fake.createLoginProfileReturnsOnCall[len(fake.createLoginProfileArgsForCall)]
	fake.createLoginProfileArgsForCall = append(fake.createLoginProfileArgsForCall, struct {
		arg1 *iam.CreateLoginProfileInput
	}{arg1})
	fake.recordInvocation("CreateLoginProfile", []interface{}{arg1})
	fake.createLoginProfileMutex.Unlock()
	if fake.CreateLoginProfileStub != nil {
		return fake.CreateLoginProfileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createLoginProfileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateLoginProfileCallCount() int {
	fake.createLoginProfileMutex.RLock()
	defer fake.createLoginProfileMutex.RUnlock()
	return len(fake.createLoginProfileArgsForCall)
}

func (fake *FakeIAMAPI) CreateLoginProfileCalls(stub func(*iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error)) {
	fake.createLoginProfileMutex.Lock()
	defer fake.createLoginProfileMutex.Unlock()
	fake.CreateLoginProfileStub = stub
}

func (fake *FakeIAMAPI) CreateLoginProfileArgsForCall(i int) *iam.CreateLoginProfileInput {
	fake.createLoginProfileMutex.RLock()
	defer fake.createLoginProfileMutex.RUnlock()
	argsForCall := fake.createLoginProfileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateLoginProfileReturns(result1 *iam.CreateLoginProfileOutput, result2 error) {
	fake.createLoginProfileMutex.Lock()
	defer fake.createLoginProfileMutex.Unlock()
	fake.CreateLoginProfileStub = nil
	fake.createLoginProfileReturns = struct {
		result1 *iam.CreateLoginProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateLoginProfileReturnsOnCall(i int, result1 *iam.CreateLoginProfileOutput, result2 error) {
	fake.createLoginProfileMutex.Lock()
	defer fake.createLoginProfileMutex.Unlock()
	fake.CreateLoginProfileStub = nil
	if fake.createLoginProfileReturnsOnCall == nil {
		fake.createLoginProfileReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateLoginProfileOutput
			result2 error
		})
	}
	fake.createLoginProfileReturnsOnCall[i] = struct {
		result1 *iam.CreateLoginProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateLoginProfileRequest(arg1 *iam.CreateLoginProfileInput) (*request.Request, *iam.CreateLoginProfileOutput) {
	fake.createLoginProfileRequestMutex.Lock()
	ret, specificReturn := fake.createLoginProfileRequestReturnsOnCall[len(fake.createLoginProfileRequestArgsForCall)]
	fake.createLoginProfileRequestArgsForCall = append(fake.createLoginProfileRequestArgsForCall, struct {
		arg1 *iam.CreateLoginProfileInput
	}{arg1})
	fake.recordInvocation("CreateLoginProfileRequest", []interface{}{arg1})
	fake.createLoginProfileRequestMutex.Unlock()
	if fake.CreateLoginProfileRequestStub != nil {
		return fake.CreateLoginProfileRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createLoginProfileRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateLoginProfileRequestCallCount() int {
	fake.createLoginProfileRequestMutex.RLock()
	defer fake.createLoginProfileRequestMutex.RUnlock()
	return len(fake.createLoginProfileRequestArgsForCall)
}

func (fake *FakeIAMAPI) CreateLoginProfileRequestCalls(stub func(*iam.CreateLoginProfileInput) (*request.Request, *iam.CreateLoginProfileOutput)) {
	fake.createLoginProfileRequestMutex.Lock()
	defer fake.createLoginProfileRequestMutex.Unlock()
	fake.CreateLoginProfileRequestStub = stub
}

func (fake *FakeIAMAPI) CreateLoginProfileRequestArgsForCall(i int) *iam.CreateLoginProfileInput {
	fake.createLoginProfileRequestMutex.RLock()
	defer fake.createLoginProfileRequestMutex.RUnlock()
	argsForCall := fake.createLoginProfileRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateLoginProfileRequestReturns(result1 *request.Request, result2 *iam.CreateLoginProfileOutput) {
	fake.createLoginProfileRequestMutex.Lock()
	defer fake.createLoginProfileRequestMutex.Unlock()
	fake.CreateLoginProfileRequestStub = nil
	fake.createLoginProfileRequestReturns = struct {
		result1 *request.Request
		result2 *iam.CreateLoginProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateLoginProfileRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.CreateLoginProfileOutput) {
	fake.createLoginProfileRequestMutex.Lock()
	defer fake.createLoginProfileRequestMutex.Unlock()
	fake.CreateLoginProfileRequestStub = nil
	if fake.createLoginProfileRequestReturnsOnCall == nil {
		fake.createLoginProfileRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.CreateLoginProfileOutput
		})
	}
	fake.createLoginProfileRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.CreateLoginProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateLoginProfileWithContext(arg1 context.Context, arg2 *iam.CreateLoginProfileInput, arg3 ...request.Option) (*iam.CreateLoginProfileOutput, error) {
	fake.createLoginProfileWithContextMutex.Lock()
	ret, specificReturn := fake.createLoginProfileWithContextReturnsOnCall[len(fake.createLoginProfileWithContextArgsForCall)]
	fake.createLoginProfileWithContextArgsForCall = append(fake.createLoginProfileWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.CreateLoginProfileInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateLoginProfileWithContext", []interface{}{arg1, arg2, arg3})
	fake.createLoginProfileWithContextMutex.Unlock()
	if fake.CreateLoginProfileWithContextStub != nil {
		return fake.CreateLoginProfileWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createLoginProfileWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateLoginProfileWithContextCallCount() int {
	fake.createLoginProfileWithContextMutex.RLock()
	defer fake.createLoginProfileWithContextMutex.RUnlock()
	return len(fake.createLoginProfileWithContextArgsForCall)
}

func (fake *FakeIAMAPI) CreateLoginProfileWithContextCalls(stub func(context.Context, *iam.CreateLoginProfileInput, ...request.Option) (*iam.CreateLoginProfileOutput, error)) {
	fake.createLoginProfileWithContextMutex.Lock()
	defer fake.createLoginProfileWithContextMutex.Unlock()
	fake.CreateLoginProfileWithContextStub = stub
}

func (fake *FakeIAMAPI) CreateLoginProfileWithContextArgsForCall(i int) (context.Context, *iam.CreateLoginProfileInput, []request.Option) {
	fake.createLoginProfileWithContextMutex.RLock()
	defer fake.createLoginProfileWithContextMutex.RUnlock()
	argsForCall := fake.createLoginProfileWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) CreateLoginProfileWithContextReturns(result1 *iam.CreateLoginProfileOutput, result2 error) {
	fake.createLoginProfileWithContextMutex.Lock()
	defer fake.createLoginProfileWithContextMutex.Unlock()
	fake.CreateLoginProfileWithContextStub = nil
	fake.createLoginProfileWithContextReturns = struct {
		result1 *iam.CreateLoginProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateLoginProfileWithContextReturnsOnCall(i int, result1 *iam.CreateLoginProfileOutput, result2 error) {
	fake.createLoginProfileWithContextMutex.Lock()
	defer fake.createLoginProfileWithContextMutex.Unlock()
	fake.CreateLoginProfileWithContextStub = nil
	if fake.createLoginProfileWithContextReturnsOnCall == nil {
		fake.createLoginProfileWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateLoginProfileOutput
			result2 error
		})
	}
	fake.createLoginProfileWithContextReturnsOnCall[i] = struct {
		result1 *iam.CreateLoginProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProvider(arg1 *iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error) {
	fake.createOpenIDConnectProviderMutex.Lock()
	ret, specificReturn := fake.createOpenIDConnectProviderReturnsOnCall[len(fake.createOpenIDConnectProviderArgsForCall)]
	fake.createOpenIDConnectProviderArgsForCall = append(fake.createOpenIDConnectProviderArgsForCall, struct {
		arg1 *iam.CreateOpenIDConnectProviderInput
	}{arg1})
	fake.recordInvocation("CreateOpenIDConnectProvider", []interface{}{arg1})
	fake.createOpenIDConnectProviderMutex.Unlock()
	if fake.CreateOpenIDConnectProviderStub != nil {
		return fake.CreateOpenIDConnectProviderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createOpenIDConnectProviderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProviderCallCount() int {
	fake.createOpenIDConnectProviderMutex.RLock()
	defer fake.createOpenIDConnectProviderMutex.RUnlock()
	return len(fake.createOpenIDConnectProviderArgsForCall)
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProviderCalls(stub func(*iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error)) {
	fake.createOpenIDConnectProviderMutex.Lock()
	defer fake.createOpenIDConnectProviderMutex.Unlock()
	fake.CreateOpenIDConnectProviderStub = stub
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProviderArgsForCall(i int) *iam.CreateOpenIDConnectProviderInput {
	fake.createOpenIDConnectProviderMutex.RLock()
	defer fake.createOpenIDConnectProviderMutex.RUnlock()
	argsForCall := fake.createOpenIDConnectProviderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProviderReturns(result1 *iam.CreateOpenIDConnectProviderOutput, result2 error) {
	fake.createOpenIDConnectProviderMutex.Lock()
	defer fake.createOpenIDConnectProviderMutex.Unlock()
	fake.CreateOpenIDConnectProviderStub = nil
	fake.createOpenIDConnectProviderReturns = struct {
		result1 *iam.CreateOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProviderReturnsOnCall(i int, result1 *iam.CreateOpenIDConnectProviderOutput, result2 error) {
	fake.createOpenIDConnectProviderMutex.Lock()
	defer fake.createOpenIDConnectProviderMutex.Unlock()
	fake.CreateOpenIDConnectProviderStub = nil
	if fake.createOpenIDConnectProviderReturnsOnCall == nil {
		fake.createOpenIDConnectProviderReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateOpenIDConnectProviderOutput
			result2 error
		})
	}
	fake.createOpenIDConnectProviderReturnsOnCall[i] = struct {
		result1 *iam.CreateOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProviderRequest(arg1 *iam.CreateOpenIDConnectProviderInput) (*request.Request, *iam.CreateOpenIDConnectProviderOutput) {
	fake.createOpenIDConnectProviderRequestMutex.Lock()
	ret, specificReturn := fake.createOpenIDConnectProviderRequestReturnsOnCall[len(fake.createOpenIDConnectProviderRequestArgsForCall)]
	fake.createOpenIDConnectProviderRequestArgsForCall = append(fake.createOpenIDConnectProviderRequestArgsForCall, struct {
		arg1 *iam.CreateOpenIDConnectProviderInput
	}{arg1})
	fake.recordInvocation("CreateOpenIDConnectProviderRequest", []interface{}{arg1})
	fake.createOpenIDConnectProviderRequestMutex.Unlock()
	if fake.CreateOpenIDConnectProviderRequestStub != nil {
		return fake.CreateOpenIDConnectProviderRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createOpenIDConnectProviderRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProviderRequestCallCount() int {
	fake.createOpenIDConnectProviderRequestMutex.RLock()
	defer fake.createOpenIDConnectProviderRequestMutex.RUnlock()
	return len(fake.createOpenIDConnectProviderRequestArgsForCall)
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProviderRequestCalls(stub func(*iam.CreateOpenIDConnectProviderInput) (*request.Request, *iam.CreateOpenIDConnectProviderOutput)) {
	fake.createOpenIDConnectProviderRequestMutex.Lock()
	defer fake.createOpenIDConnectProviderRequestMutex.Unlock()
	fake.CreateOpenIDConnectProviderRequestStub = stub
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProviderRequestArgsForCall(i int) *iam.CreateOpenIDConnectProviderInput {
	fake.createOpenIDConnectProviderRequestMutex.RLock()
	defer fake.createOpenIDConnectProviderRequestMutex.RUnlock()
	argsForCall := fake.createOpenIDConnectProviderRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProviderRequestReturns(result1 *request.Request, result2 *iam.CreateOpenIDConnectProviderOutput) {
	fake.createOpenIDConnectProviderRequestMutex.Lock()
	defer fake.createOpenIDConnectProviderRequestMutex.Unlock()
	fake.CreateOpenIDConnectProviderRequestStub = nil
	fake.createOpenIDConnectProviderRequestReturns = struct {
		result1 *request.Request
		result2 *iam.CreateOpenIDConnectProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProviderRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.CreateOpenIDConnectProviderOutput) {
	fake.createOpenIDConnectProviderRequestMutex.Lock()
	defer fake.createOpenIDConnectProviderRequestMutex.Unlock()
	fake.CreateOpenIDConnectProviderRequestStub = nil
	if fake.createOpenIDConnectProviderRequestReturnsOnCall == nil {
		fake.createOpenIDConnectProviderRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.CreateOpenIDConnectProviderOutput
		})
	}
	fake.createOpenIDConnectProviderRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.CreateOpenIDConnectProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProviderWithContext(arg1 context.Context, arg2 *iam.CreateOpenIDConnectProviderInput, arg3 ...request.Option) (*iam.CreateOpenIDConnectProviderOutput, error) {
	fake.createOpenIDConnectProviderWithContextMutex.Lock()
	ret, specificReturn := fake.createOpenIDConnectProviderWithContextReturnsOnCall[len(fake.createOpenIDConnectProviderWithContextArgsForCall)]
	fake.createOpenIDConnectProviderWithContextArgsForCall = append(fake.createOpenIDConnectProviderWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.CreateOpenIDConnectProviderInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateOpenIDConnectProviderWithContext", []interface{}{arg1, arg2, arg3})
	fake.createOpenIDConnectProviderWithContextMutex.Unlock()
	if fake.CreateOpenIDConnectProviderWithContextStub != nil {
		return fake.CreateOpenIDConnectProviderWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createOpenIDConnectProviderWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProviderWithContextCallCount() int {
	fake.createOpenIDConnectProviderWithContextMutex.RLock()
	defer fake.createOpenIDConnectProviderWithContextMutex.RUnlock()
	return len(fake.createOpenIDConnectProviderWithContextArgsForCall)
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProviderWithContextCalls(stub func(context.Context, *iam.CreateOpenIDConnectProviderInput, ...request.Option) (*iam.CreateOpenIDConnectProviderOutput, error)) {
	fake.createOpenIDConnectProviderWithContextMutex.Lock()
	defer fake.createOpenIDConnectProviderWithContextMutex.Unlock()
	fake.CreateOpenIDConnectProviderWithContextStub = stub
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProviderWithContextArgsForCall(i int) (context.Context, *iam.CreateOpenIDConnectProviderInput, []request.Option) {
	fake.createOpenIDConnectProviderWithContextMutex.RLock()
	defer fake.createOpenIDConnectProviderWithContextMutex.RUnlock()
	argsForCall := fake.createOpenIDConnectProviderWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProviderWithContextReturns(result1 *iam.CreateOpenIDConnectProviderOutput, result2 error) {
	fake.createOpenIDConnectProviderWithContextMutex.Lock()
	defer fake.createOpenIDConnectProviderWithContextMutex.Unlock()
	fake.CreateOpenIDConnectProviderWithContextStub = nil
	fake.createOpenIDConnectProviderWithContextReturns = struct {
		result1 *iam.CreateOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateOpenIDConnectProviderWithContextReturnsOnCall(i int, result1 *iam.CreateOpenIDConnectProviderOutput, result2 error) {
	fake.createOpenIDConnectProviderWithContextMutex.Lock()
	defer fake.createOpenIDConnectProviderWithContextMutex.Unlock()
	fake.CreateOpenIDConnectProviderWithContextStub = nil
	if fake.createOpenIDConnectProviderWithContextReturnsOnCall == nil {
		fake.createOpenIDConnectProviderWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateOpenIDConnectProviderOutput
			result2 error
		})
	}
	fake.createOpenIDConnectProviderWithContextReturnsOnCall[i] = struct {
		result1 *iam.CreateOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreatePolicy(arg1 *iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error) {
	fake.createPolicyMutex.Lock()
	ret, specificReturn := fake.createPolicyReturnsOnCall[len(fake.createPolicyArgsForCall)]
	fake.createPolicyArgsForCall = append(fake.createPolicyArgsForCall, struct {
		arg1 *iam.CreatePolicyInput
	}{arg1})
	fake.recordInvocation("CreatePolicy", []interface{}{arg1})
	fake.createPolicyMutex.Unlock()
	if fake.CreatePolicyStub != nil {
		return fake.CreatePolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreatePolicyCallCount() int {
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	return len(fake.createPolicyArgsForCall)
}

func (fake *FakeIAMAPI) CreatePolicyCalls(stub func(*iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error)) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = stub
}

func (fake *FakeIAMAPI) CreatePolicyArgsForCall(i int) *iam.CreatePolicyInput {
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	argsForCall := fake.createPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreatePolicyReturns(result1 *iam.CreatePolicyOutput, result2 error) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = nil
	fake.createPolicyReturns = struct {
		result1 *iam.CreatePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreatePolicyReturnsOnCall(i int, result1 *iam.CreatePolicyOutput, result2 error) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = nil
	if fake.createPolicyReturnsOnCall == nil {
		fake.createPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.CreatePolicyOutput
			result2 error
		})
	}
	fake.createPolicyReturnsOnCall[i] = struct {
		result1 *iam.CreatePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreatePolicyRequest(arg1 *iam.CreatePolicyInput) (*request.Request, *iam.CreatePolicyOutput) {
	fake.createPolicyRequestMutex.Lock()
	ret, specificReturn := fake.createPolicyRequestReturnsOnCall[len(fake.createPolicyRequestArgsForCall)]
	fake.createPolicyRequestArgsForCall = append(fake.createPolicyRequestArgsForCall, struct {
		arg1 *iam.CreatePolicyInput
	}{arg1})
	fake.recordInvocation("CreatePolicyRequest", []interface{}{arg1})
	fake.createPolicyRequestMutex.Unlock()
	if fake.CreatePolicyRequestStub != nil {
		return fake.CreatePolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreatePolicyRequestCallCount() int {
	fake.createPolicyRequestMutex.RLock()
	defer fake.createPolicyRequestMutex.RUnlock()
	return len(fake.createPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) CreatePolicyRequestCalls(stub func(*iam.CreatePolicyInput) (*request.Request, *iam.CreatePolicyOutput)) {
	fake.createPolicyRequestMutex.Lock()
	defer fake.createPolicyRequestMutex.Unlock()
	fake.CreatePolicyRequestStub = stub
}

func (fake *FakeIAMAPI) CreatePolicyRequestArgsForCall(i int) *iam.CreatePolicyInput {
	fake.createPolicyRequestMutex.RLock()
	defer fake.createPolicyRequestMutex.RUnlock()
	argsForCall := fake.createPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreatePolicyRequestReturns(result1 *request.Request, result2 *iam.CreatePolicyOutput) {
	fake.createPolicyRequestMutex.Lock()
	defer fake.createPolicyRequestMutex.Unlock()
	fake.CreatePolicyRequestStub = nil
	fake.createPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.CreatePolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreatePolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.CreatePolicyOutput) {
	fake.createPolicyRequestMutex.Lock()
	defer fake.createPolicyRequestMutex.Unlock()
	fake.CreatePolicyRequestStub = nil
	if fake.createPolicyRequestReturnsOnCall == nil {
		fake.createPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.CreatePolicyOutput
		})
	}
	fake.createPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.CreatePolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreatePolicyVersion(arg1 *iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error) {
	fake.createPolicyVersionMutex.Lock()
	ret, specificReturn := fake.createPolicyVersionReturnsOnCall[len(fake.createPolicyVersionArgsForCall)]
	fake.createPolicyVersionArgsForCall = append(fake.createPolicyVersionArgsForCall, struct {
		arg1 *iam.CreatePolicyVersionInput
	}{arg1})
	fake.recordInvocation("CreatePolicyVersion", []interface{}{arg1})
	fake.createPolicyVersionMutex.Unlock()
	if fake.CreatePolicyVersionStub != nil {
		return fake.CreatePolicyVersionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createPolicyVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreatePolicyVersionCallCount() int {
	fake.createPolicyVersionMutex.RLock()
	defer fake.createPolicyVersionMutex.RUnlock()
	return len(fake.createPolicyVersionArgsForCall)
}

func (fake *FakeIAMAPI) CreatePolicyVersionCalls(stub func(*iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error)) {
	fake.createPolicyVersionMutex.Lock()
	defer fake.createPolicyVersionMutex.Unlock()
	fake.CreatePolicyVersionStub = stub
}

func (fake *FakeIAMAPI) CreatePolicyVersionArgsForCall(i int) *iam.CreatePolicyVersionInput {
	fake.createPolicyVersionMutex.RLock()
	defer fake.createPolicyVersionMutex.RUnlock()
	argsForCall := fake.createPolicyVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreatePolicyVersionReturns(result1 *iam.CreatePolicyVersionOutput, result2 error) {
	fake.createPolicyVersionMutex.Lock()
	defer fake.createPolicyVersionMutex.Unlock()
	fake.CreatePolicyVersionStub = nil
	fake.createPolicyVersionReturns = struct {
		result1 *iam.CreatePolicyVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreatePolicyVersionReturnsOnCall(i int, result1 *iam.CreatePolicyVersionOutput, result2 error) {
	fake.createPolicyVersionMutex.Lock()
	defer fake.createPolicyVersionMutex.Unlock()
	fake.CreatePolicyVersionStub = nil
	if fake.createPolicyVersionReturnsOnCall == nil {
		fake.createPolicyVersionReturnsOnCall = make(map[int]struct {
			result1 *iam.CreatePolicyVersionOutput
			result2 error
		})
	}
	fake.createPolicyVersionReturnsOnCall[i] = struct {
		result1 *iam.CreatePolicyVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreatePolicyVersionRequest(arg1 *iam.CreatePolicyVersionInput) (*request.Request, *iam.CreatePolicyVersionOutput) {
	fake.createPolicyVersionRequestMutex.Lock()
	ret, specificReturn := fake.createPolicyVersionRequestReturnsOnCall[len(fake.createPolicyVersionRequestArgsForCall)]
	fake.createPolicyVersionRequestArgsForCall = append(fake.createPolicyVersionRequestArgsForCall, struct {
		arg1 *iam.CreatePolicyVersionInput
	}{arg1})
	fake.recordInvocation("CreatePolicyVersionRequest", []interface{}{arg1})
	fake.createPolicyVersionRequestMutex.Unlock()
	if fake.CreatePolicyVersionRequestStub != nil {
		return fake.CreatePolicyVersionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createPolicyVersionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreatePolicyVersionRequestCallCount() int {
	fake.createPolicyVersionRequestMutex.RLock()
	defer fake.createPolicyVersionRequestMutex.RUnlock()
	return len(fake.createPolicyVersionRequestArgsForCall)
}

func (fake *FakeIAMAPI) CreatePolicyVersionRequestCalls(stub func(*iam.CreatePolicyVersionInput) (*request.Request, *iam.CreatePolicyVersionOutput)) {
	fake.createPolicyVersionRequestMutex.Lock()
	defer fake.createPolicyVersionRequestMutex.Unlock()
	fake.CreatePolicyVersionRequestStub = stub
}

func (fake *FakeIAMAPI) CreatePolicyVersionRequestArgsForCall(i int) *iam.CreatePolicyVersionInput {
	fake.createPolicyVersionRequestMutex.RLock()
	defer fake.createPolicyVersionRequestMutex.RUnlock()
	argsForCall := fake.createPolicyVersionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreatePolicyVersionRequestReturns(result1 *request.Request, result2 *iam.CreatePolicyVersionOutput) {
	fake.createPolicyVersionRequestMutex.Lock()
	defer fake.createPolicyVersionRequestMutex.Unlock()
	fake.CreatePolicyVersionRequestStub = nil
	fake.createPolicyVersionRequestReturns = struct {
		result1 *request.Request
		result2 *iam.CreatePolicyVersionOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreatePolicyVersionRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.CreatePolicyVersionOutput) {
	fake.createPolicyVersionRequestMutex.Lock()
	defer fake.createPolicyVersionRequestMutex.Unlock()
	fake.CreatePolicyVersionRequestStub = nil
	if fake.createPolicyVersionRequestReturnsOnCall == nil {
		fake.createPolicyVersionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.CreatePolicyVersionOutput
		})
	}
	fake.createPolicyVersionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.CreatePolicyVersionOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreatePolicyVersionWithContext(arg1 context.Context, arg2 *iam.CreatePolicyVersionInput, arg3 ...request.Option) (*iam.CreatePolicyVersionOutput, error) {
	fake.createPolicyVersionWithContextMutex.Lock()
	ret, specificReturn := fake.createPolicyVersionWithContextReturnsOnCall[len(fake.createPolicyVersionWithContextArgsForCall)]
	fake.createPolicyVersionWithContextArgsForCall = append(fake.createPolicyVersionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.CreatePolicyVersionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreatePolicyVersionWithContext", []interface{}{arg1, arg2, arg3})
	fake.createPolicyVersionWithContextMutex.Unlock()
	if fake.CreatePolicyVersionWithContextStub != nil {
		return fake.CreatePolicyVersionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createPolicyVersionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreatePolicyVersionWithContextCallCount() int {
	fake.createPolicyVersionWithContextMutex.RLock()
	defer fake.createPolicyVersionWithContextMutex.RUnlock()
	return len(fake.createPolicyVersionWithContextArgsForCall)
}

func (fake *FakeIAMAPI) CreatePolicyVersionWithContextCalls(stub func(context.Context, *iam.CreatePolicyVersionInput, ...request.Option) (*iam.CreatePolicyVersionOutput, error)) {
	fake.createPolicyVersionWithContextMutex.Lock()
	defer fake.createPolicyVersionWithContextMutex.Unlock()
	fake.CreatePolicyVersionWithContextStub = stub
}

func (fake *FakeIAMAPI) CreatePolicyVersionWithContextArgsForCall(i int) (context.Context, *iam.CreatePolicyVersionInput, []request.Option) {
	fake.createPolicyVersionWithContextMutex.RLock()
	defer fake.createPolicyVersionWithContextMutex.RUnlock()
	argsForCall := fake.createPolicyVersionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) CreatePolicyVersionWithContextReturns(result1 *iam.CreatePolicyVersionOutput, result2 error) {
	fake.createPolicyVersionWithContextMutex.Lock()
	defer fake.createPolicyVersionWithContextMutex.Unlock()
	fake.CreatePolicyVersionWithContextStub = nil
	fake.createPolicyVersionWithContextReturns = struct {
		result1 *iam.CreatePolicyVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreatePolicyVersionWithContextReturnsOnCall(i int, result1 *iam.CreatePolicyVersionOutput, result2 error) {
	fake.createPolicyVersionWithContextMutex.Lock()
	defer fake.createPolicyVersionWithContextMutex.Unlock()
	fake.CreatePolicyVersionWithContextStub = nil
	if fake.createPolicyVersionWithContextReturnsOnCall == nil {
		fake.createPolicyVersionWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.CreatePolicyVersionOutput
			result2 error
		})
	}
	fake.createPolicyVersionWithContextReturnsOnCall[i] = struct {
		result1 *iam.CreatePolicyVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreatePolicyWithContext(arg1 context.Context, arg2 *iam.CreatePolicyInput, arg3 ...request.Option) (*iam.CreatePolicyOutput, error) {
	fake.createPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.createPolicyWithContextReturnsOnCall[len(fake.createPolicyWithContextArgsForCall)]
	fake.createPolicyWithContextArgsForCall = append(fake.createPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.CreatePolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreatePolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.createPolicyWithContextMutex.Unlock()
	if fake.CreatePolicyWithContextStub != nil {
		return fake.CreatePolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreatePolicyWithContextCallCount() int {
	fake.createPolicyWithContextMutex.RLock()
	defer fake.createPolicyWithContextMutex.RUnlock()
	return len(fake.createPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) CreatePolicyWithContextCalls(stub func(context.Context, *iam.CreatePolicyInput, ...request.Option) (*iam.CreatePolicyOutput, error)) {
	fake.createPolicyWithContextMutex.Lock()
	defer fake.createPolicyWithContextMutex.Unlock()
	fake.CreatePolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) CreatePolicyWithContextArgsForCall(i int) (context.Context, *iam.CreatePolicyInput, []request.Option) {
	fake.createPolicyWithContextMutex.RLock()
	defer fake.createPolicyWithContextMutex.RUnlock()
	argsForCall := fake.createPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) CreatePolicyWithContextReturns(result1 *iam.CreatePolicyOutput, result2 error) {
	fake.createPolicyWithContextMutex.Lock()
	defer fake.createPolicyWithContextMutex.Unlock()
	fake.CreatePolicyWithContextStub = nil
	fake.createPolicyWithContextReturns = struct {
		result1 *iam.CreatePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreatePolicyWithContextReturnsOnCall(i int, result1 *iam.CreatePolicyOutput, result2 error) {
	fake.createPolicyWithContextMutex.Lock()
	defer fake.createPolicyWithContextMutex.Unlock()
	fake.CreatePolicyWithContextStub = nil
	if fake.createPolicyWithContextReturnsOnCall == nil {
		fake.createPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.CreatePolicyOutput
			result2 error
		})
	}
	fake.createPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.CreatePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateRole(arg1 *iam.CreateRoleInput) (*iam.CreateRoleOutput, error) {
	fake.createRoleMutex.Lock()
	ret, specificReturn := fake.createRoleReturnsOnCall[len(fake.createRoleArgsForCall)]
	fake.createRoleArgsForCall = append(fake.createRoleArgsForCall, struct {
		arg1 *iam.CreateRoleInput
	}{arg1})
	fake.recordInvocation("CreateRole", []interface{}{arg1})
	fake.createRoleMutex.Unlock()
	if fake.CreateRoleStub != nil {
		return fake.CreateRoleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createRoleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateRoleCallCount() int {
	fake.createRoleMutex.RLock()
	defer fake.createRoleMutex.RUnlock()
	return len(fake.createRoleArgsForCall)
}

func (fake *FakeIAMAPI) CreateRoleCalls(stub func(*iam.CreateRoleInput) (*iam.CreateRoleOutput, error)) {
	fake.createRoleMutex.Lock()
	defer fake.createRoleMutex.Unlock()
	fake.CreateRoleStub = stub
}

func (fake *FakeIAMAPI) CreateRoleArgsForCall(i int) *iam.CreateRoleInput {
	fake.createRoleMutex.RLock()
	defer fake.createRoleMutex.RUnlock()
	argsForCall := fake.createRoleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateRoleReturns(result1 *iam.CreateRoleOutput, result2 error) {
	fake.createRoleMutex.Lock()
	defer fake.createRoleMutex.Unlock()
	fake.CreateRoleStub = nil
	fake.createRoleReturns = struct {
		result1 *iam.CreateRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateRoleReturnsOnCall(i int, result1 *iam.CreateRoleOutput, result2 error) {
	fake.createRoleMutex.Lock()
	defer fake.createRoleMutex.Unlock()
	fake.CreateRoleStub = nil
	if fake.createRoleReturnsOnCall == nil {
		fake.createRoleReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateRoleOutput
			result2 error
		})
	}
	fake.createRoleReturnsOnCall[i] = struct {
		result1 *iam.CreateRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateRoleRequest(arg1 *iam.CreateRoleInput) (*request.Request, *iam.CreateRoleOutput) {
	fake.createRoleRequestMutex.Lock()
	ret, specificReturn := fake.createRoleRequestReturnsOnCall[len(fake.createRoleRequestArgsForCall)]
	fake.createRoleRequestArgsForCall = append(fake.createRoleRequestArgsForCall, struct {
		arg1 *iam.CreateRoleInput
	}{arg1})
	fake.recordInvocation("CreateRoleRequest", []interface{}{arg1})
	fake.createRoleRequestMutex.Unlock()
	if fake.CreateRoleRequestStub != nil {
		return fake.CreateRoleRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createRoleRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateRoleRequestCallCount() int {
	fake.createRoleRequestMutex.RLock()
	defer fake.createRoleRequestMutex.RUnlock()
	return len(fake.createRoleRequestArgsForCall)
}

func (fake *FakeIAMAPI) CreateRoleRequestCalls(stub func(*iam.CreateRoleInput) (*request.Request, *iam.CreateRoleOutput)) {
	fake.createRoleRequestMutex.Lock()
	defer fake.createRoleRequestMutex.Unlock()
	fake.CreateRoleRequestStub = stub
}

func (fake *FakeIAMAPI) CreateRoleRequestArgsForCall(i int) *iam.CreateRoleInput {
	fake.createRoleRequestMutex.RLock()
	defer fake.createRoleRequestMutex.RUnlock()
	argsForCall := fake.createRoleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateRoleRequestReturns(result1 *request.Request, result2 *iam.CreateRoleOutput) {
	fake.createRoleRequestMutex.Lock()
	defer fake.createRoleRequestMutex.Unlock()
	fake.CreateRoleRequestStub = nil
	fake.createRoleRequestReturns = struct {
		result1 *request.Request
		result2 *iam.CreateRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateRoleRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.CreateRoleOutput) {
	fake.createRoleRequestMutex.Lock()
	defer fake.createRoleRequestMutex.Unlock()
	fake.CreateRoleRequestStub = nil
	if fake.createRoleRequestReturnsOnCall == nil {
		fake.createRoleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.CreateRoleOutput
		})
	}
	fake.createRoleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.CreateRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateRoleWithContext(arg1 context.Context, arg2 *iam.CreateRoleInput, arg3 ...request.Option) (*iam.CreateRoleOutput, error) {
	fake.createRoleWithContextMutex.Lock()
	ret, specificReturn := fake.createRoleWithContextReturnsOnCall[len(fake.createRoleWithContextArgsForCall)]
	fake.createRoleWithContextArgsForCall = append(fake.createRoleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.CreateRoleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateRoleWithContext", []interface{}{arg1, arg2, arg3})
	fake.createRoleWithContextMutex.Unlock()
	if fake.CreateRoleWithContextStub != nil {
		return fake.CreateRoleWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createRoleWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateRoleWithContextCallCount() int {
	fake.createRoleWithContextMutex.RLock()
	defer fake.createRoleWithContextMutex.RUnlock()
	return len(fake.createRoleWithContextArgsForCall)
}

func (fake *FakeIAMAPI) CreateRoleWithContextCalls(stub func(context.Context, *iam.CreateRoleInput, ...request.Option) (*iam.CreateRoleOutput, error)) {
	fake.createRoleWithContextMutex.Lock()
	defer fake.createRoleWithContextMutex.Unlock()
	fake.CreateRoleWithContextStub = stub
}

func (fake *FakeIAMAPI) CreateRoleWithContextArgsForCall(i int) (context.Context, *iam.CreateRoleInput, []request.Option) {
	fake.createRoleWithContextMutex.RLock()
	defer fake.createRoleWithContextMutex.RUnlock()
	argsForCall := fake.createRoleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) CreateRoleWithContextReturns(result1 *iam.CreateRoleOutput, result2 error) {
	fake.createRoleWithContextMutex.Lock()
	defer fake.createRoleWithContextMutex.Unlock()
	fake.CreateRoleWithContextStub = nil
	fake.createRoleWithContextReturns = struct {
		result1 *iam.CreateRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateRoleWithContextReturnsOnCall(i int, result1 *iam.CreateRoleOutput, result2 error) {
	fake.createRoleWithContextMutex.Lock()
	defer fake.createRoleWithContextMutex.Unlock()
	fake.CreateRoleWithContextStub = nil
	if fake.createRoleWithContextReturnsOnCall == nil {
		fake.createRoleWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateRoleOutput
			result2 error
		})
	}
	fake.createRoleWithContextReturnsOnCall[i] = struct {
		result1 *iam.CreateRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateSAMLProvider(arg1 *iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error) {
	fake.createSAMLProviderMutex.Lock()
	ret, specificReturn := fake.createSAMLProviderReturnsOnCall[len(fake.createSAMLProviderArgsForCall)]
	fake.createSAMLProviderArgsForCall = append(fake.createSAMLProviderArgsForCall, struct {
		arg1 *iam.CreateSAMLProviderInput
	}{arg1})
	fake.recordInvocation("CreateSAMLProvider", []interface{}{arg1})
	fake.createSAMLProviderMutex.Unlock()
	if fake.CreateSAMLProviderStub != nil {
		return fake.CreateSAMLProviderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSAMLProviderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateSAMLProviderCallCount() int {
	fake.createSAMLProviderMutex.RLock()
	defer fake.createSAMLProviderMutex.RUnlock()
	return len(fake.createSAMLProviderArgsForCall)
}

func (fake *FakeIAMAPI) CreateSAMLProviderCalls(stub func(*iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error)) {
	fake.createSAMLProviderMutex.Lock()
	defer fake.createSAMLProviderMutex.Unlock()
	fake.CreateSAMLProviderStub = stub
}

func (fake *FakeIAMAPI) CreateSAMLProviderArgsForCall(i int) *iam.CreateSAMLProviderInput {
	fake.createSAMLProviderMutex.RLock()
	defer fake.createSAMLProviderMutex.RUnlock()
	argsForCall := fake.createSAMLProviderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateSAMLProviderReturns(result1 *iam.CreateSAMLProviderOutput, result2 error) {
	fake.createSAMLProviderMutex.Lock()
	defer fake.createSAMLProviderMutex.Unlock()
	fake.CreateSAMLProviderStub = nil
	fake.createSAMLProviderReturns = struct {
		result1 *iam.CreateSAMLProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateSAMLProviderReturnsOnCall(i int, result1 *iam.CreateSAMLProviderOutput, result2 error) {
	fake.createSAMLProviderMutex.Lock()
	defer fake.createSAMLProviderMutex.Unlock()
	fake.CreateSAMLProviderStub = nil
	if fake.createSAMLProviderReturnsOnCall == nil {
		fake.createSAMLProviderReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateSAMLProviderOutput
			result2 error
		})
	}
	fake.createSAMLProviderReturnsOnCall[i] = struct {
		result1 *iam.CreateSAMLProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateSAMLProviderRequest(arg1 *iam.CreateSAMLProviderInput) (*request.Request, *iam.CreateSAMLProviderOutput) {
	fake.createSAMLProviderRequestMutex.Lock()
	ret, specificReturn := fake.createSAMLProviderRequestReturnsOnCall[len(fake.createSAMLProviderRequestArgsForCall)]
	fake.createSAMLProviderRequestArgsForCall = append(fake.createSAMLProviderRequestArgsForCall, struct {
		arg1 *iam.CreateSAMLProviderInput
	}{arg1})
	fake.recordInvocation("CreateSAMLProviderRequest", []interface{}{arg1})
	fake.createSAMLProviderRequestMutex.Unlock()
	if fake.CreateSAMLProviderRequestStub != nil {
		return fake.CreateSAMLProviderRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSAMLProviderRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateSAMLProviderRequestCallCount() int {
	fake.createSAMLProviderRequestMutex.RLock()
	defer fake.createSAMLProviderRequestMutex.RUnlock()
	return len(fake.createSAMLProviderRequestArgsForCall)
}

func (fake *FakeIAMAPI) CreateSAMLProviderRequestCalls(stub func(*iam.CreateSAMLProviderInput) (*request.Request, *iam.CreateSAMLProviderOutput)) {
	fake.createSAMLProviderRequestMutex.Lock()
	defer fake.createSAMLProviderRequestMutex.Unlock()
	fake.CreateSAMLProviderRequestStub = stub
}

func (fake *FakeIAMAPI) CreateSAMLProviderRequestArgsForCall(i int) *iam.CreateSAMLProviderInput {
	fake.createSAMLProviderRequestMutex.RLock()
	defer fake.createSAMLProviderRequestMutex.RUnlock()
	argsForCall := fake.createSAMLProviderRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateSAMLProviderRequestReturns(result1 *request.Request, result2 *iam.CreateSAMLProviderOutput) {
	fake.createSAMLProviderRequestMutex.Lock()
	defer fake.createSAMLProviderRequestMutex.Unlock()
	fake.CreateSAMLProviderRequestStub = nil
	fake.createSAMLProviderRequestReturns = struct {
		result1 *request.Request
		result2 *iam.CreateSAMLProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateSAMLProviderRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.CreateSAMLProviderOutput) {
	fake.createSAMLProviderRequestMutex.Lock()
	defer fake.createSAMLProviderRequestMutex.Unlock()
	fake.CreateSAMLProviderRequestStub = nil
	if fake.createSAMLProviderRequestReturnsOnCall == nil {
		fake.createSAMLProviderRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.CreateSAMLProviderOutput
		})
	}
	fake.createSAMLProviderRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.CreateSAMLProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateSAMLProviderWithContext(arg1 context.Context, arg2 *iam.CreateSAMLProviderInput, arg3 ...request.Option) (*iam.CreateSAMLProviderOutput, error) {
	fake.createSAMLProviderWithContextMutex.Lock()
	ret, specificReturn := fake.createSAMLProviderWithContextReturnsOnCall[len(fake.createSAMLProviderWithContextArgsForCall)]
	fake.createSAMLProviderWithContextArgsForCall = append(fake.createSAMLProviderWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.CreateSAMLProviderInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateSAMLProviderWithContext", []interface{}{arg1, arg2, arg3})
	fake.createSAMLProviderWithContextMutex.Unlock()
	if fake.CreateSAMLProviderWithContextStub != nil {
		return fake.CreateSAMLProviderWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSAMLProviderWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateSAMLProviderWithContextCallCount() int {
	fake.createSAMLProviderWithContextMutex.RLock()
	defer fake.createSAMLProviderWithContextMutex.RUnlock()
	return len(fake.createSAMLProviderWithContextArgsForCall)
}

func (fake *FakeIAMAPI) CreateSAMLProviderWithContextCalls(stub func(context.Context, *iam.CreateSAMLProviderInput, ...request.Option) (*iam.CreateSAMLProviderOutput, error)) {
	fake.createSAMLProviderWithContextMutex.Lock()
	defer fake.createSAMLProviderWithContextMutex.Unlock()
	fake.CreateSAMLProviderWithContextStub = stub
}

func (fake *FakeIAMAPI) CreateSAMLProviderWithContextArgsForCall(i int) (context.Context, *iam.CreateSAMLProviderInput, []request.Option) {
	fake.createSAMLProviderWithContextMutex.RLock()
	defer fake.createSAMLProviderWithContextMutex.RUnlock()
	argsForCall := fake.createSAMLProviderWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) CreateSAMLProviderWithContextReturns(result1 *iam.CreateSAMLProviderOutput, result2 error) {
	fake.createSAMLProviderWithContextMutex.Lock()
	defer fake.createSAMLProviderWithContextMutex.Unlock()
	fake.CreateSAMLProviderWithContextStub = nil
	fake.createSAMLProviderWithContextReturns = struct {
		result1 *iam.CreateSAMLProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateSAMLProviderWithContextReturnsOnCall(i int, result1 *iam.CreateSAMLProviderOutput, result2 error) {
	fake.createSAMLProviderWithContextMutex.Lock()
	defer fake.createSAMLProviderWithContextMutex.Unlock()
	fake.CreateSAMLProviderWithContextStub = nil
	if fake.createSAMLProviderWithContextReturnsOnCall == nil {
		fake.createSAMLProviderWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateSAMLProviderOutput
			result2 error
		})
	}
	fake.createSAMLProviderWithContextReturnsOnCall[i] = struct {
		result1 *iam.CreateSAMLProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateServiceLinkedRole(arg1 *iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error) {
	fake.createServiceLinkedRoleMutex.Lock()
	ret, specificReturn := fake.createServiceLinkedRoleReturnsOnCall[len(fake.createServiceLinkedRoleArgsForCall)]
	fake.createServiceLinkedRoleArgsForCall = append(fake.createServiceLinkedRoleArgsForCall, struct {
		arg1 *iam.CreateServiceLinkedRoleInput
	}{arg1})
	fake.recordInvocation("CreateServiceLinkedRole", []interface{}{arg1})
	fake.createServiceLinkedRoleMutex.Unlock()
	if fake.CreateServiceLinkedRoleStub != nil {
		return fake.CreateServiceLinkedRoleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createServiceLinkedRoleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateServiceLinkedRoleCallCount() int {
	fake.createServiceLinkedRoleMutex.RLock()
	defer fake.createServiceLinkedRoleMutex.RUnlock()
	return len(fake.createServiceLinkedRoleArgsForCall)
}

func (fake *FakeIAMAPI) CreateServiceLinkedRoleCalls(stub func(*iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error)) {
	fake.createServiceLinkedRoleMutex.Lock()
	defer fake.createServiceLinkedRoleMutex.Unlock()
	fake.CreateServiceLinkedRoleStub = stub
}

func (fake *FakeIAMAPI) CreateServiceLinkedRoleArgsForCall(i int) *iam.CreateServiceLinkedRoleInput {
	fake.createServiceLinkedRoleMutex.RLock()
	defer fake.createServiceLinkedRoleMutex.RUnlock()
	argsForCall := fake.createServiceLinkedRoleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateServiceLinkedRoleReturns(result1 *iam.CreateServiceLinkedRoleOutput, result2 error) {
	fake.createServiceLinkedRoleMutex.Lock()
	defer fake.createServiceLinkedRoleMutex.Unlock()
	fake.CreateServiceLinkedRoleStub = nil
	fake.createServiceLinkedRoleReturns = struct {
		result1 *iam.CreateServiceLinkedRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateServiceLinkedRoleReturnsOnCall(i int, result1 *iam.CreateServiceLinkedRoleOutput, result2 error) {
	fake.createServiceLinkedRoleMutex.Lock()
	defer fake.createServiceLinkedRoleMutex.Unlock()
	fake.CreateServiceLinkedRoleStub = nil
	if fake.createServiceLinkedRoleReturnsOnCall == nil {
		fake.createServiceLinkedRoleReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateServiceLinkedRoleOutput
			result2 error
		})
	}
	fake.createServiceLinkedRoleReturnsOnCall[i] = struct {
		result1 *iam.CreateServiceLinkedRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateServiceLinkedRoleRequest(arg1 *iam.CreateServiceLinkedRoleInput) (*request.Request, *iam.CreateServiceLinkedRoleOutput) {
	fake.createServiceLinkedRoleRequestMutex.Lock()
	ret, specificReturn := fake.createServiceLinkedRoleRequestReturnsOnCall[len(fake.createServiceLinkedRoleRequestArgsForCall)]
	fake.createServiceLinkedRoleRequestArgsForCall = append(fake.createServiceLinkedRoleRequestArgsForCall, struct {
		arg1 *iam.CreateServiceLinkedRoleInput
	}{arg1})
	fake.recordInvocation("CreateServiceLinkedRoleRequest", []interface{}{arg1})
	fake.createServiceLinkedRoleRequestMutex.Unlock()
	if fake.CreateServiceLinkedRoleRequestStub != nil {
		return fake.CreateServiceLinkedRoleRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createServiceLinkedRoleRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateServiceLinkedRoleRequestCallCount() int {
	fake.createServiceLinkedRoleRequestMutex.RLock()
	defer fake.createServiceLinkedRoleRequestMutex.RUnlock()
	return len(fake.createServiceLinkedRoleRequestArgsForCall)
}

func (fake *FakeIAMAPI) CreateServiceLinkedRoleRequestCalls(stub func(*iam.CreateServiceLinkedRoleInput) (*request.Request, *iam.CreateServiceLinkedRoleOutput)) {
	fake.createServiceLinkedRoleRequestMutex.Lock()
	defer fake.createServiceLinkedRoleRequestMutex.Unlock()
	fake.CreateServiceLinkedRoleRequestStub = stub
}

func (fake *FakeIAMAPI) CreateServiceLinkedRoleRequestArgsForCall(i int) *iam.CreateServiceLinkedRoleInput {
	fake.createServiceLinkedRoleRequestMutex.RLock()
	defer fake.createServiceLinkedRoleRequestMutex.RUnlock()
	argsForCall := fake.createServiceLinkedRoleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateServiceLinkedRoleRequestReturns(result1 *request.Request, result2 *iam.CreateServiceLinkedRoleOutput) {
	fake.createServiceLinkedRoleRequestMutex.Lock()
	defer fake.createServiceLinkedRoleRequestMutex.Unlock()
	fake.CreateServiceLinkedRoleRequestStub = nil
	fake.createServiceLinkedRoleRequestReturns = struct {
		result1 *request.Request
		result2 *iam.CreateServiceLinkedRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateServiceLinkedRoleRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.CreateServiceLinkedRoleOutput) {
	fake.createServiceLinkedRoleRequestMutex.Lock()
	defer fake.createServiceLinkedRoleRequestMutex.Unlock()
	fake.CreateServiceLinkedRoleRequestStub = nil
	if fake.createServiceLinkedRoleRequestReturnsOnCall == nil {
		fake.createServiceLinkedRoleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.CreateServiceLinkedRoleOutput
		})
	}
	fake.createServiceLinkedRoleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.CreateServiceLinkedRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateServiceLinkedRoleWithContext(arg1 context.Context, arg2 *iam.CreateServiceLinkedRoleInput, arg3 ...request.Option) (*iam.CreateServiceLinkedRoleOutput, error) {
	fake.createServiceLinkedRoleWithContextMutex.Lock()
	ret, specificReturn := fake.createServiceLinkedRoleWithContextReturnsOnCall[len(fake.createServiceLinkedRoleWithContextArgsForCall)]
	fake.createServiceLinkedRoleWithContextArgsForCall = append(fake.createServiceLinkedRoleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.CreateServiceLinkedRoleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateServiceLinkedRoleWithContext", []interface{}{arg1, arg2, arg3})
	fake.createServiceLinkedRoleWithContextMutex.Unlock()
	if fake.CreateServiceLinkedRoleWithContextStub != nil {
		return fake.CreateServiceLinkedRoleWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createServiceLinkedRoleWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateServiceLinkedRoleWithContextCallCount() int {
	fake.createServiceLinkedRoleWithContextMutex.RLock()
	defer fake.createServiceLinkedRoleWithContextMutex.RUnlock()
	return len(fake.createServiceLinkedRoleWithContextArgsForCall)
}

func (fake *FakeIAMAPI) CreateServiceLinkedRoleWithContextCalls(stub func(context.Context, *iam.CreateServiceLinkedRoleInput, ...request.Option) (*iam.CreateServiceLinkedRoleOutput, error)) {
	fake.createServiceLinkedRoleWithContextMutex.Lock()
	defer fake.createServiceLinkedRoleWithContextMutex.Unlock()
	fake.CreateServiceLinkedRoleWithContextStub = stub
}

func (fake *FakeIAMAPI) CreateServiceLinkedRoleWithContextArgsForCall(i int) (context.Context, *iam.CreateServiceLinkedRoleInput, []request.Option) {
	fake.createServiceLinkedRoleWithContextMutex.RLock()
	defer fake.createServiceLinkedRoleWithContextMutex.RUnlock()
	argsForCall := fake.createServiceLinkedRoleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) CreateServiceLinkedRoleWithContextReturns(result1 *iam.CreateServiceLinkedRoleOutput, result2 error) {
	fake.createServiceLinkedRoleWithContextMutex.Lock()
	defer fake.createServiceLinkedRoleWithContextMutex.Unlock()
	fake.CreateServiceLinkedRoleWithContextStub = nil
	fake.createServiceLinkedRoleWithContextReturns = struct {
		result1 *iam.CreateServiceLinkedRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateServiceLinkedRoleWithContextReturnsOnCall(i int, result1 *iam.CreateServiceLinkedRoleOutput, result2 error) {
	fake.createServiceLinkedRoleWithContextMutex.Lock()
	defer fake.createServiceLinkedRoleWithContextMutex.Unlock()
	fake.CreateServiceLinkedRoleWithContextStub = nil
	if fake.createServiceLinkedRoleWithContextReturnsOnCall == nil {
		fake.createServiceLinkedRoleWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateServiceLinkedRoleOutput
			result2 error
		})
	}
	fake.createServiceLinkedRoleWithContextReturnsOnCall[i] = struct {
		result1 *iam.CreateServiceLinkedRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredential(arg1 *iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error) {
	fake.createServiceSpecificCredentialMutex.Lock()
	ret, specificReturn := fake.createServiceSpecificCredentialReturnsOnCall[len(fake.createServiceSpecificCredentialArgsForCall)]
	fake.createServiceSpecificCredentialArgsForCall = append(fake.createServiceSpecificCredentialArgsForCall, struct {
		arg1 *iam.CreateServiceSpecificCredentialInput
	}{arg1})
	fake.recordInvocation("CreateServiceSpecificCredential", []interface{}{arg1})
	fake.createServiceSpecificCredentialMutex.Unlock()
	if fake.CreateServiceSpecificCredentialStub != nil {
		return fake.CreateServiceSpecificCredentialStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createServiceSpecificCredentialReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredentialCallCount() int {
	fake.createServiceSpecificCredentialMutex.RLock()
	defer fake.createServiceSpecificCredentialMutex.RUnlock()
	return len(fake.createServiceSpecificCredentialArgsForCall)
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredentialCalls(stub func(*iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error)) {
	fake.createServiceSpecificCredentialMutex.Lock()
	defer fake.createServiceSpecificCredentialMutex.Unlock()
	fake.CreateServiceSpecificCredentialStub = stub
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredentialArgsForCall(i int) *iam.CreateServiceSpecificCredentialInput {
	fake.createServiceSpecificCredentialMutex.RLock()
	defer fake.createServiceSpecificCredentialMutex.RUnlock()
	argsForCall := fake.createServiceSpecificCredentialArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredentialReturns(result1 *iam.CreateServiceSpecificCredentialOutput, result2 error) {
	fake.createServiceSpecificCredentialMutex.Lock()
	defer fake.createServiceSpecificCredentialMutex.Unlock()
	fake.CreateServiceSpecificCredentialStub = nil
	fake.createServiceSpecificCredentialReturns = struct {
		result1 *iam.CreateServiceSpecificCredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredentialReturnsOnCall(i int, result1 *iam.CreateServiceSpecificCredentialOutput, result2 error) {
	fake.createServiceSpecificCredentialMutex.Lock()
	defer fake.createServiceSpecificCredentialMutex.Unlock()
	fake.CreateServiceSpecificCredentialStub = nil
	if fake.createServiceSpecificCredentialReturnsOnCall == nil {
		fake.createServiceSpecificCredentialReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateServiceSpecificCredentialOutput
			result2 error
		})
	}
	fake.createServiceSpecificCredentialReturnsOnCall[i] = struct {
		result1 *iam.CreateServiceSpecificCredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredentialRequest(arg1 *iam.CreateServiceSpecificCredentialInput) (*request.Request, *iam.CreateServiceSpecificCredentialOutput) {
	fake.createServiceSpecificCredentialRequestMutex.Lock()
	ret, specificReturn := fake.createServiceSpecificCredentialRequestReturnsOnCall[len(fake.createServiceSpecificCredentialRequestArgsForCall)]
	fake.createServiceSpecificCredentialRequestArgsForCall = append(fake.createServiceSpecificCredentialRequestArgsForCall, struct {
		arg1 *iam.CreateServiceSpecificCredentialInput
	}{arg1})
	fake.recordInvocation("CreateServiceSpecificCredentialRequest", []interface{}{arg1})
	fake.createServiceSpecificCredentialRequestMutex.Unlock()
	if fake.CreateServiceSpecificCredentialRequestStub != nil {
		return fake.CreateServiceSpecificCredentialRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createServiceSpecificCredentialRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredentialRequestCallCount() int {
	fake.createServiceSpecificCredentialRequestMutex.RLock()
	defer fake.createServiceSpecificCredentialRequestMutex.RUnlock()
	return len(fake.createServiceSpecificCredentialRequestArgsForCall)
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredentialRequestCalls(stub func(*iam.CreateServiceSpecificCredentialInput) (*request.Request, *iam.CreateServiceSpecificCredentialOutput)) {
	fake.createServiceSpecificCredentialRequestMutex.Lock()
	defer fake.createServiceSpecificCredentialRequestMutex.Unlock()
	fake.CreateServiceSpecificCredentialRequestStub = stub
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredentialRequestArgsForCall(i int) *iam.CreateServiceSpecificCredentialInput {
	fake.createServiceSpecificCredentialRequestMutex.RLock()
	defer fake.createServiceSpecificCredentialRequestMutex.RUnlock()
	argsForCall := fake.createServiceSpecificCredentialRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredentialRequestReturns(result1 *request.Request, result2 *iam.CreateServiceSpecificCredentialOutput) {
	fake.createServiceSpecificCredentialRequestMutex.Lock()
	defer fake.createServiceSpecificCredentialRequestMutex.Unlock()
	fake.CreateServiceSpecificCredentialRequestStub = nil
	fake.createServiceSpecificCredentialRequestReturns = struct {
		result1 *request.Request
		result2 *iam.CreateServiceSpecificCredentialOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredentialRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.CreateServiceSpecificCredentialOutput) {
	fake.createServiceSpecificCredentialRequestMutex.Lock()
	defer fake.createServiceSpecificCredentialRequestMutex.Unlock()
	fake.CreateServiceSpecificCredentialRequestStub = nil
	if fake.createServiceSpecificCredentialRequestReturnsOnCall == nil {
		fake.createServiceSpecificCredentialRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.CreateServiceSpecificCredentialOutput
		})
	}
	fake.createServiceSpecificCredentialRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.CreateServiceSpecificCredentialOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredentialWithContext(arg1 context.Context, arg2 *iam.CreateServiceSpecificCredentialInput, arg3 ...request.Option) (*iam.CreateServiceSpecificCredentialOutput, error) {
	fake.createServiceSpecificCredentialWithContextMutex.Lock()
	ret, specificReturn := fake.createServiceSpecificCredentialWithContextReturnsOnCall[len(fake.createServiceSpecificCredentialWithContextArgsForCall)]
	fake.createServiceSpecificCredentialWithContextArgsForCall = append(fake.createServiceSpecificCredentialWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.CreateServiceSpecificCredentialInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateServiceSpecificCredentialWithContext", []interface{}{arg1, arg2, arg3})
	fake.createServiceSpecificCredentialWithContextMutex.Unlock()
	if fake.CreateServiceSpecificCredentialWithContextStub != nil {
		return fake.CreateServiceSpecificCredentialWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createServiceSpecificCredentialWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredentialWithContextCallCount() int {
	fake.createServiceSpecificCredentialWithContextMutex.RLock()
	defer fake.createServiceSpecificCredentialWithContextMutex.RUnlock()
	return len(fake.createServiceSpecificCredentialWithContextArgsForCall)
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredentialWithContextCalls(stub func(context.Context, *iam.CreateServiceSpecificCredentialInput, ...request.Option) (*iam.CreateServiceSpecificCredentialOutput, error)) {
	fake.createServiceSpecificCredentialWithContextMutex.Lock()
	defer fake.createServiceSpecificCredentialWithContextMutex.Unlock()
	fake.CreateServiceSpecificCredentialWithContextStub = stub
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredentialWithContextArgsForCall(i int) (context.Context, *iam.CreateServiceSpecificCredentialInput, []request.Option) {
	fake.createServiceSpecificCredentialWithContextMutex.RLock()
	defer fake.createServiceSpecificCredentialWithContextMutex.RUnlock()
	argsForCall := fake.createServiceSpecificCredentialWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredentialWithContextReturns(result1 *iam.CreateServiceSpecificCredentialOutput, result2 error) {
	fake.createServiceSpecificCredentialWithContextMutex.Lock()
	defer fake.createServiceSpecificCredentialWithContextMutex.Unlock()
	fake.CreateServiceSpecificCredentialWithContextStub = nil
	fake.createServiceSpecificCredentialWithContextReturns = struct {
		result1 *iam.CreateServiceSpecificCredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateServiceSpecificCredentialWithContextReturnsOnCall(i int, result1 *iam.CreateServiceSpecificCredentialOutput, result2 error) {
	fake.createServiceSpecificCredentialWithContextMutex.Lock()
	defer fake.createServiceSpecificCredentialWithContextMutex.Unlock()
	fake.CreateServiceSpecificCredentialWithContextStub = nil
	if fake.createServiceSpecificCredentialWithContextReturnsOnCall == nil {
		fake.createServiceSpecificCredentialWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateServiceSpecificCredentialOutput
			result2 error
		})
	}
	fake.createServiceSpecificCredentialWithContextReturnsOnCall[i] = struct {
		result1 *iam.CreateServiceSpecificCredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateUser(arg1 *iam.CreateUserInput) (*iam.CreateUserOutput, error) {
	fake.createUserMutex.Lock()
	ret, specificReturn := fake.createUserReturnsOnCall[len(fake.createUserArgsForCall)]
	fake.createUserArgsForCall = append(fake.createUserArgsForCall, struct {
		arg1 *iam.CreateUserInput
	}{arg1})
	fake.recordInvocation("CreateUser", []interface{}{arg1})
	fake.createUserMutex.Unlock()
	if fake.CreateUserStub != nil {
		return fake.CreateUserStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createUserReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateUserCallCount() int {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	return len(fake.createUserArgsForCall)
}

func (fake *FakeIAMAPI) CreateUserCalls(stub func(*iam.CreateUserInput) (*iam.CreateUserOutput, error)) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = stub
}

func (fake *FakeIAMAPI) CreateUserArgsForCall(i int) *iam.CreateUserInput {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	argsForCall := fake.createUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateUserReturns(result1 *iam.CreateUserOutput, result2 error) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = nil
	fake.createUserReturns = struct {
		result1 *iam.CreateUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateUserReturnsOnCall(i int, result1 *iam.CreateUserOutput, result2 error) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = nil
	if fake.createUserReturnsOnCall == nil {
		fake.createUserReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateUserOutput
			result2 error
		})
	}
	fake.createUserReturnsOnCall[i] = struct {
		result1 *iam.CreateUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateUserRequest(arg1 *iam.CreateUserInput) (*request.Request, *iam.CreateUserOutput) {
	fake.createUserRequestMutex.Lock()
	ret, specificReturn := fake.createUserRequestReturnsOnCall[len(fake.createUserRequestArgsForCall)]
	fake.createUserRequestArgsForCall = append(fake.createUserRequestArgsForCall, struct {
		arg1 *iam.CreateUserInput
	}{arg1})
	fake.recordInvocation("CreateUserRequest", []interface{}{arg1})
	fake.createUserRequestMutex.Unlock()
	if fake.CreateUserRequestStub != nil {
		return fake.CreateUserRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createUserRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateUserRequestCallCount() int {
	fake.createUserRequestMutex.RLock()
	defer fake.createUserRequestMutex.RUnlock()
	return len(fake.createUserRequestArgsForCall)
}

func (fake *FakeIAMAPI) CreateUserRequestCalls(stub func(*iam.CreateUserInput) (*request.Request, *iam.CreateUserOutput)) {
	fake.createUserRequestMutex.Lock()
	defer fake.createUserRequestMutex.Unlock()
	fake.CreateUserRequestStub = stub
}

func (fake *FakeIAMAPI) CreateUserRequestArgsForCall(i int) *iam.CreateUserInput {
	fake.createUserRequestMutex.RLock()
	defer fake.createUserRequestMutex.RUnlock()
	argsForCall := fake.createUserRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateUserRequestReturns(result1 *request.Request, result2 *iam.CreateUserOutput) {
	fake.createUserRequestMutex.Lock()
	defer fake.createUserRequestMutex.Unlock()
	fake.CreateUserRequestStub = nil
	fake.createUserRequestReturns = struct {
		result1 *request.Request
		result2 *iam.CreateUserOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateUserRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.CreateUserOutput) {
	fake.createUserRequestMutex.Lock()
	defer fake.createUserRequestMutex.Unlock()
	fake.CreateUserRequestStub = nil
	if fake.createUserRequestReturnsOnCall == nil {
		fake.createUserRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.CreateUserOutput
		})
	}
	fake.createUserRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.CreateUserOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateUserWithContext(arg1 context.Context, arg2 *iam.CreateUserInput, arg3 ...request.Option) (*iam.CreateUserOutput, error) {
	fake.createUserWithContextMutex.Lock()
	ret, specificReturn := fake.createUserWithContextReturnsOnCall[len(fake.createUserWithContextArgsForCall)]
	fake.createUserWithContextArgsForCall = append(fake.createUserWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.CreateUserInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateUserWithContext", []interface{}{arg1, arg2, arg3})
	fake.createUserWithContextMutex.Unlock()
	if fake.CreateUserWithContextStub != nil {
		return fake.CreateUserWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createUserWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateUserWithContextCallCount() int {
	fake.createUserWithContextMutex.RLock()
	defer fake.createUserWithContextMutex.RUnlock()
	return len(fake.createUserWithContextArgsForCall)
}

func (fake *FakeIAMAPI) CreateUserWithContextCalls(stub func(context.Context, *iam.CreateUserInput, ...request.Option) (*iam.CreateUserOutput, error)) {
	fake.createUserWithContextMutex.Lock()
	defer fake.createUserWithContextMutex.Unlock()
	fake.CreateUserWithContextStub = stub
}

func (fake *FakeIAMAPI) CreateUserWithContextArgsForCall(i int) (context.Context, *iam.CreateUserInput, []request.Option) {
	fake.createUserWithContextMutex.RLock()
	defer fake.createUserWithContextMutex.RUnlock()
	argsForCall := fake.createUserWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) CreateUserWithContextReturns(result1 *iam.CreateUserOutput, result2 error) {
	fake.createUserWithContextMutex.Lock()
	defer fake.createUserWithContextMutex.Unlock()
	fake.CreateUserWithContextStub = nil
	fake.createUserWithContextReturns = struct {
		result1 *iam.CreateUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateUserWithContextReturnsOnCall(i int, result1 *iam.CreateUserOutput, result2 error) {
	fake.createUserWithContextMutex.Lock()
	defer fake.createUserWithContextMutex.Unlock()
	fake.CreateUserWithContextStub = nil
	if fake.createUserWithContextReturnsOnCall == nil {
		fake.createUserWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateUserOutput
			result2 error
		})
	}
	fake.createUserWithContextReturnsOnCall[i] = struct {
		result1 *iam.CreateUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateVirtualMFADevice(arg1 *iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error) {
	fake.createVirtualMFADeviceMutex.Lock()
	ret, specificReturn := fake.createVirtualMFADeviceReturnsOnCall[len(fake.createVirtualMFADeviceArgsForCall)]
	fake.createVirtualMFADeviceArgsForCall = append(fake.createVirtualMFADeviceArgsForCall, struct {
		arg1 *iam.CreateVirtualMFADeviceInput
	}{arg1})
	fake.recordInvocation("CreateVirtualMFADevice", []interface{}{arg1})
	fake.createVirtualMFADeviceMutex.Unlock()
	if fake.CreateVirtualMFADeviceStub != nil {
		return fake.CreateVirtualMFADeviceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVirtualMFADeviceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateVirtualMFADeviceCallCount() int {
	fake.createVirtualMFADeviceMutex.RLock()
	defer fake.createVirtualMFADeviceMutex.RUnlock()
	return len(fake.createVirtualMFADeviceArgsForCall)
}

func (fake *FakeIAMAPI) CreateVirtualMFADeviceCalls(stub func(*iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error)) {
	fake.createVirtualMFADeviceMutex.Lock()
	defer fake.createVirtualMFADeviceMutex.Unlock()
	fake.CreateVirtualMFADeviceStub = stub
}

func (fake *FakeIAMAPI) CreateVirtualMFADeviceArgsForCall(i int) *iam.CreateVirtualMFADeviceInput {
	fake.createVirtualMFADeviceMutex.RLock()
	defer fake.createVirtualMFADeviceMutex.RUnlock()
	argsForCall := fake.createVirtualMFADeviceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateVirtualMFADeviceReturns(result1 *iam.CreateVirtualMFADeviceOutput, result2 error) {
	fake.createVirtualMFADeviceMutex.Lock()
	defer fake.createVirtualMFADeviceMutex.Unlock()
	fake.CreateVirtualMFADeviceStub = nil
	fake.createVirtualMFADeviceReturns = struct {
		result1 *iam.CreateVirtualMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateVirtualMFADeviceReturnsOnCall(i int, result1 *iam.CreateVirtualMFADeviceOutput, result2 error) {
	fake.createVirtualMFADeviceMutex.Lock()
	defer fake.createVirtualMFADeviceMutex.Unlock()
	fake.CreateVirtualMFADeviceStub = nil
	if fake.createVirtualMFADeviceReturnsOnCall == nil {
		fake.createVirtualMFADeviceReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateVirtualMFADeviceOutput
			result2 error
		})
	}
	fake.createVirtualMFADeviceReturnsOnCall[i] = struct {
		result1 *iam.CreateVirtualMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateVirtualMFADeviceRequest(arg1 *iam.CreateVirtualMFADeviceInput) (*request.Request, *iam.CreateVirtualMFADeviceOutput) {
	fake.createVirtualMFADeviceRequestMutex.Lock()
	ret, specificReturn := fake.createVirtualMFADeviceRequestReturnsOnCall[len(fake.createVirtualMFADeviceRequestArgsForCall)]
	fake.createVirtualMFADeviceRequestArgsForCall = append(fake.createVirtualMFADeviceRequestArgsForCall, struct {
		arg1 *iam.CreateVirtualMFADeviceInput
	}{arg1})
	fake.recordInvocation("CreateVirtualMFADeviceRequest", []interface{}{arg1})
	fake.createVirtualMFADeviceRequestMutex.Unlock()
	if fake.CreateVirtualMFADeviceRequestStub != nil {
		return fake.CreateVirtualMFADeviceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVirtualMFADeviceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateVirtualMFADeviceRequestCallCount() int {
	fake.createVirtualMFADeviceRequestMutex.RLock()
	defer fake.createVirtualMFADeviceRequestMutex.RUnlock()
	return len(fake.createVirtualMFADeviceRequestArgsForCall)
}

func (fake *FakeIAMAPI) CreateVirtualMFADeviceRequestCalls(stub func(*iam.CreateVirtualMFADeviceInput) (*request.Request, *iam.CreateVirtualMFADeviceOutput)) {
	fake.createVirtualMFADeviceRequestMutex.Lock()
	defer fake.createVirtualMFADeviceRequestMutex.Unlock()
	fake.CreateVirtualMFADeviceRequestStub = stub
}

func (fake *FakeIAMAPI) CreateVirtualMFADeviceRequestArgsForCall(i int) *iam.CreateVirtualMFADeviceInput {
	fake.createVirtualMFADeviceRequestMutex.RLock()
	defer fake.createVirtualMFADeviceRequestMutex.RUnlock()
	argsForCall := fake.createVirtualMFADeviceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) CreateVirtualMFADeviceRequestReturns(result1 *request.Request, result2 *iam.CreateVirtualMFADeviceOutput) {
	fake.createVirtualMFADeviceRequestMutex.Lock()
	defer fake.createVirtualMFADeviceRequestMutex.Unlock()
	fake.CreateVirtualMFADeviceRequestStub = nil
	fake.createVirtualMFADeviceRequestReturns = struct {
		result1 *request.Request
		result2 *iam.CreateVirtualMFADeviceOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateVirtualMFADeviceRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.CreateVirtualMFADeviceOutput) {
	fake.createVirtualMFADeviceRequestMutex.Lock()
	defer fake.createVirtualMFADeviceRequestMutex.Unlock()
	fake.CreateVirtualMFADeviceRequestStub = nil
	if fake.createVirtualMFADeviceRequestReturnsOnCall == nil {
		fake.createVirtualMFADeviceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.CreateVirtualMFADeviceOutput
		})
	}
	fake.createVirtualMFADeviceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.CreateVirtualMFADeviceOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateVirtualMFADeviceWithContext(arg1 context.Context, arg2 *iam.CreateVirtualMFADeviceInput, arg3 ...request.Option) (*iam.CreateVirtualMFADeviceOutput, error) {
	fake.createVirtualMFADeviceWithContextMutex.Lock()
	ret, specificReturn := fake.createVirtualMFADeviceWithContextReturnsOnCall[len(fake.createVirtualMFADeviceWithContextArgsForCall)]
	fake.createVirtualMFADeviceWithContextArgsForCall = append(fake.createVirtualMFADeviceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.CreateVirtualMFADeviceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateVirtualMFADeviceWithContext", []interface{}{arg1, arg2, arg3})
	fake.createVirtualMFADeviceWithContextMutex.Unlock()
	if fake.CreateVirtualMFADeviceWithContextStub != nil {
		return fake.CreateVirtualMFADeviceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVirtualMFADeviceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) CreateVirtualMFADeviceWithContextCallCount() int {
	fake.createVirtualMFADeviceWithContextMutex.RLock()
	defer fake.createVirtualMFADeviceWithContextMutex.RUnlock()
	return len(fake.createVirtualMFADeviceWithContextArgsForCall)
}

func (fake *FakeIAMAPI) CreateVirtualMFADeviceWithContextCalls(stub func(context.Context, *iam.CreateVirtualMFADeviceInput, ...request.Option) (*iam.CreateVirtualMFADeviceOutput, error)) {
	fake.createVirtualMFADeviceWithContextMutex.Lock()
	defer fake.createVirtualMFADeviceWithContextMutex.Unlock()
	fake.CreateVirtualMFADeviceWithContextStub = stub
}

func (fake *FakeIAMAPI) CreateVirtualMFADeviceWithContextArgsForCall(i int) (context.Context, *iam.CreateVirtualMFADeviceInput, []request.Option) {
	fake.createVirtualMFADeviceWithContextMutex.RLock()
	defer fake.createVirtualMFADeviceWithContextMutex.RUnlock()
	argsForCall := fake.createVirtualMFADeviceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) CreateVirtualMFADeviceWithContextReturns(result1 *iam.CreateVirtualMFADeviceOutput, result2 error) {
	fake.createVirtualMFADeviceWithContextMutex.Lock()
	defer fake.createVirtualMFADeviceWithContextMutex.Unlock()
	fake.CreateVirtualMFADeviceWithContextStub = nil
	fake.createVirtualMFADeviceWithContextReturns = struct {
		result1 *iam.CreateVirtualMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) CreateVirtualMFADeviceWithContextReturnsOnCall(i int, result1 *iam.CreateVirtualMFADeviceOutput, result2 error) {
	fake.createVirtualMFADeviceWithContextMutex.Lock()
	defer fake.createVirtualMFADeviceWithContextMutex.Unlock()
	fake.CreateVirtualMFADeviceWithContextStub = nil
	if fake.createVirtualMFADeviceWithContextReturnsOnCall == nil {
		fake.createVirtualMFADeviceWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateVirtualMFADeviceOutput
			result2 error
		})
	}
	fake.createVirtualMFADeviceWithContextReturnsOnCall[i] = struct {
		result1 *iam.CreateVirtualMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeactivateMFADevice(arg1 *iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error) {
	fake.deactivateMFADeviceMutex.Lock()
	ret, specificReturn := fake.deactivateMFADeviceReturnsOnCall[len(fake.deactivateMFADeviceArgsForCall)]
	fake.deactivateMFADeviceArgsForCall = append(fake.deactivateMFADeviceArgsForCall, struct {
		arg1 *iam.DeactivateMFADeviceInput
	}{arg1})
	fake.recordInvocation("DeactivateMFADevice", []interface{}{arg1})
	fake.deactivateMFADeviceMutex.Unlock()
	if fake.DeactivateMFADeviceStub != nil {
		return fake.DeactivateMFADeviceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deactivateMFADeviceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeactivateMFADeviceCallCount() int {
	fake.deactivateMFADeviceMutex.RLock()
	defer fake.deactivateMFADeviceMutex.RUnlock()
	return len(fake.deactivateMFADeviceArgsForCall)
}

func (fake *FakeIAMAPI) DeactivateMFADeviceCalls(stub func(*iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error)) {
	fake.deactivateMFADeviceMutex.Lock()
	defer fake.deactivateMFADeviceMutex.Unlock()
	fake.DeactivateMFADeviceStub = stub
}

func (fake *FakeIAMAPI) DeactivateMFADeviceArgsForCall(i int) *iam.DeactivateMFADeviceInput {
	fake.deactivateMFADeviceMutex.RLock()
	defer fake.deactivateMFADeviceMutex.RUnlock()
	argsForCall := fake.deactivateMFADeviceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeactivateMFADeviceReturns(result1 *iam.DeactivateMFADeviceOutput, result2 error) {
	fake.deactivateMFADeviceMutex.Lock()
	defer fake.deactivateMFADeviceMutex.Unlock()
	fake.DeactivateMFADeviceStub = nil
	fake.deactivateMFADeviceReturns = struct {
		result1 *iam.DeactivateMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeactivateMFADeviceReturnsOnCall(i int, result1 *iam.DeactivateMFADeviceOutput, result2 error) {
	fake.deactivateMFADeviceMutex.Lock()
	defer fake.deactivateMFADeviceMutex.Unlock()
	fake.DeactivateMFADeviceStub = nil
	if fake.deactivateMFADeviceReturnsOnCall == nil {
		fake.deactivateMFADeviceReturnsOnCall = make(map[int]struct {
			result1 *iam.DeactivateMFADeviceOutput
			result2 error
		})
	}
	fake.deactivateMFADeviceReturnsOnCall[i] = struct {
		result1 *iam.DeactivateMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeactivateMFADeviceRequest(arg1 *iam.DeactivateMFADeviceInput) (*request.Request, *iam.DeactivateMFADeviceOutput) {
	fake.deactivateMFADeviceRequestMutex.Lock()
	ret, specificReturn := fake.deactivateMFADeviceRequestReturnsOnCall[len(fake.deactivateMFADeviceRequestArgsForCall)]
	fake.deactivateMFADeviceRequestArgsForCall = append(fake.deactivateMFADeviceRequestArgsForCall, struct {
		arg1 *iam.DeactivateMFADeviceInput
	}{arg1})
	fake.recordInvocation("DeactivateMFADeviceRequest", []interface{}{arg1})
	fake.deactivateMFADeviceRequestMutex.Unlock()
	if fake.DeactivateMFADeviceRequestStub != nil {
		return fake.DeactivateMFADeviceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deactivateMFADeviceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeactivateMFADeviceRequestCallCount() int {
	fake.deactivateMFADeviceRequestMutex.RLock()
	defer fake.deactivateMFADeviceRequestMutex.RUnlock()
	return len(fake.deactivateMFADeviceRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeactivateMFADeviceRequestCalls(stub func(*iam.DeactivateMFADeviceInput) (*request.Request, *iam.DeactivateMFADeviceOutput)) {
	fake.deactivateMFADeviceRequestMutex.Lock()
	defer fake.deactivateMFADeviceRequestMutex.Unlock()
	fake.DeactivateMFADeviceRequestStub = stub
}

func (fake *FakeIAMAPI) DeactivateMFADeviceRequestArgsForCall(i int) *iam.DeactivateMFADeviceInput {
	fake.deactivateMFADeviceRequestMutex.RLock()
	defer fake.deactivateMFADeviceRequestMutex.RUnlock()
	argsForCall := fake.deactivateMFADeviceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeactivateMFADeviceRequestReturns(result1 *request.Request, result2 *iam.DeactivateMFADeviceOutput) {
	fake.deactivateMFADeviceRequestMutex.Lock()
	defer fake.deactivateMFADeviceRequestMutex.Unlock()
	fake.DeactivateMFADeviceRequestStub = nil
	fake.deactivateMFADeviceRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeactivateMFADeviceOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeactivateMFADeviceRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeactivateMFADeviceOutput) {
	fake.deactivateMFADeviceRequestMutex.Lock()
	defer fake.deactivateMFADeviceRequestMutex.Unlock()
	fake.DeactivateMFADeviceRequestStub = nil
	if fake.deactivateMFADeviceRequestReturnsOnCall == nil {
		fake.deactivateMFADeviceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeactivateMFADeviceOutput
		})
	}
	fake.deactivateMFADeviceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeactivateMFADeviceOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeactivateMFADeviceWithContext(arg1 context.Context, arg2 *iam.DeactivateMFADeviceInput, arg3 ...request.Option) (*iam.DeactivateMFADeviceOutput, error) {
	fake.deactivateMFADeviceWithContextMutex.Lock()
	ret, specificReturn := fake.deactivateMFADeviceWithContextReturnsOnCall[len(fake.deactivateMFADeviceWithContextArgsForCall)]
	fake.deactivateMFADeviceWithContextArgsForCall = append(fake.deactivateMFADeviceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeactivateMFADeviceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeactivateMFADeviceWithContext", []interface{}{arg1, arg2, arg3})
	fake.deactivateMFADeviceWithContextMutex.Unlock()
	if fake.DeactivateMFADeviceWithContextStub != nil {
		return fake.DeactivateMFADeviceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deactivateMFADeviceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeactivateMFADeviceWithContextCallCount() int {
	fake.deactivateMFADeviceWithContextMutex.RLock()
	defer fake.deactivateMFADeviceWithContextMutex.RUnlock()
	return len(fake.deactivateMFADeviceWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeactivateMFADeviceWithContextCalls(stub func(context.Context, *iam.DeactivateMFADeviceInput, ...request.Option) (*iam.DeactivateMFADeviceOutput, error)) {
	fake.deactivateMFADeviceWithContextMutex.Lock()
	defer fake.deactivateMFADeviceWithContextMutex.Unlock()
	fake.DeactivateMFADeviceWithContextStub = stub
}

func (fake *FakeIAMAPI) DeactivateMFADeviceWithContextArgsForCall(i int) (context.Context, *iam.DeactivateMFADeviceInput, []request.Option) {
	fake.deactivateMFADeviceWithContextMutex.RLock()
	defer fake.deactivateMFADeviceWithContextMutex.RUnlock()
	argsForCall := fake.deactivateMFADeviceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeactivateMFADeviceWithContextReturns(result1 *iam.DeactivateMFADeviceOutput, result2 error) {
	fake.deactivateMFADeviceWithContextMutex.Lock()
	defer fake.deactivateMFADeviceWithContextMutex.Unlock()
	fake.DeactivateMFADeviceWithContextStub = nil
	fake.deactivateMFADeviceWithContextReturns = struct {
		result1 *iam.DeactivateMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeactivateMFADeviceWithContextReturnsOnCall(i int, result1 *iam.DeactivateMFADeviceOutput, result2 error) {
	fake.deactivateMFADeviceWithContextMutex.Lock()
	defer fake.deactivateMFADeviceWithContextMutex.Unlock()
	fake.DeactivateMFADeviceWithContextStub = nil
	if fake.deactivateMFADeviceWithContextReturnsOnCall == nil {
		fake.deactivateMFADeviceWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeactivateMFADeviceOutput
			result2 error
		})
	}
	fake.deactivateMFADeviceWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeactivateMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccessKey(arg1 *iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error) {
	fake.deleteAccessKeyMutex.Lock()
	ret, specificReturn := fake.deleteAccessKeyReturnsOnCall[len(fake.deleteAccessKeyArgsForCall)]
	fake.deleteAccessKeyArgsForCall = append(fake.deleteAccessKeyArgsForCall, struct {
		arg1 *iam.DeleteAccessKeyInput
	}{arg1})
	fake.recordInvocation("DeleteAccessKey", []interface{}{arg1})
	fake.deleteAccessKeyMutex.Unlock()
	if fake.DeleteAccessKeyStub != nil {
		return fake.DeleteAccessKeyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAccessKeyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteAccessKeyCallCount() int {
	fake.deleteAccessKeyMutex.RLock()
	defer fake.deleteAccessKeyMutex.RUnlock()
	return len(fake.deleteAccessKeyArgsForCall)
}

func (fake *FakeIAMAPI) DeleteAccessKeyCalls(stub func(*iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error)) {
	fake.deleteAccessKeyMutex.Lock()
	defer fake.deleteAccessKeyMutex.Unlock()
	fake.DeleteAccessKeyStub = stub
}

func (fake *FakeIAMAPI) DeleteAccessKeyArgsForCall(i int) *iam.DeleteAccessKeyInput {
	fake.deleteAccessKeyMutex.RLock()
	defer fake.deleteAccessKeyMutex.RUnlock()
	argsForCall := fake.deleteAccessKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteAccessKeyReturns(result1 *iam.DeleteAccessKeyOutput, result2 error) {
	fake.deleteAccessKeyMutex.Lock()
	defer fake.deleteAccessKeyMutex.Unlock()
	fake.DeleteAccessKeyStub = nil
	fake.deleteAccessKeyReturns = struct {
		result1 *iam.DeleteAccessKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccessKeyReturnsOnCall(i int, result1 *iam.DeleteAccessKeyOutput, result2 error) {
	fake.deleteAccessKeyMutex.Lock()
	defer fake.deleteAccessKeyMutex.Unlock()
	fake.DeleteAccessKeyStub = nil
	if fake.deleteAccessKeyReturnsOnCall == nil {
		fake.deleteAccessKeyReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteAccessKeyOutput
			result2 error
		})
	}
	fake.deleteAccessKeyReturnsOnCall[i] = struct {
		result1 *iam.DeleteAccessKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccessKeyRequest(arg1 *iam.DeleteAccessKeyInput) (*request.Request, *iam.DeleteAccessKeyOutput) {
	fake.deleteAccessKeyRequestMutex.Lock()
	ret, specificReturn := fake.deleteAccessKeyRequestReturnsOnCall[len(fake.deleteAccessKeyRequestArgsForCall)]
	fake.deleteAccessKeyRequestArgsForCall = append(fake.deleteAccessKeyRequestArgsForCall, struct {
		arg1 *iam.DeleteAccessKeyInput
	}{arg1})
	fake.recordInvocation("DeleteAccessKeyRequest", []interface{}{arg1})
	fake.deleteAccessKeyRequestMutex.Unlock()
	if fake.DeleteAccessKeyRequestStub != nil {
		return fake.DeleteAccessKeyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAccessKeyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteAccessKeyRequestCallCount() int {
	fake.deleteAccessKeyRequestMutex.RLock()
	defer fake.deleteAccessKeyRequestMutex.RUnlock()
	return len(fake.deleteAccessKeyRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteAccessKeyRequestCalls(stub func(*iam.DeleteAccessKeyInput) (*request.Request, *iam.DeleteAccessKeyOutput)) {
	fake.deleteAccessKeyRequestMutex.Lock()
	defer fake.deleteAccessKeyRequestMutex.Unlock()
	fake.DeleteAccessKeyRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteAccessKeyRequestArgsForCall(i int) *iam.DeleteAccessKeyInput {
	fake.deleteAccessKeyRequestMutex.RLock()
	defer fake.deleteAccessKeyRequestMutex.RUnlock()
	argsForCall := fake.deleteAccessKeyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteAccessKeyRequestReturns(result1 *request.Request, result2 *iam.DeleteAccessKeyOutput) {
	fake.deleteAccessKeyRequestMutex.Lock()
	defer fake.deleteAccessKeyRequestMutex.Unlock()
	fake.DeleteAccessKeyRequestStub = nil
	fake.deleteAccessKeyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteAccessKeyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccessKeyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteAccessKeyOutput) {
	fake.deleteAccessKeyRequestMutex.Lock()
	defer fake.deleteAccessKeyRequestMutex.Unlock()
	fake.DeleteAccessKeyRequestStub = nil
	if fake.deleteAccessKeyRequestReturnsOnCall == nil {
		fake.deleteAccessKeyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteAccessKeyOutput
		})
	}
	fake.deleteAccessKeyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteAccessKeyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccessKeyWithContext(arg1 context.Context, arg2 *iam.DeleteAccessKeyInput, arg3 ...request.Option) (*iam.DeleteAccessKeyOutput, error) {
	fake.deleteAccessKeyWithContextMutex.Lock()
	ret, specificReturn := fake.deleteAccessKeyWithContextReturnsOnCall[len(fake.deleteAccessKeyWithContextArgsForCall)]
	fake.deleteAccessKeyWithContextArgsForCall = append(fake.deleteAccessKeyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteAccessKeyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteAccessKeyWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteAccessKeyWithContextMutex.Unlock()
	if fake.DeleteAccessKeyWithContextStub != nil {
		return fake.DeleteAccessKeyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAccessKeyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteAccessKeyWithContextCallCount() int {
	fake.deleteAccessKeyWithContextMutex.RLock()
	defer fake.deleteAccessKeyWithContextMutex.RUnlock()
	return len(fake.deleteAccessKeyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteAccessKeyWithContextCalls(stub func(context.Context, *iam.DeleteAccessKeyInput, ...request.Option) (*iam.DeleteAccessKeyOutput, error)) {
	fake.deleteAccessKeyWithContextMutex.Lock()
	defer fake.deleteAccessKeyWithContextMutex.Unlock()
	fake.DeleteAccessKeyWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteAccessKeyWithContextArgsForCall(i int) (context.Context, *iam.DeleteAccessKeyInput, []request.Option) {
	fake.deleteAccessKeyWithContextMutex.RLock()
	defer fake.deleteAccessKeyWithContextMutex.RUnlock()
	argsForCall := fake.deleteAccessKeyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteAccessKeyWithContextReturns(result1 *iam.DeleteAccessKeyOutput, result2 error) {
	fake.deleteAccessKeyWithContextMutex.Lock()
	defer fake.deleteAccessKeyWithContextMutex.Unlock()
	fake.DeleteAccessKeyWithContextStub = nil
	fake.deleteAccessKeyWithContextReturns = struct {
		result1 *iam.DeleteAccessKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccessKeyWithContextReturnsOnCall(i int, result1 *iam.DeleteAccessKeyOutput, result2 error) {
	fake.deleteAccessKeyWithContextMutex.Lock()
	defer fake.deleteAccessKeyWithContextMutex.Unlock()
	fake.DeleteAccessKeyWithContextStub = nil
	if fake.deleteAccessKeyWithContextReturnsOnCall == nil {
		fake.deleteAccessKeyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteAccessKeyOutput
			result2 error
		})
	}
	fake.deleteAccessKeyWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteAccessKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccountAlias(arg1 *iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error) {
	fake.deleteAccountAliasMutex.Lock()
	ret, specificReturn := fake.deleteAccountAliasReturnsOnCall[len(fake.deleteAccountAliasArgsForCall)]
	fake.deleteAccountAliasArgsForCall = append(fake.deleteAccountAliasArgsForCall, struct {
		arg1 *iam.DeleteAccountAliasInput
	}{arg1})
	fake.recordInvocation("DeleteAccountAlias", []interface{}{arg1})
	fake.deleteAccountAliasMutex.Unlock()
	if fake.DeleteAccountAliasStub != nil {
		return fake.DeleteAccountAliasStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAccountAliasReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteAccountAliasCallCount() int {
	fake.deleteAccountAliasMutex.RLock()
	defer fake.deleteAccountAliasMutex.RUnlock()
	return len(fake.deleteAccountAliasArgsForCall)
}

func (fake *FakeIAMAPI) DeleteAccountAliasCalls(stub func(*iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error)) {
	fake.deleteAccountAliasMutex.Lock()
	defer fake.deleteAccountAliasMutex.Unlock()
	fake.DeleteAccountAliasStub = stub
}

func (fake *FakeIAMAPI) DeleteAccountAliasArgsForCall(i int) *iam.DeleteAccountAliasInput {
	fake.deleteAccountAliasMutex.RLock()
	defer fake.deleteAccountAliasMutex.RUnlock()
	argsForCall := fake.deleteAccountAliasArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteAccountAliasReturns(result1 *iam.DeleteAccountAliasOutput, result2 error) {
	fake.deleteAccountAliasMutex.Lock()
	defer fake.deleteAccountAliasMutex.Unlock()
	fake.DeleteAccountAliasStub = nil
	fake.deleteAccountAliasReturns = struct {
		result1 *iam.DeleteAccountAliasOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccountAliasReturnsOnCall(i int, result1 *iam.DeleteAccountAliasOutput, result2 error) {
	fake.deleteAccountAliasMutex.Lock()
	defer fake.deleteAccountAliasMutex.Unlock()
	fake.DeleteAccountAliasStub = nil
	if fake.deleteAccountAliasReturnsOnCall == nil {
		fake.deleteAccountAliasReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteAccountAliasOutput
			result2 error
		})
	}
	fake.deleteAccountAliasReturnsOnCall[i] = struct {
		result1 *iam.DeleteAccountAliasOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccountAliasRequest(arg1 *iam.DeleteAccountAliasInput) (*request.Request, *iam.DeleteAccountAliasOutput) {
	fake.deleteAccountAliasRequestMutex.Lock()
	ret, specificReturn := fake.deleteAccountAliasRequestReturnsOnCall[len(fake.deleteAccountAliasRequestArgsForCall)]
	fake.deleteAccountAliasRequestArgsForCall = append(fake.deleteAccountAliasRequestArgsForCall, struct {
		arg1 *iam.DeleteAccountAliasInput
	}{arg1})
	fake.recordInvocation("DeleteAccountAliasRequest", []interface{}{arg1})
	fake.deleteAccountAliasRequestMutex.Unlock()
	if fake.DeleteAccountAliasRequestStub != nil {
		return fake.DeleteAccountAliasRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAccountAliasRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteAccountAliasRequestCallCount() int {
	fake.deleteAccountAliasRequestMutex.RLock()
	defer fake.deleteAccountAliasRequestMutex.RUnlock()
	return len(fake.deleteAccountAliasRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteAccountAliasRequestCalls(stub func(*iam.DeleteAccountAliasInput) (*request.Request, *iam.DeleteAccountAliasOutput)) {
	fake.deleteAccountAliasRequestMutex.Lock()
	defer fake.deleteAccountAliasRequestMutex.Unlock()
	fake.DeleteAccountAliasRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteAccountAliasRequestArgsForCall(i int) *iam.DeleteAccountAliasInput {
	fake.deleteAccountAliasRequestMutex.RLock()
	defer fake.deleteAccountAliasRequestMutex.RUnlock()
	argsForCall := fake.deleteAccountAliasRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteAccountAliasRequestReturns(result1 *request.Request, result2 *iam.DeleteAccountAliasOutput) {
	fake.deleteAccountAliasRequestMutex.Lock()
	defer fake.deleteAccountAliasRequestMutex.Unlock()
	fake.DeleteAccountAliasRequestStub = nil
	fake.deleteAccountAliasRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteAccountAliasOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccountAliasRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteAccountAliasOutput) {
	fake.deleteAccountAliasRequestMutex.Lock()
	defer fake.deleteAccountAliasRequestMutex.Unlock()
	fake.DeleteAccountAliasRequestStub = nil
	if fake.deleteAccountAliasRequestReturnsOnCall == nil {
		fake.deleteAccountAliasRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteAccountAliasOutput
		})
	}
	fake.deleteAccountAliasRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteAccountAliasOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccountAliasWithContext(arg1 context.Context, arg2 *iam.DeleteAccountAliasInput, arg3 ...request.Option) (*iam.DeleteAccountAliasOutput, error) {
	fake.deleteAccountAliasWithContextMutex.Lock()
	ret, specificReturn := fake.deleteAccountAliasWithContextReturnsOnCall[len(fake.deleteAccountAliasWithContextArgsForCall)]
	fake.deleteAccountAliasWithContextArgsForCall = append(fake.deleteAccountAliasWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteAccountAliasInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteAccountAliasWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteAccountAliasWithContextMutex.Unlock()
	if fake.DeleteAccountAliasWithContextStub != nil {
		return fake.DeleteAccountAliasWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAccountAliasWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteAccountAliasWithContextCallCount() int {
	fake.deleteAccountAliasWithContextMutex.RLock()
	defer fake.deleteAccountAliasWithContextMutex.RUnlock()
	return len(fake.deleteAccountAliasWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteAccountAliasWithContextCalls(stub func(context.Context, *iam.DeleteAccountAliasInput, ...request.Option) (*iam.DeleteAccountAliasOutput, error)) {
	fake.deleteAccountAliasWithContextMutex.Lock()
	defer fake.deleteAccountAliasWithContextMutex.Unlock()
	fake.DeleteAccountAliasWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteAccountAliasWithContextArgsForCall(i int) (context.Context, *iam.DeleteAccountAliasInput, []request.Option) {
	fake.deleteAccountAliasWithContextMutex.RLock()
	defer fake.deleteAccountAliasWithContextMutex.RUnlock()
	argsForCall := fake.deleteAccountAliasWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteAccountAliasWithContextReturns(result1 *iam.DeleteAccountAliasOutput, result2 error) {
	fake.deleteAccountAliasWithContextMutex.Lock()
	defer fake.deleteAccountAliasWithContextMutex.Unlock()
	fake.DeleteAccountAliasWithContextStub = nil
	fake.deleteAccountAliasWithContextReturns = struct {
		result1 *iam.DeleteAccountAliasOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccountAliasWithContextReturnsOnCall(i int, result1 *iam.DeleteAccountAliasOutput, result2 error) {
	fake.deleteAccountAliasWithContextMutex.Lock()
	defer fake.deleteAccountAliasWithContextMutex.Unlock()
	fake.DeleteAccountAliasWithContextStub = nil
	if fake.deleteAccountAliasWithContextReturnsOnCall == nil {
		fake.deleteAccountAliasWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteAccountAliasOutput
			result2 error
		})
	}
	fake.deleteAccountAliasWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteAccountAliasOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicy(arg1 *iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	fake.deleteAccountPasswordPolicyMutex.Lock()
	ret, specificReturn := fake.deleteAccountPasswordPolicyReturnsOnCall[len(fake.deleteAccountPasswordPolicyArgsForCall)]
	fake.deleteAccountPasswordPolicyArgsForCall = append(fake.deleteAccountPasswordPolicyArgsForCall, struct {
		arg1 *iam.DeleteAccountPasswordPolicyInput
	}{arg1})
	fake.recordInvocation("DeleteAccountPasswordPolicy", []interface{}{arg1})
	fake.deleteAccountPasswordPolicyMutex.Unlock()
	if fake.DeleteAccountPasswordPolicyStub != nil {
		return fake.DeleteAccountPasswordPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAccountPasswordPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicyCallCount() int {
	fake.deleteAccountPasswordPolicyMutex.RLock()
	defer fake.deleteAccountPasswordPolicyMutex.RUnlock()
	return len(fake.deleteAccountPasswordPolicyArgsForCall)
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicyCalls(stub func(*iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error)) {
	fake.deleteAccountPasswordPolicyMutex.Lock()
	defer fake.deleteAccountPasswordPolicyMutex.Unlock()
	fake.DeleteAccountPasswordPolicyStub = stub
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicyArgsForCall(i int) *iam.DeleteAccountPasswordPolicyInput {
	fake.deleteAccountPasswordPolicyMutex.RLock()
	defer fake.deleteAccountPasswordPolicyMutex.RUnlock()
	argsForCall := fake.deleteAccountPasswordPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicyReturns(result1 *iam.DeleteAccountPasswordPolicyOutput, result2 error) {
	fake.deleteAccountPasswordPolicyMutex.Lock()
	defer fake.deleteAccountPasswordPolicyMutex.Unlock()
	fake.DeleteAccountPasswordPolicyStub = nil
	fake.deleteAccountPasswordPolicyReturns = struct {
		result1 *iam.DeleteAccountPasswordPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicyReturnsOnCall(i int, result1 *iam.DeleteAccountPasswordPolicyOutput, result2 error) {
	fake.deleteAccountPasswordPolicyMutex.Lock()
	defer fake.deleteAccountPasswordPolicyMutex.Unlock()
	fake.DeleteAccountPasswordPolicyStub = nil
	if fake.deleteAccountPasswordPolicyReturnsOnCall == nil {
		fake.deleteAccountPasswordPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteAccountPasswordPolicyOutput
			result2 error
		})
	}
	fake.deleteAccountPasswordPolicyReturnsOnCall[i] = struct {
		result1 *iam.DeleteAccountPasswordPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicyRequest(arg1 *iam.DeleteAccountPasswordPolicyInput) (*request.Request, *iam.DeleteAccountPasswordPolicyOutput) {
	fake.deleteAccountPasswordPolicyRequestMutex.Lock()
	ret, specificReturn := fake.deleteAccountPasswordPolicyRequestReturnsOnCall[len(fake.deleteAccountPasswordPolicyRequestArgsForCall)]
	fake.deleteAccountPasswordPolicyRequestArgsForCall = append(fake.deleteAccountPasswordPolicyRequestArgsForCall, struct {
		arg1 *iam.DeleteAccountPasswordPolicyInput
	}{arg1})
	fake.recordInvocation("DeleteAccountPasswordPolicyRequest", []interface{}{arg1})
	fake.deleteAccountPasswordPolicyRequestMutex.Unlock()
	if fake.DeleteAccountPasswordPolicyRequestStub != nil {
		return fake.DeleteAccountPasswordPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAccountPasswordPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicyRequestCallCount() int {
	fake.deleteAccountPasswordPolicyRequestMutex.RLock()
	defer fake.deleteAccountPasswordPolicyRequestMutex.RUnlock()
	return len(fake.deleteAccountPasswordPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicyRequestCalls(stub func(*iam.DeleteAccountPasswordPolicyInput) (*request.Request, *iam.DeleteAccountPasswordPolicyOutput)) {
	fake.deleteAccountPasswordPolicyRequestMutex.Lock()
	defer fake.deleteAccountPasswordPolicyRequestMutex.Unlock()
	fake.DeleteAccountPasswordPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicyRequestArgsForCall(i int) *iam.DeleteAccountPasswordPolicyInput {
	fake.deleteAccountPasswordPolicyRequestMutex.RLock()
	defer fake.deleteAccountPasswordPolicyRequestMutex.RUnlock()
	argsForCall := fake.deleteAccountPasswordPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicyRequestReturns(result1 *request.Request, result2 *iam.DeleteAccountPasswordPolicyOutput) {
	fake.deleteAccountPasswordPolicyRequestMutex.Lock()
	defer fake.deleteAccountPasswordPolicyRequestMutex.Unlock()
	fake.DeleteAccountPasswordPolicyRequestStub = nil
	fake.deleteAccountPasswordPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteAccountPasswordPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteAccountPasswordPolicyOutput) {
	fake.deleteAccountPasswordPolicyRequestMutex.Lock()
	defer fake.deleteAccountPasswordPolicyRequestMutex.Unlock()
	fake.DeleteAccountPasswordPolicyRequestStub = nil
	if fake.deleteAccountPasswordPolicyRequestReturnsOnCall == nil {
		fake.deleteAccountPasswordPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteAccountPasswordPolicyOutput
		})
	}
	fake.deleteAccountPasswordPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteAccountPasswordPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicyWithContext(arg1 context.Context, arg2 *iam.DeleteAccountPasswordPolicyInput, arg3 ...request.Option) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	fake.deleteAccountPasswordPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.deleteAccountPasswordPolicyWithContextReturnsOnCall[len(fake.deleteAccountPasswordPolicyWithContextArgsForCall)]
	fake.deleteAccountPasswordPolicyWithContextArgsForCall = append(fake.deleteAccountPasswordPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteAccountPasswordPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteAccountPasswordPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteAccountPasswordPolicyWithContextMutex.Unlock()
	if fake.DeleteAccountPasswordPolicyWithContextStub != nil {
		return fake.DeleteAccountPasswordPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAccountPasswordPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicyWithContextCallCount() int {
	fake.deleteAccountPasswordPolicyWithContextMutex.RLock()
	defer fake.deleteAccountPasswordPolicyWithContextMutex.RUnlock()
	return len(fake.deleteAccountPasswordPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicyWithContextCalls(stub func(context.Context, *iam.DeleteAccountPasswordPolicyInput, ...request.Option) (*iam.DeleteAccountPasswordPolicyOutput, error)) {
	fake.deleteAccountPasswordPolicyWithContextMutex.Lock()
	defer fake.deleteAccountPasswordPolicyWithContextMutex.Unlock()
	fake.DeleteAccountPasswordPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicyWithContextArgsForCall(i int) (context.Context, *iam.DeleteAccountPasswordPolicyInput, []request.Option) {
	fake.deleteAccountPasswordPolicyWithContextMutex.RLock()
	defer fake.deleteAccountPasswordPolicyWithContextMutex.RUnlock()
	argsForCall := fake.deleteAccountPasswordPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicyWithContextReturns(result1 *iam.DeleteAccountPasswordPolicyOutput, result2 error) {
	fake.deleteAccountPasswordPolicyWithContextMutex.Lock()
	defer fake.deleteAccountPasswordPolicyWithContextMutex.Unlock()
	fake.DeleteAccountPasswordPolicyWithContextStub = nil
	fake.deleteAccountPasswordPolicyWithContextReturns = struct {
		result1 *iam.DeleteAccountPasswordPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteAccountPasswordPolicyWithContextReturnsOnCall(i int, result1 *iam.DeleteAccountPasswordPolicyOutput, result2 error) {
	fake.deleteAccountPasswordPolicyWithContextMutex.Lock()
	defer fake.deleteAccountPasswordPolicyWithContextMutex.Unlock()
	fake.DeleteAccountPasswordPolicyWithContextStub = nil
	if fake.deleteAccountPasswordPolicyWithContextReturnsOnCall == nil {
		fake.deleteAccountPasswordPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteAccountPasswordPolicyOutput
			result2 error
		})
	}
	fake.deleteAccountPasswordPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteAccountPasswordPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteGroup(arg1 *iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error) {
	fake.deleteGroupMutex.Lock()
	ret, specificReturn := fake.deleteGroupReturnsOnCall[len(fake.deleteGroupArgsForCall)]
	fake.deleteGroupArgsForCall = append(fake.deleteGroupArgsForCall, struct {
		arg1 *iam.DeleteGroupInput
	}{arg1})
	fake.recordInvocation("DeleteGroup", []interface{}{arg1})
	fake.deleteGroupMutex.Unlock()
	if fake.DeleteGroupStub != nil {
		return fake.DeleteGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteGroupCallCount() int {
	fake.deleteGroupMutex.RLock()
	defer fake.deleteGroupMutex.RUnlock()
	return len(fake.deleteGroupArgsForCall)
}

func (fake *FakeIAMAPI) DeleteGroupCalls(stub func(*iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error)) {
	fake.deleteGroupMutex.Lock()
	defer fake.deleteGroupMutex.Unlock()
	fake.DeleteGroupStub = stub
}

func (fake *FakeIAMAPI) DeleteGroupArgsForCall(i int) *iam.DeleteGroupInput {
	fake.deleteGroupMutex.RLock()
	defer fake.deleteGroupMutex.RUnlock()
	argsForCall := fake.deleteGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteGroupReturns(result1 *iam.DeleteGroupOutput, result2 error) {
	fake.deleteGroupMutex.Lock()
	defer fake.deleteGroupMutex.Unlock()
	fake.DeleteGroupStub = nil
	fake.deleteGroupReturns = struct {
		result1 *iam.DeleteGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteGroupReturnsOnCall(i int, result1 *iam.DeleteGroupOutput, result2 error) {
	fake.deleteGroupMutex.Lock()
	defer fake.deleteGroupMutex.Unlock()
	fake.DeleteGroupStub = nil
	if fake.deleteGroupReturnsOnCall == nil {
		fake.deleteGroupReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteGroupOutput
			result2 error
		})
	}
	fake.deleteGroupReturnsOnCall[i] = struct {
		result1 *iam.DeleteGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteGroupPolicy(arg1 *iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error) {
	fake.deleteGroupPolicyMutex.Lock()
	ret, specificReturn := fake.deleteGroupPolicyReturnsOnCall[len(fake.deleteGroupPolicyArgsForCall)]
	fake.deleteGroupPolicyArgsForCall = append(fake.deleteGroupPolicyArgsForCall, struct {
		arg1 *iam.DeleteGroupPolicyInput
	}{arg1})
	fake.recordInvocation("DeleteGroupPolicy", []interface{}{arg1})
	fake.deleteGroupPolicyMutex.Unlock()
	if fake.DeleteGroupPolicyStub != nil {
		return fake.DeleteGroupPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteGroupPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteGroupPolicyCallCount() int {
	fake.deleteGroupPolicyMutex.RLock()
	defer fake.deleteGroupPolicyMutex.RUnlock()
	return len(fake.deleteGroupPolicyArgsForCall)
}

func (fake *FakeIAMAPI) DeleteGroupPolicyCalls(stub func(*iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error)) {
	fake.deleteGroupPolicyMutex.Lock()
	defer fake.deleteGroupPolicyMutex.Unlock()
	fake.DeleteGroupPolicyStub = stub
}

func (fake *FakeIAMAPI) DeleteGroupPolicyArgsForCall(i int) *iam.DeleteGroupPolicyInput {
	fake.deleteGroupPolicyMutex.RLock()
	defer fake.deleteGroupPolicyMutex.RUnlock()
	argsForCall := fake.deleteGroupPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteGroupPolicyReturns(result1 *iam.DeleteGroupPolicyOutput, result2 error) {
	fake.deleteGroupPolicyMutex.Lock()
	defer fake.deleteGroupPolicyMutex.Unlock()
	fake.DeleteGroupPolicyStub = nil
	fake.deleteGroupPolicyReturns = struct {
		result1 *iam.DeleteGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteGroupPolicyReturnsOnCall(i int, result1 *iam.DeleteGroupPolicyOutput, result2 error) {
	fake.deleteGroupPolicyMutex.Lock()
	defer fake.deleteGroupPolicyMutex.Unlock()
	fake.DeleteGroupPolicyStub = nil
	if fake.deleteGroupPolicyReturnsOnCall == nil {
		fake.deleteGroupPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteGroupPolicyOutput
			result2 error
		})
	}
	fake.deleteGroupPolicyReturnsOnCall[i] = struct {
		result1 *iam.DeleteGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteGroupPolicyRequest(arg1 *iam.DeleteGroupPolicyInput) (*request.Request, *iam.DeleteGroupPolicyOutput) {
	fake.deleteGroupPolicyRequestMutex.Lock()
	ret, specificReturn := fake.deleteGroupPolicyRequestReturnsOnCall[len(fake.deleteGroupPolicyRequestArgsForCall)]
	fake.deleteGroupPolicyRequestArgsForCall = append(fake.deleteGroupPolicyRequestArgsForCall, struct {
		arg1 *iam.DeleteGroupPolicyInput
	}{arg1})
	fake.recordInvocation("DeleteGroupPolicyRequest", []interface{}{arg1})
	fake.deleteGroupPolicyRequestMutex.Unlock()
	if fake.DeleteGroupPolicyRequestStub != nil {
		return fake.DeleteGroupPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteGroupPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteGroupPolicyRequestCallCount() int {
	fake.deleteGroupPolicyRequestMutex.RLock()
	defer fake.deleteGroupPolicyRequestMutex.RUnlock()
	return len(fake.deleteGroupPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteGroupPolicyRequestCalls(stub func(*iam.DeleteGroupPolicyInput) (*request.Request, *iam.DeleteGroupPolicyOutput)) {
	fake.deleteGroupPolicyRequestMutex.Lock()
	defer fake.deleteGroupPolicyRequestMutex.Unlock()
	fake.DeleteGroupPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteGroupPolicyRequestArgsForCall(i int) *iam.DeleteGroupPolicyInput {
	fake.deleteGroupPolicyRequestMutex.RLock()
	defer fake.deleteGroupPolicyRequestMutex.RUnlock()
	argsForCall := fake.deleteGroupPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteGroupPolicyRequestReturns(result1 *request.Request, result2 *iam.DeleteGroupPolicyOutput) {
	fake.deleteGroupPolicyRequestMutex.Lock()
	defer fake.deleteGroupPolicyRequestMutex.Unlock()
	fake.DeleteGroupPolicyRequestStub = nil
	fake.deleteGroupPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteGroupPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteGroupPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteGroupPolicyOutput) {
	fake.deleteGroupPolicyRequestMutex.Lock()
	defer fake.deleteGroupPolicyRequestMutex.Unlock()
	fake.DeleteGroupPolicyRequestStub = nil
	if fake.deleteGroupPolicyRequestReturnsOnCall == nil {
		fake.deleteGroupPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteGroupPolicyOutput
		})
	}
	fake.deleteGroupPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteGroupPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteGroupPolicyWithContext(arg1 context.Context, arg2 *iam.DeleteGroupPolicyInput, arg3 ...request.Option) (*iam.DeleteGroupPolicyOutput, error) {
	fake.deleteGroupPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.deleteGroupPolicyWithContextReturnsOnCall[len(fake.deleteGroupPolicyWithContextArgsForCall)]
	fake.deleteGroupPolicyWithContextArgsForCall = append(fake.deleteGroupPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteGroupPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteGroupPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteGroupPolicyWithContextMutex.Unlock()
	if fake.DeleteGroupPolicyWithContextStub != nil {
		return fake.DeleteGroupPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteGroupPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteGroupPolicyWithContextCallCount() int {
	fake.deleteGroupPolicyWithContextMutex.RLock()
	defer fake.deleteGroupPolicyWithContextMutex.RUnlock()
	return len(fake.deleteGroupPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteGroupPolicyWithContextCalls(stub func(context.Context, *iam.DeleteGroupPolicyInput, ...request.Option) (*iam.DeleteGroupPolicyOutput, error)) {
	fake.deleteGroupPolicyWithContextMutex.Lock()
	defer fake.deleteGroupPolicyWithContextMutex.Unlock()
	fake.DeleteGroupPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteGroupPolicyWithContextArgsForCall(i int) (context.Context, *iam.DeleteGroupPolicyInput, []request.Option) {
	fake.deleteGroupPolicyWithContextMutex.RLock()
	defer fake.deleteGroupPolicyWithContextMutex.RUnlock()
	argsForCall := fake.deleteGroupPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteGroupPolicyWithContextReturns(result1 *iam.DeleteGroupPolicyOutput, result2 error) {
	fake.deleteGroupPolicyWithContextMutex.Lock()
	defer fake.deleteGroupPolicyWithContextMutex.Unlock()
	fake.DeleteGroupPolicyWithContextStub = nil
	fake.deleteGroupPolicyWithContextReturns = struct {
		result1 *iam.DeleteGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteGroupPolicyWithContextReturnsOnCall(i int, result1 *iam.DeleteGroupPolicyOutput, result2 error) {
	fake.deleteGroupPolicyWithContextMutex.Lock()
	defer fake.deleteGroupPolicyWithContextMutex.Unlock()
	fake.DeleteGroupPolicyWithContextStub = nil
	if fake.deleteGroupPolicyWithContextReturnsOnCall == nil {
		fake.deleteGroupPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteGroupPolicyOutput
			result2 error
		})
	}
	fake.deleteGroupPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteGroupRequest(arg1 *iam.DeleteGroupInput) (*request.Request, *iam.DeleteGroupOutput) {
	fake.deleteGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteGroupRequestReturnsOnCall[len(fake.deleteGroupRequestArgsForCall)]
	fake.deleteGroupRequestArgsForCall = append(fake.deleteGroupRequestArgsForCall, struct {
		arg1 *iam.DeleteGroupInput
	}{arg1})
	fake.recordInvocation("DeleteGroupRequest", []interface{}{arg1})
	fake.deleteGroupRequestMutex.Unlock()
	if fake.DeleteGroupRequestStub != nil {
		return fake.DeleteGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteGroupRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteGroupRequestCallCount() int {
	fake.deleteGroupRequestMutex.RLock()
	defer fake.deleteGroupRequestMutex.RUnlock()
	return len(fake.deleteGroupRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteGroupRequestCalls(stub func(*iam.DeleteGroupInput) (*request.Request, *iam.DeleteGroupOutput)) {
	fake.deleteGroupRequestMutex.Lock()
	defer fake.deleteGroupRequestMutex.Unlock()
	fake.DeleteGroupRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteGroupRequestArgsForCall(i int) *iam.DeleteGroupInput {
	fake.deleteGroupRequestMutex.RLock()
	defer fake.deleteGroupRequestMutex.RUnlock()
	argsForCall := fake.deleteGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteGroupRequestReturns(result1 *request.Request, result2 *iam.DeleteGroupOutput) {
	fake.deleteGroupRequestMutex.Lock()
	defer fake.deleteGroupRequestMutex.Unlock()
	fake.DeleteGroupRequestStub = nil
	fake.deleteGroupRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteGroupOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteGroupOutput) {
	fake.deleteGroupRequestMutex.Lock()
	defer fake.deleteGroupRequestMutex.Unlock()
	fake.DeleteGroupRequestStub = nil
	if fake.deleteGroupRequestReturnsOnCall == nil {
		fake.deleteGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteGroupOutput
		})
	}
	fake.deleteGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteGroupOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteGroupWithContext(arg1 context.Context, arg2 *iam.DeleteGroupInput, arg3 ...request.Option) (*iam.DeleteGroupOutput, error) {
	fake.deleteGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteGroupWithContextReturnsOnCall[len(fake.deleteGroupWithContextArgsForCall)]
	fake.deleteGroupWithContextArgsForCall = append(fake.deleteGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteGroupWithContextMutex.Unlock()
	if fake.DeleteGroupWithContextStub != nil {
		return fake.DeleteGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteGroupWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteGroupWithContextCallCount() int {
	fake.deleteGroupWithContextMutex.RLock()
	defer fake.deleteGroupWithContextMutex.RUnlock()
	return len(fake.deleteGroupWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteGroupWithContextCalls(stub func(context.Context, *iam.DeleteGroupInput, ...request.Option) (*iam.DeleteGroupOutput, error)) {
	fake.deleteGroupWithContextMutex.Lock()
	defer fake.deleteGroupWithContextMutex.Unlock()
	fake.DeleteGroupWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteGroupWithContextArgsForCall(i int) (context.Context, *iam.DeleteGroupInput, []request.Option) {
	fake.deleteGroupWithContextMutex.RLock()
	defer fake.deleteGroupWithContextMutex.RUnlock()
	argsForCall := fake.deleteGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteGroupWithContextReturns(result1 *iam.DeleteGroupOutput, result2 error) {
	fake.deleteGroupWithContextMutex.Lock()
	defer fake.deleteGroupWithContextMutex.Unlock()
	fake.DeleteGroupWithContextStub = nil
	fake.deleteGroupWithContextReturns = struct {
		result1 *iam.DeleteGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteGroupWithContextReturnsOnCall(i int, result1 *iam.DeleteGroupOutput, result2 error) {
	fake.deleteGroupWithContextMutex.Lock()
	defer fake.deleteGroupWithContextMutex.Unlock()
	fake.DeleteGroupWithContextStub = nil
	if fake.deleteGroupWithContextReturnsOnCall == nil {
		fake.deleteGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteGroupOutput
			result2 error
		})
	}
	fake.deleteGroupWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteInstanceProfile(arg1 *iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error) {
	fake.deleteInstanceProfileMutex.Lock()
	ret, specificReturn := fake.deleteInstanceProfileReturnsOnCall[len(fake.deleteInstanceProfileArgsForCall)]
	fake.deleteInstanceProfileArgsForCall = append(fake.deleteInstanceProfileArgsForCall, struct {
		arg1 *iam.DeleteInstanceProfileInput
	}{arg1})
	fake.recordInvocation("DeleteInstanceProfile", []interface{}{arg1})
	fake.deleteInstanceProfileMutex.Unlock()
	if fake.DeleteInstanceProfileStub != nil {
		return fake.DeleteInstanceProfileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteInstanceProfileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteInstanceProfileCallCount() int {
	fake.deleteInstanceProfileMutex.RLock()
	defer fake.deleteInstanceProfileMutex.RUnlock()
	return len(fake.deleteInstanceProfileArgsForCall)
}

func (fake *FakeIAMAPI) DeleteInstanceProfileCalls(stub func(*iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error)) {
	fake.deleteInstanceProfileMutex.Lock()
	defer fake.deleteInstanceProfileMutex.Unlock()
	fake.DeleteInstanceProfileStub = stub
}

func (fake *FakeIAMAPI) DeleteInstanceProfileArgsForCall(i int) *iam.DeleteInstanceProfileInput {
	fake.deleteInstanceProfileMutex.RLock()
	defer fake.deleteInstanceProfileMutex.RUnlock()
	argsForCall := fake.deleteInstanceProfileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteInstanceProfileReturns(result1 *iam.DeleteInstanceProfileOutput, result2 error) {
	fake.deleteInstanceProfileMutex.Lock()
	defer fake.deleteInstanceProfileMutex.Unlock()
	fake.DeleteInstanceProfileStub = nil
	fake.deleteInstanceProfileReturns = struct {
		result1 *iam.DeleteInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteInstanceProfileReturnsOnCall(i int, result1 *iam.DeleteInstanceProfileOutput, result2 error) {
	fake.deleteInstanceProfileMutex.Lock()
	defer fake.deleteInstanceProfileMutex.Unlock()
	fake.DeleteInstanceProfileStub = nil
	if fake.deleteInstanceProfileReturnsOnCall == nil {
		fake.deleteInstanceProfileReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteInstanceProfileOutput
			result2 error
		})
	}
	fake.deleteInstanceProfileReturnsOnCall[i] = struct {
		result1 *iam.DeleteInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteInstanceProfileRequest(arg1 *iam.DeleteInstanceProfileInput) (*request.Request, *iam.DeleteInstanceProfileOutput) {
	fake.deleteInstanceProfileRequestMutex.Lock()
	ret, specificReturn := fake.deleteInstanceProfileRequestReturnsOnCall[len(fake.deleteInstanceProfileRequestArgsForCall)]
	fake.deleteInstanceProfileRequestArgsForCall = append(fake.deleteInstanceProfileRequestArgsForCall, struct {
		arg1 *iam.DeleteInstanceProfileInput
	}{arg1})
	fake.recordInvocation("DeleteInstanceProfileRequest", []interface{}{arg1})
	fake.deleteInstanceProfileRequestMutex.Unlock()
	if fake.DeleteInstanceProfileRequestStub != nil {
		return fake.DeleteInstanceProfileRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteInstanceProfileRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteInstanceProfileRequestCallCount() int {
	fake.deleteInstanceProfileRequestMutex.RLock()
	defer fake.deleteInstanceProfileRequestMutex.RUnlock()
	return len(fake.deleteInstanceProfileRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteInstanceProfileRequestCalls(stub func(*iam.DeleteInstanceProfileInput) (*request.Request, *iam.DeleteInstanceProfileOutput)) {
	fake.deleteInstanceProfileRequestMutex.Lock()
	defer fake.deleteInstanceProfileRequestMutex.Unlock()
	fake.DeleteInstanceProfileRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteInstanceProfileRequestArgsForCall(i int) *iam.DeleteInstanceProfileInput {
	fake.deleteInstanceProfileRequestMutex.RLock()
	defer fake.deleteInstanceProfileRequestMutex.RUnlock()
	argsForCall := fake.deleteInstanceProfileRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteInstanceProfileRequestReturns(result1 *request.Request, result2 *iam.DeleteInstanceProfileOutput) {
	fake.deleteInstanceProfileRequestMutex.Lock()
	defer fake.deleteInstanceProfileRequestMutex.Unlock()
	fake.DeleteInstanceProfileRequestStub = nil
	fake.deleteInstanceProfileRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteInstanceProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteInstanceProfileRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteInstanceProfileOutput) {
	fake.deleteInstanceProfileRequestMutex.Lock()
	defer fake.deleteInstanceProfileRequestMutex.Unlock()
	fake.DeleteInstanceProfileRequestStub = nil
	if fake.deleteInstanceProfileRequestReturnsOnCall == nil {
		fake.deleteInstanceProfileRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteInstanceProfileOutput
		})
	}
	fake.deleteInstanceProfileRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteInstanceProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteInstanceProfileWithContext(arg1 context.Context, arg2 *iam.DeleteInstanceProfileInput, arg3 ...request.Option) (*iam.DeleteInstanceProfileOutput, error) {
	fake.deleteInstanceProfileWithContextMutex.Lock()
	ret, specificReturn := fake.deleteInstanceProfileWithContextReturnsOnCall[len(fake.deleteInstanceProfileWithContextArgsForCall)]
	fake.deleteInstanceProfileWithContextArgsForCall = append(fake.deleteInstanceProfileWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteInstanceProfileInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteInstanceProfileWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteInstanceProfileWithContextMutex.Unlock()
	if fake.DeleteInstanceProfileWithContextStub != nil {
		return fake.DeleteInstanceProfileWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteInstanceProfileWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteInstanceProfileWithContextCallCount() int {
	fake.deleteInstanceProfileWithContextMutex.RLock()
	defer fake.deleteInstanceProfileWithContextMutex.RUnlock()
	return len(fake.deleteInstanceProfileWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteInstanceProfileWithContextCalls(stub func(context.Context, *iam.DeleteInstanceProfileInput, ...request.Option) (*iam.DeleteInstanceProfileOutput, error)) {
	fake.deleteInstanceProfileWithContextMutex.Lock()
	defer fake.deleteInstanceProfileWithContextMutex.Unlock()
	fake.DeleteInstanceProfileWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteInstanceProfileWithContextArgsForCall(i int) (context.Context, *iam.DeleteInstanceProfileInput, []request.Option) {
	fake.deleteInstanceProfileWithContextMutex.RLock()
	defer fake.deleteInstanceProfileWithContextMutex.RUnlock()
	argsForCall := fake.deleteInstanceProfileWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteInstanceProfileWithContextReturns(result1 *iam.DeleteInstanceProfileOutput, result2 error) {
	fake.deleteInstanceProfileWithContextMutex.Lock()
	defer fake.deleteInstanceProfileWithContextMutex.Unlock()
	fake.DeleteInstanceProfileWithContextStub = nil
	fake.deleteInstanceProfileWithContextReturns = struct {
		result1 *iam.DeleteInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteInstanceProfileWithContextReturnsOnCall(i int, result1 *iam.DeleteInstanceProfileOutput, result2 error) {
	fake.deleteInstanceProfileWithContextMutex.Lock()
	defer fake.deleteInstanceProfileWithContextMutex.Unlock()
	fake.DeleteInstanceProfileWithContextStub = nil
	if fake.deleteInstanceProfileWithContextReturnsOnCall == nil {
		fake.deleteInstanceProfileWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteInstanceProfileOutput
			result2 error
		})
	}
	fake.deleteInstanceProfileWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteLoginProfile(arg1 *iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error) {
	fake.deleteLoginProfileMutex.Lock()
	ret, specificReturn := fake.deleteLoginProfileReturnsOnCall[len(fake.deleteLoginProfileArgsForCall)]
	fake.deleteLoginProfileArgsForCall = append(fake.deleteLoginProfileArgsForCall, struct {
		arg1 *iam.DeleteLoginProfileInput
	}{arg1})
	fake.recordInvocation("DeleteLoginProfile", []interface{}{arg1})
	fake.deleteLoginProfileMutex.Unlock()
	if fake.DeleteLoginProfileStub != nil {
		return fake.DeleteLoginProfileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteLoginProfileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteLoginProfileCallCount() int {
	fake.deleteLoginProfileMutex.RLock()
	defer fake.deleteLoginProfileMutex.RUnlock()
	return len(fake.deleteLoginProfileArgsForCall)
}

func (fake *FakeIAMAPI) DeleteLoginProfileCalls(stub func(*iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error)) {
	fake.deleteLoginProfileMutex.Lock()
	defer fake.deleteLoginProfileMutex.Unlock()
	fake.DeleteLoginProfileStub = stub
}

func (fake *FakeIAMAPI) DeleteLoginProfileArgsForCall(i int) *iam.DeleteLoginProfileInput {
	fake.deleteLoginProfileMutex.RLock()
	defer fake.deleteLoginProfileMutex.RUnlock()
	argsForCall := fake.deleteLoginProfileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteLoginProfileReturns(result1 *iam.DeleteLoginProfileOutput, result2 error) {
	fake.deleteLoginProfileMutex.Lock()
	defer fake.deleteLoginProfileMutex.Unlock()
	fake.DeleteLoginProfileStub = nil
	fake.deleteLoginProfileReturns = struct {
		result1 *iam.DeleteLoginProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteLoginProfileReturnsOnCall(i int, result1 *iam.DeleteLoginProfileOutput, result2 error) {
	fake.deleteLoginProfileMutex.Lock()
	defer fake.deleteLoginProfileMutex.Unlock()
	fake.DeleteLoginProfileStub = nil
	if fake.deleteLoginProfileReturnsOnCall == nil {
		fake.deleteLoginProfileReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteLoginProfileOutput
			result2 error
		})
	}
	fake.deleteLoginProfileReturnsOnCall[i] = struct {
		result1 *iam.DeleteLoginProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteLoginProfileRequest(arg1 *iam.DeleteLoginProfileInput) (*request.Request, *iam.DeleteLoginProfileOutput) {
	fake.deleteLoginProfileRequestMutex.Lock()
	ret, specificReturn := fake.deleteLoginProfileRequestReturnsOnCall[len(fake.deleteLoginProfileRequestArgsForCall)]
	fake.deleteLoginProfileRequestArgsForCall = append(fake.deleteLoginProfileRequestArgsForCall, struct {
		arg1 *iam.DeleteLoginProfileInput
	}{arg1})
	fake.recordInvocation("DeleteLoginProfileRequest", []interface{}{arg1})
	fake.deleteLoginProfileRequestMutex.Unlock()
	if fake.DeleteLoginProfileRequestStub != nil {
		return fake.DeleteLoginProfileRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteLoginProfileRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteLoginProfileRequestCallCount() int {
	fake.deleteLoginProfileRequestMutex.RLock()
	defer fake.deleteLoginProfileRequestMutex.RUnlock()
	return len(fake.deleteLoginProfileRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteLoginProfileRequestCalls(stub func(*iam.DeleteLoginProfileInput) (*request.Request, *iam.DeleteLoginProfileOutput)) {
	fake.deleteLoginProfileRequestMutex.Lock()
	defer fake.deleteLoginProfileRequestMutex.Unlock()
	fake.DeleteLoginProfileRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteLoginProfileRequestArgsForCall(i int) *iam.DeleteLoginProfileInput {
	fake.deleteLoginProfileRequestMutex.RLock()
	defer fake.deleteLoginProfileRequestMutex.RUnlock()
	argsForCall := fake.deleteLoginProfileRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteLoginProfileRequestReturns(result1 *request.Request, result2 *iam.DeleteLoginProfileOutput) {
	fake.deleteLoginProfileRequestMutex.Lock()
	defer fake.deleteLoginProfileRequestMutex.Unlock()
	fake.DeleteLoginProfileRequestStub = nil
	fake.deleteLoginProfileRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteLoginProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteLoginProfileRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteLoginProfileOutput) {
	fake.deleteLoginProfileRequestMutex.Lock()
	defer fake.deleteLoginProfileRequestMutex.Unlock()
	fake.DeleteLoginProfileRequestStub = nil
	if fake.deleteLoginProfileRequestReturnsOnCall == nil {
		fake.deleteLoginProfileRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteLoginProfileOutput
		})
	}
	fake.deleteLoginProfileRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteLoginProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteLoginProfileWithContext(arg1 context.Context, arg2 *iam.DeleteLoginProfileInput, arg3 ...request.Option) (*iam.DeleteLoginProfileOutput, error) {
	fake.deleteLoginProfileWithContextMutex.Lock()
	ret, specificReturn := fake.deleteLoginProfileWithContextReturnsOnCall[len(fake.deleteLoginProfileWithContextArgsForCall)]
	fake.deleteLoginProfileWithContextArgsForCall = append(fake.deleteLoginProfileWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteLoginProfileInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteLoginProfileWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteLoginProfileWithContextMutex.Unlock()
	if fake.DeleteLoginProfileWithContextStub != nil {
		return fake.DeleteLoginProfileWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteLoginProfileWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteLoginProfileWithContextCallCount() int {
	fake.deleteLoginProfileWithContextMutex.RLock()
	defer fake.deleteLoginProfileWithContextMutex.RUnlock()
	return len(fake.deleteLoginProfileWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteLoginProfileWithContextCalls(stub func(context.Context, *iam.DeleteLoginProfileInput, ...request.Option) (*iam.DeleteLoginProfileOutput, error)) {
	fake.deleteLoginProfileWithContextMutex.Lock()
	defer fake.deleteLoginProfileWithContextMutex.Unlock()
	fake.DeleteLoginProfileWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteLoginProfileWithContextArgsForCall(i int) (context.Context, *iam.DeleteLoginProfileInput, []request.Option) {
	fake.deleteLoginProfileWithContextMutex.RLock()
	defer fake.deleteLoginProfileWithContextMutex.RUnlock()
	argsForCall := fake.deleteLoginProfileWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteLoginProfileWithContextReturns(result1 *iam.DeleteLoginProfileOutput, result2 error) {
	fake.deleteLoginProfileWithContextMutex.Lock()
	defer fake.deleteLoginProfileWithContextMutex.Unlock()
	fake.DeleteLoginProfileWithContextStub = nil
	fake.deleteLoginProfileWithContextReturns = struct {
		result1 *iam.DeleteLoginProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteLoginProfileWithContextReturnsOnCall(i int, result1 *iam.DeleteLoginProfileOutput, result2 error) {
	fake.deleteLoginProfileWithContextMutex.Lock()
	defer fake.deleteLoginProfileWithContextMutex.Unlock()
	fake.DeleteLoginProfileWithContextStub = nil
	if fake.deleteLoginProfileWithContextReturnsOnCall == nil {
		fake.deleteLoginProfileWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteLoginProfileOutput
			result2 error
		})
	}
	fake.deleteLoginProfileWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteLoginProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProvider(arg1 *iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	fake.deleteOpenIDConnectProviderMutex.Lock()
	ret, specificReturn := fake.deleteOpenIDConnectProviderReturnsOnCall[len(fake.deleteOpenIDConnectProviderArgsForCall)]
	fake.deleteOpenIDConnectProviderArgsForCall = append(fake.deleteOpenIDConnectProviderArgsForCall, struct {
		arg1 *iam.DeleteOpenIDConnectProviderInput
	}{arg1})
	fake.recordInvocation("DeleteOpenIDConnectProvider", []interface{}{arg1})
	fake.deleteOpenIDConnectProviderMutex.Unlock()
	if fake.DeleteOpenIDConnectProviderStub != nil {
		return fake.DeleteOpenIDConnectProviderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteOpenIDConnectProviderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProviderCallCount() int {
	fake.deleteOpenIDConnectProviderMutex.RLock()
	defer fake.deleteOpenIDConnectProviderMutex.RUnlock()
	return len(fake.deleteOpenIDConnectProviderArgsForCall)
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProviderCalls(stub func(*iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error)) {
	fake.deleteOpenIDConnectProviderMutex.Lock()
	defer fake.deleteOpenIDConnectProviderMutex.Unlock()
	fake.DeleteOpenIDConnectProviderStub = stub
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProviderArgsForCall(i int) *iam.DeleteOpenIDConnectProviderInput {
	fake.deleteOpenIDConnectProviderMutex.RLock()
	defer fake.deleteOpenIDConnectProviderMutex.RUnlock()
	argsForCall := fake.deleteOpenIDConnectProviderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProviderReturns(result1 *iam.DeleteOpenIDConnectProviderOutput, result2 error) {
	fake.deleteOpenIDConnectProviderMutex.Lock()
	defer fake.deleteOpenIDConnectProviderMutex.Unlock()
	fake.DeleteOpenIDConnectProviderStub = nil
	fake.deleteOpenIDConnectProviderReturns = struct {
		result1 *iam.DeleteOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProviderReturnsOnCall(i int, result1 *iam.DeleteOpenIDConnectProviderOutput, result2 error) {
	fake.deleteOpenIDConnectProviderMutex.Lock()
	defer fake.deleteOpenIDConnectProviderMutex.Unlock()
	fake.DeleteOpenIDConnectProviderStub = nil
	if fake.deleteOpenIDConnectProviderReturnsOnCall == nil {
		fake.deleteOpenIDConnectProviderReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteOpenIDConnectProviderOutput
			result2 error
		})
	}
	fake.deleteOpenIDConnectProviderReturnsOnCall[i] = struct {
		result1 *iam.DeleteOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProviderRequest(arg1 *iam.DeleteOpenIDConnectProviderInput) (*request.Request, *iam.DeleteOpenIDConnectProviderOutput) {
	fake.deleteOpenIDConnectProviderRequestMutex.Lock()
	ret, specificReturn := fake.deleteOpenIDConnectProviderRequestReturnsOnCall[len(fake.deleteOpenIDConnectProviderRequestArgsForCall)]
	fake.deleteOpenIDConnectProviderRequestArgsForCall = append(fake.deleteOpenIDConnectProviderRequestArgsForCall, struct {
		arg1 *iam.DeleteOpenIDConnectProviderInput
	}{arg1})
	fake.recordInvocation("DeleteOpenIDConnectProviderRequest", []interface{}{arg1})
	fake.deleteOpenIDConnectProviderRequestMutex.Unlock()
	if fake.DeleteOpenIDConnectProviderRequestStub != nil {
		return fake.DeleteOpenIDConnectProviderRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteOpenIDConnectProviderRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProviderRequestCallCount() int {
	fake.deleteOpenIDConnectProviderRequestMutex.RLock()
	defer fake.deleteOpenIDConnectProviderRequestMutex.RUnlock()
	return len(fake.deleteOpenIDConnectProviderRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProviderRequestCalls(stub func(*iam.DeleteOpenIDConnectProviderInput) (*request.Request, *iam.DeleteOpenIDConnectProviderOutput)) {
	fake.deleteOpenIDConnectProviderRequestMutex.Lock()
	defer fake.deleteOpenIDConnectProviderRequestMutex.Unlock()
	fake.DeleteOpenIDConnectProviderRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProviderRequestArgsForCall(i int) *iam.DeleteOpenIDConnectProviderInput {
	fake.deleteOpenIDConnectProviderRequestMutex.RLock()
	defer fake.deleteOpenIDConnectProviderRequestMutex.RUnlock()
	argsForCall := fake.deleteOpenIDConnectProviderRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProviderRequestReturns(result1 *request.Request, result2 *iam.DeleteOpenIDConnectProviderOutput) {
	fake.deleteOpenIDConnectProviderRequestMutex.Lock()
	defer fake.deleteOpenIDConnectProviderRequestMutex.Unlock()
	fake.DeleteOpenIDConnectProviderRequestStub = nil
	fake.deleteOpenIDConnectProviderRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteOpenIDConnectProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProviderRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteOpenIDConnectProviderOutput) {
	fake.deleteOpenIDConnectProviderRequestMutex.Lock()
	defer fake.deleteOpenIDConnectProviderRequestMutex.Unlock()
	fake.DeleteOpenIDConnectProviderRequestStub = nil
	if fake.deleteOpenIDConnectProviderRequestReturnsOnCall == nil {
		fake.deleteOpenIDConnectProviderRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteOpenIDConnectProviderOutput
		})
	}
	fake.deleteOpenIDConnectProviderRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteOpenIDConnectProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProviderWithContext(arg1 context.Context, arg2 *iam.DeleteOpenIDConnectProviderInput, arg3 ...request.Option) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	fake.deleteOpenIDConnectProviderWithContextMutex.Lock()
	ret, specificReturn := fake.deleteOpenIDConnectProviderWithContextReturnsOnCall[len(fake.deleteOpenIDConnectProviderWithContextArgsForCall)]
	fake.deleteOpenIDConnectProviderWithContextArgsForCall = append(fake.deleteOpenIDConnectProviderWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteOpenIDConnectProviderInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteOpenIDConnectProviderWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteOpenIDConnectProviderWithContextMutex.Unlock()
	if fake.DeleteOpenIDConnectProviderWithContextStub != nil {
		return fake.DeleteOpenIDConnectProviderWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteOpenIDConnectProviderWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProviderWithContextCallCount() int {
	fake.deleteOpenIDConnectProviderWithContextMutex.RLock()
	defer fake.deleteOpenIDConnectProviderWithContextMutex.RUnlock()
	return len(fake.deleteOpenIDConnectProviderWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProviderWithContextCalls(stub func(context.Context, *iam.DeleteOpenIDConnectProviderInput, ...request.Option) (*iam.DeleteOpenIDConnectProviderOutput, error)) {
	fake.deleteOpenIDConnectProviderWithContextMutex.Lock()
	defer fake.deleteOpenIDConnectProviderWithContextMutex.Unlock()
	fake.DeleteOpenIDConnectProviderWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProviderWithContextArgsForCall(i int) (context.Context, *iam.DeleteOpenIDConnectProviderInput, []request.Option) {
	fake.deleteOpenIDConnectProviderWithContextMutex.RLock()
	defer fake.deleteOpenIDConnectProviderWithContextMutex.RUnlock()
	argsForCall := fake.deleteOpenIDConnectProviderWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProviderWithContextReturns(result1 *iam.DeleteOpenIDConnectProviderOutput, result2 error) {
	fake.deleteOpenIDConnectProviderWithContextMutex.Lock()
	defer fake.deleteOpenIDConnectProviderWithContextMutex.Unlock()
	fake.DeleteOpenIDConnectProviderWithContextStub = nil
	fake.deleteOpenIDConnectProviderWithContextReturns = struct {
		result1 *iam.DeleteOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteOpenIDConnectProviderWithContextReturnsOnCall(i int, result1 *iam.DeleteOpenIDConnectProviderOutput, result2 error) {
	fake.deleteOpenIDConnectProviderWithContextMutex.Lock()
	defer fake.deleteOpenIDConnectProviderWithContextMutex.Unlock()
	fake.DeleteOpenIDConnectProviderWithContextStub = nil
	if fake.deleteOpenIDConnectProviderWithContextReturnsOnCall == nil {
		fake.deleteOpenIDConnectProviderWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteOpenIDConnectProviderOutput
			result2 error
		})
	}
	fake.deleteOpenIDConnectProviderWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeletePolicy(arg1 *iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error) {
	fake.deletePolicyMutex.Lock()
	ret, specificReturn := fake.deletePolicyReturnsOnCall[len(fake.deletePolicyArgsForCall)]
	fake.deletePolicyArgsForCall = append(fake.deletePolicyArgsForCall, struct {
		arg1 *iam.DeletePolicyInput
	}{arg1})
	fake.recordInvocation("DeletePolicy", []interface{}{arg1})
	fake.deletePolicyMutex.Unlock()
	if fake.DeletePolicyStub != nil {
		return fake.DeletePolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeletePolicyCallCount() int {
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	return len(fake.deletePolicyArgsForCall)
}

func (fake *FakeIAMAPI) DeletePolicyCalls(stub func(*iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error)) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = stub
}

func (fake *FakeIAMAPI) DeletePolicyArgsForCall(i int) *iam.DeletePolicyInput {
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	argsForCall := fake.deletePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeletePolicyReturns(result1 *iam.DeletePolicyOutput, result2 error) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = nil
	fake.deletePolicyReturns = struct {
		result1 *iam.DeletePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeletePolicyReturnsOnCall(i int, result1 *iam.DeletePolicyOutput, result2 error) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = nil
	if fake.deletePolicyReturnsOnCall == nil {
		fake.deletePolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.DeletePolicyOutput
			result2 error
		})
	}
	fake.deletePolicyReturnsOnCall[i] = struct {
		result1 *iam.DeletePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeletePolicyRequest(arg1 *iam.DeletePolicyInput) (*request.Request, *iam.DeletePolicyOutput) {
	fake.deletePolicyRequestMutex.Lock()
	ret, specificReturn := fake.deletePolicyRequestReturnsOnCall[len(fake.deletePolicyRequestArgsForCall)]
	fake.deletePolicyRequestArgsForCall = append(fake.deletePolicyRequestArgsForCall, struct {
		arg1 *iam.DeletePolicyInput
	}{arg1})
	fake.recordInvocation("DeletePolicyRequest", []interface{}{arg1})
	fake.deletePolicyRequestMutex.Unlock()
	if fake.DeletePolicyRequestStub != nil {
		return fake.DeletePolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeletePolicyRequestCallCount() int {
	fake.deletePolicyRequestMutex.RLock()
	defer fake.deletePolicyRequestMutex.RUnlock()
	return len(fake.deletePolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeletePolicyRequestCalls(stub func(*iam.DeletePolicyInput) (*request.Request, *iam.DeletePolicyOutput)) {
	fake.deletePolicyRequestMutex.Lock()
	defer fake.deletePolicyRequestMutex.Unlock()
	fake.DeletePolicyRequestStub = stub
}

func (fake *FakeIAMAPI) DeletePolicyRequestArgsForCall(i int) *iam.DeletePolicyInput {
	fake.deletePolicyRequestMutex.RLock()
	defer fake.deletePolicyRequestMutex.RUnlock()
	argsForCall := fake.deletePolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeletePolicyRequestReturns(result1 *request.Request, result2 *iam.DeletePolicyOutput) {
	fake.deletePolicyRequestMutex.Lock()
	defer fake.deletePolicyRequestMutex.Unlock()
	fake.DeletePolicyRequestStub = nil
	fake.deletePolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeletePolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeletePolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeletePolicyOutput) {
	fake.deletePolicyRequestMutex.Lock()
	defer fake.deletePolicyRequestMutex.Unlock()
	fake.DeletePolicyRequestStub = nil
	if fake.deletePolicyRequestReturnsOnCall == nil {
		fake.deletePolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeletePolicyOutput
		})
	}
	fake.deletePolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeletePolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeletePolicyVersion(arg1 *iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error) {
	fake.deletePolicyVersionMutex.Lock()
	ret, specificReturn := fake.deletePolicyVersionReturnsOnCall[len(fake.deletePolicyVersionArgsForCall)]
	fake.deletePolicyVersionArgsForCall = append(fake.deletePolicyVersionArgsForCall, struct {
		arg1 *iam.DeletePolicyVersionInput
	}{arg1})
	fake.recordInvocation("DeletePolicyVersion", []interface{}{arg1})
	fake.deletePolicyVersionMutex.Unlock()
	if fake.DeletePolicyVersionStub != nil {
		return fake.DeletePolicyVersionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePolicyVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeletePolicyVersionCallCount() int {
	fake.deletePolicyVersionMutex.RLock()
	defer fake.deletePolicyVersionMutex.RUnlock()
	return len(fake.deletePolicyVersionArgsForCall)
}

func (fake *FakeIAMAPI) DeletePolicyVersionCalls(stub func(*iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error)) {
	fake.deletePolicyVersionMutex.Lock()
	defer fake.deletePolicyVersionMutex.Unlock()
	fake.DeletePolicyVersionStub = stub
}

func (fake *FakeIAMAPI) DeletePolicyVersionArgsForCall(i int) *iam.DeletePolicyVersionInput {
	fake.deletePolicyVersionMutex.RLock()
	defer fake.deletePolicyVersionMutex.RUnlock()
	argsForCall := fake.deletePolicyVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeletePolicyVersionReturns(result1 *iam.DeletePolicyVersionOutput, result2 error) {
	fake.deletePolicyVersionMutex.Lock()
	defer fake.deletePolicyVersionMutex.Unlock()
	fake.DeletePolicyVersionStub = nil
	fake.deletePolicyVersionReturns = struct {
		result1 *iam.DeletePolicyVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeletePolicyVersionReturnsOnCall(i int, result1 *iam.DeletePolicyVersionOutput, result2 error) {
	fake.deletePolicyVersionMutex.Lock()
	defer fake.deletePolicyVersionMutex.Unlock()
	fake.DeletePolicyVersionStub = nil
	if fake.deletePolicyVersionReturnsOnCall == nil {
		fake.deletePolicyVersionReturnsOnCall = make(map[int]struct {
			result1 *iam.DeletePolicyVersionOutput
			result2 error
		})
	}
	fake.deletePolicyVersionReturnsOnCall[i] = struct {
		result1 *iam.DeletePolicyVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeletePolicyVersionRequest(arg1 *iam.DeletePolicyVersionInput) (*request.Request, *iam.DeletePolicyVersionOutput) {
	fake.deletePolicyVersionRequestMutex.Lock()
	ret, specificReturn := fake.deletePolicyVersionRequestReturnsOnCall[len(fake.deletePolicyVersionRequestArgsForCall)]
	fake.deletePolicyVersionRequestArgsForCall = append(fake.deletePolicyVersionRequestArgsForCall, struct {
		arg1 *iam.DeletePolicyVersionInput
	}{arg1})
	fake.recordInvocation("DeletePolicyVersionRequest", []interface{}{arg1})
	fake.deletePolicyVersionRequestMutex.Unlock()
	if fake.DeletePolicyVersionRequestStub != nil {
		return fake.DeletePolicyVersionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePolicyVersionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeletePolicyVersionRequestCallCount() int {
	fake.deletePolicyVersionRequestMutex.RLock()
	defer fake.deletePolicyVersionRequestMutex.RUnlock()
	return len(fake.deletePolicyVersionRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeletePolicyVersionRequestCalls(stub func(*iam.DeletePolicyVersionInput) (*request.Request, *iam.DeletePolicyVersionOutput)) {
	fake.deletePolicyVersionRequestMutex.Lock()
	defer fake.deletePolicyVersionRequestMutex.Unlock()
	fake.DeletePolicyVersionRequestStub = stub
}

func (fake *FakeIAMAPI) DeletePolicyVersionRequestArgsForCall(i int) *iam.DeletePolicyVersionInput {
	fake.deletePolicyVersionRequestMutex.RLock()
	defer fake.deletePolicyVersionRequestMutex.RUnlock()
	argsForCall := fake.deletePolicyVersionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeletePolicyVersionRequestReturns(result1 *request.Request, result2 *iam.DeletePolicyVersionOutput) {
	fake.deletePolicyVersionRequestMutex.Lock()
	defer fake.deletePolicyVersionRequestMutex.Unlock()
	fake.DeletePolicyVersionRequestStub = nil
	fake.deletePolicyVersionRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeletePolicyVersionOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeletePolicyVersionRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeletePolicyVersionOutput) {
	fake.deletePolicyVersionRequestMutex.Lock()
	defer fake.deletePolicyVersionRequestMutex.Unlock()
	fake.DeletePolicyVersionRequestStub = nil
	if fake.deletePolicyVersionRequestReturnsOnCall == nil {
		fake.deletePolicyVersionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeletePolicyVersionOutput
		})
	}
	fake.deletePolicyVersionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeletePolicyVersionOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeletePolicyVersionWithContext(arg1 context.Context, arg2 *iam.DeletePolicyVersionInput, arg3 ...request.Option) (*iam.DeletePolicyVersionOutput, error) {
	fake.deletePolicyVersionWithContextMutex.Lock()
	ret, specificReturn := fake.deletePolicyVersionWithContextReturnsOnCall[len(fake.deletePolicyVersionWithContextArgsForCall)]
	fake.deletePolicyVersionWithContextArgsForCall = append(fake.deletePolicyVersionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeletePolicyVersionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeletePolicyVersionWithContext", []interface{}{arg1, arg2, arg3})
	fake.deletePolicyVersionWithContextMutex.Unlock()
	if fake.DeletePolicyVersionWithContextStub != nil {
		return fake.DeletePolicyVersionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePolicyVersionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeletePolicyVersionWithContextCallCount() int {
	fake.deletePolicyVersionWithContextMutex.RLock()
	defer fake.deletePolicyVersionWithContextMutex.RUnlock()
	return len(fake.deletePolicyVersionWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeletePolicyVersionWithContextCalls(stub func(context.Context, *iam.DeletePolicyVersionInput, ...request.Option) (*iam.DeletePolicyVersionOutput, error)) {
	fake.deletePolicyVersionWithContextMutex.Lock()
	defer fake.deletePolicyVersionWithContextMutex.Unlock()
	fake.DeletePolicyVersionWithContextStub = stub
}

func (fake *FakeIAMAPI) DeletePolicyVersionWithContextArgsForCall(i int) (context.Context, *iam.DeletePolicyVersionInput, []request.Option) {
	fake.deletePolicyVersionWithContextMutex.RLock()
	defer fake.deletePolicyVersionWithContextMutex.RUnlock()
	argsForCall := fake.deletePolicyVersionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeletePolicyVersionWithContextReturns(result1 *iam.DeletePolicyVersionOutput, result2 error) {
	fake.deletePolicyVersionWithContextMutex.Lock()
	defer fake.deletePolicyVersionWithContextMutex.Unlock()
	fake.DeletePolicyVersionWithContextStub = nil
	fake.deletePolicyVersionWithContextReturns = struct {
		result1 *iam.DeletePolicyVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeletePolicyVersionWithContextReturnsOnCall(i int, result1 *iam.DeletePolicyVersionOutput, result2 error) {
	fake.deletePolicyVersionWithContextMutex.Lock()
	defer fake.deletePolicyVersionWithContextMutex.Unlock()
	fake.DeletePolicyVersionWithContextStub = nil
	if fake.deletePolicyVersionWithContextReturnsOnCall == nil {
		fake.deletePolicyVersionWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeletePolicyVersionOutput
			result2 error
		})
	}
	fake.deletePolicyVersionWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeletePolicyVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeletePolicyWithContext(arg1 context.Context, arg2 *iam.DeletePolicyInput, arg3 ...request.Option) (*iam.DeletePolicyOutput, error) {
	fake.deletePolicyWithContextMutex.Lock()
	ret, specificReturn := fake.deletePolicyWithContextReturnsOnCall[len(fake.deletePolicyWithContextArgsForCall)]
	fake.deletePolicyWithContextArgsForCall = append(fake.deletePolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeletePolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeletePolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.deletePolicyWithContextMutex.Unlock()
	if fake.DeletePolicyWithContextStub != nil {
		return fake.DeletePolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeletePolicyWithContextCallCount() int {
	fake.deletePolicyWithContextMutex.RLock()
	defer fake.deletePolicyWithContextMutex.RUnlock()
	return len(fake.deletePolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeletePolicyWithContextCalls(stub func(context.Context, *iam.DeletePolicyInput, ...request.Option) (*iam.DeletePolicyOutput, error)) {
	fake.deletePolicyWithContextMutex.Lock()
	defer fake.deletePolicyWithContextMutex.Unlock()
	fake.DeletePolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) DeletePolicyWithContextArgsForCall(i int) (context.Context, *iam.DeletePolicyInput, []request.Option) {
	fake.deletePolicyWithContextMutex.RLock()
	defer fake.deletePolicyWithContextMutex.RUnlock()
	argsForCall := fake.deletePolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeletePolicyWithContextReturns(result1 *iam.DeletePolicyOutput, result2 error) {
	fake.deletePolicyWithContextMutex.Lock()
	defer fake.deletePolicyWithContextMutex.Unlock()
	fake.DeletePolicyWithContextStub = nil
	fake.deletePolicyWithContextReturns = struct {
		result1 *iam.DeletePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeletePolicyWithContextReturnsOnCall(i int, result1 *iam.DeletePolicyOutput, result2 error) {
	fake.deletePolicyWithContextMutex.Lock()
	defer fake.deletePolicyWithContextMutex.Unlock()
	fake.DeletePolicyWithContextStub = nil
	if fake.deletePolicyWithContextReturnsOnCall == nil {
		fake.deletePolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeletePolicyOutput
			result2 error
		})
	}
	fake.deletePolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeletePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRole(arg1 *iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error) {
	fake.deleteRoleMutex.Lock()
	ret, specificReturn := fake.deleteRoleReturnsOnCall[len(fake.deleteRoleArgsForCall)]
	fake.deleteRoleArgsForCall = append(fake.deleteRoleArgsForCall, struct {
		arg1 *iam.DeleteRoleInput
	}{arg1})
	fake.recordInvocation("DeleteRole", []interface{}{arg1})
	fake.deleteRoleMutex.Unlock()
	if fake.DeleteRoleStub != nil {
		return fake.DeleteRoleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRoleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteRoleCallCount() int {
	fake.deleteRoleMutex.RLock()
	defer fake.deleteRoleMutex.RUnlock()
	return len(fake.deleteRoleArgsForCall)
}

func (fake *FakeIAMAPI) DeleteRoleCalls(stub func(*iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error)) {
	fake.deleteRoleMutex.Lock()
	defer fake.deleteRoleMutex.Unlock()
	fake.DeleteRoleStub = stub
}

func (fake *FakeIAMAPI) DeleteRoleArgsForCall(i int) *iam.DeleteRoleInput {
	fake.deleteRoleMutex.RLock()
	defer fake.deleteRoleMutex.RUnlock()
	argsForCall := fake.deleteRoleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteRoleReturns(result1 *iam.DeleteRoleOutput, result2 error) {
	fake.deleteRoleMutex.Lock()
	defer fake.deleteRoleMutex.Unlock()
	fake.DeleteRoleStub = nil
	fake.deleteRoleReturns = struct {
		result1 *iam.DeleteRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRoleReturnsOnCall(i int, result1 *iam.DeleteRoleOutput, result2 error) {
	fake.deleteRoleMutex.Lock()
	defer fake.deleteRoleMutex.Unlock()
	fake.DeleteRoleStub = nil
	if fake.deleteRoleReturnsOnCall == nil {
		fake.deleteRoleReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteRoleOutput
			result2 error
		})
	}
	fake.deleteRoleReturnsOnCall[i] = struct {
		result1 *iam.DeleteRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundary(arg1 *iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
	fake.deleteRolePermissionsBoundaryMutex.Lock()
	ret, specificReturn := fake.deleteRolePermissionsBoundaryReturnsOnCall[len(fake.deleteRolePermissionsBoundaryArgsForCall)]
	fake.deleteRolePermissionsBoundaryArgsForCall = append(fake.deleteRolePermissionsBoundaryArgsForCall, struct {
		arg1 *iam.DeleteRolePermissionsBoundaryInput
	}{arg1})
	fake.recordInvocation("DeleteRolePermissionsBoundary", []interface{}{arg1})
	fake.deleteRolePermissionsBoundaryMutex.Unlock()
	if fake.DeleteRolePermissionsBoundaryStub != nil {
		return fake.DeleteRolePermissionsBoundaryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRolePermissionsBoundaryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundaryCallCount() int {
	fake.deleteRolePermissionsBoundaryMutex.RLock()
	defer fake.deleteRolePermissionsBoundaryMutex.RUnlock()
	return len(fake.deleteRolePermissionsBoundaryArgsForCall)
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundaryCalls(stub func(*iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error)) {
	fake.deleteRolePermissionsBoundaryMutex.Lock()
	defer fake.deleteRolePermissionsBoundaryMutex.Unlock()
	fake.DeleteRolePermissionsBoundaryStub = stub
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundaryArgsForCall(i int) *iam.DeleteRolePermissionsBoundaryInput {
	fake.deleteRolePermissionsBoundaryMutex.RLock()
	defer fake.deleteRolePermissionsBoundaryMutex.RUnlock()
	argsForCall := fake.deleteRolePermissionsBoundaryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundaryReturns(result1 *iam.DeleteRolePermissionsBoundaryOutput, result2 error) {
	fake.deleteRolePermissionsBoundaryMutex.Lock()
	defer fake.deleteRolePermissionsBoundaryMutex.Unlock()
	fake.DeleteRolePermissionsBoundaryStub = nil
	fake.deleteRolePermissionsBoundaryReturns = struct {
		result1 *iam.DeleteRolePermissionsBoundaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundaryReturnsOnCall(i int, result1 *iam.DeleteRolePermissionsBoundaryOutput, result2 error) {
	fake.deleteRolePermissionsBoundaryMutex.Lock()
	defer fake.deleteRolePermissionsBoundaryMutex.Unlock()
	fake.DeleteRolePermissionsBoundaryStub = nil
	if fake.deleteRolePermissionsBoundaryReturnsOnCall == nil {
		fake.deleteRolePermissionsBoundaryReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteRolePermissionsBoundaryOutput
			result2 error
		})
	}
	fake.deleteRolePermissionsBoundaryReturnsOnCall[i] = struct {
		result1 *iam.DeleteRolePermissionsBoundaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundaryRequest(arg1 *iam.DeleteRolePermissionsBoundaryInput) (*request.Request, *iam.DeleteRolePermissionsBoundaryOutput) {
	fake.deleteRolePermissionsBoundaryRequestMutex.Lock()
	ret, specificReturn := fake.deleteRolePermissionsBoundaryRequestReturnsOnCall[len(fake.deleteRolePermissionsBoundaryRequestArgsForCall)]
	fake.deleteRolePermissionsBoundaryRequestArgsForCall = append(fake.deleteRolePermissionsBoundaryRequestArgsForCall, struct {
		arg1 *iam.DeleteRolePermissionsBoundaryInput
	}{arg1})
	fake.recordInvocation("DeleteRolePermissionsBoundaryRequest", []interface{}{arg1})
	fake.deleteRolePermissionsBoundaryRequestMutex.Unlock()
	if fake.DeleteRolePermissionsBoundaryRequestStub != nil {
		return fake.DeleteRolePermissionsBoundaryRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRolePermissionsBoundaryRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundaryRequestCallCount() int {
	fake.deleteRolePermissionsBoundaryRequestMutex.RLock()
	defer fake.deleteRolePermissionsBoundaryRequestMutex.RUnlock()
	return len(fake.deleteRolePermissionsBoundaryRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundaryRequestCalls(stub func(*iam.DeleteRolePermissionsBoundaryInput) (*request.Request, *iam.DeleteRolePermissionsBoundaryOutput)) {
	fake.deleteRolePermissionsBoundaryRequestMutex.Lock()
	defer fake.deleteRolePermissionsBoundaryRequestMutex.Unlock()
	fake.DeleteRolePermissionsBoundaryRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundaryRequestArgsForCall(i int) *iam.DeleteRolePermissionsBoundaryInput {
	fake.deleteRolePermissionsBoundaryRequestMutex.RLock()
	defer fake.deleteRolePermissionsBoundaryRequestMutex.RUnlock()
	argsForCall := fake.deleteRolePermissionsBoundaryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundaryRequestReturns(result1 *request.Request, result2 *iam.DeleteRolePermissionsBoundaryOutput) {
	fake.deleteRolePermissionsBoundaryRequestMutex.Lock()
	defer fake.deleteRolePermissionsBoundaryRequestMutex.Unlock()
	fake.DeleteRolePermissionsBoundaryRequestStub = nil
	fake.deleteRolePermissionsBoundaryRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteRolePermissionsBoundaryOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundaryRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteRolePermissionsBoundaryOutput) {
	fake.deleteRolePermissionsBoundaryRequestMutex.Lock()
	defer fake.deleteRolePermissionsBoundaryRequestMutex.Unlock()
	fake.DeleteRolePermissionsBoundaryRequestStub = nil
	if fake.deleteRolePermissionsBoundaryRequestReturnsOnCall == nil {
		fake.deleteRolePermissionsBoundaryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteRolePermissionsBoundaryOutput
		})
	}
	fake.deleteRolePermissionsBoundaryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteRolePermissionsBoundaryOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundaryWithContext(arg1 context.Context, arg2 *iam.DeleteRolePermissionsBoundaryInput, arg3 ...request.Option) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
	fake.deleteRolePermissionsBoundaryWithContextMutex.Lock()
	ret, specificReturn := fake.deleteRolePermissionsBoundaryWithContextReturnsOnCall[len(fake.deleteRolePermissionsBoundaryWithContextArgsForCall)]
	fake.deleteRolePermissionsBoundaryWithContextArgsForCall = append(fake.deleteRolePermissionsBoundaryWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteRolePermissionsBoundaryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteRolePermissionsBoundaryWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteRolePermissionsBoundaryWithContextMutex.Unlock()
	if fake.DeleteRolePermissionsBoundaryWithContextStub != nil {
		return fake.DeleteRolePermissionsBoundaryWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRolePermissionsBoundaryWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundaryWithContextCallCount() int {
	fake.deleteRolePermissionsBoundaryWithContextMutex.RLock()
	defer fake.deleteRolePermissionsBoundaryWithContextMutex.RUnlock()
	return len(fake.deleteRolePermissionsBoundaryWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundaryWithContextCalls(stub func(context.Context, *iam.DeleteRolePermissionsBoundaryInput, ...request.Option) (*iam.DeleteRolePermissionsBoundaryOutput, error)) {
	fake.deleteRolePermissionsBoundaryWithContextMutex.Lock()
	defer fake.deleteRolePermissionsBoundaryWithContextMutex.Unlock()
	fake.DeleteRolePermissionsBoundaryWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundaryWithContextArgsForCall(i int) (context.Context, *iam.DeleteRolePermissionsBoundaryInput, []request.Option) {
	fake.deleteRolePermissionsBoundaryWithContextMutex.RLock()
	defer fake.deleteRolePermissionsBoundaryWithContextMutex.RUnlock()
	argsForCall := fake.deleteRolePermissionsBoundaryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundaryWithContextReturns(result1 *iam.DeleteRolePermissionsBoundaryOutput, result2 error) {
	fake.deleteRolePermissionsBoundaryWithContextMutex.Lock()
	defer fake.deleteRolePermissionsBoundaryWithContextMutex.Unlock()
	fake.DeleteRolePermissionsBoundaryWithContextStub = nil
	fake.deleteRolePermissionsBoundaryWithContextReturns = struct {
		result1 *iam.DeleteRolePermissionsBoundaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRolePermissionsBoundaryWithContextReturnsOnCall(i int, result1 *iam.DeleteRolePermissionsBoundaryOutput, result2 error) {
	fake.deleteRolePermissionsBoundaryWithContextMutex.Lock()
	defer fake.deleteRolePermissionsBoundaryWithContextMutex.Unlock()
	fake.DeleteRolePermissionsBoundaryWithContextStub = nil
	if fake.deleteRolePermissionsBoundaryWithContextReturnsOnCall == nil {
		fake.deleteRolePermissionsBoundaryWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteRolePermissionsBoundaryOutput
			result2 error
		})
	}
	fake.deleteRolePermissionsBoundaryWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteRolePermissionsBoundaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRolePolicy(arg1 *iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error) {
	fake.deleteRolePolicyMutex.Lock()
	ret, specificReturn := fake.deleteRolePolicyReturnsOnCall[len(fake.deleteRolePolicyArgsForCall)]
	fake.deleteRolePolicyArgsForCall = append(fake.deleteRolePolicyArgsForCall, struct {
		arg1 *iam.DeleteRolePolicyInput
	}{arg1})
	fake.recordInvocation("DeleteRolePolicy", []interface{}{arg1})
	fake.deleteRolePolicyMutex.Unlock()
	if fake.DeleteRolePolicyStub != nil {
		return fake.DeleteRolePolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRolePolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteRolePolicyCallCount() int {
	fake.deleteRolePolicyMutex.RLock()
	defer fake.deleteRolePolicyMutex.RUnlock()
	return len(fake.deleteRolePolicyArgsForCall)
}

func (fake *FakeIAMAPI) DeleteRolePolicyCalls(stub func(*iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error)) {
	fake.deleteRolePolicyMutex.Lock()
	defer fake.deleteRolePolicyMutex.Unlock()
	fake.DeleteRolePolicyStub = stub
}

func (fake *FakeIAMAPI) DeleteRolePolicyArgsForCall(i int) *iam.DeleteRolePolicyInput {
	fake.deleteRolePolicyMutex.RLock()
	defer fake.deleteRolePolicyMutex.RUnlock()
	argsForCall := fake.deleteRolePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteRolePolicyReturns(result1 *iam.DeleteRolePolicyOutput, result2 error) {
	fake.deleteRolePolicyMutex.Lock()
	defer fake.deleteRolePolicyMutex.Unlock()
	fake.DeleteRolePolicyStub = nil
	fake.deleteRolePolicyReturns = struct {
		result1 *iam.DeleteRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRolePolicyReturnsOnCall(i int, result1 *iam.DeleteRolePolicyOutput, result2 error) {
	fake.deleteRolePolicyMutex.Lock()
	defer fake.deleteRolePolicyMutex.Unlock()
	fake.DeleteRolePolicyStub = nil
	if fake.deleteRolePolicyReturnsOnCall == nil {
		fake.deleteRolePolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteRolePolicyOutput
			result2 error
		})
	}
	fake.deleteRolePolicyReturnsOnCall[i] = struct {
		result1 *iam.DeleteRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRolePolicyRequest(arg1 *iam.DeleteRolePolicyInput) (*request.Request, *iam.DeleteRolePolicyOutput) {
	fake.deleteRolePolicyRequestMutex.Lock()
	ret, specificReturn := fake.deleteRolePolicyRequestReturnsOnCall[len(fake.deleteRolePolicyRequestArgsForCall)]
	fake.deleteRolePolicyRequestArgsForCall = append(fake.deleteRolePolicyRequestArgsForCall, struct {
		arg1 *iam.DeleteRolePolicyInput
	}{arg1})
	fake.recordInvocation("DeleteRolePolicyRequest", []interface{}{arg1})
	fake.deleteRolePolicyRequestMutex.Unlock()
	if fake.DeleteRolePolicyRequestStub != nil {
		return fake.DeleteRolePolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRolePolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteRolePolicyRequestCallCount() int {
	fake.deleteRolePolicyRequestMutex.RLock()
	defer fake.deleteRolePolicyRequestMutex.RUnlock()
	return len(fake.deleteRolePolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteRolePolicyRequestCalls(stub func(*iam.DeleteRolePolicyInput) (*request.Request, *iam.DeleteRolePolicyOutput)) {
	fake.deleteRolePolicyRequestMutex.Lock()
	defer fake.deleteRolePolicyRequestMutex.Unlock()
	fake.DeleteRolePolicyRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteRolePolicyRequestArgsForCall(i int) *iam.DeleteRolePolicyInput {
	fake.deleteRolePolicyRequestMutex.RLock()
	defer fake.deleteRolePolicyRequestMutex.RUnlock()
	argsForCall := fake.deleteRolePolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteRolePolicyRequestReturns(result1 *request.Request, result2 *iam.DeleteRolePolicyOutput) {
	fake.deleteRolePolicyRequestMutex.Lock()
	defer fake.deleteRolePolicyRequestMutex.Unlock()
	fake.DeleteRolePolicyRequestStub = nil
	fake.deleteRolePolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteRolePolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRolePolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteRolePolicyOutput) {
	fake.deleteRolePolicyRequestMutex.Lock()
	defer fake.deleteRolePolicyRequestMutex.Unlock()
	fake.DeleteRolePolicyRequestStub = nil
	if fake.deleteRolePolicyRequestReturnsOnCall == nil {
		fake.deleteRolePolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteRolePolicyOutput
		})
	}
	fake.deleteRolePolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteRolePolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRolePolicyWithContext(arg1 context.Context, arg2 *iam.DeleteRolePolicyInput, arg3 ...request.Option) (*iam.DeleteRolePolicyOutput, error) {
	fake.deleteRolePolicyWithContextMutex.Lock()
	ret, specificReturn := fake.deleteRolePolicyWithContextReturnsOnCall[len(fake.deleteRolePolicyWithContextArgsForCall)]
	fake.deleteRolePolicyWithContextArgsForCall = append(fake.deleteRolePolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteRolePolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteRolePolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteRolePolicyWithContextMutex.Unlock()
	if fake.DeleteRolePolicyWithContextStub != nil {
		return fake.DeleteRolePolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRolePolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteRolePolicyWithContextCallCount() int {
	fake.deleteRolePolicyWithContextMutex.RLock()
	defer fake.deleteRolePolicyWithContextMutex.RUnlock()
	return len(fake.deleteRolePolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteRolePolicyWithContextCalls(stub func(context.Context, *iam.DeleteRolePolicyInput, ...request.Option) (*iam.DeleteRolePolicyOutput, error)) {
	fake.deleteRolePolicyWithContextMutex.Lock()
	defer fake.deleteRolePolicyWithContextMutex.Unlock()
	fake.DeleteRolePolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteRolePolicyWithContextArgsForCall(i int) (context.Context, *iam.DeleteRolePolicyInput, []request.Option) {
	fake.deleteRolePolicyWithContextMutex.RLock()
	defer fake.deleteRolePolicyWithContextMutex.RUnlock()
	argsForCall := fake.deleteRolePolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteRolePolicyWithContextReturns(result1 *iam.DeleteRolePolicyOutput, result2 error) {
	fake.deleteRolePolicyWithContextMutex.Lock()
	defer fake.deleteRolePolicyWithContextMutex.Unlock()
	fake.DeleteRolePolicyWithContextStub = nil
	fake.deleteRolePolicyWithContextReturns = struct {
		result1 *iam.DeleteRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRolePolicyWithContextReturnsOnCall(i int, result1 *iam.DeleteRolePolicyOutput, result2 error) {
	fake.deleteRolePolicyWithContextMutex.Lock()
	defer fake.deleteRolePolicyWithContextMutex.Unlock()
	fake.DeleteRolePolicyWithContextStub = nil
	if fake.deleteRolePolicyWithContextReturnsOnCall == nil {
		fake.deleteRolePolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteRolePolicyOutput
			result2 error
		})
	}
	fake.deleteRolePolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRoleRequest(arg1 *iam.DeleteRoleInput) (*request.Request, *iam.DeleteRoleOutput) {
	fake.deleteRoleRequestMutex.Lock()
	ret, specificReturn := fake.deleteRoleRequestReturnsOnCall[len(fake.deleteRoleRequestArgsForCall)]
	fake.deleteRoleRequestArgsForCall = append(fake.deleteRoleRequestArgsForCall, struct {
		arg1 *iam.DeleteRoleInput
	}{arg1})
	fake.recordInvocation("DeleteRoleRequest", []interface{}{arg1})
	fake.deleteRoleRequestMutex.Unlock()
	if fake.DeleteRoleRequestStub != nil {
		return fake.DeleteRoleRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRoleRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteRoleRequestCallCount() int {
	fake.deleteRoleRequestMutex.RLock()
	defer fake.deleteRoleRequestMutex.RUnlock()
	return len(fake.deleteRoleRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteRoleRequestCalls(stub func(*iam.DeleteRoleInput) (*request.Request, *iam.DeleteRoleOutput)) {
	fake.deleteRoleRequestMutex.Lock()
	defer fake.deleteRoleRequestMutex.Unlock()
	fake.DeleteRoleRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteRoleRequestArgsForCall(i int) *iam.DeleteRoleInput {
	fake.deleteRoleRequestMutex.RLock()
	defer fake.deleteRoleRequestMutex.RUnlock()
	argsForCall := fake.deleteRoleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteRoleRequestReturns(result1 *request.Request, result2 *iam.DeleteRoleOutput) {
	fake.deleteRoleRequestMutex.Lock()
	defer fake.deleteRoleRequestMutex.Unlock()
	fake.DeleteRoleRequestStub = nil
	fake.deleteRoleRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRoleRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteRoleOutput) {
	fake.deleteRoleRequestMutex.Lock()
	defer fake.deleteRoleRequestMutex.Unlock()
	fake.DeleteRoleRequestStub = nil
	if fake.deleteRoleRequestReturnsOnCall == nil {
		fake.deleteRoleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteRoleOutput
		})
	}
	fake.deleteRoleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRoleWithContext(arg1 context.Context, arg2 *iam.DeleteRoleInput, arg3 ...request.Option) (*iam.DeleteRoleOutput, error) {
	fake.deleteRoleWithContextMutex.Lock()
	ret, specificReturn := fake.deleteRoleWithContextReturnsOnCall[len(fake.deleteRoleWithContextArgsForCall)]
	fake.deleteRoleWithContextArgsForCall = append(fake.deleteRoleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteRoleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteRoleWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteRoleWithContextMutex.Unlock()
	if fake.DeleteRoleWithContextStub != nil {
		return fake.DeleteRoleWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRoleWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteRoleWithContextCallCount() int {
	fake.deleteRoleWithContextMutex.RLock()
	defer fake.deleteRoleWithContextMutex.RUnlock()
	return len(fake.deleteRoleWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteRoleWithContextCalls(stub func(context.Context, *iam.DeleteRoleInput, ...request.Option) (*iam.DeleteRoleOutput, error)) {
	fake.deleteRoleWithContextMutex.Lock()
	defer fake.deleteRoleWithContextMutex.Unlock()
	fake.DeleteRoleWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteRoleWithContextArgsForCall(i int) (context.Context, *iam.DeleteRoleInput, []request.Option) {
	fake.deleteRoleWithContextMutex.RLock()
	defer fake.deleteRoleWithContextMutex.RUnlock()
	argsForCall := fake.deleteRoleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteRoleWithContextReturns(result1 *iam.DeleteRoleOutput, result2 error) {
	fake.deleteRoleWithContextMutex.Lock()
	defer fake.deleteRoleWithContextMutex.Unlock()
	fake.DeleteRoleWithContextStub = nil
	fake.deleteRoleWithContextReturns = struct {
		result1 *iam.DeleteRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteRoleWithContextReturnsOnCall(i int, result1 *iam.DeleteRoleOutput, result2 error) {
	fake.deleteRoleWithContextMutex.Lock()
	defer fake.deleteRoleWithContextMutex.Unlock()
	fake.DeleteRoleWithContextStub = nil
	if fake.deleteRoleWithContextReturnsOnCall == nil {
		fake.deleteRoleWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteRoleOutput
			result2 error
		})
	}
	fake.deleteRoleWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSAMLProvider(arg1 *iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error) {
	fake.deleteSAMLProviderMutex.Lock()
	ret, specificReturn := fake.deleteSAMLProviderReturnsOnCall[len(fake.deleteSAMLProviderArgsForCall)]
	fake.deleteSAMLProviderArgsForCall = append(fake.deleteSAMLProviderArgsForCall, struct {
		arg1 *iam.DeleteSAMLProviderInput
	}{arg1})
	fake.recordInvocation("DeleteSAMLProvider", []interface{}{arg1})
	fake.deleteSAMLProviderMutex.Unlock()
	if fake.DeleteSAMLProviderStub != nil {
		return fake.DeleteSAMLProviderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSAMLProviderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteSAMLProviderCallCount() int {
	fake.deleteSAMLProviderMutex.RLock()
	defer fake.deleteSAMLProviderMutex.RUnlock()
	return len(fake.deleteSAMLProviderArgsForCall)
}

func (fake *FakeIAMAPI) DeleteSAMLProviderCalls(stub func(*iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error)) {
	fake.deleteSAMLProviderMutex.Lock()
	defer fake.deleteSAMLProviderMutex.Unlock()
	fake.DeleteSAMLProviderStub = stub
}

func (fake *FakeIAMAPI) DeleteSAMLProviderArgsForCall(i int) *iam.DeleteSAMLProviderInput {
	fake.deleteSAMLProviderMutex.RLock()
	defer fake.deleteSAMLProviderMutex.RUnlock()
	argsForCall := fake.deleteSAMLProviderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteSAMLProviderReturns(result1 *iam.DeleteSAMLProviderOutput, result2 error) {
	fake.deleteSAMLProviderMutex.Lock()
	defer fake.deleteSAMLProviderMutex.Unlock()
	fake.DeleteSAMLProviderStub = nil
	fake.deleteSAMLProviderReturns = struct {
		result1 *iam.DeleteSAMLProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSAMLProviderReturnsOnCall(i int, result1 *iam.DeleteSAMLProviderOutput, result2 error) {
	fake.deleteSAMLProviderMutex.Lock()
	defer fake.deleteSAMLProviderMutex.Unlock()
	fake.DeleteSAMLProviderStub = nil
	if fake.deleteSAMLProviderReturnsOnCall == nil {
		fake.deleteSAMLProviderReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteSAMLProviderOutput
			result2 error
		})
	}
	fake.deleteSAMLProviderReturnsOnCall[i] = struct {
		result1 *iam.DeleteSAMLProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSAMLProviderRequest(arg1 *iam.DeleteSAMLProviderInput) (*request.Request, *iam.DeleteSAMLProviderOutput) {
	fake.deleteSAMLProviderRequestMutex.Lock()
	ret, specificReturn := fake.deleteSAMLProviderRequestReturnsOnCall[len(fake.deleteSAMLProviderRequestArgsForCall)]
	fake.deleteSAMLProviderRequestArgsForCall = append(fake.deleteSAMLProviderRequestArgsForCall, struct {
		arg1 *iam.DeleteSAMLProviderInput
	}{arg1})
	fake.recordInvocation("DeleteSAMLProviderRequest", []interface{}{arg1})
	fake.deleteSAMLProviderRequestMutex.Unlock()
	if fake.DeleteSAMLProviderRequestStub != nil {
		return fake.DeleteSAMLProviderRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSAMLProviderRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteSAMLProviderRequestCallCount() int {
	fake.deleteSAMLProviderRequestMutex.RLock()
	defer fake.deleteSAMLProviderRequestMutex.RUnlock()
	return len(fake.deleteSAMLProviderRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteSAMLProviderRequestCalls(stub func(*iam.DeleteSAMLProviderInput) (*request.Request, *iam.DeleteSAMLProviderOutput)) {
	fake.deleteSAMLProviderRequestMutex.Lock()
	defer fake.deleteSAMLProviderRequestMutex.Unlock()
	fake.DeleteSAMLProviderRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteSAMLProviderRequestArgsForCall(i int) *iam.DeleteSAMLProviderInput {
	fake.deleteSAMLProviderRequestMutex.RLock()
	defer fake.deleteSAMLProviderRequestMutex.RUnlock()
	argsForCall := fake.deleteSAMLProviderRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteSAMLProviderRequestReturns(result1 *request.Request, result2 *iam.DeleteSAMLProviderOutput) {
	fake.deleteSAMLProviderRequestMutex.Lock()
	defer fake.deleteSAMLProviderRequestMutex.Unlock()
	fake.DeleteSAMLProviderRequestStub = nil
	fake.deleteSAMLProviderRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteSAMLProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSAMLProviderRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteSAMLProviderOutput) {
	fake.deleteSAMLProviderRequestMutex.Lock()
	defer fake.deleteSAMLProviderRequestMutex.Unlock()
	fake.DeleteSAMLProviderRequestStub = nil
	if fake.deleteSAMLProviderRequestReturnsOnCall == nil {
		fake.deleteSAMLProviderRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteSAMLProviderOutput
		})
	}
	fake.deleteSAMLProviderRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteSAMLProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSAMLProviderWithContext(arg1 context.Context, arg2 *iam.DeleteSAMLProviderInput, arg3 ...request.Option) (*iam.DeleteSAMLProviderOutput, error) {
	fake.deleteSAMLProviderWithContextMutex.Lock()
	ret, specificReturn := fake.deleteSAMLProviderWithContextReturnsOnCall[len(fake.deleteSAMLProviderWithContextArgsForCall)]
	fake.deleteSAMLProviderWithContextArgsForCall = append(fake.deleteSAMLProviderWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteSAMLProviderInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteSAMLProviderWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteSAMLProviderWithContextMutex.Unlock()
	if fake.DeleteSAMLProviderWithContextStub != nil {
		return fake.DeleteSAMLProviderWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSAMLProviderWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteSAMLProviderWithContextCallCount() int {
	fake.deleteSAMLProviderWithContextMutex.RLock()
	defer fake.deleteSAMLProviderWithContextMutex.RUnlock()
	return len(fake.deleteSAMLProviderWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteSAMLProviderWithContextCalls(stub func(context.Context, *iam.DeleteSAMLProviderInput, ...request.Option) (*iam.DeleteSAMLProviderOutput, error)) {
	fake.deleteSAMLProviderWithContextMutex.Lock()
	defer fake.deleteSAMLProviderWithContextMutex.Unlock()
	fake.DeleteSAMLProviderWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteSAMLProviderWithContextArgsForCall(i int) (context.Context, *iam.DeleteSAMLProviderInput, []request.Option) {
	fake.deleteSAMLProviderWithContextMutex.RLock()
	defer fake.deleteSAMLProviderWithContextMutex.RUnlock()
	argsForCall := fake.deleteSAMLProviderWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteSAMLProviderWithContextReturns(result1 *iam.DeleteSAMLProviderOutput, result2 error) {
	fake.deleteSAMLProviderWithContextMutex.Lock()
	defer fake.deleteSAMLProviderWithContextMutex.Unlock()
	fake.DeleteSAMLProviderWithContextStub = nil
	fake.deleteSAMLProviderWithContextReturns = struct {
		result1 *iam.DeleteSAMLProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSAMLProviderWithContextReturnsOnCall(i int, result1 *iam.DeleteSAMLProviderOutput, result2 error) {
	fake.deleteSAMLProviderWithContextMutex.Lock()
	defer fake.deleteSAMLProviderWithContextMutex.Unlock()
	fake.DeleteSAMLProviderWithContextStub = nil
	if fake.deleteSAMLProviderWithContextReturnsOnCall == nil {
		fake.deleteSAMLProviderWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteSAMLProviderOutput
			result2 error
		})
	}
	fake.deleteSAMLProviderWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteSAMLProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSSHPublicKey(arg1 *iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error) {
	fake.deleteSSHPublicKeyMutex.Lock()
	ret, specificReturn := fake.deleteSSHPublicKeyReturnsOnCall[len(fake.deleteSSHPublicKeyArgsForCall)]
	fake.deleteSSHPublicKeyArgsForCall = append(fake.deleteSSHPublicKeyArgsForCall, struct {
		arg1 *iam.DeleteSSHPublicKeyInput
	}{arg1})
	fake.recordInvocation("DeleteSSHPublicKey", []interface{}{arg1})
	fake.deleteSSHPublicKeyMutex.Unlock()
	if fake.DeleteSSHPublicKeyStub != nil {
		return fake.DeleteSSHPublicKeyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSSHPublicKeyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteSSHPublicKeyCallCount() int {
	fake.deleteSSHPublicKeyMutex.RLock()
	defer fake.deleteSSHPublicKeyMutex.RUnlock()
	return len(fake.deleteSSHPublicKeyArgsForCall)
}

func (fake *FakeIAMAPI) DeleteSSHPublicKeyCalls(stub func(*iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error)) {
	fake.deleteSSHPublicKeyMutex.Lock()
	defer fake.deleteSSHPublicKeyMutex.Unlock()
	fake.DeleteSSHPublicKeyStub = stub
}

func (fake *FakeIAMAPI) DeleteSSHPublicKeyArgsForCall(i int) *iam.DeleteSSHPublicKeyInput {
	fake.deleteSSHPublicKeyMutex.RLock()
	defer fake.deleteSSHPublicKeyMutex.RUnlock()
	argsForCall := fake.deleteSSHPublicKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteSSHPublicKeyReturns(result1 *iam.DeleteSSHPublicKeyOutput, result2 error) {
	fake.deleteSSHPublicKeyMutex.Lock()
	defer fake.deleteSSHPublicKeyMutex.Unlock()
	fake.DeleteSSHPublicKeyStub = nil
	fake.deleteSSHPublicKeyReturns = struct {
		result1 *iam.DeleteSSHPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSSHPublicKeyReturnsOnCall(i int, result1 *iam.DeleteSSHPublicKeyOutput, result2 error) {
	fake.deleteSSHPublicKeyMutex.Lock()
	defer fake.deleteSSHPublicKeyMutex.Unlock()
	fake.DeleteSSHPublicKeyStub = nil
	if fake.deleteSSHPublicKeyReturnsOnCall == nil {
		fake.deleteSSHPublicKeyReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteSSHPublicKeyOutput
			result2 error
		})
	}
	fake.deleteSSHPublicKeyReturnsOnCall[i] = struct {
		result1 *iam.DeleteSSHPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSSHPublicKeyRequest(arg1 *iam.DeleteSSHPublicKeyInput) (*request.Request, *iam.DeleteSSHPublicKeyOutput) {
	fake.deleteSSHPublicKeyRequestMutex.Lock()
	ret, specificReturn := fake.deleteSSHPublicKeyRequestReturnsOnCall[len(fake.deleteSSHPublicKeyRequestArgsForCall)]
	fake.deleteSSHPublicKeyRequestArgsForCall = append(fake.deleteSSHPublicKeyRequestArgsForCall, struct {
		arg1 *iam.DeleteSSHPublicKeyInput
	}{arg1})
	fake.recordInvocation("DeleteSSHPublicKeyRequest", []interface{}{arg1})
	fake.deleteSSHPublicKeyRequestMutex.Unlock()
	if fake.DeleteSSHPublicKeyRequestStub != nil {
		return fake.DeleteSSHPublicKeyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSSHPublicKeyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteSSHPublicKeyRequestCallCount() int {
	fake.deleteSSHPublicKeyRequestMutex.RLock()
	defer fake.deleteSSHPublicKeyRequestMutex.RUnlock()
	return len(fake.deleteSSHPublicKeyRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteSSHPublicKeyRequestCalls(stub func(*iam.DeleteSSHPublicKeyInput) (*request.Request, *iam.DeleteSSHPublicKeyOutput)) {
	fake.deleteSSHPublicKeyRequestMutex.Lock()
	defer fake.deleteSSHPublicKeyRequestMutex.Unlock()
	fake.DeleteSSHPublicKeyRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteSSHPublicKeyRequestArgsForCall(i int) *iam.DeleteSSHPublicKeyInput {
	fake.deleteSSHPublicKeyRequestMutex.RLock()
	defer fake.deleteSSHPublicKeyRequestMutex.RUnlock()
	argsForCall := fake.deleteSSHPublicKeyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteSSHPublicKeyRequestReturns(result1 *request.Request, result2 *iam.DeleteSSHPublicKeyOutput) {
	fake.deleteSSHPublicKeyRequestMutex.Lock()
	defer fake.deleteSSHPublicKeyRequestMutex.Unlock()
	fake.DeleteSSHPublicKeyRequestStub = nil
	fake.deleteSSHPublicKeyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteSSHPublicKeyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSSHPublicKeyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteSSHPublicKeyOutput) {
	fake.deleteSSHPublicKeyRequestMutex.Lock()
	defer fake.deleteSSHPublicKeyRequestMutex.Unlock()
	fake.DeleteSSHPublicKeyRequestStub = nil
	if fake.deleteSSHPublicKeyRequestReturnsOnCall == nil {
		fake.deleteSSHPublicKeyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteSSHPublicKeyOutput
		})
	}
	fake.deleteSSHPublicKeyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteSSHPublicKeyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSSHPublicKeyWithContext(arg1 context.Context, arg2 *iam.DeleteSSHPublicKeyInput, arg3 ...request.Option) (*iam.DeleteSSHPublicKeyOutput, error) {
	fake.deleteSSHPublicKeyWithContextMutex.Lock()
	ret, specificReturn := fake.deleteSSHPublicKeyWithContextReturnsOnCall[len(fake.deleteSSHPublicKeyWithContextArgsForCall)]
	fake.deleteSSHPublicKeyWithContextArgsForCall = append(fake.deleteSSHPublicKeyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteSSHPublicKeyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteSSHPublicKeyWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteSSHPublicKeyWithContextMutex.Unlock()
	if fake.DeleteSSHPublicKeyWithContextStub != nil {
		return fake.DeleteSSHPublicKeyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSSHPublicKeyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteSSHPublicKeyWithContextCallCount() int {
	fake.deleteSSHPublicKeyWithContextMutex.RLock()
	defer fake.deleteSSHPublicKeyWithContextMutex.RUnlock()
	return len(fake.deleteSSHPublicKeyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteSSHPublicKeyWithContextCalls(stub func(context.Context, *iam.DeleteSSHPublicKeyInput, ...request.Option) (*iam.DeleteSSHPublicKeyOutput, error)) {
	fake.deleteSSHPublicKeyWithContextMutex.Lock()
	defer fake.deleteSSHPublicKeyWithContextMutex.Unlock()
	fake.DeleteSSHPublicKeyWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteSSHPublicKeyWithContextArgsForCall(i int) (context.Context, *iam.DeleteSSHPublicKeyInput, []request.Option) {
	fake.deleteSSHPublicKeyWithContextMutex.RLock()
	defer fake.deleteSSHPublicKeyWithContextMutex.RUnlock()
	argsForCall := fake.deleteSSHPublicKeyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteSSHPublicKeyWithContextReturns(result1 *iam.DeleteSSHPublicKeyOutput, result2 error) {
	fake.deleteSSHPublicKeyWithContextMutex.Lock()
	defer fake.deleteSSHPublicKeyWithContextMutex.Unlock()
	fake.DeleteSSHPublicKeyWithContextStub = nil
	fake.deleteSSHPublicKeyWithContextReturns = struct {
		result1 *iam.DeleteSSHPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSSHPublicKeyWithContextReturnsOnCall(i int, result1 *iam.DeleteSSHPublicKeyOutput, result2 error) {
	fake.deleteSSHPublicKeyWithContextMutex.Lock()
	defer fake.deleteSSHPublicKeyWithContextMutex.Unlock()
	fake.DeleteSSHPublicKeyWithContextStub = nil
	if fake.deleteSSHPublicKeyWithContextReturnsOnCall == nil {
		fake.deleteSSHPublicKeyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteSSHPublicKeyOutput
			result2 error
		})
	}
	fake.deleteSSHPublicKeyWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteSSHPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServerCertificate(arg1 *iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error) {
	fake.deleteServerCertificateMutex.Lock()
	ret, specificReturn := fake.deleteServerCertificateReturnsOnCall[len(fake.deleteServerCertificateArgsForCall)]
	fake.deleteServerCertificateArgsForCall = append(fake.deleteServerCertificateArgsForCall, struct {
		arg1 *iam.DeleteServerCertificateInput
	}{arg1})
	fake.recordInvocation("DeleteServerCertificate", []interface{}{arg1})
	fake.deleteServerCertificateMutex.Unlock()
	if fake.DeleteServerCertificateStub != nil {
		return fake.DeleteServerCertificateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteServerCertificateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteServerCertificateCallCount() int {
	fake.deleteServerCertificateMutex.RLock()
	defer fake.deleteServerCertificateMutex.RUnlock()
	return len(fake.deleteServerCertificateArgsForCall)
}

func (fake *FakeIAMAPI) DeleteServerCertificateCalls(stub func(*iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error)) {
	fake.deleteServerCertificateMutex.Lock()
	defer fake.deleteServerCertificateMutex.Unlock()
	fake.DeleteServerCertificateStub = stub
}

func (fake *FakeIAMAPI) DeleteServerCertificateArgsForCall(i int) *iam.DeleteServerCertificateInput {
	fake.deleteServerCertificateMutex.RLock()
	defer fake.deleteServerCertificateMutex.RUnlock()
	argsForCall := fake.deleteServerCertificateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteServerCertificateReturns(result1 *iam.DeleteServerCertificateOutput, result2 error) {
	fake.deleteServerCertificateMutex.Lock()
	defer fake.deleteServerCertificateMutex.Unlock()
	fake.DeleteServerCertificateStub = nil
	fake.deleteServerCertificateReturns = struct {
		result1 *iam.DeleteServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServerCertificateReturnsOnCall(i int, result1 *iam.DeleteServerCertificateOutput, result2 error) {
	fake.deleteServerCertificateMutex.Lock()
	defer fake.deleteServerCertificateMutex.Unlock()
	fake.DeleteServerCertificateStub = nil
	if fake.deleteServerCertificateReturnsOnCall == nil {
		fake.deleteServerCertificateReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteServerCertificateOutput
			result2 error
		})
	}
	fake.deleteServerCertificateReturnsOnCall[i] = struct {
		result1 *iam.DeleteServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServerCertificateRequest(arg1 *iam.DeleteServerCertificateInput) (*request.Request, *iam.DeleteServerCertificateOutput) {
	fake.deleteServerCertificateRequestMutex.Lock()
	ret, specificReturn := fake.deleteServerCertificateRequestReturnsOnCall[len(fake.deleteServerCertificateRequestArgsForCall)]
	fake.deleteServerCertificateRequestArgsForCall = append(fake.deleteServerCertificateRequestArgsForCall, struct {
		arg1 *iam.DeleteServerCertificateInput
	}{arg1})
	fake.recordInvocation("DeleteServerCertificateRequest", []interface{}{arg1})
	fake.deleteServerCertificateRequestMutex.Unlock()
	if fake.DeleteServerCertificateRequestStub != nil {
		return fake.DeleteServerCertificateRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteServerCertificateRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteServerCertificateRequestCallCount() int {
	fake.deleteServerCertificateRequestMutex.RLock()
	defer fake.deleteServerCertificateRequestMutex.RUnlock()
	return len(fake.deleteServerCertificateRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteServerCertificateRequestCalls(stub func(*iam.DeleteServerCertificateInput) (*request.Request, *iam.DeleteServerCertificateOutput)) {
	fake.deleteServerCertificateRequestMutex.Lock()
	defer fake.deleteServerCertificateRequestMutex.Unlock()
	fake.DeleteServerCertificateRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteServerCertificateRequestArgsForCall(i int) *iam.DeleteServerCertificateInput {
	fake.deleteServerCertificateRequestMutex.RLock()
	defer fake.deleteServerCertificateRequestMutex.RUnlock()
	argsForCall := fake.deleteServerCertificateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteServerCertificateRequestReturns(result1 *request.Request, result2 *iam.DeleteServerCertificateOutput) {
	fake.deleteServerCertificateRequestMutex.Lock()
	defer fake.deleteServerCertificateRequestMutex.Unlock()
	fake.DeleteServerCertificateRequestStub = nil
	fake.deleteServerCertificateRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteServerCertificateOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServerCertificateRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteServerCertificateOutput) {
	fake.deleteServerCertificateRequestMutex.Lock()
	defer fake.deleteServerCertificateRequestMutex.Unlock()
	fake.DeleteServerCertificateRequestStub = nil
	if fake.deleteServerCertificateRequestReturnsOnCall == nil {
		fake.deleteServerCertificateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteServerCertificateOutput
		})
	}
	fake.deleteServerCertificateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteServerCertificateOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServerCertificateWithContext(arg1 context.Context, arg2 *iam.DeleteServerCertificateInput, arg3 ...request.Option) (*iam.DeleteServerCertificateOutput, error) {
	fake.deleteServerCertificateWithContextMutex.Lock()
	ret, specificReturn := fake.deleteServerCertificateWithContextReturnsOnCall[len(fake.deleteServerCertificateWithContextArgsForCall)]
	fake.deleteServerCertificateWithContextArgsForCall = append(fake.deleteServerCertificateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteServerCertificateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteServerCertificateWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteServerCertificateWithContextMutex.Unlock()
	if fake.DeleteServerCertificateWithContextStub != nil {
		return fake.DeleteServerCertificateWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteServerCertificateWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteServerCertificateWithContextCallCount() int {
	fake.deleteServerCertificateWithContextMutex.RLock()
	defer fake.deleteServerCertificateWithContextMutex.RUnlock()
	return len(fake.deleteServerCertificateWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteServerCertificateWithContextCalls(stub func(context.Context, *iam.DeleteServerCertificateInput, ...request.Option) (*iam.DeleteServerCertificateOutput, error)) {
	fake.deleteServerCertificateWithContextMutex.Lock()
	defer fake.deleteServerCertificateWithContextMutex.Unlock()
	fake.DeleteServerCertificateWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteServerCertificateWithContextArgsForCall(i int) (context.Context, *iam.DeleteServerCertificateInput, []request.Option) {
	fake.deleteServerCertificateWithContextMutex.RLock()
	defer fake.deleteServerCertificateWithContextMutex.RUnlock()
	argsForCall := fake.deleteServerCertificateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteServerCertificateWithContextReturns(result1 *iam.DeleteServerCertificateOutput, result2 error) {
	fake.deleteServerCertificateWithContextMutex.Lock()
	defer fake.deleteServerCertificateWithContextMutex.Unlock()
	fake.DeleteServerCertificateWithContextStub = nil
	fake.deleteServerCertificateWithContextReturns = struct {
		result1 *iam.DeleteServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServerCertificateWithContextReturnsOnCall(i int, result1 *iam.DeleteServerCertificateOutput, result2 error) {
	fake.deleteServerCertificateWithContextMutex.Lock()
	defer fake.deleteServerCertificateWithContextMutex.Unlock()
	fake.DeleteServerCertificateWithContextStub = nil
	if fake.deleteServerCertificateWithContextReturnsOnCall == nil {
		fake.deleteServerCertificateWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteServerCertificateOutput
			result2 error
		})
	}
	fake.deleteServerCertificateWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRole(arg1 *iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error) {
	fake.deleteServiceLinkedRoleMutex.Lock()
	ret, specificReturn := fake.deleteServiceLinkedRoleReturnsOnCall[len(fake.deleteServiceLinkedRoleArgsForCall)]
	fake.deleteServiceLinkedRoleArgsForCall = append(fake.deleteServiceLinkedRoleArgsForCall, struct {
		arg1 *iam.DeleteServiceLinkedRoleInput
	}{arg1})
	fake.recordInvocation("DeleteServiceLinkedRole", []interface{}{arg1})
	fake.deleteServiceLinkedRoleMutex.Unlock()
	if fake.DeleteServiceLinkedRoleStub != nil {
		return fake.DeleteServiceLinkedRoleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteServiceLinkedRoleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRoleCallCount() int {
	fake.deleteServiceLinkedRoleMutex.RLock()
	defer fake.deleteServiceLinkedRoleMutex.RUnlock()
	return len(fake.deleteServiceLinkedRoleArgsForCall)
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRoleCalls(stub func(*iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error)) {
	fake.deleteServiceLinkedRoleMutex.Lock()
	defer fake.deleteServiceLinkedRoleMutex.Unlock()
	fake.DeleteServiceLinkedRoleStub = stub
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRoleArgsForCall(i int) *iam.DeleteServiceLinkedRoleInput {
	fake.deleteServiceLinkedRoleMutex.RLock()
	defer fake.deleteServiceLinkedRoleMutex.RUnlock()
	argsForCall := fake.deleteServiceLinkedRoleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRoleReturns(result1 *iam.DeleteServiceLinkedRoleOutput, result2 error) {
	fake.deleteServiceLinkedRoleMutex.Lock()
	defer fake.deleteServiceLinkedRoleMutex.Unlock()
	fake.DeleteServiceLinkedRoleStub = nil
	fake.deleteServiceLinkedRoleReturns = struct {
		result1 *iam.DeleteServiceLinkedRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRoleReturnsOnCall(i int, result1 *iam.DeleteServiceLinkedRoleOutput, result2 error) {
	fake.deleteServiceLinkedRoleMutex.Lock()
	defer fake.deleteServiceLinkedRoleMutex.Unlock()
	fake.DeleteServiceLinkedRoleStub = nil
	if fake.deleteServiceLinkedRoleReturnsOnCall == nil {
		fake.deleteServiceLinkedRoleReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteServiceLinkedRoleOutput
			result2 error
		})
	}
	fake.deleteServiceLinkedRoleReturnsOnCall[i] = struct {
		result1 *iam.DeleteServiceLinkedRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRoleRequest(arg1 *iam.DeleteServiceLinkedRoleInput) (*request.Request, *iam.DeleteServiceLinkedRoleOutput) {
	fake.deleteServiceLinkedRoleRequestMutex.Lock()
	ret, specificReturn := fake.deleteServiceLinkedRoleRequestReturnsOnCall[len(fake.deleteServiceLinkedRoleRequestArgsForCall)]
	fake.deleteServiceLinkedRoleRequestArgsForCall = append(fake.deleteServiceLinkedRoleRequestArgsForCall, struct {
		arg1 *iam.DeleteServiceLinkedRoleInput
	}{arg1})
	fake.recordInvocation("DeleteServiceLinkedRoleRequest", []interface{}{arg1})
	fake.deleteServiceLinkedRoleRequestMutex.Unlock()
	if fake.DeleteServiceLinkedRoleRequestStub != nil {
		return fake.DeleteServiceLinkedRoleRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteServiceLinkedRoleRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRoleRequestCallCount() int {
	fake.deleteServiceLinkedRoleRequestMutex.RLock()
	defer fake.deleteServiceLinkedRoleRequestMutex.RUnlock()
	return len(fake.deleteServiceLinkedRoleRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRoleRequestCalls(stub func(*iam.DeleteServiceLinkedRoleInput) (*request.Request, *iam.DeleteServiceLinkedRoleOutput)) {
	fake.deleteServiceLinkedRoleRequestMutex.Lock()
	defer fake.deleteServiceLinkedRoleRequestMutex.Unlock()
	fake.DeleteServiceLinkedRoleRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRoleRequestArgsForCall(i int) *iam.DeleteServiceLinkedRoleInput {
	fake.deleteServiceLinkedRoleRequestMutex.RLock()
	defer fake.deleteServiceLinkedRoleRequestMutex.RUnlock()
	argsForCall := fake.deleteServiceLinkedRoleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRoleRequestReturns(result1 *request.Request, result2 *iam.DeleteServiceLinkedRoleOutput) {
	fake.deleteServiceLinkedRoleRequestMutex.Lock()
	defer fake.deleteServiceLinkedRoleRequestMutex.Unlock()
	fake.DeleteServiceLinkedRoleRequestStub = nil
	fake.deleteServiceLinkedRoleRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteServiceLinkedRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRoleRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteServiceLinkedRoleOutput) {
	fake.deleteServiceLinkedRoleRequestMutex.Lock()
	defer fake.deleteServiceLinkedRoleRequestMutex.Unlock()
	fake.DeleteServiceLinkedRoleRequestStub = nil
	if fake.deleteServiceLinkedRoleRequestReturnsOnCall == nil {
		fake.deleteServiceLinkedRoleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteServiceLinkedRoleOutput
		})
	}
	fake.deleteServiceLinkedRoleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteServiceLinkedRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRoleWithContext(arg1 context.Context, arg2 *iam.DeleteServiceLinkedRoleInput, arg3 ...request.Option) (*iam.DeleteServiceLinkedRoleOutput, error) {
	fake.deleteServiceLinkedRoleWithContextMutex.Lock()
	ret, specificReturn := fake.deleteServiceLinkedRoleWithContextReturnsOnCall[len(fake.deleteServiceLinkedRoleWithContextArgsForCall)]
	fake.deleteServiceLinkedRoleWithContextArgsForCall = append(fake.deleteServiceLinkedRoleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteServiceLinkedRoleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteServiceLinkedRoleWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteServiceLinkedRoleWithContextMutex.Unlock()
	if fake.DeleteServiceLinkedRoleWithContextStub != nil {
		return fake.DeleteServiceLinkedRoleWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteServiceLinkedRoleWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRoleWithContextCallCount() int {
	fake.deleteServiceLinkedRoleWithContextMutex.RLock()
	defer fake.deleteServiceLinkedRoleWithContextMutex.RUnlock()
	return len(fake.deleteServiceLinkedRoleWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRoleWithContextCalls(stub func(context.Context, *iam.DeleteServiceLinkedRoleInput, ...request.Option) (*iam.DeleteServiceLinkedRoleOutput, error)) {
	fake.deleteServiceLinkedRoleWithContextMutex.Lock()
	defer fake.deleteServiceLinkedRoleWithContextMutex.Unlock()
	fake.DeleteServiceLinkedRoleWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRoleWithContextArgsForCall(i int) (context.Context, *iam.DeleteServiceLinkedRoleInput, []request.Option) {
	fake.deleteServiceLinkedRoleWithContextMutex.RLock()
	defer fake.deleteServiceLinkedRoleWithContextMutex.RUnlock()
	argsForCall := fake.deleteServiceLinkedRoleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRoleWithContextReturns(result1 *iam.DeleteServiceLinkedRoleOutput, result2 error) {
	fake.deleteServiceLinkedRoleWithContextMutex.Lock()
	defer fake.deleteServiceLinkedRoleWithContextMutex.Unlock()
	fake.DeleteServiceLinkedRoleWithContextStub = nil
	fake.deleteServiceLinkedRoleWithContextReturns = struct {
		result1 *iam.DeleteServiceLinkedRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServiceLinkedRoleWithContextReturnsOnCall(i int, result1 *iam.DeleteServiceLinkedRoleOutput, result2 error) {
	fake.deleteServiceLinkedRoleWithContextMutex.Lock()
	defer fake.deleteServiceLinkedRoleWithContextMutex.Unlock()
	fake.DeleteServiceLinkedRoleWithContextStub = nil
	if fake.deleteServiceLinkedRoleWithContextReturnsOnCall == nil {
		fake.deleteServiceLinkedRoleWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteServiceLinkedRoleOutput
			result2 error
		})
	}
	fake.deleteServiceLinkedRoleWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteServiceLinkedRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredential(arg1 *iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error) {
	fake.deleteServiceSpecificCredentialMutex.Lock()
	ret, specificReturn := fake.deleteServiceSpecificCredentialReturnsOnCall[len(fake.deleteServiceSpecificCredentialArgsForCall)]
	fake.deleteServiceSpecificCredentialArgsForCall = append(fake.deleteServiceSpecificCredentialArgsForCall, struct {
		arg1 *iam.DeleteServiceSpecificCredentialInput
	}{arg1})
	fake.recordInvocation("DeleteServiceSpecificCredential", []interface{}{arg1})
	fake.deleteServiceSpecificCredentialMutex.Unlock()
	if fake.DeleteServiceSpecificCredentialStub != nil {
		return fake.DeleteServiceSpecificCredentialStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteServiceSpecificCredentialReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredentialCallCount() int {
	fake.deleteServiceSpecificCredentialMutex.RLock()
	defer fake.deleteServiceSpecificCredentialMutex.RUnlock()
	return len(fake.deleteServiceSpecificCredentialArgsForCall)
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredentialCalls(stub func(*iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error)) {
	fake.deleteServiceSpecificCredentialMutex.Lock()
	defer fake.deleteServiceSpecificCredentialMutex.Unlock()
	fake.DeleteServiceSpecificCredentialStub = stub
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredentialArgsForCall(i int) *iam.DeleteServiceSpecificCredentialInput {
	fake.deleteServiceSpecificCredentialMutex.RLock()
	defer fake.deleteServiceSpecificCredentialMutex.RUnlock()
	argsForCall := fake.deleteServiceSpecificCredentialArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredentialReturns(result1 *iam.DeleteServiceSpecificCredentialOutput, result2 error) {
	fake.deleteServiceSpecificCredentialMutex.Lock()
	defer fake.deleteServiceSpecificCredentialMutex.Unlock()
	fake.DeleteServiceSpecificCredentialStub = nil
	fake.deleteServiceSpecificCredentialReturns = struct {
		result1 *iam.DeleteServiceSpecificCredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredentialReturnsOnCall(i int, result1 *iam.DeleteServiceSpecificCredentialOutput, result2 error) {
	fake.deleteServiceSpecificCredentialMutex.Lock()
	defer fake.deleteServiceSpecificCredentialMutex.Unlock()
	fake.DeleteServiceSpecificCredentialStub = nil
	if fake.deleteServiceSpecificCredentialReturnsOnCall == nil {
		fake.deleteServiceSpecificCredentialReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteServiceSpecificCredentialOutput
			result2 error
		})
	}
	fake.deleteServiceSpecificCredentialReturnsOnCall[i] = struct {
		result1 *iam.DeleteServiceSpecificCredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredentialRequest(arg1 *iam.DeleteServiceSpecificCredentialInput) (*request.Request, *iam.DeleteServiceSpecificCredentialOutput) {
	fake.deleteServiceSpecificCredentialRequestMutex.Lock()
	ret, specificReturn := fake.deleteServiceSpecificCredentialRequestReturnsOnCall[len(fake.deleteServiceSpecificCredentialRequestArgsForCall)]
	fake.deleteServiceSpecificCredentialRequestArgsForCall = append(fake.deleteServiceSpecificCredentialRequestArgsForCall, struct {
		arg1 *iam.DeleteServiceSpecificCredentialInput
	}{arg1})
	fake.recordInvocation("DeleteServiceSpecificCredentialRequest", []interface{}{arg1})
	fake.deleteServiceSpecificCredentialRequestMutex.Unlock()
	if fake.DeleteServiceSpecificCredentialRequestStub != nil {
		return fake.DeleteServiceSpecificCredentialRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteServiceSpecificCredentialRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredentialRequestCallCount() int {
	fake.deleteServiceSpecificCredentialRequestMutex.RLock()
	defer fake.deleteServiceSpecificCredentialRequestMutex.RUnlock()
	return len(fake.deleteServiceSpecificCredentialRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredentialRequestCalls(stub func(*iam.DeleteServiceSpecificCredentialInput) (*request.Request, *iam.DeleteServiceSpecificCredentialOutput)) {
	fake.deleteServiceSpecificCredentialRequestMutex.Lock()
	defer fake.deleteServiceSpecificCredentialRequestMutex.Unlock()
	fake.DeleteServiceSpecificCredentialRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredentialRequestArgsForCall(i int) *iam.DeleteServiceSpecificCredentialInput {
	fake.deleteServiceSpecificCredentialRequestMutex.RLock()
	defer fake.deleteServiceSpecificCredentialRequestMutex.RUnlock()
	argsForCall := fake.deleteServiceSpecificCredentialRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredentialRequestReturns(result1 *request.Request, result2 *iam.DeleteServiceSpecificCredentialOutput) {
	fake.deleteServiceSpecificCredentialRequestMutex.Lock()
	defer fake.deleteServiceSpecificCredentialRequestMutex.Unlock()
	fake.DeleteServiceSpecificCredentialRequestStub = nil
	fake.deleteServiceSpecificCredentialRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteServiceSpecificCredentialOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredentialRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteServiceSpecificCredentialOutput) {
	fake.deleteServiceSpecificCredentialRequestMutex.Lock()
	defer fake.deleteServiceSpecificCredentialRequestMutex.Unlock()
	fake.DeleteServiceSpecificCredentialRequestStub = nil
	if fake.deleteServiceSpecificCredentialRequestReturnsOnCall == nil {
		fake.deleteServiceSpecificCredentialRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteServiceSpecificCredentialOutput
		})
	}
	fake.deleteServiceSpecificCredentialRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteServiceSpecificCredentialOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredentialWithContext(arg1 context.Context, arg2 *iam.DeleteServiceSpecificCredentialInput, arg3 ...request.Option) (*iam.DeleteServiceSpecificCredentialOutput, error) {
	fake.deleteServiceSpecificCredentialWithContextMutex.Lock()
	ret, specificReturn := fake.deleteServiceSpecificCredentialWithContextReturnsOnCall[len(fake.deleteServiceSpecificCredentialWithContextArgsForCall)]
	fake.deleteServiceSpecificCredentialWithContextArgsForCall = append(fake.deleteServiceSpecificCredentialWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteServiceSpecificCredentialInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteServiceSpecificCredentialWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteServiceSpecificCredentialWithContextMutex.Unlock()
	if fake.DeleteServiceSpecificCredentialWithContextStub != nil {
		return fake.DeleteServiceSpecificCredentialWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteServiceSpecificCredentialWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredentialWithContextCallCount() int {
	fake.deleteServiceSpecificCredentialWithContextMutex.RLock()
	defer fake.deleteServiceSpecificCredentialWithContextMutex.RUnlock()
	return len(fake.deleteServiceSpecificCredentialWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredentialWithContextCalls(stub func(context.Context, *iam.DeleteServiceSpecificCredentialInput, ...request.Option) (*iam.DeleteServiceSpecificCredentialOutput, error)) {
	fake.deleteServiceSpecificCredentialWithContextMutex.Lock()
	defer fake.deleteServiceSpecificCredentialWithContextMutex.Unlock()
	fake.DeleteServiceSpecificCredentialWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredentialWithContextArgsForCall(i int) (context.Context, *iam.DeleteServiceSpecificCredentialInput, []request.Option) {
	fake.deleteServiceSpecificCredentialWithContextMutex.RLock()
	defer fake.deleteServiceSpecificCredentialWithContextMutex.RUnlock()
	argsForCall := fake.deleteServiceSpecificCredentialWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredentialWithContextReturns(result1 *iam.DeleteServiceSpecificCredentialOutput, result2 error) {
	fake.deleteServiceSpecificCredentialWithContextMutex.Lock()
	defer fake.deleteServiceSpecificCredentialWithContextMutex.Unlock()
	fake.DeleteServiceSpecificCredentialWithContextStub = nil
	fake.deleteServiceSpecificCredentialWithContextReturns = struct {
		result1 *iam.DeleteServiceSpecificCredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteServiceSpecificCredentialWithContextReturnsOnCall(i int, result1 *iam.DeleteServiceSpecificCredentialOutput, result2 error) {
	fake.deleteServiceSpecificCredentialWithContextMutex.Lock()
	defer fake.deleteServiceSpecificCredentialWithContextMutex.Unlock()
	fake.DeleteServiceSpecificCredentialWithContextStub = nil
	if fake.deleteServiceSpecificCredentialWithContextReturnsOnCall == nil {
		fake.deleteServiceSpecificCredentialWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteServiceSpecificCredentialOutput
			result2 error
		})
	}
	fake.deleteServiceSpecificCredentialWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteServiceSpecificCredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSigningCertificate(arg1 *iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error) {
	fake.deleteSigningCertificateMutex.Lock()
	ret, specificReturn := fake.deleteSigningCertificateReturnsOnCall[len(fake.deleteSigningCertificateArgsForCall)]
	fake.deleteSigningCertificateArgsForCall = append(fake.deleteSigningCertificateArgsForCall, struct {
		arg1 *iam.DeleteSigningCertificateInput
	}{arg1})
	fake.recordInvocation("DeleteSigningCertificate", []interface{}{arg1})
	fake.deleteSigningCertificateMutex.Unlock()
	if fake.DeleteSigningCertificateStub != nil {
		return fake.DeleteSigningCertificateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSigningCertificateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteSigningCertificateCallCount() int {
	fake.deleteSigningCertificateMutex.RLock()
	defer fake.deleteSigningCertificateMutex.RUnlock()
	return len(fake.deleteSigningCertificateArgsForCall)
}

func (fake *FakeIAMAPI) DeleteSigningCertificateCalls(stub func(*iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error)) {
	fake.deleteSigningCertificateMutex.Lock()
	defer fake.deleteSigningCertificateMutex.Unlock()
	fake.DeleteSigningCertificateStub = stub
}

func (fake *FakeIAMAPI) DeleteSigningCertificateArgsForCall(i int) *iam.DeleteSigningCertificateInput {
	fake.deleteSigningCertificateMutex.RLock()
	defer fake.deleteSigningCertificateMutex.RUnlock()
	argsForCall := fake.deleteSigningCertificateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteSigningCertificateReturns(result1 *iam.DeleteSigningCertificateOutput, result2 error) {
	fake.deleteSigningCertificateMutex.Lock()
	defer fake.deleteSigningCertificateMutex.Unlock()
	fake.DeleteSigningCertificateStub = nil
	fake.deleteSigningCertificateReturns = struct {
		result1 *iam.DeleteSigningCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSigningCertificateReturnsOnCall(i int, result1 *iam.DeleteSigningCertificateOutput, result2 error) {
	fake.deleteSigningCertificateMutex.Lock()
	defer fake.deleteSigningCertificateMutex.Unlock()
	fake.DeleteSigningCertificateStub = nil
	if fake.deleteSigningCertificateReturnsOnCall == nil {
		fake.deleteSigningCertificateReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteSigningCertificateOutput
			result2 error
		})
	}
	fake.deleteSigningCertificateReturnsOnCall[i] = struct {
		result1 *iam.DeleteSigningCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSigningCertificateRequest(arg1 *iam.DeleteSigningCertificateInput) (*request.Request, *iam.DeleteSigningCertificateOutput) {
	fake.deleteSigningCertificateRequestMutex.Lock()
	ret, specificReturn := fake.deleteSigningCertificateRequestReturnsOnCall[len(fake.deleteSigningCertificateRequestArgsForCall)]
	fake.deleteSigningCertificateRequestArgsForCall = append(fake.deleteSigningCertificateRequestArgsForCall, struct {
		arg1 *iam.DeleteSigningCertificateInput
	}{arg1})
	fake.recordInvocation("DeleteSigningCertificateRequest", []interface{}{arg1})
	fake.deleteSigningCertificateRequestMutex.Unlock()
	if fake.DeleteSigningCertificateRequestStub != nil {
		return fake.DeleteSigningCertificateRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSigningCertificateRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteSigningCertificateRequestCallCount() int {
	fake.deleteSigningCertificateRequestMutex.RLock()
	defer fake.deleteSigningCertificateRequestMutex.RUnlock()
	return len(fake.deleteSigningCertificateRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteSigningCertificateRequestCalls(stub func(*iam.DeleteSigningCertificateInput) (*request.Request, *iam.DeleteSigningCertificateOutput)) {
	fake.deleteSigningCertificateRequestMutex.Lock()
	defer fake.deleteSigningCertificateRequestMutex.Unlock()
	fake.DeleteSigningCertificateRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteSigningCertificateRequestArgsForCall(i int) *iam.DeleteSigningCertificateInput {
	fake.deleteSigningCertificateRequestMutex.RLock()
	defer fake.deleteSigningCertificateRequestMutex.RUnlock()
	argsForCall := fake.deleteSigningCertificateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteSigningCertificateRequestReturns(result1 *request.Request, result2 *iam.DeleteSigningCertificateOutput) {
	fake.deleteSigningCertificateRequestMutex.Lock()
	defer fake.deleteSigningCertificateRequestMutex.Unlock()
	fake.DeleteSigningCertificateRequestStub = nil
	fake.deleteSigningCertificateRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteSigningCertificateOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSigningCertificateRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteSigningCertificateOutput) {
	fake.deleteSigningCertificateRequestMutex.Lock()
	defer fake.deleteSigningCertificateRequestMutex.Unlock()
	fake.DeleteSigningCertificateRequestStub = nil
	if fake.deleteSigningCertificateRequestReturnsOnCall == nil {
		fake.deleteSigningCertificateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteSigningCertificateOutput
		})
	}
	fake.deleteSigningCertificateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteSigningCertificateOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSigningCertificateWithContext(arg1 context.Context, arg2 *iam.DeleteSigningCertificateInput, arg3 ...request.Option) (*iam.DeleteSigningCertificateOutput, error) {
	fake.deleteSigningCertificateWithContextMutex.Lock()
	ret, specificReturn := fake.deleteSigningCertificateWithContextReturnsOnCall[len(fake.deleteSigningCertificateWithContextArgsForCall)]
	fake.deleteSigningCertificateWithContextArgsForCall = append(fake.deleteSigningCertificateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteSigningCertificateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteSigningCertificateWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteSigningCertificateWithContextMutex.Unlock()
	if fake.DeleteSigningCertificateWithContextStub != nil {
		return fake.DeleteSigningCertificateWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSigningCertificateWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteSigningCertificateWithContextCallCount() int {
	fake.deleteSigningCertificateWithContextMutex.RLock()
	defer fake.deleteSigningCertificateWithContextMutex.RUnlock()
	return len(fake.deleteSigningCertificateWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteSigningCertificateWithContextCalls(stub func(context.Context, *iam.DeleteSigningCertificateInput, ...request.Option) (*iam.DeleteSigningCertificateOutput, error)) {
	fake.deleteSigningCertificateWithContextMutex.Lock()
	defer fake.deleteSigningCertificateWithContextMutex.Unlock()
	fake.DeleteSigningCertificateWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteSigningCertificateWithContextArgsForCall(i int) (context.Context, *iam.DeleteSigningCertificateInput, []request.Option) {
	fake.deleteSigningCertificateWithContextMutex.RLock()
	defer fake.deleteSigningCertificateWithContextMutex.RUnlock()
	argsForCall := fake.deleteSigningCertificateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteSigningCertificateWithContextReturns(result1 *iam.DeleteSigningCertificateOutput, result2 error) {
	fake.deleteSigningCertificateWithContextMutex.Lock()
	defer fake.deleteSigningCertificateWithContextMutex.Unlock()
	fake.DeleteSigningCertificateWithContextStub = nil
	fake.deleteSigningCertificateWithContextReturns = struct {
		result1 *iam.DeleteSigningCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteSigningCertificateWithContextReturnsOnCall(i int, result1 *iam.DeleteSigningCertificateOutput, result2 error) {
	fake.deleteSigningCertificateWithContextMutex.Lock()
	defer fake.deleteSigningCertificateWithContextMutex.Unlock()
	fake.DeleteSigningCertificateWithContextStub = nil
	if fake.deleteSigningCertificateWithContextReturnsOnCall == nil {
		fake.deleteSigningCertificateWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteSigningCertificateOutput
			result2 error
		})
	}
	fake.deleteSigningCertificateWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteSigningCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUser(arg1 *iam.DeleteUserInput) (*iam.DeleteUserOutput, error) {
	fake.deleteUserMutex.Lock()
	ret, specificReturn := fake.deleteUserReturnsOnCall[len(fake.deleteUserArgsForCall)]
	fake.deleteUserArgsForCall = append(fake.deleteUserArgsForCall, struct {
		arg1 *iam.DeleteUserInput
	}{arg1})
	fake.recordInvocation("DeleteUser", []interface{}{arg1})
	fake.deleteUserMutex.Unlock()
	if fake.DeleteUserStub != nil {
		return fake.DeleteUserStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteUserReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteUserCallCount() int {
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	return len(fake.deleteUserArgsForCall)
}

func (fake *FakeIAMAPI) DeleteUserCalls(stub func(*iam.DeleteUserInput) (*iam.DeleteUserOutput, error)) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = stub
}

func (fake *FakeIAMAPI) DeleteUserArgsForCall(i int) *iam.DeleteUserInput {
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	argsForCall := fake.deleteUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteUserReturns(result1 *iam.DeleteUserOutput, result2 error) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = nil
	fake.deleteUserReturns = struct {
		result1 *iam.DeleteUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUserReturnsOnCall(i int, result1 *iam.DeleteUserOutput, result2 error) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = nil
	if fake.deleteUserReturnsOnCall == nil {
		fake.deleteUserReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteUserOutput
			result2 error
		})
	}
	fake.deleteUserReturnsOnCall[i] = struct {
		result1 *iam.DeleteUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundary(arg1 *iam.DeleteUserPermissionsBoundaryInput) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
	fake.deleteUserPermissionsBoundaryMutex.Lock()
	ret, specificReturn := fake.deleteUserPermissionsBoundaryReturnsOnCall[len(fake.deleteUserPermissionsBoundaryArgsForCall)]
	fake.deleteUserPermissionsBoundaryArgsForCall = append(fake.deleteUserPermissionsBoundaryArgsForCall, struct {
		arg1 *iam.DeleteUserPermissionsBoundaryInput
	}{arg1})
	fake.recordInvocation("DeleteUserPermissionsBoundary", []interface{}{arg1})
	fake.deleteUserPermissionsBoundaryMutex.Unlock()
	if fake.DeleteUserPermissionsBoundaryStub != nil {
		return fake.DeleteUserPermissionsBoundaryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteUserPermissionsBoundaryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundaryCallCount() int {
	fake.deleteUserPermissionsBoundaryMutex.RLock()
	defer fake.deleteUserPermissionsBoundaryMutex.RUnlock()
	return len(fake.deleteUserPermissionsBoundaryArgsForCall)
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundaryCalls(stub func(*iam.DeleteUserPermissionsBoundaryInput) (*iam.DeleteUserPermissionsBoundaryOutput, error)) {
	fake.deleteUserPermissionsBoundaryMutex.Lock()
	defer fake.deleteUserPermissionsBoundaryMutex.Unlock()
	fake.DeleteUserPermissionsBoundaryStub = stub
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundaryArgsForCall(i int) *iam.DeleteUserPermissionsBoundaryInput {
	fake.deleteUserPermissionsBoundaryMutex.RLock()
	defer fake.deleteUserPermissionsBoundaryMutex.RUnlock()
	argsForCall := fake.deleteUserPermissionsBoundaryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundaryReturns(result1 *iam.DeleteUserPermissionsBoundaryOutput, result2 error) {
	fake.deleteUserPermissionsBoundaryMutex.Lock()
	defer fake.deleteUserPermissionsBoundaryMutex.Unlock()
	fake.DeleteUserPermissionsBoundaryStub = nil
	fake.deleteUserPermissionsBoundaryReturns = struct {
		result1 *iam.DeleteUserPermissionsBoundaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundaryReturnsOnCall(i int, result1 *iam.DeleteUserPermissionsBoundaryOutput, result2 error) {
	fake.deleteUserPermissionsBoundaryMutex.Lock()
	defer fake.deleteUserPermissionsBoundaryMutex.Unlock()
	fake.DeleteUserPermissionsBoundaryStub = nil
	if fake.deleteUserPermissionsBoundaryReturnsOnCall == nil {
		fake.deleteUserPermissionsBoundaryReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteUserPermissionsBoundaryOutput
			result2 error
		})
	}
	fake.deleteUserPermissionsBoundaryReturnsOnCall[i] = struct {
		result1 *iam.DeleteUserPermissionsBoundaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundaryRequest(arg1 *iam.DeleteUserPermissionsBoundaryInput) (*request.Request, *iam.DeleteUserPermissionsBoundaryOutput) {
	fake.deleteUserPermissionsBoundaryRequestMutex.Lock()
	ret, specificReturn := fake.deleteUserPermissionsBoundaryRequestReturnsOnCall[len(fake.deleteUserPermissionsBoundaryRequestArgsForCall)]
	fake.deleteUserPermissionsBoundaryRequestArgsForCall = append(fake.deleteUserPermissionsBoundaryRequestArgsForCall, struct {
		arg1 *iam.DeleteUserPermissionsBoundaryInput
	}{arg1})
	fake.recordInvocation("DeleteUserPermissionsBoundaryRequest", []interface{}{arg1})
	fake.deleteUserPermissionsBoundaryRequestMutex.Unlock()
	if fake.DeleteUserPermissionsBoundaryRequestStub != nil {
		return fake.DeleteUserPermissionsBoundaryRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteUserPermissionsBoundaryRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundaryRequestCallCount() int {
	fake.deleteUserPermissionsBoundaryRequestMutex.RLock()
	defer fake.deleteUserPermissionsBoundaryRequestMutex.RUnlock()
	return len(fake.deleteUserPermissionsBoundaryRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundaryRequestCalls(stub func(*iam.DeleteUserPermissionsBoundaryInput) (*request.Request, *iam.DeleteUserPermissionsBoundaryOutput)) {
	fake.deleteUserPermissionsBoundaryRequestMutex.Lock()
	defer fake.deleteUserPermissionsBoundaryRequestMutex.Unlock()
	fake.DeleteUserPermissionsBoundaryRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundaryRequestArgsForCall(i int) *iam.DeleteUserPermissionsBoundaryInput {
	fake.deleteUserPermissionsBoundaryRequestMutex.RLock()
	defer fake.deleteUserPermissionsBoundaryRequestMutex.RUnlock()
	argsForCall := fake.deleteUserPermissionsBoundaryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundaryRequestReturns(result1 *request.Request, result2 *iam.DeleteUserPermissionsBoundaryOutput) {
	fake.deleteUserPermissionsBoundaryRequestMutex.Lock()
	defer fake.deleteUserPermissionsBoundaryRequestMutex.Unlock()
	fake.DeleteUserPermissionsBoundaryRequestStub = nil
	fake.deleteUserPermissionsBoundaryRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteUserPermissionsBoundaryOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundaryRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteUserPermissionsBoundaryOutput) {
	fake.deleteUserPermissionsBoundaryRequestMutex.Lock()
	defer fake.deleteUserPermissionsBoundaryRequestMutex.Unlock()
	fake.DeleteUserPermissionsBoundaryRequestStub = nil
	if fake.deleteUserPermissionsBoundaryRequestReturnsOnCall == nil {
		fake.deleteUserPermissionsBoundaryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteUserPermissionsBoundaryOutput
		})
	}
	fake.deleteUserPermissionsBoundaryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteUserPermissionsBoundaryOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundaryWithContext(arg1 context.Context, arg2 *iam.DeleteUserPermissionsBoundaryInput, arg3 ...request.Option) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
	fake.deleteUserPermissionsBoundaryWithContextMutex.Lock()
	ret, specificReturn := fake.deleteUserPermissionsBoundaryWithContextReturnsOnCall[len(fake.deleteUserPermissionsBoundaryWithContextArgsForCall)]
	fake.deleteUserPermissionsBoundaryWithContextArgsForCall = append(fake.deleteUserPermissionsBoundaryWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteUserPermissionsBoundaryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteUserPermissionsBoundaryWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteUserPermissionsBoundaryWithContextMutex.Unlock()
	if fake.DeleteUserPermissionsBoundaryWithContextStub != nil {
		return fake.DeleteUserPermissionsBoundaryWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteUserPermissionsBoundaryWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundaryWithContextCallCount() int {
	fake.deleteUserPermissionsBoundaryWithContextMutex.RLock()
	defer fake.deleteUserPermissionsBoundaryWithContextMutex.RUnlock()
	return len(fake.deleteUserPermissionsBoundaryWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundaryWithContextCalls(stub func(context.Context, *iam.DeleteUserPermissionsBoundaryInput, ...request.Option) (*iam.DeleteUserPermissionsBoundaryOutput, error)) {
	fake.deleteUserPermissionsBoundaryWithContextMutex.Lock()
	defer fake.deleteUserPermissionsBoundaryWithContextMutex.Unlock()
	fake.DeleteUserPermissionsBoundaryWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundaryWithContextArgsForCall(i int) (context.Context, *iam.DeleteUserPermissionsBoundaryInput, []request.Option) {
	fake.deleteUserPermissionsBoundaryWithContextMutex.RLock()
	defer fake.deleteUserPermissionsBoundaryWithContextMutex.RUnlock()
	argsForCall := fake.deleteUserPermissionsBoundaryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundaryWithContextReturns(result1 *iam.DeleteUserPermissionsBoundaryOutput, result2 error) {
	fake.deleteUserPermissionsBoundaryWithContextMutex.Lock()
	defer fake.deleteUserPermissionsBoundaryWithContextMutex.Unlock()
	fake.DeleteUserPermissionsBoundaryWithContextStub = nil
	fake.deleteUserPermissionsBoundaryWithContextReturns = struct {
		result1 *iam.DeleteUserPermissionsBoundaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUserPermissionsBoundaryWithContextReturnsOnCall(i int, result1 *iam.DeleteUserPermissionsBoundaryOutput, result2 error) {
	fake.deleteUserPermissionsBoundaryWithContextMutex.Lock()
	defer fake.deleteUserPermissionsBoundaryWithContextMutex.Unlock()
	fake.DeleteUserPermissionsBoundaryWithContextStub = nil
	if fake.deleteUserPermissionsBoundaryWithContextReturnsOnCall == nil {
		fake.deleteUserPermissionsBoundaryWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteUserPermissionsBoundaryOutput
			result2 error
		})
	}
	fake.deleteUserPermissionsBoundaryWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteUserPermissionsBoundaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUserPolicy(arg1 *iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error) {
	fake.deleteUserPolicyMutex.Lock()
	ret, specificReturn := fake.deleteUserPolicyReturnsOnCall[len(fake.deleteUserPolicyArgsForCall)]
	fake.deleteUserPolicyArgsForCall = append(fake.deleteUserPolicyArgsForCall, struct {
		arg1 *iam.DeleteUserPolicyInput
	}{arg1})
	fake.recordInvocation("DeleteUserPolicy", []interface{}{arg1})
	fake.deleteUserPolicyMutex.Unlock()
	if fake.DeleteUserPolicyStub != nil {
		return fake.DeleteUserPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteUserPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteUserPolicyCallCount() int {
	fake.deleteUserPolicyMutex.RLock()
	defer fake.deleteUserPolicyMutex.RUnlock()
	return len(fake.deleteUserPolicyArgsForCall)
}

func (fake *FakeIAMAPI) DeleteUserPolicyCalls(stub func(*iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error)) {
	fake.deleteUserPolicyMutex.Lock()
	defer fake.deleteUserPolicyMutex.Unlock()
	fake.DeleteUserPolicyStub = stub
}

func (fake *FakeIAMAPI) DeleteUserPolicyArgsForCall(i int) *iam.DeleteUserPolicyInput {
	fake.deleteUserPolicyMutex.RLock()
	defer fake.deleteUserPolicyMutex.RUnlock()
	argsForCall := fake.deleteUserPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteUserPolicyReturns(result1 *iam.DeleteUserPolicyOutput, result2 error) {
	fake.deleteUserPolicyMutex.Lock()
	defer fake.deleteUserPolicyMutex.Unlock()
	fake.DeleteUserPolicyStub = nil
	fake.deleteUserPolicyReturns = struct {
		result1 *iam.DeleteUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUserPolicyReturnsOnCall(i int, result1 *iam.DeleteUserPolicyOutput, result2 error) {
	fake.deleteUserPolicyMutex.Lock()
	defer fake.deleteUserPolicyMutex.Unlock()
	fake.DeleteUserPolicyStub = nil
	if fake.deleteUserPolicyReturnsOnCall == nil {
		fake.deleteUserPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteUserPolicyOutput
			result2 error
		})
	}
	fake.deleteUserPolicyReturnsOnCall[i] = struct {
		result1 *iam.DeleteUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUserPolicyRequest(arg1 *iam.DeleteUserPolicyInput) (*request.Request, *iam.DeleteUserPolicyOutput) {
	fake.deleteUserPolicyRequestMutex.Lock()
	ret, specificReturn := fake.deleteUserPolicyRequestReturnsOnCall[len(fake.deleteUserPolicyRequestArgsForCall)]
	fake.deleteUserPolicyRequestArgsForCall = append(fake.deleteUserPolicyRequestArgsForCall, struct {
		arg1 *iam.DeleteUserPolicyInput
	}{arg1})
	fake.recordInvocation("DeleteUserPolicyRequest", []interface{}{arg1})
	fake.deleteUserPolicyRequestMutex.Unlock()
	if fake.DeleteUserPolicyRequestStub != nil {
		return fake.DeleteUserPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteUserPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteUserPolicyRequestCallCount() int {
	fake.deleteUserPolicyRequestMutex.RLock()
	defer fake.deleteUserPolicyRequestMutex.RUnlock()
	return len(fake.deleteUserPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteUserPolicyRequestCalls(stub func(*iam.DeleteUserPolicyInput) (*request.Request, *iam.DeleteUserPolicyOutput)) {
	fake.deleteUserPolicyRequestMutex.Lock()
	defer fake.deleteUserPolicyRequestMutex.Unlock()
	fake.DeleteUserPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteUserPolicyRequestArgsForCall(i int) *iam.DeleteUserPolicyInput {
	fake.deleteUserPolicyRequestMutex.RLock()
	defer fake.deleteUserPolicyRequestMutex.RUnlock()
	argsForCall := fake.deleteUserPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteUserPolicyRequestReturns(result1 *request.Request, result2 *iam.DeleteUserPolicyOutput) {
	fake.deleteUserPolicyRequestMutex.Lock()
	defer fake.deleteUserPolicyRequestMutex.Unlock()
	fake.DeleteUserPolicyRequestStub = nil
	fake.deleteUserPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteUserPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUserPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteUserPolicyOutput) {
	fake.deleteUserPolicyRequestMutex.Lock()
	defer fake.deleteUserPolicyRequestMutex.Unlock()
	fake.DeleteUserPolicyRequestStub = nil
	if fake.deleteUserPolicyRequestReturnsOnCall == nil {
		fake.deleteUserPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteUserPolicyOutput
		})
	}
	fake.deleteUserPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteUserPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUserPolicyWithContext(arg1 context.Context, arg2 *iam.DeleteUserPolicyInput, arg3 ...request.Option) (*iam.DeleteUserPolicyOutput, error) {
	fake.deleteUserPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.deleteUserPolicyWithContextReturnsOnCall[len(fake.deleteUserPolicyWithContextArgsForCall)]
	fake.deleteUserPolicyWithContextArgsForCall = append(fake.deleteUserPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteUserPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteUserPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteUserPolicyWithContextMutex.Unlock()
	if fake.DeleteUserPolicyWithContextStub != nil {
		return fake.DeleteUserPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteUserPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteUserPolicyWithContextCallCount() int {
	fake.deleteUserPolicyWithContextMutex.RLock()
	defer fake.deleteUserPolicyWithContextMutex.RUnlock()
	return len(fake.deleteUserPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteUserPolicyWithContextCalls(stub func(context.Context, *iam.DeleteUserPolicyInput, ...request.Option) (*iam.DeleteUserPolicyOutput, error)) {
	fake.deleteUserPolicyWithContextMutex.Lock()
	defer fake.deleteUserPolicyWithContextMutex.Unlock()
	fake.DeleteUserPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteUserPolicyWithContextArgsForCall(i int) (context.Context, *iam.DeleteUserPolicyInput, []request.Option) {
	fake.deleteUserPolicyWithContextMutex.RLock()
	defer fake.deleteUserPolicyWithContextMutex.RUnlock()
	argsForCall := fake.deleteUserPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteUserPolicyWithContextReturns(result1 *iam.DeleteUserPolicyOutput, result2 error) {
	fake.deleteUserPolicyWithContextMutex.Lock()
	defer fake.deleteUserPolicyWithContextMutex.Unlock()
	fake.DeleteUserPolicyWithContextStub = nil
	fake.deleteUserPolicyWithContextReturns = struct {
		result1 *iam.DeleteUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUserPolicyWithContextReturnsOnCall(i int, result1 *iam.DeleteUserPolicyOutput, result2 error) {
	fake.deleteUserPolicyWithContextMutex.Lock()
	defer fake.deleteUserPolicyWithContextMutex.Unlock()
	fake.DeleteUserPolicyWithContextStub = nil
	if fake.deleteUserPolicyWithContextReturnsOnCall == nil {
		fake.deleteUserPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteUserPolicyOutput
			result2 error
		})
	}
	fake.deleteUserPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUserRequest(arg1 *iam.DeleteUserInput) (*request.Request, *iam.DeleteUserOutput) {
	fake.deleteUserRequestMutex.Lock()
	ret, specificReturn := fake.deleteUserRequestReturnsOnCall[len(fake.deleteUserRequestArgsForCall)]
	fake.deleteUserRequestArgsForCall = append(fake.deleteUserRequestArgsForCall, struct {
		arg1 *iam.DeleteUserInput
	}{arg1})
	fake.recordInvocation("DeleteUserRequest", []interface{}{arg1})
	fake.deleteUserRequestMutex.Unlock()
	if fake.DeleteUserRequestStub != nil {
		return fake.DeleteUserRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteUserRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteUserRequestCallCount() int {
	fake.deleteUserRequestMutex.RLock()
	defer fake.deleteUserRequestMutex.RUnlock()
	return len(fake.deleteUserRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteUserRequestCalls(stub func(*iam.DeleteUserInput) (*request.Request, *iam.DeleteUserOutput)) {
	fake.deleteUserRequestMutex.Lock()
	defer fake.deleteUserRequestMutex.Unlock()
	fake.DeleteUserRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteUserRequestArgsForCall(i int) *iam.DeleteUserInput {
	fake.deleteUserRequestMutex.RLock()
	defer fake.deleteUserRequestMutex.RUnlock()
	argsForCall := fake.deleteUserRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteUserRequestReturns(result1 *request.Request, result2 *iam.DeleteUserOutput) {
	fake.deleteUserRequestMutex.Lock()
	defer fake.deleteUserRequestMutex.Unlock()
	fake.DeleteUserRequestStub = nil
	fake.deleteUserRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteUserOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUserRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteUserOutput) {
	fake.deleteUserRequestMutex.Lock()
	defer fake.deleteUserRequestMutex.Unlock()
	fake.DeleteUserRequestStub = nil
	if fake.deleteUserRequestReturnsOnCall == nil {
		fake.deleteUserRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteUserOutput
		})
	}
	fake.deleteUserRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteUserOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUserWithContext(arg1 context.Context, arg2 *iam.DeleteUserInput, arg3 ...request.Option) (*iam.DeleteUserOutput, error) {
	fake.deleteUserWithContextMutex.Lock()
	ret, specificReturn := fake.deleteUserWithContextReturnsOnCall[len(fake.deleteUserWithContextArgsForCall)]
	fake.deleteUserWithContextArgsForCall = append(fake.deleteUserWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteUserInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteUserWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteUserWithContextMutex.Unlock()
	if fake.DeleteUserWithContextStub != nil {
		return fake.DeleteUserWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteUserWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteUserWithContextCallCount() int {
	fake.deleteUserWithContextMutex.RLock()
	defer fake.deleteUserWithContextMutex.RUnlock()
	return len(fake.deleteUserWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteUserWithContextCalls(stub func(context.Context, *iam.DeleteUserInput, ...request.Option) (*iam.DeleteUserOutput, error)) {
	fake.deleteUserWithContextMutex.Lock()
	defer fake.deleteUserWithContextMutex.Unlock()
	fake.DeleteUserWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteUserWithContextArgsForCall(i int) (context.Context, *iam.DeleteUserInput, []request.Option) {
	fake.deleteUserWithContextMutex.RLock()
	defer fake.deleteUserWithContextMutex.RUnlock()
	argsForCall := fake.deleteUserWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteUserWithContextReturns(result1 *iam.DeleteUserOutput, result2 error) {
	fake.deleteUserWithContextMutex.Lock()
	defer fake.deleteUserWithContextMutex.Unlock()
	fake.DeleteUserWithContextStub = nil
	fake.deleteUserWithContextReturns = struct {
		result1 *iam.DeleteUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteUserWithContextReturnsOnCall(i int, result1 *iam.DeleteUserOutput, result2 error) {
	fake.deleteUserWithContextMutex.Lock()
	defer fake.deleteUserWithContextMutex.Unlock()
	fake.DeleteUserWithContextStub = nil
	if fake.deleteUserWithContextReturnsOnCall == nil {
		fake.deleteUserWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteUserOutput
			result2 error
		})
	}
	fake.deleteUserWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteVirtualMFADevice(arg1 *iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error) {
	fake.deleteVirtualMFADeviceMutex.Lock()
	ret, specificReturn := fake.deleteVirtualMFADeviceReturnsOnCall[len(fake.deleteVirtualMFADeviceArgsForCall)]
	fake.deleteVirtualMFADeviceArgsForCall = append(fake.deleteVirtualMFADeviceArgsForCall, struct {
		arg1 *iam.DeleteVirtualMFADeviceInput
	}{arg1})
	fake.recordInvocation("DeleteVirtualMFADevice", []interface{}{arg1})
	fake.deleteVirtualMFADeviceMutex.Unlock()
	if fake.DeleteVirtualMFADeviceStub != nil {
		return fake.DeleteVirtualMFADeviceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVirtualMFADeviceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteVirtualMFADeviceCallCount() int {
	fake.deleteVirtualMFADeviceMutex.RLock()
	defer fake.deleteVirtualMFADeviceMutex.RUnlock()
	return len(fake.deleteVirtualMFADeviceArgsForCall)
}

func (fake *FakeIAMAPI) DeleteVirtualMFADeviceCalls(stub func(*iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error)) {
	fake.deleteVirtualMFADeviceMutex.Lock()
	defer fake.deleteVirtualMFADeviceMutex.Unlock()
	fake.DeleteVirtualMFADeviceStub = stub
}

func (fake *FakeIAMAPI) DeleteVirtualMFADeviceArgsForCall(i int) *iam.DeleteVirtualMFADeviceInput {
	fake.deleteVirtualMFADeviceMutex.RLock()
	defer fake.deleteVirtualMFADeviceMutex.RUnlock()
	argsForCall := fake.deleteVirtualMFADeviceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteVirtualMFADeviceReturns(result1 *iam.DeleteVirtualMFADeviceOutput, result2 error) {
	fake.deleteVirtualMFADeviceMutex.Lock()
	defer fake.deleteVirtualMFADeviceMutex.Unlock()
	fake.DeleteVirtualMFADeviceStub = nil
	fake.deleteVirtualMFADeviceReturns = struct {
		result1 *iam.DeleteVirtualMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteVirtualMFADeviceReturnsOnCall(i int, result1 *iam.DeleteVirtualMFADeviceOutput, result2 error) {
	fake.deleteVirtualMFADeviceMutex.Lock()
	defer fake.deleteVirtualMFADeviceMutex.Unlock()
	fake.DeleteVirtualMFADeviceStub = nil
	if fake.deleteVirtualMFADeviceReturnsOnCall == nil {
		fake.deleteVirtualMFADeviceReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteVirtualMFADeviceOutput
			result2 error
		})
	}
	fake.deleteVirtualMFADeviceReturnsOnCall[i] = struct {
		result1 *iam.DeleteVirtualMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteVirtualMFADeviceRequest(arg1 *iam.DeleteVirtualMFADeviceInput) (*request.Request, *iam.DeleteVirtualMFADeviceOutput) {
	fake.deleteVirtualMFADeviceRequestMutex.Lock()
	ret, specificReturn := fake.deleteVirtualMFADeviceRequestReturnsOnCall[len(fake.deleteVirtualMFADeviceRequestArgsForCall)]
	fake.deleteVirtualMFADeviceRequestArgsForCall = append(fake.deleteVirtualMFADeviceRequestArgsForCall, struct {
		arg1 *iam.DeleteVirtualMFADeviceInput
	}{arg1})
	fake.recordInvocation("DeleteVirtualMFADeviceRequest", []interface{}{arg1})
	fake.deleteVirtualMFADeviceRequestMutex.Unlock()
	if fake.DeleteVirtualMFADeviceRequestStub != nil {
		return fake.DeleteVirtualMFADeviceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVirtualMFADeviceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteVirtualMFADeviceRequestCallCount() int {
	fake.deleteVirtualMFADeviceRequestMutex.RLock()
	defer fake.deleteVirtualMFADeviceRequestMutex.RUnlock()
	return len(fake.deleteVirtualMFADeviceRequestArgsForCall)
}

func (fake *FakeIAMAPI) DeleteVirtualMFADeviceRequestCalls(stub func(*iam.DeleteVirtualMFADeviceInput) (*request.Request, *iam.DeleteVirtualMFADeviceOutput)) {
	fake.deleteVirtualMFADeviceRequestMutex.Lock()
	defer fake.deleteVirtualMFADeviceRequestMutex.Unlock()
	fake.DeleteVirtualMFADeviceRequestStub = stub
}

func (fake *FakeIAMAPI) DeleteVirtualMFADeviceRequestArgsForCall(i int) *iam.DeleteVirtualMFADeviceInput {
	fake.deleteVirtualMFADeviceRequestMutex.RLock()
	defer fake.deleteVirtualMFADeviceRequestMutex.RUnlock()
	argsForCall := fake.deleteVirtualMFADeviceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DeleteVirtualMFADeviceRequestReturns(result1 *request.Request, result2 *iam.DeleteVirtualMFADeviceOutput) {
	fake.deleteVirtualMFADeviceRequestMutex.Lock()
	defer fake.deleteVirtualMFADeviceRequestMutex.Unlock()
	fake.DeleteVirtualMFADeviceRequestStub = nil
	fake.deleteVirtualMFADeviceRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DeleteVirtualMFADeviceOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteVirtualMFADeviceRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DeleteVirtualMFADeviceOutput) {
	fake.deleteVirtualMFADeviceRequestMutex.Lock()
	defer fake.deleteVirtualMFADeviceRequestMutex.Unlock()
	fake.DeleteVirtualMFADeviceRequestStub = nil
	if fake.deleteVirtualMFADeviceRequestReturnsOnCall == nil {
		fake.deleteVirtualMFADeviceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DeleteVirtualMFADeviceOutput
		})
	}
	fake.deleteVirtualMFADeviceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DeleteVirtualMFADeviceOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteVirtualMFADeviceWithContext(arg1 context.Context, arg2 *iam.DeleteVirtualMFADeviceInput, arg3 ...request.Option) (*iam.DeleteVirtualMFADeviceOutput, error) {
	fake.deleteVirtualMFADeviceWithContextMutex.Lock()
	ret, specificReturn := fake.deleteVirtualMFADeviceWithContextReturnsOnCall[len(fake.deleteVirtualMFADeviceWithContextArgsForCall)]
	fake.deleteVirtualMFADeviceWithContextArgsForCall = append(fake.deleteVirtualMFADeviceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DeleteVirtualMFADeviceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteVirtualMFADeviceWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteVirtualMFADeviceWithContextMutex.Unlock()
	if fake.DeleteVirtualMFADeviceWithContextStub != nil {
		return fake.DeleteVirtualMFADeviceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVirtualMFADeviceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DeleteVirtualMFADeviceWithContextCallCount() int {
	fake.deleteVirtualMFADeviceWithContextMutex.RLock()
	defer fake.deleteVirtualMFADeviceWithContextMutex.RUnlock()
	return len(fake.deleteVirtualMFADeviceWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DeleteVirtualMFADeviceWithContextCalls(stub func(context.Context, *iam.DeleteVirtualMFADeviceInput, ...request.Option) (*iam.DeleteVirtualMFADeviceOutput, error)) {
	fake.deleteVirtualMFADeviceWithContextMutex.Lock()
	defer fake.deleteVirtualMFADeviceWithContextMutex.Unlock()
	fake.DeleteVirtualMFADeviceWithContextStub = stub
}

func (fake *FakeIAMAPI) DeleteVirtualMFADeviceWithContextArgsForCall(i int) (context.Context, *iam.DeleteVirtualMFADeviceInput, []request.Option) {
	fake.deleteVirtualMFADeviceWithContextMutex.RLock()
	defer fake.deleteVirtualMFADeviceWithContextMutex.RUnlock()
	argsForCall := fake.deleteVirtualMFADeviceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DeleteVirtualMFADeviceWithContextReturns(result1 *iam.DeleteVirtualMFADeviceOutput, result2 error) {
	fake.deleteVirtualMFADeviceWithContextMutex.Lock()
	defer fake.deleteVirtualMFADeviceWithContextMutex.Unlock()
	fake.DeleteVirtualMFADeviceWithContextStub = nil
	fake.deleteVirtualMFADeviceWithContextReturns = struct {
		result1 *iam.DeleteVirtualMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DeleteVirtualMFADeviceWithContextReturnsOnCall(i int, result1 *iam.DeleteVirtualMFADeviceOutput, result2 error) {
	fake.deleteVirtualMFADeviceWithContextMutex.Lock()
	defer fake.deleteVirtualMFADeviceWithContextMutex.Unlock()
	fake.DeleteVirtualMFADeviceWithContextStub = nil
	if fake.deleteVirtualMFADeviceWithContextReturnsOnCall == nil {
		fake.deleteVirtualMFADeviceWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DeleteVirtualMFADeviceOutput
			result2 error
		})
	}
	fake.deleteVirtualMFADeviceWithContextReturnsOnCall[i] = struct {
		result1 *iam.DeleteVirtualMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachGroupPolicy(arg1 *iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error) {
	fake.detachGroupPolicyMutex.Lock()
	ret, specificReturn := fake.detachGroupPolicyReturnsOnCall[len(fake.detachGroupPolicyArgsForCall)]
	fake.detachGroupPolicyArgsForCall = append(fake.detachGroupPolicyArgsForCall, struct {
		arg1 *iam.DetachGroupPolicyInput
	}{arg1})
	fake.recordInvocation("DetachGroupPolicy", []interface{}{arg1})
	fake.detachGroupPolicyMutex.Unlock()
	if fake.DetachGroupPolicyStub != nil {
		return fake.DetachGroupPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachGroupPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DetachGroupPolicyCallCount() int {
	fake.detachGroupPolicyMutex.RLock()
	defer fake.detachGroupPolicyMutex.RUnlock()
	return len(fake.detachGroupPolicyArgsForCall)
}

func (fake *FakeIAMAPI) DetachGroupPolicyCalls(stub func(*iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error)) {
	fake.detachGroupPolicyMutex.Lock()
	defer fake.detachGroupPolicyMutex.Unlock()
	fake.DetachGroupPolicyStub = stub
}

func (fake *FakeIAMAPI) DetachGroupPolicyArgsForCall(i int) *iam.DetachGroupPolicyInput {
	fake.detachGroupPolicyMutex.RLock()
	defer fake.detachGroupPolicyMutex.RUnlock()
	argsForCall := fake.detachGroupPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DetachGroupPolicyReturns(result1 *iam.DetachGroupPolicyOutput, result2 error) {
	fake.detachGroupPolicyMutex.Lock()
	defer fake.detachGroupPolicyMutex.Unlock()
	fake.DetachGroupPolicyStub = nil
	fake.detachGroupPolicyReturns = struct {
		result1 *iam.DetachGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachGroupPolicyReturnsOnCall(i int, result1 *iam.DetachGroupPolicyOutput, result2 error) {
	fake.detachGroupPolicyMutex.Lock()
	defer fake.detachGroupPolicyMutex.Unlock()
	fake.DetachGroupPolicyStub = nil
	if fake.detachGroupPolicyReturnsOnCall == nil {
		fake.detachGroupPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.DetachGroupPolicyOutput
			result2 error
		})
	}
	fake.detachGroupPolicyReturnsOnCall[i] = struct {
		result1 *iam.DetachGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachGroupPolicyRequest(arg1 *iam.DetachGroupPolicyInput) (*request.Request, *iam.DetachGroupPolicyOutput) {
	fake.detachGroupPolicyRequestMutex.Lock()
	ret, specificReturn := fake.detachGroupPolicyRequestReturnsOnCall[len(fake.detachGroupPolicyRequestArgsForCall)]
	fake.detachGroupPolicyRequestArgsForCall = append(fake.detachGroupPolicyRequestArgsForCall, struct {
		arg1 *iam.DetachGroupPolicyInput
	}{arg1})
	fake.recordInvocation("DetachGroupPolicyRequest", []interface{}{arg1})
	fake.detachGroupPolicyRequestMutex.Unlock()
	if fake.DetachGroupPolicyRequestStub != nil {
		return fake.DetachGroupPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachGroupPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DetachGroupPolicyRequestCallCount() int {
	fake.detachGroupPolicyRequestMutex.RLock()
	defer fake.detachGroupPolicyRequestMutex.RUnlock()
	return len(fake.detachGroupPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) DetachGroupPolicyRequestCalls(stub func(*iam.DetachGroupPolicyInput) (*request.Request, *iam.DetachGroupPolicyOutput)) {
	fake.detachGroupPolicyRequestMutex.Lock()
	defer fake.detachGroupPolicyRequestMutex.Unlock()
	fake.DetachGroupPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) DetachGroupPolicyRequestArgsForCall(i int) *iam.DetachGroupPolicyInput {
	fake.detachGroupPolicyRequestMutex.RLock()
	defer fake.detachGroupPolicyRequestMutex.RUnlock()
	argsForCall := fake.detachGroupPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DetachGroupPolicyRequestReturns(result1 *request.Request, result2 *iam.DetachGroupPolicyOutput) {
	fake.detachGroupPolicyRequestMutex.Lock()
	defer fake.detachGroupPolicyRequestMutex.Unlock()
	fake.DetachGroupPolicyRequestStub = nil
	fake.detachGroupPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DetachGroupPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachGroupPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DetachGroupPolicyOutput) {
	fake.detachGroupPolicyRequestMutex.Lock()
	defer fake.detachGroupPolicyRequestMutex.Unlock()
	fake.DetachGroupPolicyRequestStub = nil
	if fake.detachGroupPolicyRequestReturnsOnCall == nil {
		fake.detachGroupPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DetachGroupPolicyOutput
		})
	}
	fake.detachGroupPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DetachGroupPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachGroupPolicyWithContext(arg1 context.Context, arg2 *iam.DetachGroupPolicyInput, arg3 ...request.Option) (*iam.DetachGroupPolicyOutput, error) {
	fake.detachGroupPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.detachGroupPolicyWithContextReturnsOnCall[len(fake.detachGroupPolicyWithContextArgsForCall)]
	fake.detachGroupPolicyWithContextArgsForCall = append(fake.detachGroupPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DetachGroupPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DetachGroupPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.detachGroupPolicyWithContextMutex.Unlock()
	if fake.DetachGroupPolicyWithContextStub != nil {
		return fake.DetachGroupPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachGroupPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DetachGroupPolicyWithContextCallCount() int {
	fake.detachGroupPolicyWithContextMutex.RLock()
	defer fake.detachGroupPolicyWithContextMutex.RUnlock()
	return len(fake.detachGroupPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DetachGroupPolicyWithContextCalls(stub func(context.Context, *iam.DetachGroupPolicyInput, ...request.Option) (*iam.DetachGroupPolicyOutput, error)) {
	fake.detachGroupPolicyWithContextMutex.Lock()
	defer fake.detachGroupPolicyWithContextMutex.Unlock()
	fake.DetachGroupPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) DetachGroupPolicyWithContextArgsForCall(i int) (context.Context, *iam.DetachGroupPolicyInput, []request.Option) {
	fake.detachGroupPolicyWithContextMutex.RLock()
	defer fake.detachGroupPolicyWithContextMutex.RUnlock()
	argsForCall := fake.detachGroupPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DetachGroupPolicyWithContextReturns(result1 *iam.DetachGroupPolicyOutput, result2 error) {
	fake.detachGroupPolicyWithContextMutex.Lock()
	defer fake.detachGroupPolicyWithContextMutex.Unlock()
	fake.DetachGroupPolicyWithContextStub = nil
	fake.detachGroupPolicyWithContextReturns = struct {
		result1 *iam.DetachGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachGroupPolicyWithContextReturnsOnCall(i int, result1 *iam.DetachGroupPolicyOutput, result2 error) {
	fake.detachGroupPolicyWithContextMutex.Lock()
	defer fake.detachGroupPolicyWithContextMutex.Unlock()
	fake.DetachGroupPolicyWithContextStub = nil
	if fake.detachGroupPolicyWithContextReturnsOnCall == nil {
		fake.detachGroupPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DetachGroupPolicyOutput
			result2 error
		})
	}
	fake.detachGroupPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.DetachGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachRolePolicy(arg1 *iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error) {
	fake.detachRolePolicyMutex.Lock()
	ret, specificReturn := fake.detachRolePolicyReturnsOnCall[len(fake.detachRolePolicyArgsForCall)]
	fake.detachRolePolicyArgsForCall = append(fake.detachRolePolicyArgsForCall, struct {
		arg1 *iam.DetachRolePolicyInput
	}{arg1})
	fake.recordInvocation("DetachRolePolicy", []interface{}{arg1})
	fake.detachRolePolicyMutex.Unlock()
	if fake.DetachRolePolicyStub != nil {
		return fake.DetachRolePolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachRolePolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DetachRolePolicyCallCount() int {
	fake.detachRolePolicyMutex.RLock()
	defer fake.detachRolePolicyMutex.RUnlock()
	return len(fake.detachRolePolicyArgsForCall)
}

func (fake *FakeIAMAPI) DetachRolePolicyCalls(stub func(*iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error)) {
	fake.detachRolePolicyMutex.Lock()
	defer fake.detachRolePolicyMutex.Unlock()
	fake.DetachRolePolicyStub = stub
}

func (fake *FakeIAMAPI) DetachRolePolicyArgsForCall(i int) *iam.DetachRolePolicyInput {
	fake.detachRolePolicyMutex.RLock()
	defer fake.detachRolePolicyMutex.RUnlock()
	argsForCall := fake.detachRolePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DetachRolePolicyReturns(result1 *iam.DetachRolePolicyOutput, result2 error) {
	fake.detachRolePolicyMutex.Lock()
	defer fake.detachRolePolicyMutex.Unlock()
	fake.DetachRolePolicyStub = nil
	fake.detachRolePolicyReturns = struct {
		result1 *iam.DetachRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachRolePolicyReturnsOnCall(i int, result1 *iam.DetachRolePolicyOutput, result2 error) {
	fake.detachRolePolicyMutex.Lock()
	defer fake.detachRolePolicyMutex.Unlock()
	fake.DetachRolePolicyStub = nil
	if fake.detachRolePolicyReturnsOnCall == nil {
		fake.detachRolePolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.DetachRolePolicyOutput
			result2 error
		})
	}
	fake.detachRolePolicyReturnsOnCall[i] = struct {
		result1 *iam.DetachRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachRolePolicyRequest(arg1 *iam.DetachRolePolicyInput) (*request.Request, *iam.DetachRolePolicyOutput) {
	fake.detachRolePolicyRequestMutex.Lock()
	ret, specificReturn := fake.detachRolePolicyRequestReturnsOnCall[len(fake.detachRolePolicyRequestArgsForCall)]
	fake.detachRolePolicyRequestArgsForCall = append(fake.detachRolePolicyRequestArgsForCall, struct {
		arg1 *iam.DetachRolePolicyInput
	}{arg1})
	fake.recordInvocation("DetachRolePolicyRequest", []interface{}{arg1})
	fake.detachRolePolicyRequestMutex.Unlock()
	if fake.DetachRolePolicyRequestStub != nil {
		return fake.DetachRolePolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachRolePolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DetachRolePolicyRequestCallCount() int {
	fake.detachRolePolicyRequestMutex.RLock()
	defer fake.detachRolePolicyRequestMutex.RUnlock()
	return len(fake.detachRolePolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) DetachRolePolicyRequestCalls(stub func(*iam.DetachRolePolicyInput) (*request.Request, *iam.DetachRolePolicyOutput)) {
	fake.detachRolePolicyRequestMutex.Lock()
	defer fake.detachRolePolicyRequestMutex.Unlock()
	fake.DetachRolePolicyRequestStub = stub
}

func (fake *FakeIAMAPI) DetachRolePolicyRequestArgsForCall(i int) *iam.DetachRolePolicyInput {
	fake.detachRolePolicyRequestMutex.RLock()
	defer fake.detachRolePolicyRequestMutex.RUnlock()
	argsForCall := fake.detachRolePolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DetachRolePolicyRequestReturns(result1 *request.Request, result2 *iam.DetachRolePolicyOutput) {
	fake.detachRolePolicyRequestMutex.Lock()
	defer fake.detachRolePolicyRequestMutex.Unlock()
	fake.DetachRolePolicyRequestStub = nil
	fake.detachRolePolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DetachRolePolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachRolePolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DetachRolePolicyOutput) {
	fake.detachRolePolicyRequestMutex.Lock()
	defer fake.detachRolePolicyRequestMutex.Unlock()
	fake.DetachRolePolicyRequestStub = nil
	if fake.detachRolePolicyRequestReturnsOnCall == nil {
		fake.detachRolePolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DetachRolePolicyOutput
		})
	}
	fake.detachRolePolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DetachRolePolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachRolePolicyWithContext(arg1 context.Context, arg2 *iam.DetachRolePolicyInput, arg3 ...request.Option) (*iam.DetachRolePolicyOutput, error) {
	fake.detachRolePolicyWithContextMutex.Lock()
	ret, specificReturn := fake.detachRolePolicyWithContextReturnsOnCall[len(fake.detachRolePolicyWithContextArgsForCall)]
	fake.detachRolePolicyWithContextArgsForCall = append(fake.detachRolePolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DetachRolePolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DetachRolePolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.detachRolePolicyWithContextMutex.Unlock()
	if fake.DetachRolePolicyWithContextStub != nil {
		return fake.DetachRolePolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachRolePolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DetachRolePolicyWithContextCallCount() int {
	fake.detachRolePolicyWithContextMutex.RLock()
	defer fake.detachRolePolicyWithContextMutex.RUnlock()
	return len(fake.detachRolePolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DetachRolePolicyWithContextCalls(stub func(context.Context, *iam.DetachRolePolicyInput, ...request.Option) (*iam.DetachRolePolicyOutput, error)) {
	fake.detachRolePolicyWithContextMutex.Lock()
	defer fake.detachRolePolicyWithContextMutex.Unlock()
	fake.DetachRolePolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) DetachRolePolicyWithContextArgsForCall(i int) (context.Context, *iam.DetachRolePolicyInput, []request.Option) {
	fake.detachRolePolicyWithContextMutex.RLock()
	defer fake.detachRolePolicyWithContextMutex.RUnlock()
	argsForCall := fake.detachRolePolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DetachRolePolicyWithContextReturns(result1 *iam.DetachRolePolicyOutput, result2 error) {
	fake.detachRolePolicyWithContextMutex.Lock()
	defer fake.detachRolePolicyWithContextMutex.Unlock()
	fake.DetachRolePolicyWithContextStub = nil
	fake.detachRolePolicyWithContextReturns = struct {
		result1 *iam.DetachRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachRolePolicyWithContextReturnsOnCall(i int, result1 *iam.DetachRolePolicyOutput, result2 error) {
	fake.detachRolePolicyWithContextMutex.Lock()
	defer fake.detachRolePolicyWithContextMutex.Unlock()
	fake.DetachRolePolicyWithContextStub = nil
	if fake.detachRolePolicyWithContextReturnsOnCall == nil {
		fake.detachRolePolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DetachRolePolicyOutput
			result2 error
		})
	}
	fake.detachRolePolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.DetachRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachUserPolicy(arg1 *iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error) {
	fake.detachUserPolicyMutex.Lock()
	ret, specificReturn := fake.detachUserPolicyReturnsOnCall[len(fake.detachUserPolicyArgsForCall)]
	fake.detachUserPolicyArgsForCall = append(fake.detachUserPolicyArgsForCall, struct {
		arg1 *iam.DetachUserPolicyInput
	}{arg1})
	fake.recordInvocation("DetachUserPolicy", []interface{}{arg1})
	fake.detachUserPolicyMutex.Unlock()
	if fake.DetachUserPolicyStub != nil {
		return fake.DetachUserPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachUserPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DetachUserPolicyCallCount() int {
	fake.detachUserPolicyMutex.RLock()
	defer fake.detachUserPolicyMutex.RUnlock()
	return len(fake.detachUserPolicyArgsForCall)
}

func (fake *FakeIAMAPI) DetachUserPolicyCalls(stub func(*iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error)) {
	fake.detachUserPolicyMutex.Lock()
	defer fake.detachUserPolicyMutex.Unlock()
	fake.DetachUserPolicyStub = stub
}

func (fake *FakeIAMAPI) DetachUserPolicyArgsForCall(i int) *iam.DetachUserPolicyInput {
	fake.detachUserPolicyMutex.RLock()
	defer fake.detachUserPolicyMutex.RUnlock()
	argsForCall := fake.detachUserPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DetachUserPolicyReturns(result1 *iam.DetachUserPolicyOutput, result2 error) {
	fake.detachUserPolicyMutex.Lock()
	defer fake.detachUserPolicyMutex.Unlock()
	fake.DetachUserPolicyStub = nil
	fake.detachUserPolicyReturns = struct {
		result1 *iam.DetachUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachUserPolicyReturnsOnCall(i int, result1 *iam.DetachUserPolicyOutput, result2 error) {
	fake.detachUserPolicyMutex.Lock()
	defer fake.detachUserPolicyMutex.Unlock()
	fake.DetachUserPolicyStub = nil
	if fake.detachUserPolicyReturnsOnCall == nil {
		fake.detachUserPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.DetachUserPolicyOutput
			result2 error
		})
	}
	fake.detachUserPolicyReturnsOnCall[i] = struct {
		result1 *iam.DetachUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachUserPolicyRequest(arg1 *iam.DetachUserPolicyInput) (*request.Request, *iam.DetachUserPolicyOutput) {
	fake.detachUserPolicyRequestMutex.Lock()
	ret, specificReturn := fake.detachUserPolicyRequestReturnsOnCall[len(fake.detachUserPolicyRequestArgsForCall)]
	fake.detachUserPolicyRequestArgsForCall = append(fake.detachUserPolicyRequestArgsForCall, struct {
		arg1 *iam.DetachUserPolicyInput
	}{arg1})
	fake.recordInvocation("DetachUserPolicyRequest", []interface{}{arg1})
	fake.detachUserPolicyRequestMutex.Unlock()
	if fake.DetachUserPolicyRequestStub != nil {
		return fake.DetachUserPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachUserPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DetachUserPolicyRequestCallCount() int {
	fake.detachUserPolicyRequestMutex.RLock()
	defer fake.detachUserPolicyRequestMutex.RUnlock()
	return len(fake.detachUserPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) DetachUserPolicyRequestCalls(stub func(*iam.DetachUserPolicyInput) (*request.Request, *iam.DetachUserPolicyOutput)) {
	fake.detachUserPolicyRequestMutex.Lock()
	defer fake.detachUserPolicyRequestMutex.Unlock()
	fake.DetachUserPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) DetachUserPolicyRequestArgsForCall(i int) *iam.DetachUserPolicyInput {
	fake.detachUserPolicyRequestMutex.RLock()
	defer fake.detachUserPolicyRequestMutex.RUnlock()
	argsForCall := fake.detachUserPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) DetachUserPolicyRequestReturns(result1 *request.Request, result2 *iam.DetachUserPolicyOutput) {
	fake.detachUserPolicyRequestMutex.Lock()
	defer fake.detachUserPolicyRequestMutex.Unlock()
	fake.DetachUserPolicyRequestStub = nil
	fake.detachUserPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.DetachUserPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachUserPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.DetachUserPolicyOutput) {
	fake.detachUserPolicyRequestMutex.Lock()
	defer fake.detachUserPolicyRequestMutex.Unlock()
	fake.DetachUserPolicyRequestStub = nil
	if fake.detachUserPolicyRequestReturnsOnCall == nil {
		fake.detachUserPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.DetachUserPolicyOutput
		})
	}
	fake.detachUserPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.DetachUserPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachUserPolicyWithContext(arg1 context.Context, arg2 *iam.DetachUserPolicyInput, arg3 ...request.Option) (*iam.DetachUserPolicyOutput, error) {
	fake.detachUserPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.detachUserPolicyWithContextReturnsOnCall[len(fake.detachUserPolicyWithContextArgsForCall)]
	fake.detachUserPolicyWithContextArgsForCall = append(fake.detachUserPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.DetachUserPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DetachUserPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.detachUserPolicyWithContextMutex.Unlock()
	if fake.DetachUserPolicyWithContextStub != nil {
		return fake.DetachUserPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachUserPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) DetachUserPolicyWithContextCallCount() int {
	fake.detachUserPolicyWithContextMutex.RLock()
	defer fake.detachUserPolicyWithContextMutex.RUnlock()
	return len(fake.detachUserPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) DetachUserPolicyWithContextCalls(stub func(context.Context, *iam.DetachUserPolicyInput, ...request.Option) (*iam.DetachUserPolicyOutput, error)) {
	fake.detachUserPolicyWithContextMutex.Lock()
	defer fake.detachUserPolicyWithContextMutex.Unlock()
	fake.DetachUserPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) DetachUserPolicyWithContextArgsForCall(i int) (context.Context, *iam.DetachUserPolicyInput, []request.Option) {
	fake.detachUserPolicyWithContextMutex.RLock()
	defer fake.detachUserPolicyWithContextMutex.RUnlock()
	argsForCall := fake.detachUserPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) DetachUserPolicyWithContextReturns(result1 *iam.DetachUserPolicyOutput, result2 error) {
	fake.detachUserPolicyWithContextMutex.Lock()
	defer fake.detachUserPolicyWithContextMutex.Unlock()
	fake.DetachUserPolicyWithContextStub = nil
	fake.detachUserPolicyWithContextReturns = struct {
		result1 *iam.DetachUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) DetachUserPolicyWithContextReturnsOnCall(i int, result1 *iam.DetachUserPolicyOutput, result2 error) {
	fake.detachUserPolicyWithContextMutex.Lock()
	defer fake.detachUserPolicyWithContextMutex.Unlock()
	fake.DetachUserPolicyWithContextStub = nil
	if fake.detachUserPolicyWithContextReturnsOnCall == nil {
		fake.detachUserPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.DetachUserPolicyOutput
			result2 error
		})
	}
	fake.detachUserPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.DetachUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) EnableMFADevice(arg1 *iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error) {
	fake.enableMFADeviceMutex.Lock()
	ret, specificReturn := fake.enableMFADeviceReturnsOnCall[len(fake.enableMFADeviceArgsForCall)]
	fake.enableMFADeviceArgsForCall = append(fake.enableMFADeviceArgsForCall, struct {
		arg1 *iam.EnableMFADeviceInput
	}{arg1})
	fake.recordInvocation("EnableMFADevice", []interface{}{arg1})
	fake.enableMFADeviceMutex.Unlock()
	if fake.EnableMFADeviceStub != nil {
		return fake.EnableMFADeviceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableMFADeviceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) EnableMFADeviceCallCount() int {
	fake.enableMFADeviceMutex.RLock()
	defer fake.enableMFADeviceMutex.RUnlock()
	return len(fake.enableMFADeviceArgsForCall)
}

func (fake *FakeIAMAPI) EnableMFADeviceCalls(stub func(*iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error)) {
	fake.enableMFADeviceMutex.Lock()
	defer fake.enableMFADeviceMutex.Unlock()
	fake.EnableMFADeviceStub = stub
}

func (fake *FakeIAMAPI) EnableMFADeviceArgsForCall(i int) *iam.EnableMFADeviceInput {
	fake.enableMFADeviceMutex.RLock()
	defer fake.enableMFADeviceMutex.RUnlock()
	argsForCall := fake.enableMFADeviceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) EnableMFADeviceReturns(result1 *iam.EnableMFADeviceOutput, result2 error) {
	fake.enableMFADeviceMutex.Lock()
	defer fake.enableMFADeviceMutex.Unlock()
	fake.EnableMFADeviceStub = nil
	fake.enableMFADeviceReturns = struct {
		result1 *iam.EnableMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) EnableMFADeviceReturnsOnCall(i int, result1 *iam.EnableMFADeviceOutput, result2 error) {
	fake.enableMFADeviceMutex.Lock()
	defer fake.enableMFADeviceMutex.Unlock()
	fake.EnableMFADeviceStub = nil
	if fake.enableMFADeviceReturnsOnCall == nil {
		fake.enableMFADeviceReturnsOnCall = make(map[int]struct {
			result1 *iam.EnableMFADeviceOutput
			result2 error
		})
	}
	fake.enableMFADeviceReturnsOnCall[i] = struct {
		result1 *iam.EnableMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) EnableMFADeviceRequest(arg1 *iam.EnableMFADeviceInput) (*request.Request, *iam.EnableMFADeviceOutput) {
	fake.enableMFADeviceRequestMutex.Lock()
	ret, specificReturn := fake.enableMFADeviceRequestReturnsOnCall[len(fake.enableMFADeviceRequestArgsForCall)]
	fake.enableMFADeviceRequestArgsForCall = append(fake.enableMFADeviceRequestArgsForCall, struct {
		arg1 *iam.EnableMFADeviceInput
	}{arg1})
	fake.recordInvocation("EnableMFADeviceRequest", []interface{}{arg1})
	fake.enableMFADeviceRequestMutex.Unlock()
	if fake.EnableMFADeviceRequestStub != nil {
		return fake.EnableMFADeviceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableMFADeviceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) EnableMFADeviceRequestCallCount() int {
	fake.enableMFADeviceRequestMutex.RLock()
	defer fake.enableMFADeviceRequestMutex.RUnlock()
	return len(fake.enableMFADeviceRequestArgsForCall)
}

func (fake *FakeIAMAPI) EnableMFADeviceRequestCalls(stub func(*iam.EnableMFADeviceInput) (*request.Request, *iam.EnableMFADeviceOutput)) {
	fake.enableMFADeviceRequestMutex.Lock()
	defer fake.enableMFADeviceRequestMutex.Unlock()
	fake.EnableMFADeviceRequestStub = stub
}

func (fake *FakeIAMAPI) EnableMFADeviceRequestArgsForCall(i int) *iam.EnableMFADeviceInput {
	fake.enableMFADeviceRequestMutex.RLock()
	defer fake.enableMFADeviceRequestMutex.RUnlock()
	argsForCall := fake.enableMFADeviceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) EnableMFADeviceRequestReturns(result1 *request.Request, result2 *iam.EnableMFADeviceOutput) {
	fake.enableMFADeviceRequestMutex.Lock()
	defer fake.enableMFADeviceRequestMutex.Unlock()
	fake.EnableMFADeviceRequestStub = nil
	fake.enableMFADeviceRequestReturns = struct {
		result1 *request.Request
		result2 *iam.EnableMFADeviceOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) EnableMFADeviceRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.EnableMFADeviceOutput) {
	fake.enableMFADeviceRequestMutex.Lock()
	defer fake.enableMFADeviceRequestMutex.Unlock()
	fake.EnableMFADeviceRequestStub = nil
	if fake.enableMFADeviceRequestReturnsOnCall == nil {
		fake.enableMFADeviceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.EnableMFADeviceOutput
		})
	}
	fake.enableMFADeviceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.EnableMFADeviceOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) EnableMFADeviceWithContext(arg1 context.Context, arg2 *iam.EnableMFADeviceInput, arg3 ...request.Option) (*iam.EnableMFADeviceOutput, error) {
	fake.enableMFADeviceWithContextMutex.Lock()
	ret, specificReturn := fake.enableMFADeviceWithContextReturnsOnCall[len(fake.enableMFADeviceWithContextArgsForCall)]
	fake.enableMFADeviceWithContextArgsForCall = append(fake.enableMFADeviceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.EnableMFADeviceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("EnableMFADeviceWithContext", []interface{}{arg1, arg2, arg3})
	fake.enableMFADeviceWithContextMutex.Unlock()
	if fake.EnableMFADeviceWithContextStub != nil {
		return fake.EnableMFADeviceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableMFADeviceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) EnableMFADeviceWithContextCallCount() int {
	fake.enableMFADeviceWithContextMutex.RLock()
	defer fake.enableMFADeviceWithContextMutex.RUnlock()
	return len(fake.enableMFADeviceWithContextArgsForCall)
}

func (fake *FakeIAMAPI) EnableMFADeviceWithContextCalls(stub func(context.Context, *iam.EnableMFADeviceInput, ...request.Option) (*iam.EnableMFADeviceOutput, error)) {
	fake.enableMFADeviceWithContextMutex.Lock()
	defer fake.enableMFADeviceWithContextMutex.Unlock()
	fake.EnableMFADeviceWithContextStub = stub
}

func (fake *FakeIAMAPI) EnableMFADeviceWithContextArgsForCall(i int) (context.Context, *iam.EnableMFADeviceInput, []request.Option) {
	fake.enableMFADeviceWithContextMutex.RLock()
	defer fake.enableMFADeviceWithContextMutex.RUnlock()
	argsForCall := fake.enableMFADeviceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) EnableMFADeviceWithContextReturns(result1 *iam.EnableMFADeviceOutput, result2 error) {
	fake.enableMFADeviceWithContextMutex.Lock()
	defer fake.enableMFADeviceWithContextMutex.Unlock()
	fake.EnableMFADeviceWithContextStub = nil
	fake.enableMFADeviceWithContextReturns = struct {
		result1 *iam.EnableMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) EnableMFADeviceWithContextReturnsOnCall(i int, result1 *iam.EnableMFADeviceOutput, result2 error) {
	fake.enableMFADeviceWithContextMutex.Lock()
	defer fake.enableMFADeviceWithContextMutex.Unlock()
	fake.EnableMFADeviceWithContextStub = nil
	if fake.enableMFADeviceWithContextReturnsOnCall == nil {
		fake.enableMFADeviceWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.EnableMFADeviceOutput
			result2 error
		})
	}
	fake.enableMFADeviceWithContextReturnsOnCall[i] = struct {
		result1 *iam.EnableMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateCredentialReport(arg1 *iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error) {
	fake.generateCredentialReportMutex.Lock()
	ret, specificReturn := fake.generateCredentialReportReturnsOnCall[len(fake.generateCredentialReportArgsForCall)]
	fake.generateCredentialReportArgsForCall = append(fake.generateCredentialReportArgsForCall, struct {
		arg1 *iam.GenerateCredentialReportInput
	}{arg1})
	fake.recordInvocation("GenerateCredentialReport", []interface{}{arg1})
	fake.generateCredentialReportMutex.Unlock()
	if fake.GenerateCredentialReportStub != nil {
		return fake.GenerateCredentialReportStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generateCredentialReportReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GenerateCredentialReportCallCount() int {
	fake.generateCredentialReportMutex.RLock()
	defer fake.generateCredentialReportMutex.RUnlock()
	return len(fake.generateCredentialReportArgsForCall)
}

func (fake *FakeIAMAPI) GenerateCredentialReportCalls(stub func(*iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error)) {
	fake.generateCredentialReportMutex.Lock()
	defer fake.generateCredentialReportMutex.Unlock()
	fake.GenerateCredentialReportStub = stub
}

func (fake *FakeIAMAPI) GenerateCredentialReportArgsForCall(i int) *iam.GenerateCredentialReportInput {
	fake.generateCredentialReportMutex.RLock()
	defer fake.generateCredentialReportMutex.RUnlock()
	argsForCall := fake.generateCredentialReportArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GenerateCredentialReportReturns(result1 *iam.GenerateCredentialReportOutput, result2 error) {
	fake.generateCredentialReportMutex.Lock()
	defer fake.generateCredentialReportMutex.Unlock()
	fake.GenerateCredentialReportStub = nil
	fake.generateCredentialReportReturns = struct {
		result1 *iam.GenerateCredentialReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateCredentialReportReturnsOnCall(i int, result1 *iam.GenerateCredentialReportOutput, result2 error) {
	fake.generateCredentialReportMutex.Lock()
	defer fake.generateCredentialReportMutex.Unlock()
	fake.GenerateCredentialReportStub = nil
	if fake.generateCredentialReportReturnsOnCall == nil {
		fake.generateCredentialReportReturnsOnCall = make(map[int]struct {
			result1 *iam.GenerateCredentialReportOutput
			result2 error
		})
	}
	fake.generateCredentialReportReturnsOnCall[i] = struct {
		result1 *iam.GenerateCredentialReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateCredentialReportRequest(arg1 *iam.GenerateCredentialReportInput) (*request.Request, *iam.GenerateCredentialReportOutput) {
	fake.generateCredentialReportRequestMutex.Lock()
	ret, specificReturn := fake.generateCredentialReportRequestReturnsOnCall[len(fake.generateCredentialReportRequestArgsForCall)]
	fake.generateCredentialReportRequestArgsForCall = append(fake.generateCredentialReportRequestArgsForCall, struct {
		arg1 *iam.GenerateCredentialReportInput
	}{arg1})
	fake.recordInvocation("GenerateCredentialReportRequest", []interface{}{arg1})
	fake.generateCredentialReportRequestMutex.Unlock()
	if fake.GenerateCredentialReportRequestStub != nil {
		return fake.GenerateCredentialReportRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generateCredentialReportRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GenerateCredentialReportRequestCallCount() int {
	fake.generateCredentialReportRequestMutex.RLock()
	defer fake.generateCredentialReportRequestMutex.RUnlock()
	return len(fake.generateCredentialReportRequestArgsForCall)
}

func (fake *FakeIAMAPI) GenerateCredentialReportRequestCalls(stub func(*iam.GenerateCredentialReportInput) (*request.Request, *iam.GenerateCredentialReportOutput)) {
	fake.generateCredentialReportRequestMutex.Lock()
	defer fake.generateCredentialReportRequestMutex.Unlock()
	fake.GenerateCredentialReportRequestStub = stub
}

func (fake *FakeIAMAPI) GenerateCredentialReportRequestArgsForCall(i int) *iam.GenerateCredentialReportInput {
	fake.generateCredentialReportRequestMutex.RLock()
	defer fake.generateCredentialReportRequestMutex.RUnlock()
	argsForCall := fake.generateCredentialReportRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GenerateCredentialReportRequestReturns(result1 *request.Request, result2 *iam.GenerateCredentialReportOutput) {
	fake.generateCredentialReportRequestMutex.Lock()
	defer fake.generateCredentialReportRequestMutex.Unlock()
	fake.GenerateCredentialReportRequestStub = nil
	fake.generateCredentialReportRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GenerateCredentialReportOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateCredentialReportRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GenerateCredentialReportOutput) {
	fake.generateCredentialReportRequestMutex.Lock()
	defer fake.generateCredentialReportRequestMutex.Unlock()
	fake.GenerateCredentialReportRequestStub = nil
	if fake.generateCredentialReportRequestReturnsOnCall == nil {
		fake.generateCredentialReportRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GenerateCredentialReportOutput
		})
	}
	fake.generateCredentialReportRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GenerateCredentialReportOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateCredentialReportWithContext(arg1 context.Context, arg2 *iam.GenerateCredentialReportInput, arg3 ...request.Option) (*iam.GenerateCredentialReportOutput, error) {
	fake.generateCredentialReportWithContextMutex.Lock()
	ret, specificReturn := fake.generateCredentialReportWithContextReturnsOnCall[len(fake.generateCredentialReportWithContextArgsForCall)]
	fake.generateCredentialReportWithContextArgsForCall = append(fake.generateCredentialReportWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GenerateCredentialReportInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GenerateCredentialReportWithContext", []interface{}{arg1, arg2, arg3})
	fake.generateCredentialReportWithContextMutex.Unlock()
	if fake.GenerateCredentialReportWithContextStub != nil {
		return fake.GenerateCredentialReportWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generateCredentialReportWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GenerateCredentialReportWithContextCallCount() int {
	fake.generateCredentialReportWithContextMutex.RLock()
	defer fake.generateCredentialReportWithContextMutex.RUnlock()
	return len(fake.generateCredentialReportWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GenerateCredentialReportWithContextCalls(stub func(context.Context, *iam.GenerateCredentialReportInput, ...request.Option) (*iam.GenerateCredentialReportOutput, error)) {
	fake.generateCredentialReportWithContextMutex.Lock()
	defer fake.generateCredentialReportWithContextMutex.Unlock()
	fake.GenerateCredentialReportWithContextStub = stub
}

func (fake *FakeIAMAPI) GenerateCredentialReportWithContextArgsForCall(i int) (context.Context, *iam.GenerateCredentialReportInput, []request.Option) {
	fake.generateCredentialReportWithContextMutex.RLock()
	defer fake.generateCredentialReportWithContextMutex.RUnlock()
	argsForCall := fake.generateCredentialReportWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GenerateCredentialReportWithContextReturns(result1 *iam.GenerateCredentialReportOutput, result2 error) {
	fake.generateCredentialReportWithContextMutex.Lock()
	defer fake.generateCredentialReportWithContextMutex.Unlock()
	fake.GenerateCredentialReportWithContextStub = nil
	fake.generateCredentialReportWithContextReturns = struct {
		result1 *iam.GenerateCredentialReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateCredentialReportWithContextReturnsOnCall(i int, result1 *iam.GenerateCredentialReportOutput, result2 error) {
	fake.generateCredentialReportWithContextMutex.Lock()
	defer fake.generateCredentialReportWithContextMutex.Unlock()
	fake.GenerateCredentialReportWithContextStub = nil
	if fake.generateCredentialReportWithContextReturnsOnCall == nil {
		fake.generateCredentialReportWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GenerateCredentialReportOutput
			result2 error
		})
	}
	fake.generateCredentialReportWithContextReturnsOnCall[i] = struct {
		result1 *iam.GenerateCredentialReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReport(arg1 *iam.GenerateOrganizationsAccessReportInput) (*iam.GenerateOrganizationsAccessReportOutput, error) {
	fake.generateOrganizationsAccessReportMutex.Lock()
	ret, specificReturn := fake.generateOrganizationsAccessReportReturnsOnCall[len(fake.generateOrganizationsAccessReportArgsForCall)]
	fake.generateOrganizationsAccessReportArgsForCall = append(fake.generateOrganizationsAccessReportArgsForCall, struct {
		arg1 *iam.GenerateOrganizationsAccessReportInput
	}{arg1})
	fake.recordInvocation("GenerateOrganizationsAccessReport", []interface{}{arg1})
	fake.generateOrganizationsAccessReportMutex.Unlock()
	if fake.GenerateOrganizationsAccessReportStub != nil {
		return fake.GenerateOrganizationsAccessReportStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generateOrganizationsAccessReportReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReportCallCount() int {
	fake.generateOrganizationsAccessReportMutex.RLock()
	defer fake.generateOrganizationsAccessReportMutex.RUnlock()
	return len(fake.generateOrganizationsAccessReportArgsForCall)
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReportCalls(stub func(*iam.GenerateOrganizationsAccessReportInput) (*iam.GenerateOrganizationsAccessReportOutput, error)) {
	fake.generateOrganizationsAccessReportMutex.Lock()
	defer fake.generateOrganizationsAccessReportMutex.Unlock()
	fake.GenerateOrganizationsAccessReportStub = stub
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReportArgsForCall(i int) *iam.GenerateOrganizationsAccessReportInput {
	fake.generateOrganizationsAccessReportMutex.RLock()
	defer fake.generateOrganizationsAccessReportMutex.RUnlock()
	argsForCall := fake.generateOrganizationsAccessReportArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReportReturns(result1 *iam.GenerateOrganizationsAccessReportOutput, result2 error) {
	fake.generateOrganizationsAccessReportMutex.Lock()
	defer fake.generateOrganizationsAccessReportMutex.Unlock()
	fake.GenerateOrganizationsAccessReportStub = nil
	fake.generateOrganizationsAccessReportReturns = struct {
		result1 *iam.GenerateOrganizationsAccessReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReportReturnsOnCall(i int, result1 *iam.GenerateOrganizationsAccessReportOutput, result2 error) {
	fake.generateOrganizationsAccessReportMutex.Lock()
	defer fake.generateOrganizationsAccessReportMutex.Unlock()
	fake.GenerateOrganizationsAccessReportStub = nil
	if fake.generateOrganizationsAccessReportReturnsOnCall == nil {
		fake.generateOrganizationsAccessReportReturnsOnCall = make(map[int]struct {
			result1 *iam.GenerateOrganizationsAccessReportOutput
			result2 error
		})
	}
	fake.generateOrganizationsAccessReportReturnsOnCall[i] = struct {
		result1 *iam.GenerateOrganizationsAccessReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReportRequest(arg1 *iam.GenerateOrganizationsAccessReportInput) (*request.Request, *iam.GenerateOrganizationsAccessReportOutput) {
	fake.generateOrganizationsAccessReportRequestMutex.Lock()
	ret, specificReturn := fake.generateOrganizationsAccessReportRequestReturnsOnCall[len(fake.generateOrganizationsAccessReportRequestArgsForCall)]
	fake.generateOrganizationsAccessReportRequestArgsForCall = append(fake.generateOrganizationsAccessReportRequestArgsForCall, struct {
		arg1 *iam.GenerateOrganizationsAccessReportInput
	}{arg1})
	fake.recordInvocation("GenerateOrganizationsAccessReportRequest", []interface{}{arg1})
	fake.generateOrganizationsAccessReportRequestMutex.Unlock()
	if fake.GenerateOrganizationsAccessReportRequestStub != nil {
		return fake.GenerateOrganizationsAccessReportRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generateOrganizationsAccessReportRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReportRequestCallCount() int {
	fake.generateOrganizationsAccessReportRequestMutex.RLock()
	defer fake.generateOrganizationsAccessReportRequestMutex.RUnlock()
	return len(fake.generateOrganizationsAccessReportRequestArgsForCall)
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReportRequestCalls(stub func(*iam.GenerateOrganizationsAccessReportInput) (*request.Request, *iam.GenerateOrganizationsAccessReportOutput)) {
	fake.generateOrganizationsAccessReportRequestMutex.Lock()
	defer fake.generateOrganizationsAccessReportRequestMutex.Unlock()
	fake.GenerateOrganizationsAccessReportRequestStub = stub
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReportRequestArgsForCall(i int) *iam.GenerateOrganizationsAccessReportInput {
	fake.generateOrganizationsAccessReportRequestMutex.RLock()
	defer fake.generateOrganizationsAccessReportRequestMutex.RUnlock()
	argsForCall := fake.generateOrganizationsAccessReportRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReportRequestReturns(result1 *request.Request, result2 *iam.GenerateOrganizationsAccessReportOutput) {
	fake.generateOrganizationsAccessReportRequestMutex.Lock()
	defer fake.generateOrganizationsAccessReportRequestMutex.Unlock()
	fake.GenerateOrganizationsAccessReportRequestStub = nil
	fake.generateOrganizationsAccessReportRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GenerateOrganizationsAccessReportOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReportRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GenerateOrganizationsAccessReportOutput) {
	fake.generateOrganizationsAccessReportRequestMutex.Lock()
	defer fake.generateOrganizationsAccessReportRequestMutex.Unlock()
	fake.GenerateOrganizationsAccessReportRequestStub = nil
	if fake.generateOrganizationsAccessReportRequestReturnsOnCall == nil {
		fake.generateOrganizationsAccessReportRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GenerateOrganizationsAccessReportOutput
		})
	}
	fake.generateOrganizationsAccessReportRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GenerateOrganizationsAccessReportOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReportWithContext(arg1 context.Context, arg2 *iam.GenerateOrganizationsAccessReportInput, arg3 ...request.Option) (*iam.GenerateOrganizationsAccessReportOutput, error) {
	fake.generateOrganizationsAccessReportWithContextMutex.Lock()
	ret, specificReturn := fake.generateOrganizationsAccessReportWithContextReturnsOnCall[len(fake.generateOrganizationsAccessReportWithContextArgsForCall)]
	fake.generateOrganizationsAccessReportWithContextArgsForCall = append(fake.generateOrganizationsAccessReportWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GenerateOrganizationsAccessReportInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GenerateOrganizationsAccessReportWithContext", []interface{}{arg1, arg2, arg3})
	fake.generateOrganizationsAccessReportWithContextMutex.Unlock()
	if fake.GenerateOrganizationsAccessReportWithContextStub != nil {
		return fake.GenerateOrganizationsAccessReportWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generateOrganizationsAccessReportWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReportWithContextCallCount() int {
	fake.generateOrganizationsAccessReportWithContextMutex.RLock()
	defer fake.generateOrganizationsAccessReportWithContextMutex.RUnlock()
	return len(fake.generateOrganizationsAccessReportWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReportWithContextCalls(stub func(context.Context, *iam.GenerateOrganizationsAccessReportInput, ...request.Option) (*iam.GenerateOrganizationsAccessReportOutput, error)) {
	fake.generateOrganizationsAccessReportWithContextMutex.Lock()
	defer fake.generateOrganizationsAccessReportWithContextMutex.Unlock()
	fake.GenerateOrganizationsAccessReportWithContextStub = stub
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReportWithContextArgsForCall(i int) (context.Context, *iam.GenerateOrganizationsAccessReportInput, []request.Option) {
	fake.generateOrganizationsAccessReportWithContextMutex.RLock()
	defer fake.generateOrganizationsAccessReportWithContextMutex.RUnlock()
	argsForCall := fake.generateOrganizationsAccessReportWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReportWithContextReturns(result1 *iam.GenerateOrganizationsAccessReportOutput, result2 error) {
	fake.generateOrganizationsAccessReportWithContextMutex.Lock()
	defer fake.generateOrganizationsAccessReportWithContextMutex.Unlock()
	fake.GenerateOrganizationsAccessReportWithContextStub = nil
	fake.generateOrganizationsAccessReportWithContextReturns = struct {
		result1 *iam.GenerateOrganizationsAccessReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateOrganizationsAccessReportWithContextReturnsOnCall(i int, result1 *iam.GenerateOrganizationsAccessReportOutput, result2 error) {
	fake.generateOrganizationsAccessReportWithContextMutex.Lock()
	defer fake.generateOrganizationsAccessReportWithContextMutex.Unlock()
	fake.GenerateOrganizationsAccessReportWithContextStub = nil
	if fake.generateOrganizationsAccessReportWithContextReturnsOnCall == nil {
		fake.generateOrganizationsAccessReportWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GenerateOrganizationsAccessReportOutput
			result2 error
		})
	}
	fake.generateOrganizationsAccessReportWithContextReturnsOnCall[i] = struct {
		result1 *iam.GenerateOrganizationsAccessReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetails(arg1 *iam.GenerateServiceLastAccessedDetailsInput) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
	fake.generateServiceLastAccessedDetailsMutex.Lock()
	ret, specificReturn := fake.generateServiceLastAccessedDetailsReturnsOnCall[len(fake.generateServiceLastAccessedDetailsArgsForCall)]
	fake.generateServiceLastAccessedDetailsArgsForCall = append(fake.generateServiceLastAccessedDetailsArgsForCall, struct {
		arg1 *iam.GenerateServiceLastAccessedDetailsInput
	}{arg1})
	fake.recordInvocation("GenerateServiceLastAccessedDetails", []interface{}{arg1})
	fake.generateServiceLastAccessedDetailsMutex.Unlock()
	if fake.GenerateServiceLastAccessedDetailsStub != nil {
		return fake.GenerateServiceLastAccessedDetailsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generateServiceLastAccessedDetailsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetailsCallCount() int {
	fake.generateServiceLastAccessedDetailsMutex.RLock()
	defer fake.generateServiceLastAccessedDetailsMutex.RUnlock()
	return len(fake.generateServiceLastAccessedDetailsArgsForCall)
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetailsCalls(stub func(*iam.GenerateServiceLastAccessedDetailsInput) (*iam.GenerateServiceLastAccessedDetailsOutput, error)) {
	fake.generateServiceLastAccessedDetailsMutex.Lock()
	defer fake.generateServiceLastAccessedDetailsMutex.Unlock()
	fake.GenerateServiceLastAccessedDetailsStub = stub
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetailsArgsForCall(i int) *iam.GenerateServiceLastAccessedDetailsInput {
	fake.generateServiceLastAccessedDetailsMutex.RLock()
	defer fake.generateServiceLastAccessedDetailsMutex.RUnlock()
	argsForCall := fake.generateServiceLastAccessedDetailsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetailsReturns(result1 *iam.GenerateServiceLastAccessedDetailsOutput, result2 error) {
	fake.generateServiceLastAccessedDetailsMutex.Lock()
	defer fake.generateServiceLastAccessedDetailsMutex.Unlock()
	fake.GenerateServiceLastAccessedDetailsStub = nil
	fake.generateServiceLastAccessedDetailsReturns = struct {
		result1 *iam.GenerateServiceLastAccessedDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetailsReturnsOnCall(i int, result1 *iam.GenerateServiceLastAccessedDetailsOutput, result2 error) {
	fake.generateServiceLastAccessedDetailsMutex.Lock()
	defer fake.generateServiceLastAccessedDetailsMutex.Unlock()
	fake.GenerateServiceLastAccessedDetailsStub = nil
	if fake.generateServiceLastAccessedDetailsReturnsOnCall == nil {
		fake.generateServiceLastAccessedDetailsReturnsOnCall = make(map[int]struct {
			result1 *iam.GenerateServiceLastAccessedDetailsOutput
			result2 error
		})
	}
	fake.generateServiceLastAccessedDetailsReturnsOnCall[i] = struct {
		result1 *iam.GenerateServiceLastAccessedDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetailsRequest(arg1 *iam.GenerateServiceLastAccessedDetailsInput) (*request.Request, *iam.GenerateServiceLastAccessedDetailsOutput) {
	fake.generateServiceLastAccessedDetailsRequestMutex.Lock()
	ret, specificReturn := fake.generateServiceLastAccessedDetailsRequestReturnsOnCall[len(fake.generateServiceLastAccessedDetailsRequestArgsForCall)]
	fake.generateServiceLastAccessedDetailsRequestArgsForCall = append(fake.generateServiceLastAccessedDetailsRequestArgsForCall, struct {
		arg1 *iam.GenerateServiceLastAccessedDetailsInput
	}{arg1})
	fake.recordInvocation("GenerateServiceLastAccessedDetailsRequest", []interface{}{arg1})
	fake.generateServiceLastAccessedDetailsRequestMutex.Unlock()
	if fake.GenerateServiceLastAccessedDetailsRequestStub != nil {
		return fake.GenerateServiceLastAccessedDetailsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generateServiceLastAccessedDetailsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetailsRequestCallCount() int {
	fake.generateServiceLastAccessedDetailsRequestMutex.RLock()
	defer fake.generateServiceLastAccessedDetailsRequestMutex.RUnlock()
	return len(fake.generateServiceLastAccessedDetailsRequestArgsForCall)
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetailsRequestCalls(stub func(*iam.GenerateServiceLastAccessedDetailsInput) (*request.Request, *iam.GenerateServiceLastAccessedDetailsOutput)) {
	fake.generateServiceLastAccessedDetailsRequestMutex.Lock()
	defer fake.generateServiceLastAccessedDetailsRequestMutex.Unlock()
	fake.GenerateServiceLastAccessedDetailsRequestStub = stub
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetailsRequestArgsForCall(i int) *iam.GenerateServiceLastAccessedDetailsInput {
	fake.generateServiceLastAccessedDetailsRequestMutex.RLock()
	defer fake.generateServiceLastAccessedDetailsRequestMutex.RUnlock()
	argsForCall := fake.generateServiceLastAccessedDetailsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetailsRequestReturns(result1 *request.Request, result2 *iam.GenerateServiceLastAccessedDetailsOutput) {
	fake.generateServiceLastAccessedDetailsRequestMutex.Lock()
	defer fake.generateServiceLastAccessedDetailsRequestMutex.Unlock()
	fake.GenerateServiceLastAccessedDetailsRequestStub = nil
	fake.generateServiceLastAccessedDetailsRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GenerateServiceLastAccessedDetailsOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetailsRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GenerateServiceLastAccessedDetailsOutput) {
	fake.generateServiceLastAccessedDetailsRequestMutex.Lock()
	defer fake.generateServiceLastAccessedDetailsRequestMutex.Unlock()
	fake.GenerateServiceLastAccessedDetailsRequestStub = nil
	if fake.generateServiceLastAccessedDetailsRequestReturnsOnCall == nil {
		fake.generateServiceLastAccessedDetailsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GenerateServiceLastAccessedDetailsOutput
		})
	}
	fake.generateServiceLastAccessedDetailsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GenerateServiceLastAccessedDetailsOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetailsWithContext(arg1 context.Context, arg2 *iam.GenerateServiceLastAccessedDetailsInput, arg3 ...request.Option) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
	fake.generateServiceLastAccessedDetailsWithContextMutex.Lock()
	ret, specificReturn := fake.generateServiceLastAccessedDetailsWithContextReturnsOnCall[len(fake.generateServiceLastAccessedDetailsWithContextArgsForCall)]
	fake.generateServiceLastAccessedDetailsWithContextArgsForCall = append(fake.generateServiceLastAccessedDetailsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GenerateServiceLastAccessedDetailsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GenerateServiceLastAccessedDetailsWithContext", []interface{}{arg1, arg2, arg3})
	fake.generateServiceLastAccessedDetailsWithContextMutex.Unlock()
	if fake.GenerateServiceLastAccessedDetailsWithContextStub != nil {
		return fake.GenerateServiceLastAccessedDetailsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generateServiceLastAccessedDetailsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetailsWithContextCallCount() int {
	fake.generateServiceLastAccessedDetailsWithContextMutex.RLock()
	defer fake.generateServiceLastAccessedDetailsWithContextMutex.RUnlock()
	return len(fake.generateServiceLastAccessedDetailsWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetailsWithContextCalls(stub func(context.Context, *iam.GenerateServiceLastAccessedDetailsInput, ...request.Option) (*iam.GenerateServiceLastAccessedDetailsOutput, error)) {
	fake.generateServiceLastAccessedDetailsWithContextMutex.Lock()
	defer fake.generateServiceLastAccessedDetailsWithContextMutex.Unlock()
	fake.GenerateServiceLastAccessedDetailsWithContextStub = stub
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetailsWithContextArgsForCall(i int) (context.Context, *iam.GenerateServiceLastAccessedDetailsInput, []request.Option) {
	fake.generateServiceLastAccessedDetailsWithContextMutex.RLock()
	defer fake.generateServiceLastAccessedDetailsWithContextMutex.RUnlock()
	argsForCall := fake.generateServiceLastAccessedDetailsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetailsWithContextReturns(result1 *iam.GenerateServiceLastAccessedDetailsOutput, result2 error) {
	fake.generateServiceLastAccessedDetailsWithContextMutex.Lock()
	defer fake.generateServiceLastAccessedDetailsWithContextMutex.Unlock()
	fake.GenerateServiceLastAccessedDetailsWithContextStub = nil
	fake.generateServiceLastAccessedDetailsWithContextReturns = struct {
		result1 *iam.GenerateServiceLastAccessedDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GenerateServiceLastAccessedDetailsWithContextReturnsOnCall(i int, result1 *iam.GenerateServiceLastAccessedDetailsOutput, result2 error) {
	fake.generateServiceLastAccessedDetailsWithContextMutex.Lock()
	defer fake.generateServiceLastAccessedDetailsWithContextMutex.Unlock()
	fake.GenerateServiceLastAccessedDetailsWithContextStub = nil
	if fake.generateServiceLastAccessedDetailsWithContextReturnsOnCall == nil {
		fake.generateServiceLastAccessedDetailsWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GenerateServiceLastAccessedDetailsOutput
			result2 error
		})
	}
	fake.generateServiceLastAccessedDetailsWithContextReturnsOnCall[i] = struct {
		result1 *iam.GenerateServiceLastAccessedDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsed(arg1 *iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error) {
	fake.getAccessKeyLastUsedMutex.Lock()
	ret, specificReturn := fake.getAccessKeyLastUsedReturnsOnCall[len(fake.getAccessKeyLastUsedArgsForCall)]
	fake.getAccessKeyLastUsedArgsForCall = append(fake.getAccessKeyLastUsedArgsForCall, struct {
		arg1 *iam.GetAccessKeyLastUsedInput
	}{arg1})
	fake.recordInvocation("GetAccessKeyLastUsed", []interface{}{arg1})
	fake.getAccessKeyLastUsedMutex.Unlock()
	if fake.GetAccessKeyLastUsedStub != nil {
		return fake.GetAccessKeyLastUsedStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAccessKeyLastUsedReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsedCallCount() int {
	fake.getAccessKeyLastUsedMutex.RLock()
	defer fake.getAccessKeyLastUsedMutex.RUnlock()
	return len(fake.getAccessKeyLastUsedArgsForCall)
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsedCalls(stub func(*iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error)) {
	fake.getAccessKeyLastUsedMutex.Lock()
	defer fake.getAccessKeyLastUsedMutex.Unlock()
	fake.GetAccessKeyLastUsedStub = stub
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsedArgsForCall(i int) *iam.GetAccessKeyLastUsedInput {
	fake.getAccessKeyLastUsedMutex.RLock()
	defer fake.getAccessKeyLastUsedMutex.RUnlock()
	argsForCall := fake.getAccessKeyLastUsedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsedReturns(result1 *iam.GetAccessKeyLastUsedOutput, result2 error) {
	fake.getAccessKeyLastUsedMutex.Lock()
	defer fake.getAccessKeyLastUsedMutex.Unlock()
	fake.GetAccessKeyLastUsedStub = nil
	fake.getAccessKeyLastUsedReturns = struct {
		result1 *iam.GetAccessKeyLastUsedOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsedReturnsOnCall(i int, result1 *iam.GetAccessKeyLastUsedOutput, result2 error) {
	fake.getAccessKeyLastUsedMutex.Lock()
	defer fake.getAccessKeyLastUsedMutex.Unlock()
	fake.GetAccessKeyLastUsedStub = nil
	if fake.getAccessKeyLastUsedReturnsOnCall == nil {
		fake.getAccessKeyLastUsedReturnsOnCall = make(map[int]struct {
			result1 *iam.GetAccessKeyLastUsedOutput
			result2 error
		})
	}
	fake.getAccessKeyLastUsedReturnsOnCall[i] = struct {
		result1 *iam.GetAccessKeyLastUsedOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsedRequest(arg1 *iam.GetAccessKeyLastUsedInput) (*request.Request, *iam.GetAccessKeyLastUsedOutput) {
	fake.getAccessKeyLastUsedRequestMutex.Lock()
	ret, specificReturn := fake.getAccessKeyLastUsedRequestReturnsOnCall[len(fake.getAccessKeyLastUsedRequestArgsForCall)]
	fake.getAccessKeyLastUsedRequestArgsForCall = append(fake.getAccessKeyLastUsedRequestArgsForCall, struct {
		arg1 *iam.GetAccessKeyLastUsedInput
	}{arg1})
	fake.recordInvocation("GetAccessKeyLastUsedRequest", []interface{}{arg1})
	fake.getAccessKeyLastUsedRequestMutex.Unlock()
	if fake.GetAccessKeyLastUsedRequestStub != nil {
		return fake.GetAccessKeyLastUsedRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAccessKeyLastUsedRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsedRequestCallCount() int {
	fake.getAccessKeyLastUsedRequestMutex.RLock()
	defer fake.getAccessKeyLastUsedRequestMutex.RUnlock()
	return len(fake.getAccessKeyLastUsedRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsedRequestCalls(stub func(*iam.GetAccessKeyLastUsedInput) (*request.Request, *iam.GetAccessKeyLastUsedOutput)) {
	fake.getAccessKeyLastUsedRequestMutex.Lock()
	defer fake.getAccessKeyLastUsedRequestMutex.Unlock()
	fake.GetAccessKeyLastUsedRequestStub = stub
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsedRequestArgsForCall(i int) *iam.GetAccessKeyLastUsedInput {
	fake.getAccessKeyLastUsedRequestMutex.RLock()
	defer fake.getAccessKeyLastUsedRequestMutex.RUnlock()
	argsForCall := fake.getAccessKeyLastUsedRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsedRequestReturns(result1 *request.Request, result2 *iam.GetAccessKeyLastUsedOutput) {
	fake.getAccessKeyLastUsedRequestMutex.Lock()
	defer fake.getAccessKeyLastUsedRequestMutex.Unlock()
	fake.GetAccessKeyLastUsedRequestStub = nil
	fake.getAccessKeyLastUsedRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetAccessKeyLastUsedOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsedRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetAccessKeyLastUsedOutput) {
	fake.getAccessKeyLastUsedRequestMutex.Lock()
	defer fake.getAccessKeyLastUsedRequestMutex.Unlock()
	fake.GetAccessKeyLastUsedRequestStub = nil
	if fake.getAccessKeyLastUsedRequestReturnsOnCall == nil {
		fake.getAccessKeyLastUsedRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetAccessKeyLastUsedOutput
		})
	}
	fake.getAccessKeyLastUsedRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetAccessKeyLastUsedOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsedWithContext(arg1 context.Context, arg2 *iam.GetAccessKeyLastUsedInput, arg3 ...request.Option) (*iam.GetAccessKeyLastUsedOutput, error) {
	fake.getAccessKeyLastUsedWithContextMutex.Lock()
	ret, specificReturn := fake.getAccessKeyLastUsedWithContextReturnsOnCall[len(fake.getAccessKeyLastUsedWithContextArgsForCall)]
	fake.getAccessKeyLastUsedWithContextArgsForCall = append(fake.getAccessKeyLastUsedWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetAccessKeyLastUsedInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetAccessKeyLastUsedWithContext", []interface{}{arg1, arg2, arg3})
	fake.getAccessKeyLastUsedWithContextMutex.Unlock()
	if fake.GetAccessKeyLastUsedWithContextStub != nil {
		return fake.GetAccessKeyLastUsedWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAccessKeyLastUsedWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsedWithContextCallCount() int {
	fake.getAccessKeyLastUsedWithContextMutex.RLock()
	defer fake.getAccessKeyLastUsedWithContextMutex.RUnlock()
	return len(fake.getAccessKeyLastUsedWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsedWithContextCalls(stub func(context.Context, *iam.GetAccessKeyLastUsedInput, ...request.Option) (*iam.GetAccessKeyLastUsedOutput, error)) {
	fake.getAccessKeyLastUsedWithContextMutex.Lock()
	defer fake.getAccessKeyLastUsedWithContextMutex.Unlock()
	fake.GetAccessKeyLastUsedWithContextStub = stub
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsedWithContextArgsForCall(i int) (context.Context, *iam.GetAccessKeyLastUsedInput, []request.Option) {
	fake.getAccessKeyLastUsedWithContextMutex.RLock()
	defer fake.getAccessKeyLastUsedWithContextMutex.RUnlock()
	argsForCall := fake.getAccessKeyLastUsedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsedWithContextReturns(result1 *iam.GetAccessKeyLastUsedOutput, result2 error) {
	fake.getAccessKeyLastUsedWithContextMutex.Lock()
	defer fake.getAccessKeyLastUsedWithContextMutex.Unlock()
	fake.GetAccessKeyLastUsedWithContextStub = nil
	fake.getAccessKeyLastUsedWithContextReturns = struct {
		result1 *iam.GetAccessKeyLastUsedOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccessKeyLastUsedWithContextReturnsOnCall(i int, result1 *iam.GetAccessKeyLastUsedOutput, result2 error) {
	fake.getAccessKeyLastUsedWithContextMutex.Lock()
	defer fake.getAccessKeyLastUsedWithContextMutex.Unlock()
	fake.GetAccessKeyLastUsedWithContextStub = nil
	if fake.getAccessKeyLastUsedWithContextReturnsOnCall == nil {
		fake.getAccessKeyLastUsedWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetAccessKeyLastUsedOutput
			result2 error
		})
	}
	fake.getAccessKeyLastUsedWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetAccessKeyLastUsedOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetails(arg1 *iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	fake.getAccountAuthorizationDetailsMutex.Lock()
	ret, specificReturn := fake.getAccountAuthorizationDetailsReturnsOnCall[len(fake.getAccountAuthorizationDetailsArgsForCall)]
	fake.getAccountAuthorizationDetailsArgsForCall = append(fake.getAccountAuthorizationDetailsArgsForCall, struct {
		arg1 *iam.GetAccountAuthorizationDetailsInput
	}{arg1})
	fake.recordInvocation("GetAccountAuthorizationDetails", []interface{}{arg1})
	fake.getAccountAuthorizationDetailsMutex.Unlock()
	if fake.GetAccountAuthorizationDetailsStub != nil {
		return fake.GetAccountAuthorizationDetailsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAccountAuthorizationDetailsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsCallCount() int {
	fake.getAccountAuthorizationDetailsMutex.RLock()
	defer fake.getAccountAuthorizationDetailsMutex.RUnlock()
	return len(fake.getAccountAuthorizationDetailsArgsForCall)
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsCalls(stub func(*iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error)) {
	fake.getAccountAuthorizationDetailsMutex.Lock()
	defer fake.getAccountAuthorizationDetailsMutex.Unlock()
	fake.GetAccountAuthorizationDetailsStub = stub
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsArgsForCall(i int) *iam.GetAccountAuthorizationDetailsInput {
	fake.getAccountAuthorizationDetailsMutex.RLock()
	defer fake.getAccountAuthorizationDetailsMutex.RUnlock()
	argsForCall := fake.getAccountAuthorizationDetailsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsReturns(result1 *iam.GetAccountAuthorizationDetailsOutput, result2 error) {
	fake.getAccountAuthorizationDetailsMutex.Lock()
	defer fake.getAccountAuthorizationDetailsMutex.Unlock()
	fake.GetAccountAuthorizationDetailsStub = nil
	fake.getAccountAuthorizationDetailsReturns = struct {
		result1 *iam.GetAccountAuthorizationDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsReturnsOnCall(i int, result1 *iam.GetAccountAuthorizationDetailsOutput, result2 error) {
	fake.getAccountAuthorizationDetailsMutex.Lock()
	defer fake.getAccountAuthorizationDetailsMutex.Unlock()
	fake.GetAccountAuthorizationDetailsStub = nil
	if fake.getAccountAuthorizationDetailsReturnsOnCall == nil {
		fake.getAccountAuthorizationDetailsReturnsOnCall = make(map[int]struct {
			result1 *iam.GetAccountAuthorizationDetailsOutput
			result2 error
		})
	}
	fake.getAccountAuthorizationDetailsReturnsOnCall[i] = struct {
		result1 *iam.GetAccountAuthorizationDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsPages(arg1 *iam.GetAccountAuthorizationDetailsInput, arg2 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool) error {
	fake.getAccountAuthorizationDetailsPagesMutex.Lock()
	ret, specificReturn := fake.getAccountAuthorizationDetailsPagesReturnsOnCall[len(fake.getAccountAuthorizationDetailsPagesArgsForCall)]
	fake.getAccountAuthorizationDetailsPagesArgsForCall = append(fake.getAccountAuthorizationDetailsPagesArgsForCall, struct {
		arg1 *iam.GetAccountAuthorizationDetailsInput
		arg2 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("GetAccountAuthorizationDetailsPages", []interface{}{arg1, arg2})
	fake.getAccountAuthorizationDetailsPagesMutex.Unlock()
	if fake.GetAccountAuthorizationDetailsPagesStub != nil {
		return fake.GetAccountAuthorizationDetailsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getAccountAuthorizationDetailsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsPagesCallCount() int {
	fake.getAccountAuthorizationDetailsPagesMutex.RLock()
	defer fake.getAccountAuthorizationDetailsPagesMutex.RUnlock()
	return len(fake.getAccountAuthorizationDetailsPagesArgsForCall)
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsPagesCalls(stub func(*iam.GetAccountAuthorizationDetailsInput, func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool) error) {
	fake.getAccountAuthorizationDetailsPagesMutex.Lock()
	defer fake.getAccountAuthorizationDetailsPagesMutex.Unlock()
	fake.GetAccountAuthorizationDetailsPagesStub = stub
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsPagesArgsForCall(i int) (*iam.GetAccountAuthorizationDetailsInput, func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool) {
	fake.getAccountAuthorizationDetailsPagesMutex.RLock()
	defer fake.getAccountAuthorizationDetailsPagesMutex.RUnlock()
	argsForCall := fake.getAccountAuthorizationDetailsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsPagesReturns(result1 error) {
	fake.getAccountAuthorizationDetailsPagesMutex.Lock()
	defer fake.getAccountAuthorizationDetailsPagesMutex.Unlock()
	fake.GetAccountAuthorizationDetailsPagesStub = nil
	fake.getAccountAuthorizationDetailsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsPagesReturnsOnCall(i int, result1 error) {
	fake.getAccountAuthorizationDetailsPagesMutex.Lock()
	defer fake.getAccountAuthorizationDetailsPagesMutex.Unlock()
	fake.GetAccountAuthorizationDetailsPagesStub = nil
	if fake.getAccountAuthorizationDetailsPagesReturnsOnCall == nil {
		fake.getAccountAuthorizationDetailsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getAccountAuthorizationDetailsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsPagesWithContext(arg1 context.Context, arg2 *iam.GetAccountAuthorizationDetailsInput, arg3 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool, arg4 ...request.Option) error {
	fake.getAccountAuthorizationDetailsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.getAccountAuthorizationDetailsPagesWithContextReturnsOnCall[len(fake.getAccountAuthorizationDetailsPagesWithContextArgsForCall)]
	fake.getAccountAuthorizationDetailsPagesWithContextArgsForCall = append(fake.getAccountAuthorizationDetailsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetAccountAuthorizationDetailsInput
		arg3 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("GetAccountAuthorizationDetailsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.getAccountAuthorizationDetailsPagesWithContextMutex.Unlock()
	if fake.GetAccountAuthorizationDetailsPagesWithContextStub != nil {
		return fake.GetAccountAuthorizationDetailsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getAccountAuthorizationDetailsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsPagesWithContextCallCount() int {
	fake.getAccountAuthorizationDetailsPagesWithContextMutex.RLock()
	defer fake.getAccountAuthorizationDetailsPagesWithContextMutex.RUnlock()
	return len(fake.getAccountAuthorizationDetailsPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsPagesWithContextCalls(stub func(context.Context, *iam.GetAccountAuthorizationDetailsInput, func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool, ...request.Option) error) {
	fake.getAccountAuthorizationDetailsPagesWithContextMutex.Lock()
	defer fake.getAccountAuthorizationDetailsPagesWithContextMutex.Unlock()
	fake.GetAccountAuthorizationDetailsPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsPagesWithContextArgsForCall(i int) (context.Context, *iam.GetAccountAuthorizationDetailsInput, func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool, []request.Option) {
	fake.getAccountAuthorizationDetailsPagesWithContextMutex.RLock()
	defer fake.getAccountAuthorizationDetailsPagesWithContextMutex.RUnlock()
	argsForCall := fake.getAccountAuthorizationDetailsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsPagesWithContextReturns(result1 error) {
	fake.getAccountAuthorizationDetailsPagesWithContextMutex.Lock()
	defer fake.getAccountAuthorizationDetailsPagesWithContextMutex.Unlock()
	fake.GetAccountAuthorizationDetailsPagesWithContextStub = nil
	fake.getAccountAuthorizationDetailsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.getAccountAuthorizationDetailsPagesWithContextMutex.Lock()
	defer fake.getAccountAuthorizationDetailsPagesWithContextMutex.Unlock()
	fake.GetAccountAuthorizationDetailsPagesWithContextStub = nil
	if fake.getAccountAuthorizationDetailsPagesWithContextReturnsOnCall == nil {
		fake.getAccountAuthorizationDetailsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getAccountAuthorizationDetailsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsRequest(arg1 *iam.GetAccountAuthorizationDetailsInput) (*request.Request, *iam.GetAccountAuthorizationDetailsOutput) {
	fake.getAccountAuthorizationDetailsRequestMutex.Lock()
	ret, specificReturn := fake.getAccountAuthorizationDetailsRequestReturnsOnCall[len(fake.getAccountAuthorizationDetailsRequestArgsForCall)]
	fake.getAccountAuthorizationDetailsRequestArgsForCall = append(fake.getAccountAuthorizationDetailsRequestArgsForCall, struct {
		arg1 *iam.GetAccountAuthorizationDetailsInput
	}{arg1})
	fake.recordInvocation("GetAccountAuthorizationDetailsRequest", []interface{}{arg1})
	fake.getAccountAuthorizationDetailsRequestMutex.Unlock()
	if fake.GetAccountAuthorizationDetailsRequestStub != nil {
		return fake.GetAccountAuthorizationDetailsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAccountAuthorizationDetailsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsRequestCallCount() int {
	fake.getAccountAuthorizationDetailsRequestMutex.RLock()
	defer fake.getAccountAuthorizationDetailsRequestMutex.RUnlock()
	return len(fake.getAccountAuthorizationDetailsRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsRequestCalls(stub func(*iam.GetAccountAuthorizationDetailsInput) (*request.Request, *iam.GetAccountAuthorizationDetailsOutput)) {
	fake.getAccountAuthorizationDetailsRequestMutex.Lock()
	defer fake.getAccountAuthorizationDetailsRequestMutex.Unlock()
	fake.GetAccountAuthorizationDetailsRequestStub = stub
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsRequestArgsForCall(i int) *iam.GetAccountAuthorizationDetailsInput {
	fake.getAccountAuthorizationDetailsRequestMutex.RLock()
	defer fake.getAccountAuthorizationDetailsRequestMutex.RUnlock()
	argsForCall := fake.getAccountAuthorizationDetailsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsRequestReturns(result1 *request.Request, result2 *iam.GetAccountAuthorizationDetailsOutput) {
	fake.getAccountAuthorizationDetailsRequestMutex.Lock()
	defer fake.getAccountAuthorizationDetailsRequestMutex.Unlock()
	fake.GetAccountAuthorizationDetailsRequestStub = nil
	fake.getAccountAuthorizationDetailsRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetAccountAuthorizationDetailsOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetAccountAuthorizationDetailsOutput) {
	fake.getAccountAuthorizationDetailsRequestMutex.Lock()
	defer fake.getAccountAuthorizationDetailsRequestMutex.Unlock()
	fake.GetAccountAuthorizationDetailsRequestStub = nil
	if fake.getAccountAuthorizationDetailsRequestReturnsOnCall == nil {
		fake.getAccountAuthorizationDetailsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetAccountAuthorizationDetailsOutput
		})
	}
	fake.getAccountAuthorizationDetailsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetAccountAuthorizationDetailsOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsWithContext(arg1 context.Context, arg2 *iam.GetAccountAuthorizationDetailsInput, arg3 ...request.Option) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	fake.getAccountAuthorizationDetailsWithContextMutex.Lock()
	ret, specificReturn := fake.getAccountAuthorizationDetailsWithContextReturnsOnCall[len(fake.getAccountAuthorizationDetailsWithContextArgsForCall)]
	fake.getAccountAuthorizationDetailsWithContextArgsForCall = append(fake.getAccountAuthorizationDetailsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetAccountAuthorizationDetailsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetAccountAuthorizationDetailsWithContext", []interface{}{arg1, arg2, arg3})
	fake.getAccountAuthorizationDetailsWithContextMutex.Unlock()
	if fake.GetAccountAuthorizationDetailsWithContextStub != nil {
		return fake.GetAccountAuthorizationDetailsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAccountAuthorizationDetailsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsWithContextCallCount() int {
	fake.getAccountAuthorizationDetailsWithContextMutex.RLock()
	defer fake.getAccountAuthorizationDetailsWithContextMutex.RUnlock()
	return len(fake.getAccountAuthorizationDetailsWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsWithContextCalls(stub func(context.Context, *iam.GetAccountAuthorizationDetailsInput, ...request.Option) (*iam.GetAccountAuthorizationDetailsOutput, error)) {
	fake.getAccountAuthorizationDetailsWithContextMutex.Lock()
	defer fake.getAccountAuthorizationDetailsWithContextMutex.Unlock()
	fake.GetAccountAuthorizationDetailsWithContextStub = stub
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsWithContextArgsForCall(i int) (context.Context, *iam.GetAccountAuthorizationDetailsInput, []request.Option) {
	fake.getAccountAuthorizationDetailsWithContextMutex.RLock()
	defer fake.getAccountAuthorizationDetailsWithContextMutex.RUnlock()
	argsForCall := fake.getAccountAuthorizationDetailsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsWithContextReturns(result1 *iam.GetAccountAuthorizationDetailsOutput, result2 error) {
	fake.getAccountAuthorizationDetailsWithContextMutex.Lock()
	defer fake.getAccountAuthorizationDetailsWithContextMutex.Unlock()
	fake.GetAccountAuthorizationDetailsWithContextStub = nil
	fake.getAccountAuthorizationDetailsWithContextReturns = struct {
		result1 *iam.GetAccountAuthorizationDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountAuthorizationDetailsWithContextReturnsOnCall(i int, result1 *iam.GetAccountAuthorizationDetailsOutput, result2 error) {
	fake.getAccountAuthorizationDetailsWithContextMutex.Lock()
	defer fake.getAccountAuthorizationDetailsWithContextMutex.Unlock()
	fake.GetAccountAuthorizationDetailsWithContextStub = nil
	if fake.getAccountAuthorizationDetailsWithContextReturnsOnCall == nil {
		fake.getAccountAuthorizationDetailsWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetAccountAuthorizationDetailsOutput
			result2 error
		})
	}
	fake.getAccountAuthorizationDetailsWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetAccountAuthorizationDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicy(arg1 *iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error) {
	fake.getAccountPasswordPolicyMutex.Lock()
	ret, specificReturn := fake.getAccountPasswordPolicyReturnsOnCall[len(fake.getAccountPasswordPolicyArgsForCall)]
	fake.getAccountPasswordPolicyArgsForCall = append(fake.getAccountPasswordPolicyArgsForCall, struct {
		arg1 *iam.GetAccountPasswordPolicyInput
	}{arg1})
	fake.recordInvocation("GetAccountPasswordPolicy", []interface{}{arg1})
	fake.getAccountPasswordPolicyMutex.Unlock()
	if fake.GetAccountPasswordPolicyStub != nil {
		return fake.GetAccountPasswordPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAccountPasswordPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicyCallCount() int {
	fake.getAccountPasswordPolicyMutex.RLock()
	defer fake.getAccountPasswordPolicyMutex.RUnlock()
	return len(fake.getAccountPasswordPolicyArgsForCall)
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicyCalls(stub func(*iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error)) {
	fake.getAccountPasswordPolicyMutex.Lock()
	defer fake.getAccountPasswordPolicyMutex.Unlock()
	fake.GetAccountPasswordPolicyStub = stub
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicyArgsForCall(i int) *iam.GetAccountPasswordPolicyInput {
	fake.getAccountPasswordPolicyMutex.RLock()
	defer fake.getAccountPasswordPolicyMutex.RUnlock()
	argsForCall := fake.getAccountPasswordPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicyReturns(result1 *iam.GetAccountPasswordPolicyOutput, result2 error) {
	fake.getAccountPasswordPolicyMutex.Lock()
	defer fake.getAccountPasswordPolicyMutex.Unlock()
	fake.GetAccountPasswordPolicyStub = nil
	fake.getAccountPasswordPolicyReturns = struct {
		result1 *iam.GetAccountPasswordPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicyReturnsOnCall(i int, result1 *iam.GetAccountPasswordPolicyOutput, result2 error) {
	fake.getAccountPasswordPolicyMutex.Lock()
	defer fake.getAccountPasswordPolicyMutex.Unlock()
	fake.GetAccountPasswordPolicyStub = nil
	if fake.getAccountPasswordPolicyReturnsOnCall == nil {
		fake.getAccountPasswordPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.GetAccountPasswordPolicyOutput
			result2 error
		})
	}
	fake.getAccountPasswordPolicyReturnsOnCall[i] = struct {
		result1 *iam.GetAccountPasswordPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicyRequest(arg1 *iam.GetAccountPasswordPolicyInput) (*request.Request, *iam.GetAccountPasswordPolicyOutput) {
	fake.getAccountPasswordPolicyRequestMutex.Lock()
	ret, specificReturn := fake.getAccountPasswordPolicyRequestReturnsOnCall[len(fake.getAccountPasswordPolicyRequestArgsForCall)]
	fake.getAccountPasswordPolicyRequestArgsForCall = append(fake.getAccountPasswordPolicyRequestArgsForCall, struct {
		arg1 *iam.GetAccountPasswordPolicyInput
	}{arg1})
	fake.recordInvocation("GetAccountPasswordPolicyRequest", []interface{}{arg1})
	fake.getAccountPasswordPolicyRequestMutex.Unlock()
	if fake.GetAccountPasswordPolicyRequestStub != nil {
		return fake.GetAccountPasswordPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAccountPasswordPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicyRequestCallCount() int {
	fake.getAccountPasswordPolicyRequestMutex.RLock()
	defer fake.getAccountPasswordPolicyRequestMutex.RUnlock()
	return len(fake.getAccountPasswordPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicyRequestCalls(stub func(*iam.GetAccountPasswordPolicyInput) (*request.Request, *iam.GetAccountPasswordPolicyOutput)) {
	fake.getAccountPasswordPolicyRequestMutex.Lock()
	defer fake.getAccountPasswordPolicyRequestMutex.Unlock()
	fake.GetAccountPasswordPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicyRequestArgsForCall(i int) *iam.GetAccountPasswordPolicyInput {
	fake.getAccountPasswordPolicyRequestMutex.RLock()
	defer fake.getAccountPasswordPolicyRequestMutex.RUnlock()
	argsForCall := fake.getAccountPasswordPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicyRequestReturns(result1 *request.Request, result2 *iam.GetAccountPasswordPolicyOutput) {
	fake.getAccountPasswordPolicyRequestMutex.Lock()
	defer fake.getAccountPasswordPolicyRequestMutex.Unlock()
	fake.GetAccountPasswordPolicyRequestStub = nil
	fake.getAccountPasswordPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetAccountPasswordPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetAccountPasswordPolicyOutput) {
	fake.getAccountPasswordPolicyRequestMutex.Lock()
	defer fake.getAccountPasswordPolicyRequestMutex.Unlock()
	fake.GetAccountPasswordPolicyRequestStub = nil
	if fake.getAccountPasswordPolicyRequestReturnsOnCall == nil {
		fake.getAccountPasswordPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetAccountPasswordPolicyOutput
		})
	}
	fake.getAccountPasswordPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetAccountPasswordPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicyWithContext(arg1 context.Context, arg2 *iam.GetAccountPasswordPolicyInput, arg3 ...request.Option) (*iam.GetAccountPasswordPolicyOutput, error) {
	fake.getAccountPasswordPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.getAccountPasswordPolicyWithContextReturnsOnCall[len(fake.getAccountPasswordPolicyWithContextArgsForCall)]
	fake.getAccountPasswordPolicyWithContextArgsForCall = append(fake.getAccountPasswordPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetAccountPasswordPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetAccountPasswordPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.getAccountPasswordPolicyWithContextMutex.Unlock()
	if fake.GetAccountPasswordPolicyWithContextStub != nil {
		return fake.GetAccountPasswordPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAccountPasswordPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicyWithContextCallCount() int {
	fake.getAccountPasswordPolicyWithContextMutex.RLock()
	defer fake.getAccountPasswordPolicyWithContextMutex.RUnlock()
	return len(fake.getAccountPasswordPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicyWithContextCalls(stub func(context.Context, *iam.GetAccountPasswordPolicyInput, ...request.Option) (*iam.GetAccountPasswordPolicyOutput, error)) {
	fake.getAccountPasswordPolicyWithContextMutex.Lock()
	defer fake.getAccountPasswordPolicyWithContextMutex.Unlock()
	fake.GetAccountPasswordPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicyWithContextArgsForCall(i int) (context.Context, *iam.GetAccountPasswordPolicyInput, []request.Option) {
	fake.getAccountPasswordPolicyWithContextMutex.RLock()
	defer fake.getAccountPasswordPolicyWithContextMutex.RUnlock()
	argsForCall := fake.getAccountPasswordPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicyWithContextReturns(result1 *iam.GetAccountPasswordPolicyOutput, result2 error) {
	fake.getAccountPasswordPolicyWithContextMutex.Lock()
	defer fake.getAccountPasswordPolicyWithContextMutex.Unlock()
	fake.GetAccountPasswordPolicyWithContextStub = nil
	fake.getAccountPasswordPolicyWithContextReturns = struct {
		result1 *iam.GetAccountPasswordPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountPasswordPolicyWithContextReturnsOnCall(i int, result1 *iam.GetAccountPasswordPolicyOutput, result2 error) {
	fake.getAccountPasswordPolicyWithContextMutex.Lock()
	defer fake.getAccountPasswordPolicyWithContextMutex.Unlock()
	fake.GetAccountPasswordPolicyWithContextStub = nil
	if fake.getAccountPasswordPolicyWithContextReturnsOnCall == nil {
		fake.getAccountPasswordPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetAccountPasswordPolicyOutput
			result2 error
		})
	}
	fake.getAccountPasswordPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetAccountPasswordPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountSummary(arg1 *iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error) {
	fake.getAccountSummaryMutex.Lock()
	ret, specificReturn := fake.getAccountSummaryReturnsOnCall[len(fake.getAccountSummaryArgsForCall)]
	fake.getAccountSummaryArgsForCall = append(fake.getAccountSummaryArgsForCall, struct {
		arg1 *iam.GetAccountSummaryInput
	}{arg1})
	fake.recordInvocation("GetAccountSummary", []interface{}{arg1})
	fake.getAccountSummaryMutex.Unlock()
	if fake.GetAccountSummaryStub != nil {
		return fake.GetAccountSummaryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAccountSummaryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetAccountSummaryCallCount() int {
	fake.getAccountSummaryMutex.RLock()
	defer fake.getAccountSummaryMutex.RUnlock()
	return len(fake.getAccountSummaryArgsForCall)
}

func (fake *FakeIAMAPI) GetAccountSummaryCalls(stub func(*iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error)) {
	fake.getAccountSummaryMutex.Lock()
	defer fake.getAccountSummaryMutex.Unlock()
	fake.GetAccountSummaryStub = stub
}

func (fake *FakeIAMAPI) GetAccountSummaryArgsForCall(i int) *iam.GetAccountSummaryInput {
	fake.getAccountSummaryMutex.RLock()
	defer fake.getAccountSummaryMutex.RUnlock()
	argsForCall := fake.getAccountSummaryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetAccountSummaryReturns(result1 *iam.GetAccountSummaryOutput, result2 error) {
	fake.getAccountSummaryMutex.Lock()
	defer fake.getAccountSummaryMutex.Unlock()
	fake.GetAccountSummaryStub = nil
	fake.getAccountSummaryReturns = struct {
		result1 *iam.GetAccountSummaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountSummaryReturnsOnCall(i int, result1 *iam.GetAccountSummaryOutput, result2 error) {
	fake.getAccountSummaryMutex.Lock()
	defer fake.getAccountSummaryMutex.Unlock()
	fake.GetAccountSummaryStub = nil
	if fake.getAccountSummaryReturnsOnCall == nil {
		fake.getAccountSummaryReturnsOnCall = make(map[int]struct {
			result1 *iam.GetAccountSummaryOutput
			result2 error
		})
	}
	fake.getAccountSummaryReturnsOnCall[i] = struct {
		result1 *iam.GetAccountSummaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountSummaryRequest(arg1 *iam.GetAccountSummaryInput) (*request.Request, *iam.GetAccountSummaryOutput) {
	fake.getAccountSummaryRequestMutex.Lock()
	ret, specificReturn := fake.getAccountSummaryRequestReturnsOnCall[len(fake.getAccountSummaryRequestArgsForCall)]
	fake.getAccountSummaryRequestArgsForCall = append(fake.getAccountSummaryRequestArgsForCall, struct {
		arg1 *iam.GetAccountSummaryInput
	}{arg1})
	fake.recordInvocation("GetAccountSummaryRequest", []interface{}{arg1})
	fake.getAccountSummaryRequestMutex.Unlock()
	if fake.GetAccountSummaryRequestStub != nil {
		return fake.GetAccountSummaryRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAccountSummaryRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetAccountSummaryRequestCallCount() int {
	fake.getAccountSummaryRequestMutex.RLock()
	defer fake.getAccountSummaryRequestMutex.RUnlock()
	return len(fake.getAccountSummaryRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetAccountSummaryRequestCalls(stub func(*iam.GetAccountSummaryInput) (*request.Request, *iam.GetAccountSummaryOutput)) {
	fake.getAccountSummaryRequestMutex.Lock()
	defer fake.getAccountSummaryRequestMutex.Unlock()
	fake.GetAccountSummaryRequestStub = stub
}

func (fake *FakeIAMAPI) GetAccountSummaryRequestArgsForCall(i int) *iam.GetAccountSummaryInput {
	fake.getAccountSummaryRequestMutex.RLock()
	defer fake.getAccountSummaryRequestMutex.RUnlock()
	argsForCall := fake.getAccountSummaryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetAccountSummaryRequestReturns(result1 *request.Request, result2 *iam.GetAccountSummaryOutput) {
	fake.getAccountSummaryRequestMutex.Lock()
	defer fake.getAccountSummaryRequestMutex.Unlock()
	fake.GetAccountSummaryRequestStub = nil
	fake.getAccountSummaryRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetAccountSummaryOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountSummaryRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetAccountSummaryOutput) {
	fake.getAccountSummaryRequestMutex.Lock()
	defer fake.getAccountSummaryRequestMutex.Unlock()
	fake.GetAccountSummaryRequestStub = nil
	if fake.getAccountSummaryRequestReturnsOnCall == nil {
		fake.getAccountSummaryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetAccountSummaryOutput
		})
	}
	fake.getAccountSummaryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetAccountSummaryOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountSummaryWithContext(arg1 context.Context, arg2 *iam.GetAccountSummaryInput, arg3 ...request.Option) (*iam.GetAccountSummaryOutput, error) {
	fake.getAccountSummaryWithContextMutex.Lock()
	ret, specificReturn := fake.getAccountSummaryWithContextReturnsOnCall[len(fake.getAccountSummaryWithContextArgsForCall)]
	fake.getAccountSummaryWithContextArgsForCall = append(fake.getAccountSummaryWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetAccountSummaryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetAccountSummaryWithContext", []interface{}{arg1, arg2, arg3})
	fake.getAccountSummaryWithContextMutex.Unlock()
	if fake.GetAccountSummaryWithContextStub != nil {
		return fake.GetAccountSummaryWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAccountSummaryWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetAccountSummaryWithContextCallCount() int {
	fake.getAccountSummaryWithContextMutex.RLock()
	defer fake.getAccountSummaryWithContextMutex.RUnlock()
	return len(fake.getAccountSummaryWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetAccountSummaryWithContextCalls(stub func(context.Context, *iam.GetAccountSummaryInput, ...request.Option) (*iam.GetAccountSummaryOutput, error)) {
	fake.getAccountSummaryWithContextMutex.Lock()
	defer fake.getAccountSummaryWithContextMutex.Unlock()
	fake.GetAccountSummaryWithContextStub = stub
}

func (fake *FakeIAMAPI) GetAccountSummaryWithContextArgsForCall(i int) (context.Context, *iam.GetAccountSummaryInput, []request.Option) {
	fake.getAccountSummaryWithContextMutex.RLock()
	defer fake.getAccountSummaryWithContextMutex.RUnlock()
	argsForCall := fake.getAccountSummaryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetAccountSummaryWithContextReturns(result1 *iam.GetAccountSummaryOutput, result2 error) {
	fake.getAccountSummaryWithContextMutex.Lock()
	defer fake.getAccountSummaryWithContextMutex.Unlock()
	fake.GetAccountSummaryWithContextStub = nil
	fake.getAccountSummaryWithContextReturns = struct {
		result1 *iam.GetAccountSummaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetAccountSummaryWithContextReturnsOnCall(i int, result1 *iam.GetAccountSummaryOutput, result2 error) {
	fake.getAccountSummaryWithContextMutex.Lock()
	defer fake.getAccountSummaryWithContextMutex.Unlock()
	fake.GetAccountSummaryWithContextStub = nil
	if fake.getAccountSummaryWithContextReturnsOnCall == nil {
		fake.getAccountSummaryWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetAccountSummaryOutput
			result2 error
		})
	}
	fake.getAccountSummaryWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetAccountSummaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicy(arg1 *iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
	fake.getContextKeysForCustomPolicyMutex.Lock()
	ret, specificReturn := fake.getContextKeysForCustomPolicyReturnsOnCall[len(fake.getContextKeysForCustomPolicyArgsForCall)]
	fake.getContextKeysForCustomPolicyArgsForCall = append(fake.getContextKeysForCustomPolicyArgsForCall, struct {
		arg1 *iam.GetContextKeysForCustomPolicyInput
	}{arg1})
	fake.recordInvocation("GetContextKeysForCustomPolicy", []interface{}{arg1})
	fake.getContextKeysForCustomPolicyMutex.Unlock()
	if fake.GetContextKeysForCustomPolicyStub != nil {
		return fake.GetContextKeysForCustomPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getContextKeysForCustomPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicyCallCount() int {
	fake.getContextKeysForCustomPolicyMutex.RLock()
	defer fake.getContextKeysForCustomPolicyMutex.RUnlock()
	return len(fake.getContextKeysForCustomPolicyArgsForCall)
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicyCalls(stub func(*iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error)) {
	fake.getContextKeysForCustomPolicyMutex.Lock()
	defer fake.getContextKeysForCustomPolicyMutex.Unlock()
	fake.GetContextKeysForCustomPolicyStub = stub
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicyArgsForCall(i int) *iam.GetContextKeysForCustomPolicyInput {
	fake.getContextKeysForCustomPolicyMutex.RLock()
	defer fake.getContextKeysForCustomPolicyMutex.RUnlock()
	argsForCall := fake.getContextKeysForCustomPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicyReturns(result1 *iam.GetContextKeysForPolicyResponse, result2 error) {
	fake.getContextKeysForCustomPolicyMutex.Lock()
	defer fake.getContextKeysForCustomPolicyMutex.Unlock()
	fake.GetContextKeysForCustomPolicyStub = nil
	fake.getContextKeysForCustomPolicyReturns = struct {
		result1 *iam.GetContextKeysForPolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicyReturnsOnCall(i int, result1 *iam.GetContextKeysForPolicyResponse, result2 error) {
	fake.getContextKeysForCustomPolicyMutex.Lock()
	defer fake.getContextKeysForCustomPolicyMutex.Unlock()
	fake.GetContextKeysForCustomPolicyStub = nil
	if fake.getContextKeysForCustomPolicyReturnsOnCall == nil {
		fake.getContextKeysForCustomPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.GetContextKeysForPolicyResponse
			result2 error
		})
	}
	fake.getContextKeysForCustomPolicyReturnsOnCall[i] = struct {
		result1 *iam.GetContextKeysForPolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicyRequest(arg1 *iam.GetContextKeysForCustomPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse) {
	fake.getContextKeysForCustomPolicyRequestMutex.Lock()
	ret, specificReturn := fake.getContextKeysForCustomPolicyRequestReturnsOnCall[len(fake.getContextKeysForCustomPolicyRequestArgsForCall)]
	fake.getContextKeysForCustomPolicyRequestArgsForCall = append(fake.getContextKeysForCustomPolicyRequestArgsForCall, struct {
		arg1 *iam.GetContextKeysForCustomPolicyInput
	}{arg1})
	fake.recordInvocation("GetContextKeysForCustomPolicyRequest", []interface{}{arg1})
	fake.getContextKeysForCustomPolicyRequestMutex.Unlock()
	if fake.GetContextKeysForCustomPolicyRequestStub != nil {
		return fake.GetContextKeysForCustomPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getContextKeysForCustomPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicyRequestCallCount() int {
	fake.getContextKeysForCustomPolicyRequestMutex.RLock()
	defer fake.getContextKeysForCustomPolicyRequestMutex.RUnlock()
	return len(fake.getContextKeysForCustomPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicyRequestCalls(stub func(*iam.GetContextKeysForCustomPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse)) {
	fake.getContextKeysForCustomPolicyRequestMutex.Lock()
	defer fake.getContextKeysForCustomPolicyRequestMutex.Unlock()
	fake.GetContextKeysForCustomPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicyRequestArgsForCall(i int) *iam.GetContextKeysForCustomPolicyInput {
	fake.getContextKeysForCustomPolicyRequestMutex.RLock()
	defer fake.getContextKeysForCustomPolicyRequestMutex.RUnlock()
	argsForCall := fake.getContextKeysForCustomPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicyRequestReturns(result1 *request.Request, result2 *iam.GetContextKeysForPolicyResponse) {
	fake.getContextKeysForCustomPolicyRequestMutex.Lock()
	defer fake.getContextKeysForCustomPolicyRequestMutex.Unlock()
	fake.GetContextKeysForCustomPolicyRequestStub = nil
	fake.getContextKeysForCustomPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetContextKeysForPolicyResponse
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetContextKeysForPolicyResponse) {
	fake.getContextKeysForCustomPolicyRequestMutex.Lock()
	defer fake.getContextKeysForCustomPolicyRequestMutex.Unlock()
	fake.GetContextKeysForCustomPolicyRequestStub = nil
	if fake.getContextKeysForCustomPolicyRequestReturnsOnCall == nil {
		fake.getContextKeysForCustomPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetContextKeysForPolicyResponse
		})
	}
	fake.getContextKeysForCustomPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetContextKeysForPolicyResponse
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicyWithContext(arg1 context.Context, arg2 *iam.GetContextKeysForCustomPolicyInput, arg3 ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {
	fake.getContextKeysForCustomPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.getContextKeysForCustomPolicyWithContextReturnsOnCall[len(fake.getContextKeysForCustomPolicyWithContextArgsForCall)]
	fake.getContextKeysForCustomPolicyWithContextArgsForCall = append(fake.getContextKeysForCustomPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetContextKeysForCustomPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetContextKeysForCustomPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.getContextKeysForCustomPolicyWithContextMutex.Unlock()
	if fake.GetContextKeysForCustomPolicyWithContextStub != nil {
		return fake.GetContextKeysForCustomPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getContextKeysForCustomPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicyWithContextCallCount() int {
	fake.getContextKeysForCustomPolicyWithContextMutex.RLock()
	defer fake.getContextKeysForCustomPolicyWithContextMutex.RUnlock()
	return len(fake.getContextKeysForCustomPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicyWithContextCalls(stub func(context.Context, *iam.GetContextKeysForCustomPolicyInput, ...request.Option) (*iam.GetContextKeysForPolicyResponse, error)) {
	fake.getContextKeysForCustomPolicyWithContextMutex.Lock()
	defer fake.getContextKeysForCustomPolicyWithContextMutex.Unlock()
	fake.GetContextKeysForCustomPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicyWithContextArgsForCall(i int) (context.Context, *iam.GetContextKeysForCustomPolicyInput, []request.Option) {
	fake.getContextKeysForCustomPolicyWithContextMutex.RLock()
	defer fake.getContextKeysForCustomPolicyWithContextMutex.RUnlock()
	argsForCall := fake.getContextKeysForCustomPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicyWithContextReturns(result1 *iam.GetContextKeysForPolicyResponse, result2 error) {
	fake.getContextKeysForCustomPolicyWithContextMutex.Lock()
	defer fake.getContextKeysForCustomPolicyWithContextMutex.Unlock()
	fake.GetContextKeysForCustomPolicyWithContextStub = nil
	fake.getContextKeysForCustomPolicyWithContextReturns = struct {
		result1 *iam.GetContextKeysForPolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetContextKeysForCustomPolicyWithContextReturnsOnCall(i int, result1 *iam.GetContextKeysForPolicyResponse, result2 error) {
	fake.getContextKeysForCustomPolicyWithContextMutex.Lock()
	defer fake.getContextKeysForCustomPolicyWithContextMutex.Unlock()
	fake.GetContextKeysForCustomPolicyWithContextStub = nil
	if fake.getContextKeysForCustomPolicyWithContextReturnsOnCall == nil {
		fake.getContextKeysForCustomPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetContextKeysForPolicyResponse
			result2 error
		})
	}
	fake.getContextKeysForCustomPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetContextKeysForPolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicy(arg1 *iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
	fake.getContextKeysForPrincipalPolicyMutex.Lock()
	ret, specificReturn := fake.getContextKeysForPrincipalPolicyReturnsOnCall[len(fake.getContextKeysForPrincipalPolicyArgsForCall)]
	fake.getContextKeysForPrincipalPolicyArgsForCall = append(fake.getContextKeysForPrincipalPolicyArgsForCall, struct {
		arg1 *iam.GetContextKeysForPrincipalPolicyInput
	}{arg1})
	fake.recordInvocation("GetContextKeysForPrincipalPolicy", []interface{}{arg1})
	fake.getContextKeysForPrincipalPolicyMutex.Unlock()
	if fake.GetContextKeysForPrincipalPolicyStub != nil {
		return fake.GetContextKeysForPrincipalPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getContextKeysForPrincipalPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicyCallCount() int {
	fake.getContextKeysForPrincipalPolicyMutex.RLock()
	defer fake.getContextKeysForPrincipalPolicyMutex.RUnlock()
	return len(fake.getContextKeysForPrincipalPolicyArgsForCall)
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicyCalls(stub func(*iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error)) {
	fake.getContextKeysForPrincipalPolicyMutex.Lock()
	defer fake.getContextKeysForPrincipalPolicyMutex.Unlock()
	fake.GetContextKeysForPrincipalPolicyStub = stub
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicyArgsForCall(i int) *iam.GetContextKeysForPrincipalPolicyInput {
	fake.getContextKeysForPrincipalPolicyMutex.RLock()
	defer fake.getContextKeysForPrincipalPolicyMutex.RUnlock()
	argsForCall := fake.getContextKeysForPrincipalPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicyReturns(result1 *iam.GetContextKeysForPolicyResponse, result2 error) {
	fake.getContextKeysForPrincipalPolicyMutex.Lock()
	defer fake.getContextKeysForPrincipalPolicyMutex.Unlock()
	fake.GetContextKeysForPrincipalPolicyStub = nil
	fake.getContextKeysForPrincipalPolicyReturns = struct {
		result1 *iam.GetContextKeysForPolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicyReturnsOnCall(i int, result1 *iam.GetContextKeysForPolicyResponse, result2 error) {
	fake.getContextKeysForPrincipalPolicyMutex.Lock()
	defer fake.getContextKeysForPrincipalPolicyMutex.Unlock()
	fake.GetContextKeysForPrincipalPolicyStub = nil
	if fake.getContextKeysForPrincipalPolicyReturnsOnCall == nil {
		fake.getContextKeysForPrincipalPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.GetContextKeysForPolicyResponse
			result2 error
		})
	}
	fake.getContextKeysForPrincipalPolicyReturnsOnCall[i] = struct {
		result1 *iam.GetContextKeysForPolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicyRequest(arg1 *iam.GetContextKeysForPrincipalPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse) {
	fake.getContextKeysForPrincipalPolicyRequestMutex.Lock()
	ret, specificReturn := fake.getContextKeysForPrincipalPolicyRequestReturnsOnCall[len(fake.getContextKeysForPrincipalPolicyRequestArgsForCall)]
	fake.getContextKeysForPrincipalPolicyRequestArgsForCall = append(fake.getContextKeysForPrincipalPolicyRequestArgsForCall, struct {
		arg1 *iam.GetContextKeysForPrincipalPolicyInput
	}{arg1})
	fake.recordInvocation("GetContextKeysForPrincipalPolicyRequest", []interface{}{arg1})
	fake.getContextKeysForPrincipalPolicyRequestMutex.Unlock()
	if fake.GetContextKeysForPrincipalPolicyRequestStub != nil {
		return fake.GetContextKeysForPrincipalPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getContextKeysForPrincipalPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicyRequestCallCount() int {
	fake.getContextKeysForPrincipalPolicyRequestMutex.RLock()
	defer fake.getContextKeysForPrincipalPolicyRequestMutex.RUnlock()
	return len(fake.getContextKeysForPrincipalPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicyRequestCalls(stub func(*iam.GetContextKeysForPrincipalPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse)) {
	fake.getContextKeysForPrincipalPolicyRequestMutex.Lock()
	defer fake.getContextKeysForPrincipalPolicyRequestMutex.Unlock()
	fake.GetContextKeysForPrincipalPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicyRequestArgsForCall(i int) *iam.GetContextKeysForPrincipalPolicyInput {
	fake.getContextKeysForPrincipalPolicyRequestMutex.RLock()
	defer fake.getContextKeysForPrincipalPolicyRequestMutex.RUnlock()
	argsForCall := fake.getContextKeysForPrincipalPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicyRequestReturns(result1 *request.Request, result2 *iam.GetContextKeysForPolicyResponse) {
	fake.getContextKeysForPrincipalPolicyRequestMutex.Lock()
	defer fake.getContextKeysForPrincipalPolicyRequestMutex.Unlock()
	fake.GetContextKeysForPrincipalPolicyRequestStub = nil
	fake.getContextKeysForPrincipalPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetContextKeysForPolicyResponse
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetContextKeysForPolicyResponse) {
	fake.getContextKeysForPrincipalPolicyRequestMutex.Lock()
	defer fake.getContextKeysForPrincipalPolicyRequestMutex.Unlock()
	fake.GetContextKeysForPrincipalPolicyRequestStub = nil
	if fake.getContextKeysForPrincipalPolicyRequestReturnsOnCall == nil {
		fake.getContextKeysForPrincipalPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetContextKeysForPolicyResponse
		})
	}
	fake.getContextKeysForPrincipalPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetContextKeysForPolicyResponse
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicyWithContext(arg1 context.Context, arg2 *iam.GetContextKeysForPrincipalPolicyInput, arg3 ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {
	fake.getContextKeysForPrincipalPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.getContextKeysForPrincipalPolicyWithContextReturnsOnCall[len(fake.getContextKeysForPrincipalPolicyWithContextArgsForCall)]
	fake.getContextKeysForPrincipalPolicyWithContextArgsForCall = append(fake.getContextKeysForPrincipalPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetContextKeysForPrincipalPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetContextKeysForPrincipalPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.getContextKeysForPrincipalPolicyWithContextMutex.Unlock()
	if fake.GetContextKeysForPrincipalPolicyWithContextStub != nil {
		return fake.GetContextKeysForPrincipalPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getContextKeysForPrincipalPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicyWithContextCallCount() int {
	fake.getContextKeysForPrincipalPolicyWithContextMutex.RLock()
	defer fake.getContextKeysForPrincipalPolicyWithContextMutex.RUnlock()
	return len(fake.getContextKeysForPrincipalPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicyWithContextCalls(stub func(context.Context, *iam.GetContextKeysForPrincipalPolicyInput, ...request.Option) (*iam.GetContextKeysForPolicyResponse, error)) {
	fake.getContextKeysForPrincipalPolicyWithContextMutex.Lock()
	defer fake.getContextKeysForPrincipalPolicyWithContextMutex.Unlock()
	fake.GetContextKeysForPrincipalPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicyWithContextArgsForCall(i int) (context.Context, *iam.GetContextKeysForPrincipalPolicyInput, []request.Option) {
	fake.getContextKeysForPrincipalPolicyWithContextMutex.RLock()
	defer fake.getContextKeysForPrincipalPolicyWithContextMutex.RUnlock()
	argsForCall := fake.getContextKeysForPrincipalPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicyWithContextReturns(result1 *iam.GetContextKeysForPolicyResponse, result2 error) {
	fake.getContextKeysForPrincipalPolicyWithContextMutex.Lock()
	defer fake.getContextKeysForPrincipalPolicyWithContextMutex.Unlock()
	fake.GetContextKeysForPrincipalPolicyWithContextStub = nil
	fake.getContextKeysForPrincipalPolicyWithContextReturns = struct {
		result1 *iam.GetContextKeysForPolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetContextKeysForPrincipalPolicyWithContextReturnsOnCall(i int, result1 *iam.GetContextKeysForPolicyResponse, result2 error) {
	fake.getContextKeysForPrincipalPolicyWithContextMutex.Lock()
	defer fake.getContextKeysForPrincipalPolicyWithContextMutex.Unlock()
	fake.GetContextKeysForPrincipalPolicyWithContextStub = nil
	if fake.getContextKeysForPrincipalPolicyWithContextReturnsOnCall == nil {
		fake.getContextKeysForPrincipalPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetContextKeysForPolicyResponse
			result2 error
		})
	}
	fake.getContextKeysForPrincipalPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetContextKeysForPolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetCredentialReport(arg1 *iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error) {
	fake.getCredentialReportMutex.Lock()
	ret, specificReturn := fake.getCredentialReportReturnsOnCall[len(fake.getCredentialReportArgsForCall)]
	fake.getCredentialReportArgsForCall = append(fake.getCredentialReportArgsForCall, struct {
		arg1 *iam.GetCredentialReportInput
	}{arg1})
	fake.recordInvocation("GetCredentialReport", []interface{}{arg1})
	fake.getCredentialReportMutex.Unlock()
	if fake.GetCredentialReportStub != nil {
		return fake.GetCredentialReportStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getCredentialReportReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetCredentialReportCallCount() int {
	fake.getCredentialReportMutex.RLock()
	defer fake.getCredentialReportMutex.RUnlock()
	return len(fake.getCredentialReportArgsForCall)
}

func (fake *FakeIAMAPI) GetCredentialReportCalls(stub func(*iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error)) {
	fake.getCredentialReportMutex.Lock()
	defer fake.getCredentialReportMutex.Unlock()
	fake.GetCredentialReportStub = stub
}

func (fake *FakeIAMAPI) GetCredentialReportArgsForCall(i int) *iam.GetCredentialReportInput {
	fake.getCredentialReportMutex.RLock()
	defer fake.getCredentialReportMutex.RUnlock()
	argsForCall := fake.getCredentialReportArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetCredentialReportReturns(result1 *iam.GetCredentialReportOutput, result2 error) {
	fake.getCredentialReportMutex.Lock()
	defer fake.getCredentialReportMutex.Unlock()
	fake.GetCredentialReportStub = nil
	fake.getCredentialReportReturns = struct {
		result1 *iam.GetCredentialReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetCredentialReportReturnsOnCall(i int, result1 *iam.GetCredentialReportOutput, result2 error) {
	fake.getCredentialReportMutex.Lock()
	defer fake.getCredentialReportMutex.Unlock()
	fake.GetCredentialReportStub = nil
	if fake.getCredentialReportReturnsOnCall == nil {
		fake.getCredentialReportReturnsOnCall = make(map[int]struct {
			result1 *iam.GetCredentialReportOutput
			result2 error
		})
	}
	fake.getCredentialReportReturnsOnCall[i] = struct {
		result1 *iam.GetCredentialReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetCredentialReportRequest(arg1 *iam.GetCredentialReportInput) (*request.Request, *iam.GetCredentialReportOutput) {
	fake.getCredentialReportRequestMutex.Lock()
	ret, specificReturn := fake.getCredentialReportRequestReturnsOnCall[len(fake.getCredentialReportRequestArgsForCall)]
	fake.getCredentialReportRequestArgsForCall = append(fake.getCredentialReportRequestArgsForCall, struct {
		arg1 *iam.GetCredentialReportInput
	}{arg1})
	fake.recordInvocation("GetCredentialReportRequest", []interface{}{arg1})
	fake.getCredentialReportRequestMutex.Unlock()
	if fake.GetCredentialReportRequestStub != nil {
		return fake.GetCredentialReportRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getCredentialReportRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetCredentialReportRequestCallCount() int {
	fake.getCredentialReportRequestMutex.RLock()
	defer fake.getCredentialReportRequestMutex.RUnlock()
	return len(fake.getCredentialReportRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetCredentialReportRequestCalls(stub func(*iam.GetCredentialReportInput) (*request.Request, *iam.GetCredentialReportOutput)) {
	fake.getCredentialReportRequestMutex.Lock()
	defer fake.getCredentialReportRequestMutex.Unlock()
	fake.GetCredentialReportRequestStub = stub
}

func (fake *FakeIAMAPI) GetCredentialReportRequestArgsForCall(i int) *iam.GetCredentialReportInput {
	fake.getCredentialReportRequestMutex.RLock()
	defer fake.getCredentialReportRequestMutex.RUnlock()
	argsForCall := fake.getCredentialReportRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetCredentialReportRequestReturns(result1 *request.Request, result2 *iam.GetCredentialReportOutput) {
	fake.getCredentialReportRequestMutex.Lock()
	defer fake.getCredentialReportRequestMutex.Unlock()
	fake.GetCredentialReportRequestStub = nil
	fake.getCredentialReportRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetCredentialReportOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetCredentialReportRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetCredentialReportOutput) {
	fake.getCredentialReportRequestMutex.Lock()
	defer fake.getCredentialReportRequestMutex.Unlock()
	fake.GetCredentialReportRequestStub = nil
	if fake.getCredentialReportRequestReturnsOnCall == nil {
		fake.getCredentialReportRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetCredentialReportOutput
		})
	}
	fake.getCredentialReportRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetCredentialReportOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetCredentialReportWithContext(arg1 context.Context, arg2 *iam.GetCredentialReportInput, arg3 ...request.Option) (*iam.GetCredentialReportOutput, error) {
	fake.getCredentialReportWithContextMutex.Lock()
	ret, specificReturn := fake.getCredentialReportWithContextReturnsOnCall[len(fake.getCredentialReportWithContextArgsForCall)]
	fake.getCredentialReportWithContextArgsForCall = append(fake.getCredentialReportWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetCredentialReportInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetCredentialReportWithContext", []interface{}{arg1, arg2, arg3})
	fake.getCredentialReportWithContextMutex.Unlock()
	if fake.GetCredentialReportWithContextStub != nil {
		return fake.GetCredentialReportWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getCredentialReportWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetCredentialReportWithContextCallCount() int {
	fake.getCredentialReportWithContextMutex.RLock()
	defer fake.getCredentialReportWithContextMutex.RUnlock()
	return len(fake.getCredentialReportWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetCredentialReportWithContextCalls(stub func(context.Context, *iam.GetCredentialReportInput, ...request.Option) (*iam.GetCredentialReportOutput, error)) {
	fake.getCredentialReportWithContextMutex.Lock()
	defer fake.getCredentialReportWithContextMutex.Unlock()
	fake.GetCredentialReportWithContextStub = stub
}

func (fake *FakeIAMAPI) GetCredentialReportWithContextArgsForCall(i int) (context.Context, *iam.GetCredentialReportInput, []request.Option) {
	fake.getCredentialReportWithContextMutex.RLock()
	defer fake.getCredentialReportWithContextMutex.RUnlock()
	argsForCall := fake.getCredentialReportWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetCredentialReportWithContextReturns(result1 *iam.GetCredentialReportOutput, result2 error) {
	fake.getCredentialReportWithContextMutex.Lock()
	defer fake.getCredentialReportWithContextMutex.Unlock()
	fake.GetCredentialReportWithContextStub = nil
	fake.getCredentialReportWithContextReturns = struct {
		result1 *iam.GetCredentialReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetCredentialReportWithContextReturnsOnCall(i int, result1 *iam.GetCredentialReportOutput, result2 error) {
	fake.getCredentialReportWithContextMutex.Lock()
	defer fake.getCredentialReportWithContextMutex.Unlock()
	fake.GetCredentialReportWithContextStub = nil
	if fake.getCredentialReportWithContextReturnsOnCall == nil {
		fake.getCredentialReportWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetCredentialReportOutput
			result2 error
		})
	}
	fake.getCredentialReportWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetCredentialReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetGroup(arg1 *iam.GetGroupInput) (*iam.GetGroupOutput, error) {
	fake.getGroupMutex.Lock()
	ret, specificReturn := fake.getGroupReturnsOnCall[len(fake.getGroupArgsForCall)]
	fake.getGroupArgsForCall = append(fake.getGroupArgsForCall, struct {
		arg1 *iam.GetGroupInput
	}{arg1})
	fake.recordInvocation("GetGroup", []interface{}{arg1})
	fake.getGroupMutex.Unlock()
	if fake.GetGroupStub != nil {
		return fake.GetGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetGroupCallCount() int {
	fake.getGroupMutex.RLock()
	defer fake.getGroupMutex.RUnlock()
	return len(fake.getGroupArgsForCall)
}

func (fake *FakeIAMAPI) GetGroupCalls(stub func(*iam.GetGroupInput) (*iam.GetGroupOutput, error)) {
	fake.getGroupMutex.Lock()
	defer fake.getGroupMutex.Unlock()
	fake.GetGroupStub = stub
}

func (fake *FakeIAMAPI) GetGroupArgsForCall(i int) *iam.GetGroupInput {
	fake.getGroupMutex.RLock()
	defer fake.getGroupMutex.RUnlock()
	argsForCall := fake.getGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetGroupReturns(result1 *iam.GetGroupOutput, result2 error) {
	fake.getGroupMutex.Lock()
	defer fake.getGroupMutex.Unlock()
	fake.GetGroupStub = nil
	fake.getGroupReturns = struct {
		result1 *iam.GetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetGroupReturnsOnCall(i int, result1 *iam.GetGroupOutput, result2 error) {
	fake.getGroupMutex.Lock()
	defer fake.getGroupMutex.Unlock()
	fake.GetGroupStub = nil
	if fake.getGroupReturnsOnCall == nil {
		fake.getGroupReturnsOnCall = make(map[int]struct {
			result1 *iam.GetGroupOutput
			result2 error
		})
	}
	fake.getGroupReturnsOnCall[i] = struct {
		result1 *iam.GetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetGroupPages(arg1 *iam.GetGroupInput, arg2 func(*iam.GetGroupOutput, bool) bool) error {
	fake.getGroupPagesMutex.Lock()
	ret, specificReturn := fake.getGroupPagesReturnsOnCall[len(fake.getGroupPagesArgsForCall)]
	fake.getGroupPagesArgsForCall = append(fake.getGroupPagesArgsForCall, struct {
		arg1 *iam.GetGroupInput
		arg2 func(*iam.GetGroupOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("GetGroupPages", []interface{}{arg1, arg2})
	fake.getGroupPagesMutex.Unlock()
	if fake.GetGroupPagesStub != nil {
		return fake.GetGroupPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getGroupPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) GetGroupPagesCallCount() int {
	fake.getGroupPagesMutex.RLock()
	defer fake.getGroupPagesMutex.RUnlock()
	return len(fake.getGroupPagesArgsForCall)
}

func (fake *FakeIAMAPI) GetGroupPagesCalls(stub func(*iam.GetGroupInput, func(*iam.GetGroupOutput, bool) bool) error) {
	fake.getGroupPagesMutex.Lock()
	defer fake.getGroupPagesMutex.Unlock()
	fake.GetGroupPagesStub = stub
}

func (fake *FakeIAMAPI) GetGroupPagesArgsForCall(i int) (*iam.GetGroupInput, func(*iam.GetGroupOutput, bool) bool) {
	fake.getGroupPagesMutex.RLock()
	defer fake.getGroupPagesMutex.RUnlock()
	argsForCall := fake.getGroupPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) GetGroupPagesReturns(result1 error) {
	fake.getGroupPagesMutex.Lock()
	defer fake.getGroupPagesMutex.Unlock()
	fake.GetGroupPagesStub = nil
	fake.getGroupPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) GetGroupPagesReturnsOnCall(i int, result1 error) {
	fake.getGroupPagesMutex.Lock()
	defer fake.getGroupPagesMutex.Unlock()
	fake.GetGroupPagesStub = nil
	if fake.getGroupPagesReturnsOnCall == nil {
		fake.getGroupPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getGroupPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) GetGroupPagesWithContext(arg1 context.Context, arg2 *iam.GetGroupInput, arg3 func(*iam.GetGroupOutput, bool) bool, arg4 ...request.Option) error {
	fake.getGroupPagesWithContextMutex.Lock()
	ret, specificReturn := fake.getGroupPagesWithContextReturnsOnCall[len(fake.getGroupPagesWithContextArgsForCall)]
	fake.getGroupPagesWithContextArgsForCall = append(fake.getGroupPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetGroupInput
		arg3 func(*iam.GetGroupOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("GetGroupPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.getGroupPagesWithContextMutex.Unlock()
	if fake.GetGroupPagesWithContextStub != nil {
		return fake.GetGroupPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getGroupPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) GetGroupPagesWithContextCallCount() int {
	fake.getGroupPagesWithContextMutex.RLock()
	defer fake.getGroupPagesWithContextMutex.RUnlock()
	return len(fake.getGroupPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetGroupPagesWithContextCalls(stub func(context.Context, *iam.GetGroupInput, func(*iam.GetGroupOutput, bool) bool, ...request.Option) error) {
	fake.getGroupPagesWithContextMutex.Lock()
	defer fake.getGroupPagesWithContextMutex.Unlock()
	fake.GetGroupPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) GetGroupPagesWithContextArgsForCall(i int) (context.Context, *iam.GetGroupInput, func(*iam.GetGroupOutput, bool) bool, []request.Option) {
	fake.getGroupPagesWithContextMutex.RLock()
	defer fake.getGroupPagesWithContextMutex.RUnlock()
	argsForCall := fake.getGroupPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) GetGroupPagesWithContextReturns(result1 error) {
	fake.getGroupPagesWithContextMutex.Lock()
	defer fake.getGroupPagesWithContextMutex.Unlock()
	fake.GetGroupPagesWithContextStub = nil
	fake.getGroupPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) GetGroupPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.getGroupPagesWithContextMutex.Lock()
	defer fake.getGroupPagesWithContextMutex.Unlock()
	fake.GetGroupPagesWithContextStub = nil
	if fake.getGroupPagesWithContextReturnsOnCall == nil {
		fake.getGroupPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getGroupPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) GetGroupPolicy(arg1 *iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error) {
	fake.getGroupPolicyMutex.Lock()
	ret, specificReturn := fake.getGroupPolicyReturnsOnCall[len(fake.getGroupPolicyArgsForCall)]
	fake.getGroupPolicyArgsForCall = append(fake.getGroupPolicyArgsForCall, struct {
		arg1 *iam.GetGroupPolicyInput
	}{arg1})
	fake.recordInvocation("GetGroupPolicy", []interface{}{arg1})
	fake.getGroupPolicyMutex.Unlock()
	if fake.GetGroupPolicyStub != nil {
		return fake.GetGroupPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getGroupPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetGroupPolicyCallCount() int {
	fake.getGroupPolicyMutex.RLock()
	defer fake.getGroupPolicyMutex.RUnlock()
	return len(fake.getGroupPolicyArgsForCall)
}

func (fake *FakeIAMAPI) GetGroupPolicyCalls(stub func(*iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error)) {
	fake.getGroupPolicyMutex.Lock()
	defer fake.getGroupPolicyMutex.Unlock()
	fake.GetGroupPolicyStub = stub
}

func (fake *FakeIAMAPI) GetGroupPolicyArgsForCall(i int) *iam.GetGroupPolicyInput {
	fake.getGroupPolicyMutex.RLock()
	defer fake.getGroupPolicyMutex.RUnlock()
	argsForCall := fake.getGroupPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetGroupPolicyReturns(result1 *iam.GetGroupPolicyOutput, result2 error) {
	fake.getGroupPolicyMutex.Lock()
	defer fake.getGroupPolicyMutex.Unlock()
	fake.GetGroupPolicyStub = nil
	fake.getGroupPolicyReturns = struct {
		result1 *iam.GetGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetGroupPolicyReturnsOnCall(i int, result1 *iam.GetGroupPolicyOutput, result2 error) {
	fake.getGroupPolicyMutex.Lock()
	defer fake.getGroupPolicyMutex.Unlock()
	fake.GetGroupPolicyStub = nil
	if fake.getGroupPolicyReturnsOnCall == nil {
		fake.getGroupPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.GetGroupPolicyOutput
			result2 error
		})
	}
	fake.getGroupPolicyReturnsOnCall[i] = struct {
		result1 *iam.GetGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetGroupPolicyRequest(arg1 *iam.GetGroupPolicyInput) (*request.Request, *iam.GetGroupPolicyOutput) {
	fake.getGroupPolicyRequestMutex.Lock()
	ret, specificReturn := fake.getGroupPolicyRequestReturnsOnCall[len(fake.getGroupPolicyRequestArgsForCall)]
	fake.getGroupPolicyRequestArgsForCall = append(fake.getGroupPolicyRequestArgsForCall, struct {
		arg1 *iam.GetGroupPolicyInput
	}{arg1})
	fake.recordInvocation("GetGroupPolicyRequest", []interface{}{arg1})
	fake.getGroupPolicyRequestMutex.Unlock()
	if fake.GetGroupPolicyRequestStub != nil {
		return fake.GetGroupPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getGroupPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetGroupPolicyRequestCallCount() int {
	fake.getGroupPolicyRequestMutex.RLock()
	defer fake.getGroupPolicyRequestMutex.RUnlock()
	return len(fake.getGroupPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetGroupPolicyRequestCalls(stub func(*iam.GetGroupPolicyInput) (*request.Request, *iam.GetGroupPolicyOutput)) {
	fake.getGroupPolicyRequestMutex.Lock()
	defer fake.getGroupPolicyRequestMutex.Unlock()
	fake.GetGroupPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) GetGroupPolicyRequestArgsForCall(i int) *iam.GetGroupPolicyInput {
	fake.getGroupPolicyRequestMutex.RLock()
	defer fake.getGroupPolicyRequestMutex.RUnlock()
	argsForCall := fake.getGroupPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetGroupPolicyRequestReturns(result1 *request.Request, result2 *iam.GetGroupPolicyOutput) {
	fake.getGroupPolicyRequestMutex.Lock()
	defer fake.getGroupPolicyRequestMutex.Unlock()
	fake.GetGroupPolicyRequestStub = nil
	fake.getGroupPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetGroupPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetGroupPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetGroupPolicyOutput) {
	fake.getGroupPolicyRequestMutex.Lock()
	defer fake.getGroupPolicyRequestMutex.Unlock()
	fake.GetGroupPolicyRequestStub = nil
	if fake.getGroupPolicyRequestReturnsOnCall == nil {
		fake.getGroupPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetGroupPolicyOutput
		})
	}
	fake.getGroupPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetGroupPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetGroupPolicyWithContext(arg1 context.Context, arg2 *iam.GetGroupPolicyInput, arg3 ...request.Option) (*iam.GetGroupPolicyOutput, error) {
	fake.getGroupPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.getGroupPolicyWithContextReturnsOnCall[len(fake.getGroupPolicyWithContextArgsForCall)]
	fake.getGroupPolicyWithContextArgsForCall = append(fake.getGroupPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetGroupPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetGroupPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.getGroupPolicyWithContextMutex.Unlock()
	if fake.GetGroupPolicyWithContextStub != nil {
		return fake.GetGroupPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getGroupPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetGroupPolicyWithContextCallCount() int {
	fake.getGroupPolicyWithContextMutex.RLock()
	defer fake.getGroupPolicyWithContextMutex.RUnlock()
	return len(fake.getGroupPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetGroupPolicyWithContextCalls(stub func(context.Context, *iam.GetGroupPolicyInput, ...request.Option) (*iam.GetGroupPolicyOutput, error)) {
	fake.getGroupPolicyWithContextMutex.Lock()
	defer fake.getGroupPolicyWithContextMutex.Unlock()
	fake.GetGroupPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) GetGroupPolicyWithContextArgsForCall(i int) (context.Context, *iam.GetGroupPolicyInput, []request.Option) {
	fake.getGroupPolicyWithContextMutex.RLock()
	defer fake.getGroupPolicyWithContextMutex.RUnlock()
	argsForCall := fake.getGroupPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetGroupPolicyWithContextReturns(result1 *iam.GetGroupPolicyOutput, result2 error) {
	fake.getGroupPolicyWithContextMutex.Lock()
	defer fake.getGroupPolicyWithContextMutex.Unlock()
	fake.GetGroupPolicyWithContextStub = nil
	fake.getGroupPolicyWithContextReturns = struct {
		result1 *iam.GetGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetGroupPolicyWithContextReturnsOnCall(i int, result1 *iam.GetGroupPolicyOutput, result2 error) {
	fake.getGroupPolicyWithContextMutex.Lock()
	defer fake.getGroupPolicyWithContextMutex.Unlock()
	fake.GetGroupPolicyWithContextStub = nil
	if fake.getGroupPolicyWithContextReturnsOnCall == nil {
		fake.getGroupPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetGroupPolicyOutput
			result2 error
		})
	}
	fake.getGroupPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetGroupRequest(arg1 *iam.GetGroupInput) (*request.Request, *iam.GetGroupOutput) {
	fake.getGroupRequestMutex.Lock()
	ret, specificReturn := fake.getGroupRequestReturnsOnCall[len(fake.getGroupRequestArgsForCall)]
	fake.getGroupRequestArgsForCall = append(fake.getGroupRequestArgsForCall, struct {
		arg1 *iam.GetGroupInput
	}{arg1})
	fake.recordInvocation("GetGroupRequest", []interface{}{arg1})
	fake.getGroupRequestMutex.Unlock()
	if fake.GetGroupRequestStub != nil {
		return fake.GetGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getGroupRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetGroupRequestCallCount() int {
	fake.getGroupRequestMutex.RLock()
	defer fake.getGroupRequestMutex.RUnlock()
	return len(fake.getGroupRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetGroupRequestCalls(stub func(*iam.GetGroupInput) (*request.Request, *iam.GetGroupOutput)) {
	fake.getGroupRequestMutex.Lock()
	defer fake.getGroupRequestMutex.Unlock()
	fake.GetGroupRequestStub = stub
}

func (fake *FakeIAMAPI) GetGroupRequestArgsForCall(i int) *iam.GetGroupInput {
	fake.getGroupRequestMutex.RLock()
	defer fake.getGroupRequestMutex.RUnlock()
	argsForCall := fake.getGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetGroupRequestReturns(result1 *request.Request, result2 *iam.GetGroupOutput) {
	fake.getGroupRequestMutex.Lock()
	defer fake.getGroupRequestMutex.Unlock()
	fake.GetGroupRequestStub = nil
	fake.getGroupRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetGroupOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetGroupOutput) {
	fake.getGroupRequestMutex.Lock()
	defer fake.getGroupRequestMutex.Unlock()
	fake.GetGroupRequestStub = nil
	if fake.getGroupRequestReturnsOnCall == nil {
		fake.getGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetGroupOutput
		})
	}
	fake.getGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetGroupOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetGroupWithContext(arg1 context.Context, arg2 *iam.GetGroupInput, arg3 ...request.Option) (*iam.GetGroupOutput, error) {
	fake.getGroupWithContextMutex.Lock()
	ret, specificReturn := fake.getGroupWithContextReturnsOnCall[len(fake.getGroupWithContextArgsForCall)]
	fake.getGroupWithContextArgsForCall = append(fake.getGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.getGroupWithContextMutex.Unlock()
	if fake.GetGroupWithContextStub != nil {
		return fake.GetGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getGroupWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetGroupWithContextCallCount() int {
	fake.getGroupWithContextMutex.RLock()
	defer fake.getGroupWithContextMutex.RUnlock()
	return len(fake.getGroupWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetGroupWithContextCalls(stub func(context.Context, *iam.GetGroupInput, ...request.Option) (*iam.GetGroupOutput, error)) {
	fake.getGroupWithContextMutex.Lock()
	defer fake.getGroupWithContextMutex.Unlock()
	fake.GetGroupWithContextStub = stub
}

func (fake *FakeIAMAPI) GetGroupWithContextArgsForCall(i int) (context.Context, *iam.GetGroupInput, []request.Option) {
	fake.getGroupWithContextMutex.RLock()
	defer fake.getGroupWithContextMutex.RUnlock()
	argsForCall := fake.getGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetGroupWithContextReturns(result1 *iam.GetGroupOutput, result2 error) {
	fake.getGroupWithContextMutex.Lock()
	defer fake.getGroupWithContextMutex.Unlock()
	fake.GetGroupWithContextStub = nil
	fake.getGroupWithContextReturns = struct {
		result1 *iam.GetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetGroupWithContextReturnsOnCall(i int, result1 *iam.GetGroupOutput, result2 error) {
	fake.getGroupWithContextMutex.Lock()
	defer fake.getGroupWithContextMutex.Unlock()
	fake.GetGroupWithContextStub = nil
	if fake.getGroupWithContextReturnsOnCall == nil {
		fake.getGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetGroupOutput
			result2 error
		})
	}
	fake.getGroupWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetInstanceProfile(arg1 *iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error) {
	fake.getInstanceProfileMutex.Lock()
	ret, specificReturn := fake.getInstanceProfileReturnsOnCall[len(fake.getInstanceProfileArgsForCall)]
	fake.getInstanceProfileArgsForCall = append(fake.getInstanceProfileArgsForCall, struct {
		arg1 *iam.GetInstanceProfileInput
	}{arg1})
	fake.recordInvocation("GetInstanceProfile", []interface{}{arg1})
	fake.getInstanceProfileMutex.Unlock()
	if fake.GetInstanceProfileStub != nil {
		return fake.GetInstanceProfileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getInstanceProfileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetInstanceProfileCallCount() int {
	fake.getInstanceProfileMutex.RLock()
	defer fake.getInstanceProfileMutex.RUnlock()
	return len(fake.getInstanceProfileArgsForCall)
}

func (fake *FakeIAMAPI) GetInstanceProfileCalls(stub func(*iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error)) {
	fake.getInstanceProfileMutex.Lock()
	defer fake.getInstanceProfileMutex.Unlock()
	fake.GetInstanceProfileStub = stub
}

func (fake *FakeIAMAPI) GetInstanceProfileArgsForCall(i int) *iam.GetInstanceProfileInput {
	fake.getInstanceProfileMutex.RLock()
	defer fake.getInstanceProfileMutex.RUnlock()
	argsForCall := fake.getInstanceProfileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetInstanceProfileReturns(result1 *iam.GetInstanceProfileOutput, result2 error) {
	fake.getInstanceProfileMutex.Lock()
	defer fake.getInstanceProfileMutex.Unlock()
	fake.GetInstanceProfileStub = nil
	fake.getInstanceProfileReturns = struct {
		result1 *iam.GetInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetInstanceProfileReturnsOnCall(i int, result1 *iam.GetInstanceProfileOutput, result2 error) {
	fake.getInstanceProfileMutex.Lock()
	defer fake.getInstanceProfileMutex.Unlock()
	fake.GetInstanceProfileStub = nil
	if fake.getInstanceProfileReturnsOnCall == nil {
		fake.getInstanceProfileReturnsOnCall = make(map[int]struct {
			result1 *iam.GetInstanceProfileOutput
			result2 error
		})
	}
	fake.getInstanceProfileReturnsOnCall[i] = struct {
		result1 *iam.GetInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetInstanceProfileRequest(arg1 *iam.GetInstanceProfileInput) (*request.Request, *iam.GetInstanceProfileOutput) {
	fake.getInstanceProfileRequestMutex.Lock()
	ret, specificReturn := fake.getInstanceProfileRequestReturnsOnCall[len(fake.getInstanceProfileRequestArgsForCall)]
	fake.getInstanceProfileRequestArgsForCall = append(fake.getInstanceProfileRequestArgsForCall, struct {
		arg1 *iam.GetInstanceProfileInput
	}{arg1})
	fake.recordInvocation("GetInstanceProfileRequest", []interface{}{arg1})
	fake.getInstanceProfileRequestMutex.Unlock()
	if fake.GetInstanceProfileRequestStub != nil {
		return fake.GetInstanceProfileRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getInstanceProfileRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetInstanceProfileRequestCallCount() int {
	fake.getInstanceProfileRequestMutex.RLock()
	defer fake.getInstanceProfileRequestMutex.RUnlock()
	return len(fake.getInstanceProfileRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetInstanceProfileRequestCalls(stub func(*iam.GetInstanceProfileInput) (*request.Request, *iam.GetInstanceProfileOutput)) {
	fake.getInstanceProfileRequestMutex.Lock()
	defer fake.getInstanceProfileRequestMutex.Unlock()
	fake.GetInstanceProfileRequestStub = stub
}

func (fake *FakeIAMAPI) GetInstanceProfileRequestArgsForCall(i int) *iam.GetInstanceProfileInput {
	fake.getInstanceProfileRequestMutex.RLock()
	defer fake.getInstanceProfileRequestMutex.RUnlock()
	argsForCall := fake.getInstanceProfileRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetInstanceProfileRequestReturns(result1 *request.Request, result2 *iam.GetInstanceProfileOutput) {
	fake.getInstanceProfileRequestMutex.Lock()
	defer fake.getInstanceProfileRequestMutex.Unlock()
	fake.GetInstanceProfileRequestStub = nil
	fake.getInstanceProfileRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetInstanceProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetInstanceProfileRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetInstanceProfileOutput) {
	fake.getInstanceProfileRequestMutex.Lock()
	defer fake.getInstanceProfileRequestMutex.Unlock()
	fake.GetInstanceProfileRequestStub = nil
	if fake.getInstanceProfileRequestReturnsOnCall == nil {
		fake.getInstanceProfileRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetInstanceProfileOutput
		})
	}
	fake.getInstanceProfileRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetInstanceProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetInstanceProfileWithContext(arg1 context.Context, arg2 *iam.GetInstanceProfileInput, arg3 ...request.Option) (*iam.GetInstanceProfileOutput, error) {
	fake.getInstanceProfileWithContextMutex.Lock()
	ret, specificReturn := fake.getInstanceProfileWithContextReturnsOnCall[len(fake.getInstanceProfileWithContextArgsForCall)]
	fake.getInstanceProfileWithContextArgsForCall = append(fake.getInstanceProfileWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetInstanceProfileInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetInstanceProfileWithContext", []interface{}{arg1, arg2, arg3})
	fake.getInstanceProfileWithContextMutex.Unlock()
	if fake.GetInstanceProfileWithContextStub != nil {
		return fake.GetInstanceProfileWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getInstanceProfileWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetInstanceProfileWithContextCallCount() int {
	fake.getInstanceProfileWithContextMutex.RLock()
	defer fake.getInstanceProfileWithContextMutex.RUnlock()
	return len(fake.getInstanceProfileWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetInstanceProfileWithContextCalls(stub func(context.Context, *iam.GetInstanceProfileInput, ...request.Option) (*iam.GetInstanceProfileOutput, error)) {
	fake.getInstanceProfileWithContextMutex.Lock()
	defer fake.getInstanceProfileWithContextMutex.Unlock()
	fake.GetInstanceProfileWithContextStub = stub
}

func (fake *FakeIAMAPI) GetInstanceProfileWithContextArgsForCall(i int) (context.Context, *iam.GetInstanceProfileInput, []request.Option) {
	fake.getInstanceProfileWithContextMutex.RLock()
	defer fake.getInstanceProfileWithContextMutex.RUnlock()
	argsForCall := fake.getInstanceProfileWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetInstanceProfileWithContextReturns(result1 *iam.GetInstanceProfileOutput, result2 error) {
	fake.getInstanceProfileWithContextMutex.Lock()
	defer fake.getInstanceProfileWithContextMutex.Unlock()
	fake.GetInstanceProfileWithContextStub = nil
	fake.getInstanceProfileWithContextReturns = struct {
		result1 *iam.GetInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetInstanceProfileWithContextReturnsOnCall(i int, result1 *iam.GetInstanceProfileOutput, result2 error) {
	fake.getInstanceProfileWithContextMutex.Lock()
	defer fake.getInstanceProfileWithContextMutex.Unlock()
	fake.GetInstanceProfileWithContextStub = nil
	if fake.getInstanceProfileWithContextReturnsOnCall == nil {
		fake.getInstanceProfileWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetInstanceProfileOutput
			result2 error
		})
	}
	fake.getInstanceProfileWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetLoginProfile(arg1 *iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error) {
	fake.getLoginProfileMutex.Lock()
	ret, specificReturn := fake.getLoginProfileReturnsOnCall[len(fake.getLoginProfileArgsForCall)]
	fake.getLoginProfileArgsForCall = append(fake.getLoginProfileArgsForCall, struct {
		arg1 *iam.GetLoginProfileInput
	}{arg1})
	fake.recordInvocation("GetLoginProfile", []interface{}{arg1})
	fake.getLoginProfileMutex.Unlock()
	if fake.GetLoginProfileStub != nil {
		return fake.GetLoginProfileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getLoginProfileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetLoginProfileCallCount() int {
	fake.getLoginProfileMutex.RLock()
	defer fake.getLoginProfileMutex.RUnlock()
	return len(fake.getLoginProfileArgsForCall)
}

func (fake *FakeIAMAPI) GetLoginProfileCalls(stub func(*iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error)) {
	fake.getLoginProfileMutex.Lock()
	defer fake.getLoginProfileMutex.Unlock()
	fake.GetLoginProfileStub = stub
}

func (fake *FakeIAMAPI) GetLoginProfileArgsForCall(i int) *iam.GetLoginProfileInput {
	fake.getLoginProfileMutex.RLock()
	defer fake.getLoginProfileMutex.RUnlock()
	argsForCall := fake.getLoginProfileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetLoginProfileReturns(result1 *iam.GetLoginProfileOutput, result2 error) {
	fake.getLoginProfileMutex.Lock()
	defer fake.getLoginProfileMutex.Unlock()
	fake.GetLoginProfileStub = nil
	fake.getLoginProfileReturns = struct {
		result1 *iam.GetLoginProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetLoginProfileReturnsOnCall(i int, result1 *iam.GetLoginProfileOutput, result2 error) {
	fake.getLoginProfileMutex.Lock()
	defer fake.getLoginProfileMutex.Unlock()
	fake.GetLoginProfileStub = nil
	if fake.getLoginProfileReturnsOnCall == nil {
		fake.getLoginProfileReturnsOnCall = make(map[int]struct {
			result1 *iam.GetLoginProfileOutput
			result2 error
		})
	}
	fake.getLoginProfileReturnsOnCall[i] = struct {
		result1 *iam.GetLoginProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetLoginProfileRequest(arg1 *iam.GetLoginProfileInput) (*request.Request, *iam.GetLoginProfileOutput) {
	fake.getLoginProfileRequestMutex.Lock()
	ret, specificReturn := fake.getLoginProfileRequestReturnsOnCall[len(fake.getLoginProfileRequestArgsForCall)]
	fake.getLoginProfileRequestArgsForCall = append(fake.getLoginProfileRequestArgsForCall, struct {
		arg1 *iam.GetLoginProfileInput
	}{arg1})
	fake.recordInvocation("GetLoginProfileRequest", []interface{}{arg1})
	fake.getLoginProfileRequestMutex.Unlock()
	if fake.GetLoginProfileRequestStub != nil {
		return fake.GetLoginProfileRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getLoginProfileRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetLoginProfileRequestCallCount() int {
	fake.getLoginProfileRequestMutex.RLock()
	defer fake.getLoginProfileRequestMutex.RUnlock()
	return len(fake.getLoginProfileRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetLoginProfileRequestCalls(stub func(*iam.GetLoginProfileInput) (*request.Request, *iam.GetLoginProfileOutput)) {
	fake.getLoginProfileRequestMutex.Lock()
	defer fake.getLoginProfileRequestMutex.Unlock()
	fake.GetLoginProfileRequestStub = stub
}

func (fake *FakeIAMAPI) GetLoginProfileRequestArgsForCall(i int) *iam.GetLoginProfileInput {
	fake.getLoginProfileRequestMutex.RLock()
	defer fake.getLoginProfileRequestMutex.RUnlock()
	argsForCall := fake.getLoginProfileRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetLoginProfileRequestReturns(result1 *request.Request, result2 *iam.GetLoginProfileOutput) {
	fake.getLoginProfileRequestMutex.Lock()
	defer fake.getLoginProfileRequestMutex.Unlock()
	fake.GetLoginProfileRequestStub = nil
	fake.getLoginProfileRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetLoginProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetLoginProfileRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetLoginProfileOutput) {
	fake.getLoginProfileRequestMutex.Lock()
	defer fake.getLoginProfileRequestMutex.Unlock()
	fake.GetLoginProfileRequestStub = nil
	if fake.getLoginProfileRequestReturnsOnCall == nil {
		fake.getLoginProfileRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetLoginProfileOutput
		})
	}
	fake.getLoginProfileRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetLoginProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetLoginProfileWithContext(arg1 context.Context, arg2 *iam.GetLoginProfileInput, arg3 ...request.Option) (*iam.GetLoginProfileOutput, error) {
	fake.getLoginProfileWithContextMutex.Lock()
	ret, specificReturn := fake.getLoginProfileWithContextReturnsOnCall[len(fake.getLoginProfileWithContextArgsForCall)]
	fake.getLoginProfileWithContextArgsForCall = append(fake.getLoginProfileWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetLoginProfileInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetLoginProfileWithContext", []interface{}{arg1, arg2, arg3})
	fake.getLoginProfileWithContextMutex.Unlock()
	if fake.GetLoginProfileWithContextStub != nil {
		return fake.GetLoginProfileWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getLoginProfileWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetLoginProfileWithContextCallCount() int {
	fake.getLoginProfileWithContextMutex.RLock()
	defer fake.getLoginProfileWithContextMutex.RUnlock()
	return len(fake.getLoginProfileWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetLoginProfileWithContextCalls(stub func(context.Context, *iam.GetLoginProfileInput, ...request.Option) (*iam.GetLoginProfileOutput, error)) {
	fake.getLoginProfileWithContextMutex.Lock()
	defer fake.getLoginProfileWithContextMutex.Unlock()
	fake.GetLoginProfileWithContextStub = stub
}

func (fake *FakeIAMAPI) GetLoginProfileWithContextArgsForCall(i int) (context.Context, *iam.GetLoginProfileInput, []request.Option) {
	fake.getLoginProfileWithContextMutex.RLock()
	defer fake.getLoginProfileWithContextMutex.RUnlock()
	argsForCall := fake.getLoginProfileWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetLoginProfileWithContextReturns(result1 *iam.GetLoginProfileOutput, result2 error) {
	fake.getLoginProfileWithContextMutex.Lock()
	defer fake.getLoginProfileWithContextMutex.Unlock()
	fake.GetLoginProfileWithContextStub = nil
	fake.getLoginProfileWithContextReturns = struct {
		result1 *iam.GetLoginProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetLoginProfileWithContextReturnsOnCall(i int, result1 *iam.GetLoginProfileOutput, result2 error) {
	fake.getLoginProfileWithContextMutex.Lock()
	defer fake.getLoginProfileWithContextMutex.Unlock()
	fake.GetLoginProfileWithContextStub = nil
	if fake.getLoginProfileWithContextReturnsOnCall == nil {
		fake.getLoginProfileWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetLoginProfileOutput
			result2 error
		})
	}
	fake.getLoginProfileWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetLoginProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetOpenIDConnectProvider(arg1 *iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error) {
	fake.getOpenIDConnectProviderMutex.Lock()
	ret, specificReturn := fake.getOpenIDConnectProviderReturnsOnCall[len(fake.getOpenIDConnectProviderArgsForCall)]
	fake.getOpenIDConnectProviderArgsForCall = append(fake.getOpenIDConnectProviderArgsForCall, struct {
		arg1 *iam.GetOpenIDConnectProviderInput
	}{arg1})
	fake.recordInvocation("GetOpenIDConnectProvider", []interface{}{arg1})
	fake.getOpenIDConnectProviderMutex.Unlock()
	if fake.GetOpenIDConnectProviderStub != nil {
		return fake.GetOpenIDConnectProviderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getOpenIDConnectProviderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetOpenIDConnectProviderCallCount() int {
	fake.getOpenIDConnectProviderMutex.RLock()
	defer fake.getOpenIDConnectProviderMutex.RUnlock()
	return len(fake.getOpenIDConnectProviderArgsForCall)
}

func (fake *FakeIAMAPI) GetOpenIDConnectProviderCalls(stub func(*iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error)) {
	fake.getOpenIDConnectProviderMutex.Lock()
	defer fake.getOpenIDConnectProviderMutex.Unlock()
	fake.GetOpenIDConnectProviderStub = stub
}

func (fake *FakeIAMAPI) GetOpenIDConnectProviderArgsForCall(i int) *iam.GetOpenIDConnectProviderInput {
	fake.getOpenIDConnectProviderMutex.RLock()
	defer fake.getOpenIDConnectProviderMutex.RUnlock()
	argsForCall := fake.getOpenIDConnectProviderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetOpenIDConnectProviderReturns(result1 *iam.GetOpenIDConnectProviderOutput, result2 error) {
	fake.getOpenIDConnectProviderMutex.Lock()
	defer fake.getOpenIDConnectProviderMutex.Unlock()
	fake.GetOpenIDConnectProviderStub = nil
	fake.getOpenIDConnectProviderReturns = struct {
		result1 *iam.GetOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetOpenIDConnectProviderReturnsOnCall(i int, result1 *iam.GetOpenIDConnectProviderOutput, result2 error) {
	fake.getOpenIDConnectProviderMutex.Lock()
	defer fake.getOpenIDConnectProviderMutex.Unlock()
	fake.GetOpenIDConnectProviderStub = nil
	if fake.getOpenIDConnectProviderReturnsOnCall == nil {
		fake.getOpenIDConnectProviderReturnsOnCall = make(map[int]struct {
			result1 *iam.GetOpenIDConnectProviderOutput
			result2 error
		})
	}
	fake.getOpenIDConnectProviderReturnsOnCall[i] = struct {
		result1 *iam.GetOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetOpenIDConnectProviderRequest(arg1 *iam.GetOpenIDConnectProviderInput) (*request.Request, *iam.GetOpenIDConnectProviderOutput) {
	fake.getOpenIDConnectProviderRequestMutex.Lock()
	ret, specificReturn := fake.getOpenIDConnectProviderRequestReturnsOnCall[len(fake.getOpenIDConnectProviderRequestArgsForCall)]
	fake.getOpenIDConnectProviderRequestArgsForCall = append(fake.getOpenIDConnectProviderRequestArgsForCall, struct {
		arg1 *iam.GetOpenIDConnectProviderInput
	}{arg1})
	fake.recordInvocation("GetOpenIDConnectProviderRequest", []interface{}{arg1})
	fake.getOpenIDConnectProviderRequestMutex.Unlock()
	if fake.GetOpenIDConnectProviderRequestStub != nil {
		return fake.GetOpenIDConnectProviderRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getOpenIDConnectProviderRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetOpenIDConnectProviderRequestCallCount() int {
	fake.getOpenIDConnectProviderRequestMutex.RLock()
	defer fake.getOpenIDConnectProviderRequestMutex.RUnlock()
	return len(fake.getOpenIDConnectProviderRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetOpenIDConnectProviderRequestCalls(stub func(*iam.GetOpenIDConnectProviderInput) (*request.Request, *iam.GetOpenIDConnectProviderOutput)) {
	fake.getOpenIDConnectProviderRequestMutex.Lock()
	defer fake.getOpenIDConnectProviderRequestMutex.Unlock()
	fake.GetOpenIDConnectProviderRequestStub = stub
}

func (fake *FakeIAMAPI) GetOpenIDConnectProviderRequestArgsForCall(i int) *iam.GetOpenIDConnectProviderInput {
	fake.getOpenIDConnectProviderRequestMutex.RLock()
	defer fake.getOpenIDConnectProviderRequestMutex.RUnlock()
	argsForCall := fake.getOpenIDConnectProviderRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetOpenIDConnectProviderRequestReturns(result1 *request.Request, result2 *iam.GetOpenIDConnectProviderOutput) {
	fake.getOpenIDConnectProviderRequestMutex.Lock()
	defer fake.getOpenIDConnectProviderRequestMutex.Unlock()
	fake.GetOpenIDConnectProviderRequestStub = nil
	fake.getOpenIDConnectProviderRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetOpenIDConnectProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetOpenIDConnectProviderRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetOpenIDConnectProviderOutput) {
	fake.getOpenIDConnectProviderRequestMutex.Lock()
	defer fake.getOpenIDConnectProviderRequestMutex.Unlock()
	fake.GetOpenIDConnectProviderRequestStub = nil
	if fake.getOpenIDConnectProviderRequestReturnsOnCall == nil {
		fake.getOpenIDConnectProviderRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetOpenIDConnectProviderOutput
		})
	}
	fake.getOpenIDConnectProviderRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetOpenIDConnectProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetOpenIDConnectProviderWithContext(arg1 context.Context, arg2 *iam.GetOpenIDConnectProviderInput, arg3 ...request.Option) (*iam.GetOpenIDConnectProviderOutput, error) {
	fake.getOpenIDConnectProviderWithContextMutex.Lock()
	ret, specificReturn := fake.getOpenIDConnectProviderWithContextReturnsOnCall[len(fake.getOpenIDConnectProviderWithContextArgsForCall)]
	fake.getOpenIDConnectProviderWithContextArgsForCall = append(fake.getOpenIDConnectProviderWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetOpenIDConnectProviderInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetOpenIDConnectProviderWithContext", []interface{}{arg1, arg2, arg3})
	fake.getOpenIDConnectProviderWithContextMutex.Unlock()
	if fake.GetOpenIDConnectProviderWithContextStub != nil {
		return fake.GetOpenIDConnectProviderWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getOpenIDConnectProviderWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetOpenIDConnectProviderWithContextCallCount() int {
	fake.getOpenIDConnectProviderWithContextMutex.RLock()
	defer fake.getOpenIDConnectProviderWithContextMutex.RUnlock()
	return len(fake.getOpenIDConnectProviderWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetOpenIDConnectProviderWithContextCalls(stub func(context.Context, *iam.GetOpenIDConnectProviderInput, ...request.Option) (*iam.GetOpenIDConnectProviderOutput, error)) {
	fake.getOpenIDConnectProviderWithContextMutex.Lock()
	defer fake.getOpenIDConnectProviderWithContextMutex.Unlock()
	fake.GetOpenIDConnectProviderWithContextStub = stub
}

func (fake *FakeIAMAPI) GetOpenIDConnectProviderWithContextArgsForCall(i int) (context.Context, *iam.GetOpenIDConnectProviderInput, []request.Option) {
	fake.getOpenIDConnectProviderWithContextMutex.RLock()
	defer fake.getOpenIDConnectProviderWithContextMutex.RUnlock()
	argsForCall := fake.getOpenIDConnectProviderWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetOpenIDConnectProviderWithContextReturns(result1 *iam.GetOpenIDConnectProviderOutput, result2 error) {
	fake.getOpenIDConnectProviderWithContextMutex.Lock()
	defer fake.getOpenIDConnectProviderWithContextMutex.Unlock()
	fake.GetOpenIDConnectProviderWithContextStub = nil
	fake.getOpenIDConnectProviderWithContextReturns = struct {
		result1 *iam.GetOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetOpenIDConnectProviderWithContextReturnsOnCall(i int, result1 *iam.GetOpenIDConnectProviderOutput, result2 error) {
	fake.getOpenIDConnectProviderWithContextMutex.Lock()
	defer fake.getOpenIDConnectProviderWithContextMutex.Unlock()
	fake.GetOpenIDConnectProviderWithContextStub = nil
	if fake.getOpenIDConnectProviderWithContextReturnsOnCall == nil {
		fake.getOpenIDConnectProviderWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetOpenIDConnectProviderOutput
			result2 error
		})
	}
	fake.getOpenIDConnectProviderWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReport(arg1 *iam.GetOrganizationsAccessReportInput) (*iam.GetOrganizationsAccessReportOutput, error) {
	fake.getOrganizationsAccessReportMutex.Lock()
	ret, specificReturn := fake.getOrganizationsAccessReportReturnsOnCall[len(fake.getOrganizationsAccessReportArgsForCall)]
	fake.getOrganizationsAccessReportArgsForCall = append(fake.getOrganizationsAccessReportArgsForCall, struct {
		arg1 *iam.GetOrganizationsAccessReportInput
	}{arg1})
	fake.recordInvocation("GetOrganizationsAccessReport", []interface{}{arg1})
	fake.getOrganizationsAccessReportMutex.Unlock()
	if fake.GetOrganizationsAccessReportStub != nil {
		return fake.GetOrganizationsAccessReportStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getOrganizationsAccessReportReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReportCallCount() int {
	fake.getOrganizationsAccessReportMutex.RLock()
	defer fake.getOrganizationsAccessReportMutex.RUnlock()
	return len(fake.getOrganizationsAccessReportArgsForCall)
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReportCalls(stub func(*iam.GetOrganizationsAccessReportInput) (*iam.GetOrganizationsAccessReportOutput, error)) {
	fake.getOrganizationsAccessReportMutex.Lock()
	defer fake.getOrganizationsAccessReportMutex.Unlock()
	fake.GetOrganizationsAccessReportStub = stub
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReportArgsForCall(i int) *iam.GetOrganizationsAccessReportInput {
	fake.getOrganizationsAccessReportMutex.RLock()
	defer fake.getOrganizationsAccessReportMutex.RUnlock()
	argsForCall := fake.getOrganizationsAccessReportArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReportReturns(result1 *iam.GetOrganizationsAccessReportOutput, result2 error) {
	fake.getOrganizationsAccessReportMutex.Lock()
	defer fake.getOrganizationsAccessReportMutex.Unlock()
	fake.GetOrganizationsAccessReportStub = nil
	fake.getOrganizationsAccessReportReturns = struct {
		result1 *iam.GetOrganizationsAccessReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReportReturnsOnCall(i int, result1 *iam.GetOrganizationsAccessReportOutput, result2 error) {
	fake.getOrganizationsAccessReportMutex.Lock()
	defer fake.getOrganizationsAccessReportMutex.Unlock()
	fake.GetOrganizationsAccessReportStub = nil
	if fake.getOrganizationsAccessReportReturnsOnCall == nil {
		fake.getOrganizationsAccessReportReturnsOnCall = make(map[int]struct {
			result1 *iam.GetOrganizationsAccessReportOutput
			result2 error
		})
	}
	fake.getOrganizationsAccessReportReturnsOnCall[i] = struct {
		result1 *iam.GetOrganizationsAccessReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReportRequest(arg1 *iam.GetOrganizationsAccessReportInput) (*request.Request, *iam.GetOrganizationsAccessReportOutput) {
	fake.getOrganizationsAccessReportRequestMutex.Lock()
	ret, specificReturn := fake.getOrganizationsAccessReportRequestReturnsOnCall[len(fake.getOrganizationsAccessReportRequestArgsForCall)]
	fake.getOrganizationsAccessReportRequestArgsForCall = append(fake.getOrganizationsAccessReportRequestArgsForCall, struct {
		arg1 *iam.GetOrganizationsAccessReportInput
	}{arg1})
	fake.recordInvocation("GetOrganizationsAccessReportRequest", []interface{}{arg1})
	fake.getOrganizationsAccessReportRequestMutex.Unlock()
	if fake.GetOrganizationsAccessReportRequestStub != nil {
		return fake.GetOrganizationsAccessReportRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getOrganizationsAccessReportRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReportRequestCallCount() int {
	fake.getOrganizationsAccessReportRequestMutex.RLock()
	defer fake.getOrganizationsAccessReportRequestMutex.RUnlock()
	return len(fake.getOrganizationsAccessReportRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReportRequestCalls(stub func(*iam.GetOrganizationsAccessReportInput) (*request.Request, *iam.GetOrganizationsAccessReportOutput)) {
	fake.getOrganizationsAccessReportRequestMutex.Lock()
	defer fake.getOrganizationsAccessReportRequestMutex.Unlock()
	fake.GetOrganizationsAccessReportRequestStub = stub
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReportRequestArgsForCall(i int) *iam.GetOrganizationsAccessReportInput {
	fake.getOrganizationsAccessReportRequestMutex.RLock()
	defer fake.getOrganizationsAccessReportRequestMutex.RUnlock()
	argsForCall := fake.getOrganizationsAccessReportRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReportRequestReturns(result1 *request.Request, result2 *iam.GetOrganizationsAccessReportOutput) {
	fake.getOrganizationsAccessReportRequestMutex.Lock()
	defer fake.getOrganizationsAccessReportRequestMutex.Unlock()
	fake.GetOrganizationsAccessReportRequestStub = nil
	fake.getOrganizationsAccessReportRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetOrganizationsAccessReportOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReportRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetOrganizationsAccessReportOutput) {
	fake.getOrganizationsAccessReportRequestMutex.Lock()
	defer fake.getOrganizationsAccessReportRequestMutex.Unlock()
	fake.GetOrganizationsAccessReportRequestStub = nil
	if fake.getOrganizationsAccessReportRequestReturnsOnCall == nil {
		fake.getOrganizationsAccessReportRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetOrganizationsAccessReportOutput
		})
	}
	fake.getOrganizationsAccessReportRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetOrganizationsAccessReportOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReportWithContext(arg1 context.Context, arg2 *iam.GetOrganizationsAccessReportInput, arg3 ...request.Option) (*iam.GetOrganizationsAccessReportOutput, error) {
	fake.getOrganizationsAccessReportWithContextMutex.Lock()
	ret, specificReturn := fake.getOrganizationsAccessReportWithContextReturnsOnCall[len(fake.getOrganizationsAccessReportWithContextArgsForCall)]
	fake.getOrganizationsAccessReportWithContextArgsForCall = append(fake.getOrganizationsAccessReportWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetOrganizationsAccessReportInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetOrganizationsAccessReportWithContext", []interface{}{arg1, arg2, arg3})
	fake.getOrganizationsAccessReportWithContextMutex.Unlock()
	if fake.GetOrganizationsAccessReportWithContextStub != nil {
		return fake.GetOrganizationsAccessReportWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getOrganizationsAccessReportWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReportWithContextCallCount() int {
	fake.getOrganizationsAccessReportWithContextMutex.RLock()
	defer fake.getOrganizationsAccessReportWithContextMutex.RUnlock()
	return len(fake.getOrganizationsAccessReportWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReportWithContextCalls(stub func(context.Context, *iam.GetOrganizationsAccessReportInput, ...request.Option) (*iam.GetOrganizationsAccessReportOutput, error)) {
	fake.getOrganizationsAccessReportWithContextMutex.Lock()
	defer fake.getOrganizationsAccessReportWithContextMutex.Unlock()
	fake.GetOrganizationsAccessReportWithContextStub = stub
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReportWithContextArgsForCall(i int) (context.Context, *iam.GetOrganizationsAccessReportInput, []request.Option) {
	fake.getOrganizationsAccessReportWithContextMutex.RLock()
	defer fake.getOrganizationsAccessReportWithContextMutex.RUnlock()
	argsForCall := fake.getOrganizationsAccessReportWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReportWithContextReturns(result1 *iam.GetOrganizationsAccessReportOutput, result2 error) {
	fake.getOrganizationsAccessReportWithContextMutex.Lock()
	defer fake.getOrganizationsAccessReportWithContextMutex.Unlock()
	fake.GetOrganizationsAccessReportWithContextStub = nil
	fake.getOrganizationsAccessReportWithContextReturns = struct {
		result1 *iam.GetOrganizationsAccessReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetOrganizationsAccessReportWithContextReturnsOnCall(i int, result1 *iam.GetOrganizationsAccessReportOutput, result2 error) {
	fake.getOrganizationsAccessReportWithContextMutex.Lock()
	defer fake.getOrganizationsAccessReportWithContextMutex.Unlock()
	fake.GetOrganizationsAccessReportWithContextStub = nil
	if fake.getOrganizationsAccessReportWithContextReturnsOnCall == nil {
		fake.getOrganizationsAccessReportWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetOrganizationsAccessReportOutput
			result2 error
		})
	}
	fake.getOrganizationsAccessReportWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetOrganizationsAccessReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetPolicy(arg1 *iam.GetPolicyInput) (*iam.GetPolicyOutput, error) {
	fake.getPolicyMutex.Lock()
	ret, specificReturn := fake.getPolicyReturnsOnCall[len(fake.getPolicyArgsForCall)]
	fake.getPolicyArgsForCall = append(fake.getPolicyArgsForCall, struct {
		arg1 *iam.GetPolicyInput
	}{arg1})
	fake.recordInvocation("GetPolicy", []interface{}{arg1})
	fake.getPolicyMutex.Unlock()
	if fake.GetPolicyStub != nil {
		return fake.GetPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetPolicyCallCount() int {
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	return len(fake.getPolicyArgsForCall)
}

func (fake *FakeIAMAPI) GetPolicyCalls(stub func(*iam.GetPolicyInput) (*iam.GetPolicyOutput, error)) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = stub
}

func (fake *FakeIAMAPI) GetPolicyArgsForCall(i int) *iam.GetPolicyInput {
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	argsForCall := fake.getPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetPolicyReturns(result1 *iam.GetPolicyOutput, result2 error) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = nil
	fake.getPolicyReturns = struct {
		result1 *iam.GetPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetPolicyReturnsOnCall(i int, result1 *iam.GetPolicyOutput, result2 error) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = nil
	if fake.getPolicyReturnsOnCall == nil {
		fake.getPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.GetPolicyOutput
			result2 error
		})
	}
	fake.getPolicyReturnsOnCall[i] = struct {
		result1 *iam.GetPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetPolicyRequest(arg1 *iam.GetPolicyInput) (*request.Request, *iam.GetPolicyOutput) {
	fake.getPolicyRequestMutex.Lock()
	ret, specificReturn := fake.getPolicyRequestReturnsOnCall[len(fake.getPolicyRequestArgsForCall)]
	fake.getPolicyRequestArgsForCall = append(fake.getPolicyRequestArgsForCall, struct {
		arg1 *iam.GetPolicyInput
	}{arg1})
	fake.recordInvocation("GetPolicyRequest", []interface{}{arg1})
	fake.getPolicyRequestMutex.Unlock()
	if fake.GetPolicyRequestStub != nil {
		return fake.GetPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetPolicyRequestCallCount() int {
	fake.getPolicyRequestMutex.RLock()
	defer fake.getPolicyRequestMutex.RUnlock()
	return len(fake.getPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetPolicyRequestCalls(stub func(*iam.GetPolicyInput) (*request.Request, *iam.GetPolicyOutput)) {
	fake.getPolicyRequestMutex.Lock()
	defer fake.getPolicyRequestMutex.Unlock()
	fake.GetPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) GetPolicyRequestArgsForCall(i int) *iam.GetPolicyInput {
	fake.getPolicyRequestMutex.RLock()
	defer fake.getPolicyRequestMutex.RUnlock()
	argsForCall := fake.getPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetPolicyRequestReturns(result1 *request.Request, result2 *iam.GetPolicyOutput) {
	fake.getPolicyRequestMutex.Lock()
	defer fake.getPolicyRequestMutex.Unlock()
	fake.GetPolicyRequestStub = nil
	fake.getPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetPolicyOutput) {
	fake.getPolicyRequestMutex.Lock()
	defer fake.getPolicyRequestMutex.Unlock()
	fake.GetPolicyRequestStub = nil
	if fake.getPolicyRequestReturnsOnCall == nil {
		fake.getPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetPolicyOutput
		})
	}
	fake.getPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetPolicyVersion(arg1 *iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error) {
	fake.getPolicyVersionMutex.Lock()
	ret, specificReturn := fake.getPolicyVersionReturnsOnCall[len(fake.getPolicyVersionArgsForCall)]
	fake.getPolicyVersionArgsForCall = append(fake.getPolicyVersionArgsForCall, struct {
		arg1 *iam.GetPolicyVersionInput
	}{arg1})
	fake.recordInvocation("GetPolicyVersion", []interface{}{arg1})
	fake.getPolicyVersionMutex.Unlock()
	if fake.GetPolicyVersionStub != nil {
		return fake.GetPolicyVersionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPolicyVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetPolicyVersionCallCount() int {
	fake.getPolicyVersionMutex.RLock()
	defer fake.getPolicyVersionMutex.RUnlock()
	return len(fake.getPolicyVersionArgsForCall)
}

func (fake *FakeIAMAPI) GetPolicyVersionCalls(stub func(*iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error)) {
	fake.getPolicyVersionMutex.Lock()
	defer fake.getPolicyVersionMutex.Unlock()
	fake.GetPolicyVersionStub = stub
}

func (fake *FakeIAMAPI) GetPolicyVersionArgsForCall(i int) *iam.GetPolicyVersionInput {
	fake.getPolicyVersionMutex.RLock()
	defer fake.getPolicyVersionMutex.RUnlock()
	argsForCall := fake.getPolicyVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetPolicyVersionReturns(result1 *iam.GetPolicyVersionOutput, result2 error) {
	fake.getPolicyVersionMutex.Lock()
	defer fake.getPolicyVersionMutex.Unlock()
	fake.GetPolicyVersionStub = nil
	fake.getPolicyVersionReturns = struct {
		result1 *iam.GetPolicyVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetPolicyVersionReturnsOnCall(i int, result1 *iam.GetPolicyVersionOutput, result2 error) {
	fake.getPolicyVersionMutex.Lock()
	defer fake.getPolicyVersionMutex.Unlock()
	fake.GetPolicyVersionStub = nil
	if fake.getPolicyVersionReturnsOnCall == nil {
		fake.getPolicyVersionReturnsOnCall = make(map[int]struct {
			result1 *iam.GetPolicyVersionOutput
			result2 error
		})
	}
	fake.getPolicyVersionReturnsOnCall[i] = struct {
		result1 *iam.GetPolicyVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetPolicyVersionRequest(arg1 *iam.GetPolicyVersionInput) (*request.Request, *iam.GetPolicyVersionOutput) {
	fake.getPolicyVersionRequestMutex.Lock()
	ret, specificReturn := fake.getPolicyVersionRequestReturnsOnCall[len(fake.getPolicyVersionRequestArgsForCall)]
	fake.getPolicyVersionRequestArgsForCall = append(fake.getPolicyVersionRequestArgsForCall, struct {
		arg1 *iam.GetPolicyVersionInput
	}{arg1})
	fake.recordInvocation("GetPolicyVersionRequest", []interface{}{arg1})
	fake.getPolicyVersionRequestMutex.Unlock()
	if fake.GetPolicyVersionRequestStub != nil {
		return fake.GetPolicyVersionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPolicyVersionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetPolicyVersionRequestCallCount() int {
	fake.getPolicyVersionRequestMutex.RLock()
	defer fake.getPolicyVersionRequestMutex.RUnlock()
	return len(fake.getPolicyVersionRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetPolicyVersionRequestCalls(stub func(*iam.GetPolicyVersionInput) (*request.Request, *iam.GetPolicyVersionOutput)) {
	fake.getPolicyVersionRequestMutex.Lock()
	defer fake.getPolicyVersionRequestMutex.Unlock()
	fake.GetPolicyVersionRequestStub = stub
}

func (fake *FakeIAMAPI) GetPolicyVersionRequestArgsForCall(i int) *iam.GetPolicyVersionInput {
	fake.getPolicyVersionRequestMutex.RLock()
	defer fake.getPolicyVersionRequestMutex.RUnlock()
	argsForCall := fake.getPolicyVersionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetPolicyVersionRequestReturns(result1 *request.Request, result2 *iam.GetPolicyVersionOutput) {
	fake.getPolicyVersionRequestMutex.Lock()
	defer fake.getPolicyVersionRequestMutex.Unlock()
	fake.GetPolicyVersionRequestStub = nil
	fake.getPolicyVersionRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetPolicyVersionOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetPolicyVersionRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetPolicyVersionOutput) {
	fake.getPolicyVersionRequestMutex.Lock()
	defer fake.getPolicyVersionRequestMutex.Unlock()
	fake.GetPolicyVersionRequestStub = nil
	if fake.getPolicyVersionRequestReturnsOnCall == nil {
		fake.getPolicyVersionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetPolicyVersionOutput
		})
	}
	fake.getPolicyVersionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetPolicyVersionOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetPolicyVersionWithContext(arg1 context.Context, arg2 *iam.GetPolicyVersionInput, arg3 ...request.Option) (*iam.GetPolicyVersionOutput, error) {
	fake.getPolicyVersionWithContextMutex.Lock()
	ret, specificReturn := fake.getPolicyVersionWithContextReturnsOnCall[len(fake.getPolicyVersionWithContextArgsForCall)]
	fake.getPolicyVersionWithContextArgsForCall = append(fake.getPolicyVersionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetPolicyVersionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetPolicyVersionWithContext", []interface{}{arg1, arg2, arg3})
	fake.getPolicyVersionWithContextMutex.Unlock()
	if fake.GetPolicyVersionWithContextStub != nil {
		return fake.GetPolicyVersionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPolicyVersionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetPolicyVersionWithContextCallCount() int {
	fake.getPolicyVersionWithContextMutex.RLock()
	defer fake.getPolicyVersionWithContextMutex.RUnlock()
	return len(fake.getPolicyVersionWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetPolicyVersionWithContextCalls(stub func(context.Context, *iam.GetPolicyVersionInput, ...request.Option) (*iam.GetPolicyVersionOutput, error)) {
	fake.getPolicyVersionWithContextMutex.Lock()
	defer fake.getPolicyVersionWithContextMutex.Unlock()
	fake.GetPolicyVersionWithContextStub = stub
}

func (fake *FakeIAMAPI) GetPolicyVersionWithContextArgsForCall(i int) (context.Context, *iam.GetPolicyVersionInput, []request.Option) {
	fake.getPolicyVersionWithContextMutex.RLock()
	defer fake.getPolicyVersionWithContextMutex.RUnlock()
	argsForCall := fake.getPolicyVersionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetPolicyVersionWithContextReturns(result1 *iam.GetPolicyVersionOutput, result2 error) {
	fake.getPolicyVersionWithContextMutex.Lock()
	defer fake.getPolicyVersionWithContextMutex.Unlock()
	fake.GetPolicyVersionWithContextStub = nil
	fake.getPolicyVersionWithContextReturns = struct {
		result1 *iam.GetPolicyVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetPolicyVersionWithContextReturnsOnCall(i int, result1 *iam.GetPolicyVersionOutput, result2 error) {
	fake.getPolicyVersionWithContextMutex.Lock()
	defer fake.getPolicyVersionWithContextMutex.Unlock()
	fake.GetPolicyVersionWithContextStub = nil
	if fake.getPolicyVersionWithContextReturnsOnCall == nil {
		fake.getPolicyVersionWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetPolicyVersionOutput
			result2 error
		})
	}
	fake.getPolicyVersionWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetPolicyVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetPolicyWithContext(arg1 context.Context, arg2 *iam.GetPolicyInput, arg3 ...request.Option) (*iam.GetPolicyOutput, error) {
	fake.getPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.getPolicyWithContextReturnsOnCall[len(fake.getPolicyWithContextArgsForCall)]
	fake.getPolicyWithContextArgsForCall = append(fake.getPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.getPolicyWithContextMutex.Unlock()
	if fake.GetPolicyWithContextStub != nil {
		return fake.GetPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetPolicyWithContextCallCount() int {
	fake.getPolicyWithContextMutex.RLock()
	defer fake.getPolicyWithContextMutex.RUnlock()
	return len(fake.getPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetPolicyWithContextCalls(stub func(context.Context, *iam.GetPolicyInput, ...request.Option) (*iam.GetPolicyOutput, error)) {
	fake.getPolicyWithContextMutex.Lock()
	defer fake.getPolicyWithContextMutex.Unlock()
	fake.GetPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) GetPolicyWithContextArgsForCall(i int) (context.Context, *iam.GetPolicyInput, []request.Option) {
	fake.getPolicyWithContextMutex.RLock()
	defer fake.getPolicyWithContextMutex.RUnlock()
	argsForCall := fake.getPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetPolicyWithContextReturns(result1 *iam.GetPolicyOutput, result2 error) {
	fake.getPolicyWithContextMutex.Lock()
	defer fake.getPolicyWithContextMutex.Unlock()
	fake.GetPolicyWithContextStub = nil
	fake.getPolicyWithContextReturns = struct {
		result1 *iam.GetPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetPolicyWithContextReturnsOnCall(i int, result1 *iam.GetPolicyOutput, result2 error) {
	fake.getPolicyWithContextMutex.Lock()
	defer fake.getPolicyWithContextMutex.Unlock()
	fake.GetPolicyWithContextStub = nil
	if fake.getPolicyWithContextReturnsOnCall == nil {
		fake.getPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetPolicyOutput
			result2 error
		})
	}
	fake.getPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetRole(arg1 *iam.GetRoleInput) (*iam.GetRoleOutput, error) {
	fake.getRoleMutex.Lock()
	ret, specificReturn := fake.getRoleReturnsOnCall[len(fake.getRoleArgsForCall)]
	fake.getRoleArgsForCall = append(fake.getRoleArgsForCall, struct {
		arg1 *iam.GetRoleInput
	}{arg1})
	fake.recordInvocation("GetRole", []interface{}{arg1})
	fake.getRoleMutex.Unlock()
	if fake.GetRoleStub != nil {
		return fake.GetRoleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getRoleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetRoleCallCount() int {
	fake.getRoleMutex.RLock()
	defer fake.getRoleMutex.RUnlock()
	return len(fake.getRoleArgsForCall)
}

func (fake *FakeIAMAPI) GetRoleCalls(stub func(*iam.GetRoleInput) (*iam.GetRoleOutput, error)) {
	fake.getRoleMutex.Lock()
	defer fake.getRoleMutex.Unlock()
	fake.GetRoleStub = stub
}

func (fake *FakeIAMAPI) GetRoleArgsForCall(i int) *iam.GetRoleInput {
	fake.getRoleMutex.RLock()
	defer fake.getRoleMutex.RUnlock()
	argsForCall := fake.getRoleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetRoleReturns(result1 *iam.GetRoleOutput, result2 error) {
	fake.getRoleMutex.Lock()
	defer fake.getRoleMutex.Unlock()
	fake.GetRoleStub = nil
	fake.getRoleReturns = struct {
		result1 *iam.GetRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetRoleReturnsOnCall(i int, result1 *iam.GetRoleOutput, result2 error) {
	fake.getRoleMutex.Lock()
	defer fake.getRoleMutex.Unlock()
	fake.GetRoleStub = nil
	if fake.getRoleReturnsOnCall == nil {
		fake.getRoleReturnsOnCall = make(map[int]struct {
			result1 *iam.GetRoleOutput
			result2 error
		})
	}
	fake.getRoleReturnsOnCall[i] = struct {
		result1 *iam.GetRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetRolePolicy(arg1 *iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error) {
	fake.getRolePolicyMutex.Lock()
	ret, specificReturn := fake.getRolePolicyReturnsOnCall[len(fake.getRolePolicyArgsForCall)]
	fake.getRolePolicyArgsForCall = append(fake.getRolePolicyArgsForCall, struct {
		arg1 *iam.GetRolePolicyInput
	}{arg1})
	fake.recordInvocation("GetRolePolicy", []interface{}{arg1})
	fake.getRolePolicyMutex.Unlock()
	if fake.GetRolePolicyStub != nil {
		return fake.GetRolePolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getRolePolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetRolePolicyCallCount() int {
	fake.getRolePolicyMutex.RLock()
	defer fake.getRolePolicyMutex.RUnlock()
	return len(fake.getRolePolicyArgsForCall)
}

func (fake *FakeIAMAPI) GetRolePolicyCalls(stub func(*iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error)) {
	fake.getRolePolicyMutex.Lock()
	defer fake.getRolePolicyMutex.Unlock()
	fake.GetRolePolicyStub = stub
}

func (fake *FakeIAMAPI) GetRolePolicyArgsForCall(i int) *iam.GetRolePolicyInput {
	fake.getRolePolicyMutex.RLock()
	defer fake.getRolePolicyMutex.RUnlock()
	argsForCall := fake.getRolePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetRolePolicyReturns(result1 *iam.GetRolePolicyOutput, result2 error) {
	fake.getRolePolicyMutex.Lock()
	defer fake.getRolePolicyMutex.Unlock()
	fake.GetRolePolicyStub = nil
	fake.getRolePolicyReturns = struct {
		result1 *iam.GetRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetRolePolicyReturnsOnCall(i int, result1 *iam.GetRolePolicyOutput, result2 error) {
	fake.getRolePolicyMutex.Lock()
	defer fake.getRolePolicyMutex.Unlock()
	fake.GetRolePolicyStub = nil
	if fake.getRolePolicyReturnsOnCall == nil {
		fake.getRolePolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.GetRolePolicyOutput
			result2 error
		})
	}
	fake.getRolePolicyReturnsOnCall[i] = struct {
		result1 *iam.GetRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetRolePolicyRequest(arg1 *iam.GetRolePolicyInput) (*request.Request, *iam.GetRolePolicyOutput) {
	fake.getRolePolicyRequestMutex.Lock()
	ret, specificReturn := fake.getRolePolicyRequestReturnsOnCall[len(fake.getRolePolicyRequestArgsForCall)]
	fake.getRolePolicyRequestArgsForCall = append(fake.getRolePolicyRequestArgsForCall, struct {
		arg1 *iam.GetRolePolicyInput
	}{arg1})
	fake.recordInvocation("GetRolePolicyRequest", []interface{}{arg1})
	fake.getRolePolicyRequestMutex.Unlock()
	if fake.GetRolePolicyRequestStub != nil {
		return fake.GetRolePolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getRolePolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetRolePolicyRequestCallCount() int {
	fake.getRolePolicyRequestMutex.RLock()
	defer fake.getRolePolicyRequestMutex.RUnlock()
	return len(fake.getRolePolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetRolePolicyRequestCalls(stub func(*iam.GetRolePolicyInput) (*request.Request, *iam.GetRolePolicyOutput)) {
	fake.getRolePolicyRequestMutex.Lock()
	defer fake.getRolePolicyRequestMutex.Unlock()
	fake.GetRolePolicyRequestStub = stub
}

func (fake *FakeIAMAPI) GetRolePolicyRequestArgsForCall(i int) *iam.GetRolePolicyInput {
	fake.getRolePolicyRequestMutex.RLock()
	defer fake.getRolePolicyRequestMutex.RUnlock()
	argsForCall := fake.getRolePolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetRolePolicyRequestReturns(result1 *request.Request, result2 *iam.GetRolePolicyOutput) {
	fake.getRolePolicyRequestMutex.Lock()
	defer fake.getRolePolicyRequestMutex.Unlock()
	fake.GetRolePolicyRequestStub = nil
	fake.getRolePolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetRolePolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetRolePolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetRolePolicyOutput) {
	fake.getRolePolicyRequestMutex.Lock()
	defer fake.getRolePolicyRequestMutex.Unlock()
	fake.GetRolePolicyRequestStub = nil
	if fake.getRolePolicyRequestReturnsOnCall == nil {
		fake.getRolePolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetRolePolicyOutput
		})
	}
	fake.getRolePolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetRolePolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetRolePolicyWithContext(arg1 context.Context, arg2 *iam.GetRolePolicyInput, arg3 ...request.Option) (*iam.GetRolePolicyOutput, error) {
	fake.getRolePolicyWithContextMutex.Lock()
	ret, specificReturn := fake.getRolePolicyWithContextReturnsOnCall[len(fake.getRolePolicyWithContextArgsForCall)]
	fake.getRolePolicyWithContextArgsForCall = append(fake.getRolePolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetRolePolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetRolePolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.getRolePolicyWithContextMutex.Unlock()
	if fake.GetRolePolicyWithContextStub != nil {
		return fake.GetRolePolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getRolePolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetRolePolicyWithContextCallCount() int {
	fake.getRolePolicyWithContextMutex.RLock()
	defer fake.getRolePolicyWithContextMutex.RUnlock()
	return len(fake.getRolePolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetRolePolicyWithContextCalls(stub func(context.Context, *iam.GetRolePolicyInput, ...request.Option) (*iam.GetRolePolicyOutput, error)) {
	fake.getRolePolicyWithContextMutex.Lock()
	defer fake.getRolePolicyWithContextMutex.Unlock()
	fake.GetRolePolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) GetRolePolicyWithContextArgsForCall(i int) (context.Context, *iam.GetRolePolicyInput, []request.Option) {
	fake.getRolePolicyWithContextMutex.RLock()
	defer fake.getRolePolicyWithContextMutex.RUnlock()
	argsForCall := fake.getRolePolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetRolePolicyWithContextReturns(result1 *iam.GetRolePolicyOutput, result2 error) {
	fake.getRolePolicyWithContextMutex.Lock()
	defer fake.getRolePolicyWithContextMutex.Unlock()
	fake.GetRolePolicyWithContextStub = nil
	fake.getRolePolicyWithContextReturns = struct {
		result1 *iam.GetRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetRolePolicyWithContextReturnsOnCall(i int, result1 *iam.GetRolePolicyOutput, result2 error) {
	fake.getRolePolicyWithContextMutex.Lock()
	defer fake.getRolePolicyWithContextMutex.Unlock()
	fake.GetRolePolicyWithContextStub = nil
	if fake.getRolePolicyWithContextReturnsOnCall == nil {
		fake.getRolePolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetRolePolicyOutput
			result2 error
		})
	}
	fake.getRolePolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetRoleRequest(arg1 *iam.GetRoleInput) (*request.Request, *iam.GetRoleOutput) {
	fake.getRoleRequestMutex.Lock()
	ret, specificReturn := fake.getRoleRequestReturnsOnCall[len(fake.getRoleRequestArgsForCall)]
	fake.getRoleRequestArgsForCall = append(fake.getRoleRequestArgsForCall, struct {
		arg1 *iam.GetRoleInput
	}{arg1})
	fake.recordInvocation("GetRoleRequest", []interface{}{arg1})
	fake.getRoleRequestMutex.Unlock()
	if fake.GetRoleRequestStub != nil {
		return fake.GetRoleRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getRoleRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetRoleRequestCallCount() int {
	fake.getRoleRequestMutex.RLock()
	defer fake.getRoleRequestMutex.RUnlock()
	return len(fake.getRoleRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetRoleRequestCalls(stub func(*iam.GetRoleInput) (*request.Request, *iam.GetRoleOutput)) {
	fake.getRoleRequestMutex.Lock()
	defer fake.getRoleRequestMutex.Unlock()
	fake.GetRoleRequestStub = stub
}

func (fake *FakeIAMAPI) GetRoleRequestArgsForCall(i int) *iam.GetRoleInput {
	fake.getRoleRequestMutex.RLock()
	defer fake.getRoleRequestMutex.RUnlock()
	argsForCall := fake.getRoleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetRoleRequestReturns(result1 *request.Request, result2 *iam.GetRoleOutput) {
	fake.getRoleRequestMutex.Lock()
	defer fake.getRoleRequestMutex.Unlock()
	fake.GetRoleRequestStub = nil
	fake.getRoleRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetRoleRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetRoleOutput) {
	fake.getRoleRequestMutex.Lock()
	defer fake.getRoleRequestMutex.Unlock()
	fake.GetRoleRequestStub = nil
	if fake.getRoleRequestReturnsOnCall == nil {
		fake.getRoleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetRoleOutput
		})
	}
	fake.getRoleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetRoleWithContext(arg1 context.Context, arg2 *iam.GetRoleInput, arg3 ...request.Option) (*iam.GetRoleOutput, error) {
	fake.getRoleWithContextMutex.Lock()
	ret, specificReturn := fake.getRoleWithContextReturnsOnCall[len(fake.getRoleWithContextArgsForCall)]
	fake.getRoleWithContextArgsForCall = append(fake.getRoleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetRoleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetRoleWithContext", []interface{}{arg1, arg2, arg3})
	fake.getRoleWithContextMutex.Unlock()
	if fake.GetRoleWithContextStub != nil {
		return fake.GetRoleWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getRoleWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetRoleWithContextCallCount() int {
	fake.getRoleWithContextMutex.RLock()
	defer fake.getRoleWithContextMutex.RUnlock()
	return len(fake.getRoleWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetRoleWithContextCalls(stub func(context.Context, *iam.GetRoleInput, ...request.Option) (*iam.GetRoleOutput, error)) {
	fake.getRoleWithContextMutex.Lock()
	defer fake.getRoleWithContextMutex.Unlock()
	fake.GetRoleWithContextStub = stub
}

func (fake *FakeIAMAPI) GetRoleWithContextArgsForCall(i int) (context.Context, *iam.GetRoleInput, []request.Option) {
	fake.getRoleWithContextMutex.RLock()
	defer fake.getRoleWithContextMutex.RUnlock()
	argsForCall := fake.getRoleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetRoleWithContextReturns(result1 *iam.GetRoleOutput, result2 error) {
	fake.getRoleWithContextMutex.Lock()
	defer fake.getRoleWithContextMutex.Unlock()
	fake.GetRoleWithContextStub = nil
	fake.getRoleWithContextReturns = struct {
		result1 *iam.GetRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetRoleWithContextReturnsOnCall(i int, result1 *iam.GetRoleOutput, result2 error) {
	fake.getRoleWithContextMutex.Lock()
	defer fake.getRoleWithContextMutex.Unlock()
	fake.GetRoleWithContextStub = nil
	if fake.getRoleWithContextReturnsOnCall == nil {
		fake.getRoleWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetRoleOutput
			result2 error
		})
	}
	fake.getRoleWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetSAMLProvider(arg1 *iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error) {
	fake.getSAMLProviderMutex.Lock()
	ret, specificReturn := fake.getSAMLProviderReturnsOnCall[len(fake.getSAMLProviderArgsForCall)]
	fake.getSAMLProviderArgsForCall = append(fake.getSAMLProviderArgsForCall, struct {
		arg1 *iam.GetSAMLProviderInput
	}{arg1})
	fake.recordInvocation("GetSAMLProvider", []interface{}{arg1})
	fake.getSAMLProviderMutex.Unlock()
	if fake.GetSAMLProviderStub != nil {
		return fake.GetSAMLProviderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSAMLProviderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetSAMLProviderCallCount() int {
	fake.getSAMLProviderMutex.RLock()
	defer fake.getSAMLProviderMutex.RUnlock()
	return len(fake.getSAMLProviderArgsForCall)
}

func (fake *FakeIAMAPI) GetSAMLProviderCalls(stub func(*iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error)) {
	fake.getSAMLProviderMutex.Lock()
	defer fake.getSAMLProviderMutex.Unlock()
	fake.GetSAMLProviderStub = stub
}

func (fake *FakeIAMAPI) GetSAMLProviderArgsForCall(i int) *iam.GetSAMLProviderInput {
	fake.getSAMLProviderMutex.RLock()
	defer fake.getSAMLProviderMutex.RUnlock()
	argsForCall := fake.getSAMLProviderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetSAMLProviderReturns(result1 *iam.GetSAMLProviderOutput, result2 error) {
	fake.getSAMLProviderMutex.Lock()
	defer fake.getSAMLProviderMutex.Unlock()
	fake.GetSAMLProviderStub = nil
	fake.getSAMLProviderReturns = struct {
		result1 *iam.GetSAMLProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetSAMLProviderReturnsOnCall(i int, result1 *iam.GetSAMLProviderOutput, result2 error) {
	fake.getSAMLProviderMutex.Lock()
	defer fake.getSAMLProviderMutex.Unlock()
	fake.GetSAMLProviderStub = nil
	if fake.getSAMLProviderReturnsOnCall == nil {
		fake.getSAMLProviderReturnsOnCall = make(map[int]struct {
			result1 *iam.GetSAMLProviderOutput
			result2 error
		})
	}
	fake.getSAMLProviderReturnsOnCall[i] = struct {
		result1 *iam.GetSAMLProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetSAMLProviderRequest(arg1 *iam.GetSAMLProviderInput) (*request.Request, *iam.GetSAMLProviderOutput) {
	fake.getSAMLProviderRequestMutex.Lock()
	ret, specificReturn := fake.getSAMLProviderRequestReturnsOnCall[len(fake.getSAMLProviderRequestArgsForCall)]
	fake.getSAMLProviderRequestArgsForCall = append(fake.getSAMLProviderRequestArgsForCall, struct {
		arg1 *iam.GetSAMLProviderInput
	}{arg1})
	fake.recordInvocation("GetSAMLProviderRequest", []interface{}{arg1})
	fake.getSAMLProviderRequestMutex.Unlock()
	if fake.GetSAMLProviderRequestStub != nil {
		return fake.GetSAMLProviderRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSAMLProviderRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetSAMLProviderRequestCallCount() int {
	fake.getSAMLProviderRequestMutex.RLock()
	defer fake.getSAMLProviderRequestMutex.RUnlock()
	return len(fake.getSAMLProviderRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetSAMLProviderRequestCalls(stub func(*iam.GetSAMLProviderInput) (*request.Request, *iam.GetSAMLProviderOutput)) {
	fake.getSAMLProviderRequestMutex.Lock()
	defer fake.getSAMLProviderRequestMutex.Unlock()
	fake.GetSAMLProviderRequestStub = stub
}

func (fake *FakeIAMAPI) GetSAMLProviderRequestArgsForCall(i int) *iam.GetSAMLProviderInput {
	fake.getSAMLProviderRequestMutex.RLock()
	defer fake.getSAMLProviderRequestMutex.RUnlock()
	argsForCall := fake.getSAMLProviderRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetSAMLProviderRequestReturns(result1 *request.Request, result2 *iam.GetSAMLProviderOutput) {
	fake.getSAMLProviderRequestMutex.Lock()
	defer fake.getSAMLProviderRequestMutex.Unlock()
	fake.GetSAMLProviderRequestStub = nil
	fake.getSAMLProviderRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetSAMLProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetSAMLProviderRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetSAMLProviderOutput) {
	fake.getSAMLProviderRequestMutex.Lock()
	defer fake.getSAMLProviderRequestMutex.Unlock()
	fake.GetSAMLProviderRequestStub = nil
	if fake.getSAMLProviderRequestReturnsOnCall == nil {
		fake.getSAMLProviderRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetSAMLProviderOutput
		})
	}
	fake.getSAMLProviderRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetSAMLProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetSAMLProviderWithContext(arg1 context.Context, arg2 *iam.GetSAMLProviderInput, arg3 ...request.Option) (*iam.GetSAMLProviderOutput, error) {
	fake.getSAMLProviderWithContextMutex.Lock()
	ret, specificReturn := fake.getSAMLProviderWithContextReturnsOnCall[len(fake.getSAMLProviderWithContextArgsForCall)]
	fake.getSAMLProviderWithContextArgsForCall = append(fake.getSAMLProviderWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetSAMLProviderInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetSAMLProviderWithContext", []interface{}{arg1, arg2, arg3})
	fake.getSAMLProviderWithContextMutex.Unlock()
	if fake.GetSAMLProviderWithContextStub != nil {
		return fake.GetSAMLProviderWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSAMLProviderWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetSAMLProviderWithContextCallCount() int {
	fake.getSAMLProviderWithContextMutex.RLock()
	defer fake.getSAMLProviderWithContextMutex.RUnlock()
	return len(fake.getSAMLProviderWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetSAMLProviderWithContextCalls(stub func(context.Context, *iam.GetSAMLProviderInput, ...request.Option) (*iam.GetSAMLProviderOutput, error)) {
	fake.getSAMLProviderWithContextMutex.Lock()
	defer fake.getSAMLProviderWithContextMutex.Unlock()
	fake.GetSAMLProviderWithContextStub = stub
}

func (fake *FakeIAMAPI) GetSAMLProviderWithContextArgsForCall(i int) (context.Context, *iam.GetSAMLProviderInput, []request.Option) {
	fake.getSAMLProviderWithContextMutex.RLock()
	defer fake.getSAMLProviderWithContextMutex.RUnlock()
	argsForCall := fake.getSAMLProviderWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetSAMLProviderWithContextReturns(result1 *iam.GetSAMLProviderOutput, result2 error) {
	fake.getSAMLProviderWithContextMutex.Lock()
	defer fake.getSAMLProviderWithContextMutex.Unlock()
	fake.GetSAMLProviderWithContextStub = nil
	fake.getSAMLProviderWithContextReturns = struct {
		result1 *iam.GetSAMLProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetSAMLProviderWithContextReturnsOnCall(i int, result1 *iam.GetSAMLProviderOutput, result2 error) {
	fake.getSAMLProviderWithContextMutex.Lock()
	defer fake.getSAMLProviderWithContextMutex.Unlock()
	fake.GetSAMLProviderWithContextStub = nil
	if fake.getSAMLProviderWithContextReturnsOnCall == nil {
		fake.getSAMLProviderWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetSAMLProviderOutput
			result2 error
		})
	}
	fake.getSAMLProviderWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetSAMLProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetSSHPublicKey(arg1 *iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error) {
	fake.getSSHPublicKeyMutex.Lock()
	ret, specificReturn := fake.getSSHPublicKeyReturnsOnCall[len(fake.getSSHPublicKeyArgsForCall)]
	fake.getSSHPublicKeyArgsForCall = append(fake.getSSHPublicKeyArgsForCall, struct {
		arg1 *iam.GetSSHPublicKeyInput
	}{arg1})
	fake.recordInvocation("GetSSHPublicKey", []interface{}{arg1})
	fake.getSSHPublicKeyMutex.Unlock()
	if fake.GetSSHPublicKeyStub != nil {
		return fake.GetSSHPublicKeyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSSHPublicKeyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetSSHPublicKeyCallCount() int {
	fake.getSSHPublicKeyMutex.RLock()
	defer fake.getSSHPublicKeyMutex.RUnlock()
	return len(fake.getSSHPublicKeyArgsForCall)
}

func (fake *FakeIAMAPI) GetSSHPublicKeyCalls(stub func(*iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error)) {
	fake.getSSHPublicKeyMutex.Lock()
	defer fake.getSSHPublicKeyMutex.Unlock()
	fake.GetSSHPublicKeyStub = stub
}

func (fake *FakeIAMAPI) GetSSHPublicKeyArgsForCall(i int) *iam.GetSSHPublicKeyInput {
	fake.getSSHPublicKeyMutex.RLock()
	defer fake.getSSHPublicKeyMutex.RUnlock()
	argsForCall := fake.getSSHPublicKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetSSHPublicKeyReturns(result1 *iam.GetSSHPublicKeyOutput, result2 error) {
	fake.getSSHPublicKeyMutex.Lock()
	defer fake.getSSHPublicKeyMutex.Unlock()
	fake.GetSSHPublicKeyStub = nil
	fake.getSSHPublicKeyReturns = struct {
		result1 *iam.GetSSHPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetSSHPublicKeyReturnsOnCall(i int, result1 *iam.GetSSHPublicKeyOutput, result2 error) {
	fake.getSSHPublicKeyMutex.Lock()
	defer fake.getSSHPublicKeyMutex.Unlock()
	fake.GetSSHPublicKeyStub = nil
	if fake.getSSHPublicKeyReturnsOnCall == nil {
		fake.getSSHPublicKeyReturnsOnCall = make(map[int]struct {
			result1 *iam.GetSSHPublicKeyOutput
			result2 error
		})
	}
	fake.getSSHPublicKeyReturnsOnCall[i] = struct {
		result1 *iam.GetSSHPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetSSHPublicKeyRequest(arg1 *iam.GetSSHPublicKeyInput) (*request.Request, *iam.GetSSHPublicKeyOutput) {
	fake.getSSHPublicKeyRequestMutex.Lock()
	ret, specificReturn := fake.getSSHPublicKeyRequestReturnsOnCall[len(fake.getSSHPublicKeyRequestArgsForCall)]
	fake.getSSHPublicKeyRequestArgsForCall = append(fake.getSSHPublicKeyRequestArgsForCall, struct {
		arg1 *iam.GetSSHPublicKeyInput
	}{arg1})
	fake.recordInvocation("GetSSHPublicKeyRequest", []interface{}{arg1})
	fake.getSSHPublicKeyRequestMutex.Unlock()
	if fake.GetSSHPublicKeyRequestStub != nil {
		return fake.GetSSHPublicKeyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSSHPublicKeyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetSSHPublicKeyRequestCallCount() int {
	fake.getSSHPublicKeyRequestMutex.RLock()
	defer fake.getSSHPublicKeyRequestMutex.RUnlock()
	return len(fake.getSSHPublicKeyRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetSSHPublicKeyRequestCalls(stub func(*iam.GetSSHPublicKeyInput) (*request.Request, *iam.GetSSHPublicKeyOutput)) {
	fake.getSSHPublicKeyRequestMutex.Lock()
	defer fake.getSSHPublicKeyRequestMutex.Unlock()
	fake.GetSSHPublicKeyRequestStub = stub
}

func (fake *FakeIAMAPI) GetSSHPublicKeyRequestArgsForCall(i int) *iam.GetSSHPublicKeyInput {
	fake.getSSHPublicKeyRequestMutex.RLock()
	defer fake.getSSHPublicKeyRequestMutex.RUnlock()
	argsForCall := fake.getSSHPublicKeyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetSSHPublicKeyRequestReturns(result1 *request.Request, result2 *iam.GetSSHPublicKeyOutput) {
	fake.getSSHPublicKeyRequestMutex.Lock()
	defer fake.getSSHPublicKeyRequestMutex.Unlock()
	fake.GetSSHPublicKeyRequestStub = nil
	fake.getSSHPublicKeyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetSSHPublicKeyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetSSHPublicKeyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetSSHPublicKeyOutput) {
	fake.getSSHPublicKeyRequestMutex.Lock()
	defer fake.getSSHPublicKeyRequestMutex.Unlock()
	fake.GetSSHPublicKeyRequestStub = nil
	if fake.getSSHPublicKeyRequestReturnsOnCall == nil {
		fake.getSSHPublicKeyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetSSHPublicKeyOutput
		})
	}
	fake.getSSHPublicKeyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetSSHPublicKeyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetSSHPublicKeyWithContext(arg1 context.Context, arg2 *iam.GetSSHPublicKeyInput, arg3 ...request.Option) (*iam.GetSSHPublicKeyOutput, error) {
	fake.getSSHPublicKeyWithContextMutex.Lock()
	ret, specificReturn := fake.getSSHPublicKeyWithContextReturnsOnCall[len(fake.getSSHPublicKeyWithContextArgsForCall)]
	fake.getSSHPublicKeyWithContextArgsForCall = append(fake.getSSHPublicKeyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetSSHPublicKeyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetSSHPublicKeyWithContext", []interface{}{arg1, arg2, arg3})
	fake.getSSHPublicKeyWithContextMutex.Unlock()
	if fake.GetSSHPublicKeyWithContextStub != nil {
		return fake.GetSSHPublicKeyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSSHPublicKeyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetSSHPublicKeyWithContextCallCount() int {
	fake.getSSHPublicKeyWithContextMutex.RLock()
	defer fake.getSSHPublicKeyWithContextMutex.RUnlock()
	return len(fake.getSSHPublicKeyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetSSHPublicKeyWithContextCalls(stub func(context.Context, *iam.GetSSHPublicKeyInput, ...request.Option) (*iam.GetSSHPublicKeyOutput, error)) {
	fake.getSSHPublicKeyWithContextMutex.Lock()
	defer fake.getSSHPublicKeyWithContextMutex.Unlock()
	fake.GetSSHPublicKeyWithContextStub = stub
}

func (fake *FakeIAMAPI) GetSSHPublicKeyWithContextArgsForCall(i int) (context.Context, *iam.GetSSHPublicKeyInput, []request.Option) {
	fake.getSSHPublicKeyWithContextMutex.RLock()
	defer fake.getSSHPublicKeyWithContextMutex.RUnlock()
	argsForCall := fake.getSSHPublicKeyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetSSHPublicKeyWithContextReturns(result1 *iam.GetSSHPublicKeyOutput, result2 error) {
	fake.getSSHPublicKeyWithContextMutex.Lock()
	defer fake.getSSHPublicKeyWithContextMutex.Unlock()
	fake.GetSSHPublicKeyWithContextStub = nil
	fake.getSSHPublicKeyWithContextReturns = struct {
		result1 *iam.GetSSHPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetSSHPublicKeyWithContextReturnsOnCall(i int, result1 *iam.GetSSHPublicKeyOutput, result2 error) {
	fake.getSSHPublicKeyWithContextMutex.Lock()
	defer fake.getSSHPublicKeyWithContextMutex.Unlock()
	fake.GetSSHPublicKeyWithContextStub = nil
	if fake.getSSHPublicKeyWithContextReturnsOnCall == nil {
		fake.getSSHPublicKeyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetSSHPublicKeyOutput
			result2 error
		})
	}
	fake.getSSHPublicKeyWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetSSHPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServerCertificate(arg1 *iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error) {
	fake.getServerCertificateMutex.Lock()
	ret, specificReturn := fake.getServerCertificateReturnsOnCall[len(fake.getServerCertificateArgsForCall)]
	fake.getServerCertificateArgsForCall = append(fake.getServerCertificateArgsForCall, struct {
		arg1 *iam.GetServerCertificateInput
	}{arg1})
	fake.recordInvocation("GetServerCertificate", []interface{}{arg1})
	fake.getServerCertificateMutex.Unlock()
	if fake.GetServerCertificateStub != nil {
		return fake.GetServerCertificateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServerCertificateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetServerCertificateCallCount() int {
	fake.getServerCertificateMutex.RLock()
	defer fake.getServerCertificateMutex.RUnlock()
	return len(fake.getServerCertificateArgsForCall)
}

func (fake *FakeIAMAPI) GetServerCertificateCalls(stub func(*iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error)) {
	fake.getServerCertificateMutex.Lock()
	defer fake.getServerCertificateMutex.Unlock()
	fake.GetServerCertificateStub = stub
}

func (fake *FakeIAMAPI) GetServerCertificateArgsForCall(i int) *iam.GetServerCertificateInput {
	fake.getServerCertificateMutex.RLock()
	defer fake.getServerCertificateMutex.RUnlock()
	argsForCall := fake.getServerCertificateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetServerCertificateReturns(result1 *iam.GetServerCertificateOutput, result2 error) {
	fake.getServerCertificateMutex.Lock()
	defer fake.getServerCertificateMutex.Unlock()
	fake.GetServerCertificateStub = nil
	fake.getServerCertificateReturns = struct {
		result1 *iam.GetServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServerCertificateReturnsOnCall(i int, result1 *iam.GetServerCertificateOutput, result2 error) {
	fake.getServerCertificateMutex.Lock()
	defer fake.getServerCertificateMutex.Unlock()
	fake.GetServerCertificateStub = nil
	if fake.getServerCertificateReturnsOnCall == nil {
		fake.getServerCertificateReturnsOnCall = make(map[int]struct {
			result1 *iam.GetServerCertificateOutput
			result2 error
		})
	}
	fake.getServerCertificateReturnsOnCall[i] = struct {
		result1 *iam.GetServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServerCertificateRequest(arg1 *iam.GetServerCertificateInput) (*request.Request, *iam.GetServerCertificateOutput) {
	fake.getServerCertificateRequestMutex.Lock()
	ret, specificReturn := fake.getServerCertificateRequestReturnsOnCall[len(fake.getServerCertificateRequestArgsForCall)]
	fake.getServerCertificateRequestArgsForCall = append(fake.getServerCertificateRequestArgsForCall, struct {
		arg1 *iam.GetServerCertificateInput
	}{arg1})
	fake.recordInvocation("GetServerCertificateRequest", []interface{}{arg1})
	fake.getServerCertificateRequestMutex.Unlock()
	if fake.GetServerCertificateRequestStub != nil {
		return fake.GetServerCertificateRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServerCertificateRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetServerCertificateRequestCallCount() int {
	fake.getServerCertificateRequestMutex.RLock()
	defer fake.getServerCertificateRequestMutex.RUnlock()
	return len(fake.getServerCertificateRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetServerCertificateRequestCalls(stub func(*iam.GetServerCertificateInput) (*request.Request, *iam.GetServerCertificateOutput)) {
	fake.getServerCertificateRequestMutex.Lock()
	defer fake.getServerCertificateRequestMutex.Unlock()
	fake.GetServerCertificateRequestStub = stub
}

func (fake *FakeIAMAPI) GetServerCertificateRequestArgsForCall(i int) *iam.GetServerCertificateInput {
	fake.getServerCertificateRequestMutex.RLock()
	defer fake.getServerCertificateRequestMutex.RUnlock()
	argsForCall := fake.getServerCertificateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetServerCertificateRequestReturns(result1 *request.Request, result2 *iam.GetServerCertificateOutput) {
	fake.getServerCertificateRequestMutex.Lock()
	defer fake.getServerCertificateRequestMutex.Unlock()
	fake.GetServerCertificateRequestStub = nil
	fake.getServerCertificateRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetServerCertificateOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServerCertificateRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetServerCertificateOutput) {
	fake.getServerCertificateRequestMutex.Lock()
	defer fake.getServerCertificateRequestMutex.Unlock()
	fake.GetServerCertificateRequestStub = nil
	if fake.getServerCertificateRequestReturnsOnCall == nil {
		fake.getServerCertificateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetServerCertificateOutput
		})
	}
	fake.getServerCertificateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetServerCertificateOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServerCertificateWithContext(arg1 context.Context, arg2 *iam.GetServerCertificateInput, arg3 ...request.Option) (*iam.GetServerCertificateOutput, error) {
	fake.getServerCertificateWithContextMutex.Lock()
	ret, specificReturn := fake.getServerCertificateWithContextReturnsOnCall[len(fake.getServerCertificateWithContextArgsForCall)]
	fake.getServerCertificateWithContextArgsForCall = append(fake.getServerCertificateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetServerCertificateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetServerCertificateWithContext", []interface{}{arg1, arg2, arg3})
	fake.getServerCertificateWithContextMutex.Unlock()
	if fake.GetServerCertificateWithContextStub != nil {
		return fake.GetServerCertificateWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServerCertificateWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetServerCertificateWithContextCallCount() int {
	fake.getServerCertificateWithContextMutex.RLock()
	defer fake.getServerCertificateWithContextMutex.RUnlock()
	return len(fake.getServerCertificateWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetServerCertificateWithContextCalls(stub func(context.Context, *iam.GetServerCertificateInput, ...request.Option) (*iam.GetServerCertificateOutput, error)) {
	fake.getServerCertificateWithContextMutex.Lock()
	defer fake.getServerCertificateWithContextMutex.Unlock()
	fake.GetServerCertificateWithContextStub = stub
}

func (fake *FakeIAMAPI) GetServerCertificateWithContextArgsForCall(i int) (context.Context, *iam.GetServerCertificateInput, []request.Option) {
	fake.getServerCertificateWithContextMutex.RLock()
	defer fake.getServerCertificateWithContextMutex.RUnlock()
	argsForCall := fake.getServerCertificateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetServerCertificateWithContextReturns(result1 *iam.GetServerCertificateOutput, result2 error) {
	fake.getServerCertificateWithContextMutex.Lock()
	defer fake.getServerCertificateWithContextMutex.Unlock()
	fake.GetServerCertificateWithContextStub = nil
	fake.getServerCertificateWithContextReturns = struct {
		result1 *iam.GetServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServerCertificateWithContextReturnsOnCall(i int, result1 *iam.GetServerCertificateOutput, result2 error) {
	fake.getServerCertificateWithContextMutex.Lock()
	defer fake.getServerCertificateWithContextMutex.Unlock()
	fake.GetServerCertificateWithContextStub = nil
	if fake.getServerCertificateWithContextReturnsOnCall == nil {
		fake.getServerCertificateWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetServerCertificateOutput
			result2 error
		})
	}
	fake.getServerCertificateWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetails(arg1 *iam.GetServiceLastAccessedDetailsInput) (*iam.GetServiceLastAccessedDetailsOutput, error) {
	fake.getServiceLastAccessedDetailsMutex.Lock()
	ret, specificReturn := fake.getServiceLastAccessedDetailsReturnsOnCall[len(fake.getServiceLastAccessedDetailsArgsForCall)]
	fake.getServiceLastAccessedDetailsArgsForCall = append(fake.getServiceLastAccessedDetailsArgsForCall, struct {
		arg1 *iam.GetServiceLastAccessedDetailsInput
	}{arg1})
	fake.recordInvocation("GetServiceLastAccessedDetails", []interface{}{arg1})
	fake.getServiceLastAccessedDetailsMutex.Unlock()
	if fake.GetServiceLastAccessedDetailsStub != nil {
		return fake.GetServiceLastAccessedDetailsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceLastAccessedDetailsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsCallCount() int {
	fake.getServiceLastAccessedDetailsMutex.RLock()
	defer fake.getServiceLastAccessedDetailsMutex.RUnlock()
	return len(fake.getServiceLastAccessedDetailsArgsForCall)
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsCalls(stub func(*iam.GetServiceLastAccessedDetailsInput) (*iam.GetServiceLastAccessedDetailsOutput, error)) {
	fake.getServiceLastAccessedDetailsMutex.Lock()
	defer fake.getServiceLastAccessedDetailsMutex.Unlock()
	fake.GetServiceLastAccessedDetailsStub = stub
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsArgsForCall(i int) *iam.GetServiceLastAccessedDetailsInput {
	fake.getServiceLastAccessedDetailsMutex.RLock()
	defer fake.getServiceLastAccessedDetailsMutex.RUnlock()
	argsForCall := fake.getServiceLastAccessedDetailsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsReturns(result1 *iam.GetServiceLastAccessedDetailsOutput, result2 error) {
	fake.getServiceLastAccessedDetailsMutex.Lock()
	defer fake.getServiceLastAccessedDetailsMutex.Unlock()
	fake.GetServiceLastAccessedDetailsStub = nil
	fake.getServiceLastAccessedDetailsReturns = struct {
		result1 *iam.GetServiceLastAccessedDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsReturnsOnCall(i int, result1 *iam.GetServiceLastAccessedDetailsOutput, result2 error) {
	fake.getServiceLastAccessedDetailsMutex.Lock()
	defer fake.getServiceLastAccessedDetailsMutex.Unlock()
	fake.GetServiceLastAccessedDetailsStub = nil
	if fake.getServiceLastAccessedDetailsReturnsOnCall == nil {
		fake.getServiceLastAccessedDetailsReturnsOnCall = make(map[int]struct {
			result1 *iam.GetServiceLastAccessedDetailsOutput
			result2 error
		})
	}
	fake.getServiceLastAccessedDetailsReturnsOnCall[i] = struct {
		result1 *iam.GetServiceLastAccessedDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsRequest(arg1 *iam.GetServiceLastAccessedDetailsInput) (*request.Request, *iam.GetServiceLastAccessedDetailsOutput) {
	fake.getServiceLastAccessedDetailsRequestMutex.Lock()
	ret, specificReturn := fake.getServiceLastAccessedDetailsRequestReturnsOnCall[len(fake.getServiceLastAccessedDetailsRequestArgsForCall)]
	fake.getServiceLastAccessedDetailsRequestArgsForCall = append(fake.getServiceLastAccessedDetailsRequestArgsForCall, struct {
		arg1 *iam.GetServiceLastAccessedDetailsInput
	}{arg1})
	fake.recordInvocation("GetServiceLastAccessedDetailsRequest", []interface{}{arg1})
	fake.getServiceLastAccessedDetailsRequestMutex.Unlock()
	if fake.GetServiceLastAccessedDetailsRequestStub != nil {
		return fake.GetServiceLastAccessedDetailsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceLastAccessedDetailsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsRequestCallCount() int {
	fake.getServiceLastAccessedDetailsRequestMutex.RLock()
	defer fake.getServiceLastAccessedDetailsRequestMutex.RUnlock()
	return len(fake.getServiceLastAccessedDetailsRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsRequestCalls(stub func(*iam.GetServiceLastAccessedDetailsInput) (*request.Request, *iam.GetServiceLastAccessedDetailsOutput)) {
	fake.getServiceLastAccessedDetailsRequestMutex.Lock()
	defer fake.getServiceLastAccessedDetailsRequestMutex.Unlock()
	fake.GetServiceLastAccessedDetailsRequestStub = stub
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsRequestArgsForCall(i int) *iam.GetServiceLastAccessedDetailsInput {
	fake.getServiceLastAccessedDetailsRequestMutex.RLock()
	defer fake.getServiceLastAccessedDetailsRequestMutex.RUnlock()
	argsForCall := fake.getServiceLastAccessedDetailsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsRequestReturns(result1 *request.Request, result2 *iam.GetServiceLastAccessedDetailsOutput) {
	fake.getServiceLastAccessedDetailsRequestMutex.Lock()
	defer fake.getServiceLastAccessedDetailsRequestMutex.Unlock()
	fake.GetServiceLastAccessedDetailsRequestStub = nil
	fake.getServiceLastAccessedDetailsRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetServiceLastAccessedDetailsOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetServiceLastAccessedDetailsOutput) {
	fake.getServiceLastAccessedDetailsRequestMutex.Lock()
	defer fake.getServiceLastAccessedDetailsRequestMutex.Unlock()
	fake.GetServiceLastAccessedDetailsRequestStub = nil
	if fake.getServiceLastAccessedDetailsRequestReturnsOnCall == nil {
		fake.getServiceLastAccessedDetailsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetServiceLastAccessedDetailsOutput
		})
	}
	fake.getServiceLastAccessedDetailsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetServiceLastAccessedDetailsOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithContext(arg1 context.Context, arg2 *iam.GetServiceLastAccessedDetailsInput, arg3 ...request.Option) (*iam.GetServiceLastAccessedDetailsOutput, error) {
	fake.getServiceLastAccessedDetailsWithContextMutex.Lock()
	ret, specificReturn := fake.getServiceLastAccessedDetailsWithContextReturnsOnCall[len(fake.getServiceLastAccessedDetailsWithContextArgsForCall)]
	fake.getServiceLastAccessedDetailsWithContextArgsForCall = append(fake.getServiceLastAccessedDetailsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetServiceLastAccessedDetailsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetServiceLastAccessedDetailsWithContext", []interface{}{arg1, arg2, arg3})
	fake.getServiceLastAccessedDetailsWithContextMutex.Unlock()
	if fake.GetServiceLastAccessedDetailsWithContextStub != nil {
		return fake.GetServiceLastAccessedDetailsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceLastAccessedDetailsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithContextCallCount() int {
	fake.getServiceLastAccessedDetailsWithContextMutex.RLock()
	defer fake.getServiceLastAccessedDetailsWithContextMutex.RUnlock()
	return len(fake.getServiceLastAccessedDetailsWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithContextCalls(stub func(context.Context, *iam.GetServiceLastAccessedDetailsInput, ...request.Option) (*iam.GetServiceLastAccessedDetailsOutput, error)) {
	fake.getServiceLastAccessedDetailsWithContextMutex.Lock()
	defer fake.getServiceLastAccessedDetailsWithContextMutex.Unlock()
	fake.GetServiceLastAccessedDetailsWithContextStub = stub
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithContextArgsForCall(i int) (context.Context, *iam.GetServiceLastAccessedDetailsInput, []request.Option) {
	fake.getServiceLastAccessedDetailsWithContextMutex.RLock()
	defer fake.getServiceLastAccessedDetailsWithContextMutex.RUnlock()
	argsForCall := fake.getServiceLastAccessedDetailsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithContextReturns(result1 *iam.GetServiceLastAccessedDetailsOutput, result2 error) {
	fake.getServiceLastAccessedDetailsWithContextMutex.Lock()
	defer fake.getServiceLastAccessedDetailsWithContextMutex.Unlock()
	fake.GetServiceLastAccessedDetailsWithContextStub = nil
	fake.getServiceLastAccessedDetailsWithContextReturns = struct {
		result1 *iam.GetServiceLastAccessedDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithContextReturnsOnCall(i int, result1 *iam.GetServiceLastAccessedDetailsOutput, result2 error) {
	fake.getServiceLastAccessedDetailsWithContextMutex.Lock()
	defer fake.getServiceLastAccessedDetailsWithContextMutex.Unlock()
	fake.GetServiceLastAccessedDetailsWithContextStub = nil
	if fake.getServiceLastAccessedDetailsWithContextReturnsOnCall == nil {
		fake.getServiceLastAccessedDetailsWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetServiceLastAccessedDetailsOutput
			result2 error
		})
	}
	fake.getServiceLastAccessedDetailsWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetServiceLastAccessedDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntities(arg1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
	fake.getServiceLastAccessedDetailsWithEntitiesMutex.Lock()
	ret, specificReturn := fake.getServiceLastAccessedDetailsWithEntitiesReturnsOnCall[len(fake.getServiceLastAccessedDetailsWithEntitiesArgsForCall)]
	fake.getServiceLastAccessedDetailsWithEntitiesArgsForCall = append(fake.getServiceLastAccessedDetailsWithEntitiesArgsForCall, struct {
		arg1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
	}{arg1})
	fake.recordInvocation("GetServiceLastAccessedDetailsWithEntities", []interface{}{arg1})
	fake.getServiceLastAccessedDetailsWithEntitiesMutex.Unlock()
	if fake.GetServiceLastAccessedDetailsWithEntitiesStub != nil {
		return fake.GetServiceLastAccessedDetailsWithEntitiesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceLastAccessedDetailsWithEntitiesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntitiesCallCount() int {
	fake.getServiceLastAccessedDetailsWithEntitiesMutex.RLock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesMutex.RUnlock()
	return len(fake.getServiceLastAccessedDetailsWithEntitiesArgsForCall)
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntitiesCalls(stub func(*iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error)) {
	fake.getServiceLastAccessedDetailsWithEntitiesMutex.Lock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesMutex.Unlock()
	fake.GetServiceLastAccessedDetailsWithEntitiesStub = stub
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntitiesArgsForCall(i int) *iam.GetServiceLastAccessedDetailsWithEntitiesInput {
	fake.getServiceLastAccessedDetailsWithEntitiesMutex.RLock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesMutex.RUnlock()
	argsForCall := fake.getServiceLastAccessedDetailsWithEntitiesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntitiesReturns(result1 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput, result2 error) {
	fake.getServiceLastAccessedDetailsWithEntitiesMutex.Lock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesMutex.Unlock()
	fake.GetServiceLastAccessedDetailsWithEntitiesStub = nil
	fake.getServiceLastAccessedDetailsWithEntitiesReturns = struct {
		result1 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntitiesReturnsOnCall(i int, result1 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput, result2 error) {
	fake.getServiceLastAccessedDetailsWithEntitiesMutex.Lock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesMutex.Unlock()
	fake.GetServiceLastAccessedDetailsWithEntitiesStub = nil
	if fake.getServiceLastAccessedDetailsWithEntitiesReturnsOnCall == nil {
		fake.getServiceLastAccessedDetailsWithEntitiesReturnsOnCall = make(map[int]struct {
			result1 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
			result2 error
		})
	}
	fake.getServiceLastAccessedDetailsWithEntitiesReturnsOnCall[i] = struct {
		result1 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntitiesRequest(arg1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*request.Request, *iam.GetServiceLastAccessedDetailsWithEntitiesOutput) {
	fake.getServiceLastAccessedDetailsWithEntitiesRequestMutex.Lock()
	ret, specificReturn := fake.getServiceLastAccessedDetailsWithEntitiesRequestReturnsOnCall[len(fake.getServiceLastAccessedDetailsWithEntitiesRequestArgsForCall)]
	fake.getServiceLastAccessedDetailsWithEntitiesRequestArgsForCall = append(fake.getServiceLastAccessedDetailsWithEntitiesRequestArgsForCall, struct {
		arg1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
	}{arg1})
	fake.recordInvocation("GetServiceLastAccessedDetailsWithEntitiesRequest", []interface{}{arg1})
	fake.getServiceLastAccessedDetailsWithEntitiesRequestMutex.Unlock()
	if fake.GetServiceLastAccessedDetailsWithEntitiesRequestStub != nil {
		return fake.GetServiceLastAccessedDetailsWithEntitiesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceLastAccessedDetailsWithEntitiesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntitiesRequestCallCount() int {
	fake.getServiceLastAccessedDetailsWithEntitiesRequestMutex.RLock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesRequestMutex.RUnlock()
	return len(fake.getServiceLastAccessedDetailsWithEntitiesRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntitiesRequestCalls(stub func(*iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*request.Request, *iam.GetServiceLastAccessedDetailsWithEntitiesOutput)) {
	fake.getServiceLastAccessedDetailsWithEntitiesRequestMutex.Lock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesRequestMutex.Unlock()
	fake.GetServiceLastAccessedDetailsWithEntitiesRequestStub = stub
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntitiesRequestArgsForCall(i int) *iam.GetServiceLastAccessedDetailsWithEntitiesInput {
	fake.getServiceLastAccessedDetailsWithEntitiesRequestMutex.RLock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesRequestMutex.RUnlock()
	argsForCall := fake.getServiceLastAccessedDetailsWithEntitiesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntitiesRequestReturns(result1 *request.Request, result2 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput) {
	fake.getServiceLastAccessedDetailsWithEntitiesRequestMutex.Lock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesRequestMutex.Unlock()
	fake.GetServiceLastAccessedDetailsWithEntitiesRequestStub = nil
	fake.getServiceLastAccessedDetailsWithEntitiesRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntitiesRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput) {
	fake.getServiceLastAccessedDetailsWithEntitiesRequestMutex.Lock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesRequestMutex.Unlock()
	fake.GetServiceLastAccessedDetailsWithEntitiesRequestStub = nil
	if fake.getServiceLastAccessedDetailsWithEntitiesRequestReturnsOnCall == nil {
		fake.getServiceLastAccessedDetailsWithEntitiesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
		})
	}
	fake.getServiceLastAccessedDetailsWithEntitiesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntitiesWithContext(arg1 context.Context, arg2 *iam.GetServiceLastAccessedDetailsWithEntitiesInput, arg3 ...request.Option) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
	fake.getServiceLastAccessedDetailsWithEntitiesWithContextMutex.Lock()
	ret, specificReturn := fake.getServiceLastAccessedDetailsWithEntitiesWithContextReturnsOnCall[len(fake.getServiceLastAccessedDetailsWithEntitiesWithContextArgsForCall)]
	fake.getServiceLastAccessedDetailsWithEntitiesWithContextArgsForCall = append(fake.getServiceLastAccessedDetailsWithEntitiesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetServiceLastAccessedDetailsWithEntitiesWithContext", []interface{}{arg1, arg2, arg3})
	fake.getServiceLastAccessedDetailsWithEntitiesWithContextMutex.Unlock()
	if fake.GetServiceLastAccessedDetailsWithEntitiesWithContextStub != nil {
		return fake.GetServiceLastAccessedDetailsWithEntitiesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceLastAccessedDetailsWithEntitiesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntitiesWithContextCallCount() int {
	fake.getServiceLastAccessedDetailsWithEntitiesWithContextMutex.RLock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesWithContextMutex.RUnlock()
	return len(fake.getServiceLastAccessedDetailsWithEntitiesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntitiesWithContextCalls(stub func(context.Context, *iam.GetServiceLastAccessedDetailsWithEntitiesInput, ...request.Option) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error)) {
	fake.getServiceLastAccessedDetailsWithEntitiesWithContextMutex.Lock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesWithContextMutex.Unlock()
	fake.GetServiceLastAccessedDetailsWithEntitiesWithContextStub = stub
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntitiesWithContextArgsForCall(i int) (context.Context, *iam.GetServiceLastAccessedDetailsWithEntitiesInput, []request.Option) {
	fake.getServiceLastAccessedDetailsWithEntitiesWithContextMutex.RLock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesWithContextMutex.RUnlock()
	argsForCall := fake.getServiceLastAccessedDetailsWithEntitiesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntitiesWithContextReturns(result1 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput, result2 error) {
	fake.getServiceLastAccessedDetailsWithEntitiesWithContextMutex.Lock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesWithContextMutex.Unlock()
	fake.GetServiceLastAccessedDetailsWithEntitiesWithContextStub = nil
	fake.getServiceLastAccessedDetailsWithEntitiesWithContextReturns = struct {
		result1 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLastAccessedDetailsWithEntitiesWithContextReturnsOnCall(i int, result1 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput, result2 error) {
	fake.getServiceLastAccessedDetailsWithEntitiesWithContextMutex.Lock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesWithContextMutex.Unlock()
	fake.GetServiceLastAccessedDetailsWithEntitiesWithContextStub = nil
	if fake.getServiceLastAccessedDetailsWithEntitiesWithContextReturnsOnCall == nil {
		fake.getServiceLastAccessedDetailsWithEntitiesWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
			result2 error
		})
	}
	fake.getServiceLastAccessedDetailsWithEntitiesWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatus(arg1 *iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
	fake.getServiceLinkedRoleDeletionStatusMutex.Lock()
	ret, specificReturn := fake.getServiceLinkedRoleDeletionStatusReturnsOnCall[len(fake.getServiceLinkedRoleDeletionStatusArgsForCall)]
	fake.getServiceLinkedRoleDeletionStatusArgsForCall = append(fake.getServiceLinkedRoleDeletionStatusArgsForCall, struct {
		arg1 *iam.GetServiceLinkedRoleDeletionStatusInput
	}{arg1})
	fake.recordInvocation("GetServiceLinkedRoleDeletionStatus", []interface{}{arg1})
	fake.getServiceLinkedRoleDeletionStatusMutex.Unlock()
	if fake.GetServiceLinkedRoleDeletionStatusStub != nil {
		return fake.GetServiceLinkedRoleDeletionStatusStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceLinkedRoleDeletionStatusReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatusCallCount() int {
	fake.getServiceLinkedRoleDeletionStatusMutex.RLock()
	defer fake.getServiceLinkedRoleDeletionStatusMutex.RUnlock()
	return len(fake.getServiceLinkedRoleDeletionStatusArgsForCall)
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatusCalls(stub func(*iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error)) {
	fake.getServiceLinkedRoleDeletionStatusMutex.Lock()
	defer fake.getServiceLinkedRoleDeletionStatusMutex.Unlock()
	fake.GetServiceLinkedRoleDeletionStatusStub = stub
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatusArgsForCall(i int) *iam.GetServiceLinkedRoleDeletionStatusInput {
	fake.getServiceLinkedRoleDeletionStatusMutex.RLock()
	defer fake.getServiceLinkedRoleDeletionStatusMutex.RUnlock()
	argsForCall := fake.getServiceLinkedRoleDeletionStatusArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatusReturns(result1 *iam.GetServiceLinkedRoleDeletionStatusOutput, result2 error) {
	fake.getServiceLinkedRoleDeletionStatusMutex.Lock()
	defer fake.getServiceLinkedRoleDeletionStatusMutex.Unlock()
	fake.GetServiceLinkedRoleDeletionStatusStub = nil
	fake.getServiceLinkedRoleDeletionStatusReturns = struct {
		result1 *iam.GetServiceLinkedRoleDeletionStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatusReturnsOnCall(i int, result1 *iam.GetServiceLinkedRoleDeletionStatusOutput, result2 error) {
	fake.getServiceLinkedRoleDeletionStatusMutex.Lock()
	defer fake.getServiceLinkedRoleDeletionStatusMutex.Unlock()
	fake.GetServiceLinkedRoleDeletionStatusStub = nil
	if fake.getServiceLinkedRoleDeletionStatusReturnsOnCall == nil {
		fake.getServiceLinkedRoleDeletionStatusReturnsOnCall = make(map[int]struct {
			result1 *iam.GetServiceLinkedRoleDeletionStatusOutput
			result2 error
		})
	}
	fake.getServiceLinkedRoleDeletionStatusReturnsOnCall[i] = struct {
		result1 *iam.GetServiceLinkedRoleDeletionStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatusRequest(arg1 *iam.GetServiceLinkedRoleDeletionStatusInput) (*request.Request, *iam.GetServiceLinkedRoleDeletionStatusOutput) {
	fake.getServiceLinkedRoleDeletionStatusRequestMutex.Lock()
	ret, specificReturn := fake.getServiceLinkedRoleDeletionStatusRequestReturnsOnCall[len(fake.getServiceLinkedRoleDeletionStatusRequestArgsForCall)]
	fake.getServiceLinkedRoleDeletionStatusRequestArgsForCall = append(fake.getServiceLinkedRoleDeletionStatusRequestArgsForCall, struct {
		arg1 *iam.GetServiceLinkedRoleDeletionStatusInput
	}{arg1})
	fake.recordInvocation("GetServiceLinkedRoleDeletionStatusRequest", []interface{}{arg1})
	fake.getServiceLinkedRoleDeletionStatusRequestMutex.Unlock()
	if fake.GetServiceLinkedRoleDeletionStatusRequestStub != nil {
		return fake.GetServiceLinkedRoleDeletionStatusRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceLinkedRoleDeletionStatusRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatusRequestCallCount() int {
	fake.getServiceLinkedRoleDeletionStatusRequestMutex.RLock()
	defer fake.getServiceLinkedRoleDeletionStatusRequestMutex.RUnlock()
	return len(fake.getServiceLinkedRoleDeletionStatusRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatusRequestCalls(stub func(*iam.GetServiceLinkedRoleDeletionStatusInput) (*request.Request, *iam.GetServiceLinkedRoleDeletionStatusOutput)) {
	fake.getServiceLinkedRoleDeletionStatusRequestMutex.Lock()
	defer fake.getServiceLinkedRoleDeletionStatusRequestMutex.Unlock()
	fake.GetServiceLinkedRoleDeletionStatusRequestStub = stub
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatusRequestArgsForCall(i int) *iam.GetServiceLinkedRoleDeletionStatusInput {
	fake.getServiceLinkedRoleDeletionStatusRequestMutex.RLock()
	defer fake.getServiceLinkedRoleDeletionStatusRequestMutex.RUnlock()
	argsForCall := fake.getServiceLinkedRoleDeletionStatusRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatusRequestReturns(result1 *request.Request, result2 *iam.GetServiceLinkedRoleDeletionStatusOutput) {
	fake.getServiceLinkedRoleDeletionStatusRequestMutex.Lock()
	defer fake.getServiceLinkedRoleDeletionStatusRequestMutex.Unlock()
	fake.GetServiceLinkedRoleDeletionStatusRequestStub = nil
	fake.getServiceLinkedRoleDeletionStatusRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetServiceLinkedRoleDeletionStatusOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatusRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetServiceLinkedRoleDeletionStatusOutput) {
	fake.getServiceLinkedRoleDeletionStatusRequestMutex.Lock()
	defer fake.getServiceLinkedRoleDeletionStatusRequestMutex.Unlock()
	fake.GetServiceLinkedRoleDeletionStatusRequestStub = nil
	if fake.getServiceLinkedRoleDeletionStatusRequestReturnsOnCall == nil {
		fake.getServiceLinkedRoleDeletionStatusRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetServiceLinkedRoleDeletionStatusOutput
		})
	}
	fake.getServiceLinkedRoleDeletionStatusRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetServiceLinkedRoleDeletionStatusOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatusWithContext(arg1 context.Context, arg2 *iam.GetServiceLinkedRoleDeletionStatusInput, arg3 ...request.Option) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
	fake.getServiceLinkedRoleDeletionStatusWithContextMutex.Lock()
	ret, specificReturn := fake.getServiceLinkedRoleDeletionStatusWithContextReturnsOnCall[len(fake.getServiceLinkedRoleDeletionStatusWithContextArgsForCall)]
	fake.getServiceLinkedRoleDeletionStatusWithContextArgsForCall = append(fake.getServiceLinkedRoleDeletionStatusWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetServiceLinkedRoleDeletionStatusInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetServiceLinkedRoleDeletionStatusWithContext", []interface{}{arg1, arg2, arg3})
	fake.getServiceLinkedRoleDeletionStatusWithContextMutex.Unlock()
	if fake.GetServiceLinkedRoleDeletionStatusWithContextStub != nil {
		return fake.GetServiceLinkedRoleDeletionStatusWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceLinkedRoleDeletionStatusWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatusWithContextCallCount() int {
	fake.getServiceLinkedRoleDeletionStatusWithContextMutex.RLock()
	defer fake.getServiceLinkedRoleDeletionStatusWithContextMutex.RUnlock()
	return len(fake.getServiceLinkedRoleDeletionStatusWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatusWithContextCalls(stub func(context.Context, *iam.GetServiceLinkedRoleDeletionStatusInput, ...request.Option) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error)) {
	fake.getServiceLinkedRoleDeletionStatusWithContextMutex.Lock()
	defer fake.getServiceLinkedRoleDeletionStatusWithContextMutex.Unlock()
	fake.GetServiceLinkedRoleDeletionStatusWithContextStub = stub
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatusWithContextArgsForCall(i int) (context.Context, *iam.GetServiceLinkedRoleDeletionStatusInput, []request.Option) {
	fake.getServiceLinkedRoleDeletionStatusWithContextMutex.RLock()
	defer fake.getServiceLinkedRoleDeletionStatusWithContextMutex.RUnlock()
	argsForCall := fake.getServiceLinkedRoleDeletionStatusWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatusWithContextReturns(result1 *iam.GetServiceLinkedRoleDeletionStatusOutput, result2 error) {
	fake.getServiceLinkedRoleDeletionStatusWithContextMutex.Lock()
	defer fake.getServiceLinkedRoleDeletionStatusWithContextMutex.Unlock()
	fake.GetServiceLinkedRoleDeletionStatusWithContextStub = nil
	fake.getServiceLinkedRoleDeletionStatusWithContextReturns = struct {
		result1 *iam.GetServiceLinkedRoleDeletionStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetServiceLinkedRoleDeletionStatusWithContextReturnsOnCall(i int, result1 *iam.GetServiceLinkedRoleDeletionStatusOutput, result2 error) {
	fake.getServiceLinkedRoleDeletionStatusWithContextMutex.Lock()
	defer fake.getServiceLinkedRoleDeletionStatusWithContextMutex.Unlock()
	fake.GetServiceLinkedRoleDeletionStatusWithContextStub = nil
	if fake.getServiceLinkedRoleDeletionStatusWithContextReturnsOnCall == nil {
		fake.getServiceLinkedRoleDeletionStatusWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetServiceLinkedRoleDeletionStatusOutput
			result2 error
		})
	}
	fake.getServiceLinkedRoleDeletionStatusWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetServiceLinkedRoleDeletionStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetUser(arg1 *iam.GetUserInput) (*iam.GetUserOutput, error) {
	fake.getUserMutex.Lock()
	ret, specificReturn := fake.getUserReturnsOnCall[len(fake.getUserArgsForCall)]
	fake.getUserArgsForCall = append(fake.getUserArgsForCall, struct {
		arg1 *iam.GetUserInput
	}{arg1})
	fake.recordInvocation("GetUser", []interface{}{arg1})
	fake.getUserMutex.Unlock()
	if fake.GetUserStub != nil {
		return fake.GetUserStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getUserReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetUserCallCount() int {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	return len(fake.getUserArgsForCall)
}

func (fake *FakeIAMAPI) GetUserCalls(stub func(*iam.GetUserInput) (*iam.GetUserOutput, error)) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = stub
}

func (fake *FakeIAMAPI) GetUserArgsForCall(i int) *iam.GetUserInput {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	argsForCall := fake.getUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetUserReturns(result1 *iam.GetUserOutput, result2 error) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = nil
	fake.getUserReturns = struct {
		result1 *iam.GetUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetUserReturnsOnCall(i int, result1 *iam.GetUserOutput, result2 error) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = nil
	if fake.getUserReturnsOnCall == nil {
		fake.getUserReturnsOnCall = make(map[int]struct {
			result1 *iam.GetUserOutput
			result2 error
		})
	}
	fake.getUserReturnsOnCall[i] = struct {
		result1 *iam.GetUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetUserPolicy(arg1 *iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error) {
	fake.getUserPolicyMutex.Lock()
	ret, specificReturn := fake.getUserPolicyReturnsOnCall[len(fake.getUserPolicyArgsForCall)]
	fake.getUserPolicyArgsForCall = append(fake.getUserPolicyArgsForCall, struct {
		arg1 *iam.GetUserPolicyInput
	}{arg1})
	fake.recordInvocation("GetUserPolicy", []interface{}{arg1})
	fake.getUserPolicyMutex.Unlock()
	if fake.GetUserPolicyStub != nil {
		return fake.GetUserPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getUserPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetUserPolicyCallCount() int {
	fake.getUserPolicyMutex.RLock()
	defer fake.getUserPolicyMutex.RUnlock()
	return len(fake.getUserPolicyArgsForCall)
}

func (fake *FakeIAMAPI) GetUserPolicyCalls(stub func(*iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error)) {
	fake.getUserPolicyMutex.Lock()
	defer fake.getUserPolicyMutex.Unlock()
	fake.GetUserPolicyStub = stub
}

func (fake *FakeIAMAPI) GetUserPolicyArgsForCall(i int) *iam.GetUserPolicyInput {
	fake.getUserPolicyMutex.RLock()
	defer fake.getUserPolicyMutex.RUnlock()
	argsForCall := fake.getUserPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetUserPolicyReturns(result1 *iam.GetUserPolicyOutput, result2 error) {
	fake.getUserPolicyMutex.Lock()
	defer fake.getUserPolicyMutex.Unlock()
	fake.GetUserPolicyStub = nil
	fake.getUserPolicyReturns = struct {
		result1 *iam.GetUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetUserPolicyReturnsOnCall(i int, result1 *iam.GetUserPolicyOutput, result2 error) {
	fake.getUserPolicyMutex.Lock()
	defer fake.getUserPolicyMutex.Unlock()
	fake.GetUserPolicyStub = nil
	if fake.getUserPolicyReturnsOnCall == nil {
		fake.getUserPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.GetUserPolicyOutput
			result2 error
		})
	}
	fake.getUserPolicyReturnsOnCall[i] = struct {
		result1 *iam.GetUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetUserPolicyRequest(arg1 *iam.GetUserPolicyInput) (*request.Request, *iam.GetUserPolicyOutput) {
	fake.getUserPolicyRequestMutex.Lock()
	ret, specificReturn := fake.getUserPolicyRequestReturnsOnCall[len(fake.getUserPolicyRequestArgsForCall)]
	fake.getUserPolicyRequestArgsForCall = append(fake.getUserPolicyRequestArgsForCall, struct {
		arg1 *iam.GetUserPolicyInput
	}{arg1})
	fake.recordInvocation("GetUserPolicyRequest", []interface{}{arg1})
	fake.getUserPolicyRequestMutex.Unlock()
	if fake.GetUserPolicyRequestStub != nil {
		return fake.GetUserPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getUserPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetUserPolicyRequestCallCount() int {
	fake.getUserPolicyRequestMutex.RLock()
	defer fake.getUserPolicyRequestMutex.RUnlock()
	return len(fake.getUserPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetUserPolicyRequestCalls(stub func(*iam.GetUserPolicyInput) (*request.Request, *iam.GetUserPolicyOutput)) {
	fake.getUserPolicyRequestMutex.Lock()
	defer fake.getUserPolicyRequestMutex.Unlock()
	fake.GetUserPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) GetUserPolicyRequestArgsForCall(i int) *iam.GetUserPolicyInput {
	fake.getUserPolicyRequestMutex.RLock()
	defer fake.getUserPolicyRequestMutex.RUnlock()
	argsForCall := fake.getUserPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetUserPolicyRequestReturns(result1 *request.Request, result2 *iam.GetUserPolicyOutput) {
	fake.getUserPolicyRequestMutex.Lock()
	defer fake.getUserPolicyRequestMutex.Unlock()
	fake.GetUserPolicyRequestStub = nil
	fake.getUserPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetUserPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetUserPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetUserPolicyOutput) {
	fake.getUserPolicyRequestMutex.Lock()
	defer fake.getUserPolicyRequestMutex.Unlock()
	fake.GetUserPolicyRequestStub = nil
	if fake.getUserPolicyRequestReturnsOnCall == nil {
		fake.getUserPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetUserPolicyOutput
		})
	}
	fake.getUserPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetUserPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetUserPolicyWithContext(arg1 context.Context, arg2 *iam.GetUserPolicyInput, arg3 ...request.Option) (*iam.GetUserPolicyOutput, error) {
	fake.getUserPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.getUserPolicyWithContextReturnsOnCall[len(fake.getUserPolicyWithContextArgsForCall)]
	fake.getUserPolicyWithContextArgsForCall = append(fake.getUserPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetUserPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetUserPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.getUserPolicyWithContextMutex.Unlock()
	if fake.GetUserPolicyWithContextStub != nil {
		return fake.GetUserPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getUserPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetUserPolicyWithContextCallCount() int {
	fake.getUserPolicyWithContextMutex.RLock()
	defer fake.getUserPolicyWithContextMutex.RUnlock()
	return len(fake.getUserPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetUserPolicyWithContextCalls(stub func(context.Context, *iam.GetUserPolicyInput, ...request.Option) (*iam.GetUserPolicyOutput, error)) {
	fake.getUserPolicyWithContextMutex.Lock()
	defer fake.getUserPolicyWithContextMutex.Unlock()
	fake.GetUserPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) GetUserPolicyWithContextArgsForCall(i int) (context.Context, *iam.GetUserPolicyInput, []request.Option) {
	fake.getUserPolicyWithContextMutex.RLock()
	defer fake.getUserPolicyWithContextMutex.RUnlock()
	argsForCall := fake.getUserPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetUserPolicyWithContextReturns(result1 *iam.GetUserPolicyOutput, result2 error) {
	fake.getUserPolicyWithContextMutex.Lock()
	defer fake.getUserPolicyWithContextMutex.Unlock()
	fake.GetUserPolicyWithContextStub = nil
	fake.getUserPolicyWithContextReturns = struct {
		result1 *iam.GetUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetUserPolicyWithContextReturnsOnCall(i int, result1 *iam.GetUserPolicyOutput, result2 error) {
	fake.getUserPolicyWithContextMutex.Lock()
	defer fake.getUserPolicyWithContextMutex.Unlock()
	fake.GetUserPolicyWithContextStub = nil
	if fake.getUserPolicyWithContextReturnsOnCall == nil {
		fake.getUserPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetUserPolicyOutput
			result2 error
		})
	}
	fake.getUserPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetUserRequest(arg1 *iam.GetUserInput) (*request.Request, *iam.GetUserOutput) {
	fake.getUserRequestMutex.Lock()
	ret, specificReturn := fake.getUserRequestReturnsOnCall[len(fake.getUserRequestArgsForCall)]
	fake.getUserRequestArgsForCall = append(fake.getUserRequestArgsForCall, struct {
		arg1 *iam.GetUserInput
	}{arg1})
	fake.recordInvocation("GetUserRequest", []interface{}{arg1})
	fake.getUserRequestMutex.Unlock()
	if fake.GetUserRequestStub != nil {
		return fake.GetUserRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getUserRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetUserRequestCallCount() int {
	fake.getUserRequestMutex.RLock()
	defer fake.getUserRequestMutex.RUnlock()
	return len(fake.getUserRequestArgsForCall)
}

func (fake *FakeIAMAPI) GetUserRequestCalls(stub func(*iam.GetUserInput) (*request.Request, *iam.GetUserOutput)) {
	fake.getUserRequestMutex.Lock()
	defer fake.getUserRequestMutex.Unlock()
	fake.GetUserRequestStub = stub
}

func (fake *FakeIAMAPI) GetUserRequestArgsForCall(i int) *iam.GetUserInput {
	fake.getUserRequestMutex.RLock()
	defer fake.getUserRequestMutex.RUnlock()
	argsForCall := fake.getUserRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) GetUserRequestReturns(result1 *request.Request, result2 *iam.GetUserOutput) {
	fake.getUserRequestMutex.Lock()
	defer fake.getUserRequestMutex.Unlock()
	fake.GetUserRequestStub = nil
	fake.getUserRequestReturns = struct {
		result1 *request.Request
		result2 *iam.GetUserOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetUserRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.GetUserOutput) {
	fake.getUserRequestMutex.Lock()
	defer fake.getUserRequestMutex.Unlock()
	fake.GetUserRequestStub = nil
	if fake.getUserRequestReturnsOnCall == nil {
		fake.getUserRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.GetUserOutput
		})
	}
	fake.getUserRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.GetUserOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetUserWithContext(arg1 context.Context, arg2 *iam.GetUserInput, arg3 ...request.Option) (*iam.GetUserOutput, error) {
	fake.getUserWithContextMutex.Lock()
	ret, specificReturn := fake.getUserWithContextReturnsOnCall[len(fake.getUserWithContextArgsForCall)]
	fake.getUserWithContextArgsForCall = append(fake.getUserWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetUserInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetUserWithContext", []interface{}{arg1, arg2, arg3})
	fake.getUserWithContextMutex.Unlock()
	if fake.GetUserWithContextStub != nil {
		return fake.GetUserWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getUserWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) GetUserWithContextCallCount() int {
	fake.getUserWithContextMutex.RLock()
	defer fake.getUserWithContextMutex.RUnlock()
	return len(fake.getUserWithContextArgsForCall)
}

func (fake *FakeIAMAPI) GetUserWithContextCalls(stub func(context.Context, *iam.GetUserInput, ...request.Option) (*iam.GetUserOutput, error)) {
	fake.getUserWithContextMutex.Lock()
	defer fake.getUserWithContextMutex.Unlock()
	fake.GetUserWithContextStub = stub
}

func (fake *FakeIAMAPI) GetUserWithContextArgsForCall(i int) (context.Context, *iam.GetUserInput, []request.Option) {
	fake.getUserWithContextMutex.RLock()
	defer fake.getUserWithContextMutex.RUnlock()
	argsForCall := fake.getUserWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) GetUserWithContextReturns(result1 *iam.GetUserOutput, result2 error) {
	fake.getUserWithContextMutex.Lock()
	defer fake.getUserWithContextMutex.Unlock()
	fake.GetUserWithContextStub = nil
	fake.getUserWithContextReturns = struct {
		result1 *iam.GetUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) GetUserWithContextReturnsOnCall(i int, result1 *iam.GetUserOutput, result2 error) {
	fake.getUserWithContextMutex.Lock()
	defer fake.getUserWithContextMutex.Unlock()
	fake.GetUserWithContextStub = nil
	if fake.getUserWithContextReturnsOnCall == nil {
		fake.getUserWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.GetUserOutput
			result2 error
		})
	}
	fake.getUserWithContextReturnsOnCall[i] = struct {
		result1 *iam.GetUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAccessKeys(arg1 *iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error) {
	fake.listAccessKeysMutex.Lock()
	ret, specificReturn := fake.listAccessKeysReturnsOnCall[len(fake.listAccessKeysArgsForCall)]
	fake.listAccessKeysArgsForCall = append(fake.listAccessKeysArgsForCall, struct {
		arg1 *iam.ListAccessKeysInput
	}{arg1})
	fake.recordInvocation("ListAccessKeys", []interface{}{arg1})
	fake.listAccessKeysMutex.Unlock()
	if fake.ListAccessKeysStub != nil {
		return fake.ListAccessKeysStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAccessKeysReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListAccessKeysCallCount() int {
	fake.listAccessKeysMutex.RLock()
	defer fake.listAccessKeysMutex.RUnlock()
	return len(fake.listAccessKeysArgsForCall)
}

func (fake *FakeIAMAPI) ListAccessKeysCalls(stub func(*iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error)) {
	fake.listAccessKeysMutex.Lock()
	defer fake.listAccessKeysMutex.Unlock()
	fake.ListAccessKeysStub = stub
}

func (fake *FakeIAMAPI) ListAccessKeysArgsForCall(i int) *iam.ListAccessKeysInput {
	fake.listAccessKeysMutex.RLock()
	defer fake.listAccessKeysMutex.RUnlock()
	argsForCall := fake.listAccessKeysArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListAccessKeysReturns(result1 *iam.ListAccessKeysOutput, result2 error) {
	fake.listAccessKeysMutex.Lock()
	defer fake.listAccessKeysMutex.Unlock()
	fake.ListAccessKeysStub = nil
	fake.listAccessKeysReturns = struct {
		result1 *iam.ListAccessKeysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAccessKeysReturnsOnCall(i int, result1 *iam.ListAccessKeysOutput, result2 error) {
	fake.listAccessKeysMutex.Lock()
	defer fake.listAccessKeysMutex.Unlock()
	fake.ListAccessKeysStub = nil
	if fake.listAccessKeysReturnsOnCall == nil {
		fake.listAccessKeysReturnsOnCall = make(map[int]struct {
			result1 *iam.ListAccessKeysOutput
			result2 error
		})
	}
	fake.listAccessKeysReturnsOnCall[i] = struct {
		result1 *iam.ListAccessKeysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAccessKeysPages(arg1 *iam.ListAccessKeysInput, arg2 func(*iam.ListAccessKeysOutput, bool) bool) error {
	fake.listAccessKeysPagesMutex.Lock()
	ret, specificReturn := fake.listAccessKeysPagesReturnsOnCall[len(fake.listAccessKeysPagesArgsForCall)]
	fake.listAccessKeysPagesArgsForCall = append(fake.listAccessKeysPagesArgsForCall, struct {
		arg1 *iam.ListAccessKeysInput
		arg2 func(*iam.ListAccessKeysOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListAccessKeysPages", []interface{}{arg1, arg2})
	fake.listAccessKeysPagesMutex.Unlock()
	if fake.ListAccessKeysPagesStub != nil {
		return fake.ListAccessKeysPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listAccessKeysPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListAccessKeysPagesCallCount() int {
	fake.listAccessKeysPagesMutex.RLock()
	defer fake.listAccessKeysPagesMutex.RUnlock()
	return len(fake.listAccessKeysPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListAccessKeysPagesCalls(stub func(*iam.ListAccessKeysInput, func(*iam.ListAccessKeysOutput, bool) bool) error) {
	fake.listAccessKeysPagesMutex.Lock()
	defer fake.listAccessKeysPagesMutex.Unlock()
	fake.ListAccessKeysPagesStub = stub
}

func (fake *FakeIAMAPI) ListAccessKeysPagesArgsForCall(i int) (*iam.ListAccessKeysInput, func(*iam.ListAccessKeysOutput, bool) bool) {
	fake.listAccessKeysPagesMutex.RLock()
	defer fake.listAccessKeysPagesMutex.RUnlock()
	argsForCall := fake.listAccessKeysPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListAccessKeysPagesReturns(result1 error) {
	fake.listAccessKeysPagesMutex.Lock()
	defer fake.listAccessKeysPagesMutex.Unlock()
	fake.ListAccessKeysPagesStub = nil
	fake.listAccessKeysPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAccessKeysPagesReturnsOnCall(i int, result1 error) {
	fake.listAccessKeysPagesMutex.Lock()
	defer fake.listAccessKeysPagesMutex.Unlock()
	fake.ListAccessKeysPagesStub = nil
	if fake.listAccessKeysPagesReturnsOnCall == nil {
		fake.listAccessKeysPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAccessKeysPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAccessKeysPagesWithContext(arg1 context.Context, arg2 *iam.ListAccessKeysInput, arg3 func(*iam.ListAccessKeysOutput, bool) bool, arg4 ...request.Option) error {
	fake.listAccessKeysPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listAccessKeysPagesWithContextReturnsOnCall[len(fake.listAccessKeysPagesWithContextArgsForCall)]
	fake.listAccessKeysPagesWithContextArgsForCall = append(fake.listAccessKeysPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListAccessKeysInput
		arg3 func(*iam.ListAccessKeysOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListAccessKeysPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listAccessKeysPagesWithContextMutex.Unlock()
	if fake.ListAccessKeysPagesWithContextStub != nil {
		return fake.ListAccessKeysPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listAccessKeysPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListAccessKeysPagesWithContextCallCount() int {
	fake.listAccessKeysPagesWithContextMutex.RLock()
	defer fake.listAccessKeysPagesWithContextMutex.RUnlock()
	return len(fake.listAccessKeysPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListAccessKeysPagesWithContextCalls(stub func(context.Context, *iam.ListAccessKeysInput, func(*iam.ListAccessKeysOutput, bool) bool, ...request.Option) error) {
	fake.listAccessKeysPagesWithContextMutex.Lock()
	defer fake.listAccessKeysPagesWithContextMutex.Unlock()
	fake.ListAccessKeysPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListAccessKeysPagesWithContextArgsForCall(i int) (context.Context, *iam.ListAccessKeysInput, func(*iam.ListAccessKeysOutput, bool) bool, []request.Option) {
	fake.listAccessKeysPagesWithContextMutex.RLock()
	defer fake.listAccessKeysPagesWithContextMutex.RUnlock()
	argsForCall := fake.listAccessKeysPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListAccessKeysPagesWithContextReturns(result1 error) {
	fake.listAccessKeysPagesWithContextMutex.Lock()
	defer fake.listAccessKeysPagesWithContextMutex.Unlock()
	fake.ListAccessKeysPagesWithContextStub = nil
	fake.listAccessKeysPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAccessKeysPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listAccessKeysPagesWithContextMutex.Lock()
	defer fake.listAccessKeysPagesWithContextMutex.Unlock()
	fake.ListAccessKeysPagesWithContextStub = nil
	if fake.listAccessKeysPagesWithContextReturnsOnCall == nil {
		fake.listAccessKeysPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAccessKeysPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAccessKeysRequest(arg1 *iam.ListAccessKeysInput) (*request.Request, *iam.ListAccessKeysOutput) {
	fake.listAccessKeysRequestMutex.Lock()
	ret, specificReturn := fake.listAccessKeysRequestReturnsOnCall[len(fake.listAccessKeysRequestArgsForCall)]
	fake.listAccessKeysRequestArgsForCall = append(fake.listAccessKeysRequestArgsForCall, struct {
		arg1 *iam.ListAccessKeysInput
	}{arg1})
	fake.recordInvocation("ListAccessKeysRequest", []interface{}{arg1})
	fake.listAccessKeysRequestMutex.Unlock()
	if fake.ListAccessKeysRequestStub != nil {
		return fake.ListAccessKeysRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAccessKeysRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListAccessKeysRequestCallCount() int {
	fake.listAccessKeysRequestMutex.RLock()
	defer fake.listAccessKeysRequestMutex.RUnlock()
	return len(fake.listAccessKeysRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListAccessKeysRequestCalls(stub func(*iam.ListAccessKeysInput) (*request.Request, *iam.ListAccessKeysOutput)) {
	fake.listAccessKeysRequestMutex.Lock()
	defer fake.listAccessKeysRequestMutex.Unlock()
	fake.ListAccessKeysRequestStub = stub
}

func (fake *FakeIAMAPI) ListAccessKeysRequestArgsForCall(i int) *iam.ListAccessKeysInput {
	fake.listAccessKeysRequestMutex.RLock()
	defer fake.listAccessKeysRequestMutex.RUnlock()
	argsForCall := fake.listAccessKeysRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListAccessKeysRequestReturns(result1 *request.Request, result2 *iam.ListAccessKeysOutput) {
	fake.listAccessKeysRequestMutex.Lock()
	defer fake.listAccessKeysRequestMutex.Unlock()
	fake.ListAccessKeysRequestStub = nil
	fake.listAccessKeysRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListAccessKeysOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAccessKeysRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListAccessKeysOutput) {
	fake.listAccessKeysRequestMutex.Lock()
	defer fake.listAccessKeysRequestMutex.Unlock()
	fake.ListAccessKeysRequestStub = nil
	if fake.listAccessKeysRequestReturnsOnCall == nil {
		fake.listAccessKeysRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListAccessKeysOutput
		})
	}
	fake.listAccessKeysRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListAccessKeysOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAccessKeysWithContext(arg1 context.Context, arg2 *iam.ListAccessKeysInput, arg3 ...request.Option) (*iam.ListAccessKeysOutput, error) {
	fake.listAccessKeysWithContextMutex.Lock()
	ret, specificReturn := fake.listAccessKeysWithContextReturnsOnCall[len(fake.listAccessKeysWithContextArgsForCall)]
	fake.listAccessKeysWithContextArgsForCall = append(fake.listAccessKeysWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListAccessKeysInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListAccessKeysWithContext", []interface{}{arg1, arg2, arg3})
	fake.listAccessKeysWithContextMutex.Unlock()
	if fake.ListAccessKeysWithContextStub != nil {
		return fake.ListAccessKeysWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAccessKeysWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListAccessKeysWithContextCallCount() int {
	fake.listAccessKeysWithContextMutex.RLock()
	defer fake.listAccessKeysWithContextMutex.RUnlock()
	return len(fake.listAccessKeysWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListAccessKeysWithContextCalls(stub func(context.Context, *iam.ListAccessKeysInput, ...request.Option) (*iam.ListAccessKeysOutput, error)) {
	fake.listAccessKeysWithContextMutex.Lock()
	defer fake.listAccessKeysWithContextMutex.Unlock()
	fake.ListAccessKeysWithContextStub = stub
}

func (fake *FakeIAMAPI) ListAccessKeysWithContextArgsForCall(i int) (context.Context, *iam.ListAccessKeysInput, []request.Option) {
	fake.listAccessKeysWithContextMutex.RLock()
	defer fake.listAccessKeysWithContextMutex.RUnlock()
	argsForCall := fake.listAccessKeysWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListAccessKeysWithContextReturns(result1 *iam.ListAccessKeysOutput, result2 error) {
	fake.listAccessKeysWithContextMutex.Lock()
	defer fake.listAccessKeysWithContextMutex.Unlock()
	fake.ListAccessKeysWithContextStub = nil
	fake.listAccessKeysWithContextReturns = struct {
		result1 *iam.ListAccessKeysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAccessKeysWithContextReturnsOnCall(i int, result1 *iam.ListAccessKeysOutput, result2 error) {
	fake.listAccessKeysWithContextMutex.Lock()
	defer fake.listAccessKeysWithContextMutex.Unlock()
	fake.ListAccessKeysWithContextStub = nil
	if fake.listAccessKeysWithContextReturnsOnCall == nil {
		fake.listAccessKeysWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListAccessKeysOutput
			result2 error
		})
	}
	fake.listAccessKeysWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListAccessKeysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAccountAliases(arg1 *iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error) {
	fake.listAccountAliasesMutex.Lock()
	ret, specificReturn := fake.listAccountAliasesReturnsOnCall[len(fake.listAccountAliasesArgsForCall)]
	fake.listAccountAliasesArgsForCall = append(fake.listAccountAliasesArgsForCall, struct {
		arg1 *iam.ListAccountAliasesInput
	}{arg1})
	fake.recordInvocation("ListAccountAliases", []interface{}{arg1})
	fake.listAccountAliasesMutex.Unlock()
	if fake.ListAccountAliasesStub != nil {
		return fake.ListAccountAliasesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAccountAliasesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListAccountAliasesCallCount() int {
	fake.listAccountAliasesMutex.RLock()
	defer fake.listAccountAliasesMutex.RUnlock()
	return len(fake.listAccountAliasesArgsForCall)
}

func (fake *FakeIAMAPI) ListAccountAliasesCalls(stub func(*iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error)) {
	fake.listAccountAliasesMutex.Lock()
	defer fake.listAccountAliasesMutex.Unlock()
	fake.ListAccountAliasesStub = stub
}

func (fake *FakeIAMAPI) ListAccountAliasesArgsForCall(i int) *iam.ListAccountAliasesInput {
	fake.listAccountAliasesMutex.RLock()
	defer fake.listAccountAliasesMutex.RUnlock()
	argsForCall := fake.listAccountAliasesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListAccountAliasesReturns(result1 *iam.ListAccountAliasesOutput, result2 error) {
	fake.listAccountAliasesMutex.Lock()
	defer fake.listAccountAliasesMutex.Unlock()
	fake.ListAccountAliasesStub = nil
	fake.listAccountAliasesReturns = struct {
		result1 *iam.ListAccountAliasesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAccountAliasesReturnsOnCall(i int, result1 *iam.ListAccountAliasesOutput, result2 error) {
	fake.listAccountAliasesMutex.Lock()
	defer fake.listAccountAliasesMutex.Unlock()
	fake.ListAccountAliasesStub = nil
	if fake.listAccountAliasesReturnsOnCall == nil {
		fake.listAccountAliasesReturnsOnCall = make(map[int]struct {
			result1 *iam.ListAccountAliasesOutput
			result2 error
		})
	}
	fake.listAccountAliasesReturnsOnCall[i] = struct {
		result1 *iam.ListAccountAliasesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAccountAliasesPages(arg1 *iam.ListAccountAliasesInput, arg2 func(*iam.ListAccountAliasesOutput, bool) bool) error {
	fake.listAccountAliasesPagesMutex.Lock()
	ret, specificReturn := fake.listAccountAliasesPagesReturnsOnCall[len(fake.listAccountAliasesPagesArgsForCall)]
	fake.listAccountAliasesPagesArgsForCall = append(fake.listAccountAliasesPagesArgsForCall, struct {
		arg1 *iam.ListAccountAliasesInput
		arg2 func(*iam.ListAccountAliasesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListAccountAliasesPages", []interface{}{arg1, arg2})
	fake.listAccountAliasesPagesMutex.Unlock()
	if fake.ListAccountAliasesPagesStub != nil {
		return fake.ListAccountAliasesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listAccountAliasesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListAccountAliasesPagesCallCount() int {
	fake.listAccountAliasesPagesMutex.RLock()
	defer fake.listAccountAliasesPagesMutex.RUnlock()
	return len(fake.listAccountAliasesPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListAccountAliasesPagesCalls(stub func(*iam.ListAccountAliasesInput, func(*iam.ListAccountAliasesOutput, bool) bool) error) {
	fake.listAccountAliasesPagesMutex.Lock()
	defer fake.listAccountAliasesPagesMutex.Unlock()
	fake.ListAccountAliasesPagesStub = stub
}

func (fake *FakeIAMAPI) ListAccountAliasesPagesArgsForCall(i int) (*iam.ListAccountAliasesInput, func(*iam.ListAccountAliasesOutput, bool) bool) {
	fake.listAccountAliasesPagesMutex.RLock()
	defer fake.listAccountAliasesPagesMutex.RUnlock()
	argsForCall := fake.listAccountAliasesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListAccountAliasesPagesReturns(result1 error) {
	fake.listAccountAliasesPagesMutex.Lock()
	defer fake.listAccountAliasesPagesMutex.Unlock()
	fake.ListAccountAliasesPagesStub = nil
	fake.listAccountAliasesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAccountAliasesPagesReturnsOnCall(i int, result1 error) {
	fake.listAccountAliasesPagesMutex.Lock()
	defer fake.listAccountAliasesPagesMutex.Unlock()
	fake.ListAccountAliasesPagesStub = nil
	if fake.listAccountAliasesPagesReturnsOnCall == nil {
		fake.listAccountAliasesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAccountAliasesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAccountAliasesPagesWithContext(arg1 context.Context, arg2 *iam.ListAccountAliasesInput, arg3 func(*iam.ListAccountAliasesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listAccountAliasesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listAccountAliasesPagesWithContextReturnsOnCall[len(fake.listAccountAliasesPagesWithContextArgsForCall)]
	fake.listAccountAliasesPagesWithContextArgsForCall = append(fake.listAccountAliasesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListAccountAliasesInput
		arg3 func(*iam.ListAccountAliasesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListAccountAliasesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listAccountAliasesPagesWithContextMutex.Unlock()
	if fake.ListAccountAliasesPagesWithContextStub != nil {
		return fake.ListAccountAliasesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listAccountAliasesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListAccountAliasesPagesWithContextCallCount() int {
	fake.listAccountAliasesPagesWithContextMutex.RLock()
	defer fake.listAccountAliasesPagesWithContextMutex.RUnlock()
	return len(fake.listAccountAliasesPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListAccountAliasesPagesWithContextCalls(stub func(context.Context, *iam.ListAccountAliasesInput, func(*iam.ListAccountAliasesOutput, bool) bool, ...request.Option) error) {
	fake.listAccountAliasesPagesWithContextMutex.Lock()
	defer fake.listAccountAliasesPagesWithContextMutex.Unlock()
	fake.ListAccountAliasesPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListAccountAliasesPagesWithContextArgsForCall(i int) (context.Context, *iam.ListAccountAliasesInput, func(*iam.ListAccountAliasesOutput, bool) bool, []request.Option) {
	fake.listAccountAliasesPagesWithContextMutex.RLock()
	defer fake.listAccountAliasesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listAccountAliasesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListAccountAliasesPagesWithContextReturns(result1 error) {
	fake.listAccountAliasesPagesWithContextMutex.Lock()
	defer fake.listAccountAliasesPagesWithContextMutex.Unlock()
	fake.ListAccountAliasesPagesWithContextStub = nil
	fake.listAccountAliasesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAccountAliasesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listAccountAliasesPagesWithContextMutex.Lock()
	defer fake.listAccountAliasesPagesWithContextMutex.Unlock()
	fake.ListAccountAliasesPagesWithContextStub = nil
	if fake.listAccountAliasesPagesWithContextReturnsOnCall == nil {
		fake.listAccountAliasesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAccountAliasesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAccountAliasesRequest(arg1 *iam.ListAccountAliasesInput) (*request.Request, *iam.ListAccountAliasesOutput) {
	fake.listAccountAliasesRequestMutex.Lock()
	ret, specificReturn := fake.listAccountAliasesRequestReturnsOnCall[len(fake.listAccountAliasesRequestArgsForCall)]
	fake.listAccountAliasesRequestArgsForCall = append(fake.listAccountAliasesRequestArgsForCall, struct {
		arg1 *iam.ListAccountAliasesInput
	}{arg1})
	fake.recordInvocation("ListAccountAliasesRequest", []interface{}{arg1})
	fake.listAccountAliasesRequestMutex.Unlock()
	if fake.ListAccountAliasesRequestStub != nil {
		return fake.ListAccountAliasesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAccountAliasesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListAccountAliasesRequestCallCount() int {
	fake.listAccountAliasesRequestMutex.RLock()
	defer fake.listAccountAliasesRequestMutex.RUnlock()
	return len(fake.listAccountAliasesRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListAccountAliasesRequestCalls(stub func(*iam.ListAccountAliasesInput) (*request.Request, *iam.ListAccountAliasesOutput)) {
	fake.listAccountAliasesRequestMutex.Lock()
	defer fake.listAccountAliasesRequestMutex.Unlock()
	fake.ListAccountAliasesRequestStub = stub
}

func (fake *FakeIAMAPI) ListAccountAliasesRequestArgsForCall(i int) *iam.ListAccountAliasesInput {
	fake.listAccountAliasesRequestMutex.RLock()
	defer fake.listAccountAliasesRequestMutex.RUnlock()
	argsForCall := fake.listAccountAliasesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListAccountAliasesRequestReturns(result1 *request.Request, result2 *iam.ListAccountAliasesOutput) {
	fake.listAccountAliasesRequestMutex.Lock()
	defer fake.listAccountAliasesRequestMutex.Unlock()
	fake.ListAccountAliasesRequestStub = nil
	fake.listAccountAliasesRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListAccountAliasesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAccountAliasesRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListAccountAliasesOutput) {
	fake.listAccountAliasesRequestMutex.Lock()
	defer fake.listAccountAliasesRequestMutex.Unlock()
	fake.ListAccountAliasesRequestStub = nil
	if fake.listAccountAliasesRequestReturnsOnCall == nil {
		fake.listAccountAliasesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListAccountAliasesOutput
		})
	}
	fake.listAccountAliasesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListAccountAliasesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAccountAliasesWithContext(arg1 context.Context, arg2 *iam.ListAccountAliasesInput, arg3 ...request.Option) (*iam.ListAccountAliasesOutput, error) {
	fake.listAccountAliasesWithContextMutex.Lock()
	ret, specificReturn := fake.listAccountAliasesWithContextReturnsOnCall[len(fake.listAccountAliasesWithContextArgsForCall)]
	fake.listAccountAliasesWithContextArgsForCall = append(fake.listAccountAliasesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListAccountAliasesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListAccountAliasesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listAccountAliasesWithContextMutex.Unlock()
	if fake.ListAccountAliasesWithContextStub != nil {
		return fake.ListAccountAliasesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAccountAliasesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListAccountAliasesWithContextCallCount() int {
	fake.listAccountAliasesWithContextMutex.RLock()
	defer fake.listAccountAliasesWithContextMutex.RUnlock()
	return len(fake.listAccountAliasesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListAccountAliasesWithContextCalls(stub func(context.Context, *iam.ListAccountAliasesInput, ...request.Option) (*iam.ListAccountAliasesOutput, error)) {
	fake.listAccountAliasesWithContextMutex.Lock()
	defer fake.listAccountAliasesWithContextMutex.Unlock()
	fake.ListAccountAliasesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListAccountAliasesWithContextArgsForCall(i int) (context.Context, *iam.ListAccountAliasesInput, []request.Option) {
	fake.listAccountAliasesWithContextMutex.RLock()
	defer fake.listAccountAliasesWithContextMutex.RUnlock()
	argsForCall := fake.listAccountAliasesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListAccountAliasesWithContextReturns(result1 *iam.ListAccountAliasesOutput, result2 error) {
	fake.listAccountAliasesWithContextMutex.Lock()
	defer fake.listAccountAliasesWithContextMutex.Unlock()
	fake.ListAccountAliasesWithContextStub = nil
	fake.listAccountAliasesWithContextReturns = struct {
		result1 *iam.ListAccountAliasesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAccountAliasesWithContextReturnsOnCall(i int, result1 *iam.ListAccountAliasesOutput, result2 error) {
	fake.listAccountAliasesWithContextMutex.Lock()
	defer fake.listAccountAliasesWithContextMutex.Unlock()
	fake.ListAccountAliasesWithContextStub = nil
	if fake.listAccountAliasesWithContextReturnsOnCall == nil {
		fake.listAccountAliasesWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListAccountAliasesOutput
			result2 error
		})
	}
	fake.listAccountAliasesWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListAccountAliasesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedGroupPolicies(arg1 *iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error) {
	fake.listAttachedGroupPoliciesMutex.Lock()
	ret, specificReturn := fake.listAttachedGroupPoliciesReturnsOnCall[len(fake.listAttachedGroupPoliciesArgsForCall)]
	fake.listAttachedGroupPoliciesArgsForCall = append(fake.listAttachedGroupPoliciesArgsForCall, struct {
		arg1 *iam.ListAttachedGroupPoliciesInput
	}{arg1})
	fake.recordInvocation("ListAttachedGroupPolicies", []interface{}{arg1})
	fake.listAttachedGroupPoliciesMutex.Unlock()
	if fake.ListAttachedGroupPoliciesStub != nil {
		return fake.ListAttachedGroupPoliciesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAttachedGroupPoliciesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesCallCount() int {
	fake.listAttachedGroupPoliciesMutex.RLock()
	defer fake.listAttachedGroupPoliciesMutex.RUnlock()
	return len(fake.listAttachedGroupPoliciesArgsForCall)
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesCalls(stub func(*iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error)) {
	fake.listAttachedGroupPoliciesMutex.Lock()
	defer fake.listAttachedGroupPoliciesMutex.Unlock()
	fake.ListAttachedGroupPoliciesStub = stub
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesArgsForCall(i int) *iam.ListAttachedGroupPoliciesInput {
	fake.listAttachedGroupPoliciesMutex.RLock()
	defer fake.listAttachedGroupPoliciesMutex.RUnlock()
	argsForCall := fake.listAttachedGroupPoliciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesReturns(result1 *iam.ListAttachedGroupPoliciesOutput, result2 error) {
	fake.listAttachedGroupPoliciesMutex.Lock()
	defer fake.listAttachedGroupPoliciesMutex.Unlock()
	fake.ListAttachedGroupPoliciesStub = nil
	fake.listAttachedGroupPoliciesReturns = struct {
		result1 *iam.ListAttachedGroupPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesReturnsOnCall(i int, result1 *iam.ListAttachedGroupPoliciesOutput, result2 error) {
	fake.listAttachedGroupPoliciesMutex.Lock()
	defer fake.listAttachedGroupPoliciesMutex.Unlock()
	fake.ListAttachedGroupPoliciesStub = nil
	if fake.listAttachedGroupPoliciesReturnsOnCall == nil {
		fake.listAttachedGroupPoliciesReturnsOnCall = make(map[int]struct {
			result1 *iam.ListAttachedGroupPoliciesOutput
			result2 error
		})
	}
	fake.listAttachedGroupPoliciesReturnsOnCall[i] = struct {
		result1 *iam.ListAttachedGroupPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesPages(arg1 *iam.ListAttachedGroupPoliciesInput, arg2 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool) error {
	fake.listAttachedGroupPoliciesPagesMutex.Lock()
	ret, specificReturn := fake.listAttachedGroupPoliciesPagesReturnsOnCall[len(fake.listAttachedGroupPoliciesPagesArgsForCall)]
	fake.listAttachedGroupPoliciesPagesArgsForCall = append(fake.listAttachedGroupPoliciesPagesArgsForCall, struct {
		arg1 *iam.ListAttachedGroupPoliciesInput
		arg2 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListAttachedGroupPoliciesPages", []interface{}{arg1, arg2})
	fake.listAttachedGroupPoliciesPagesMutex.Unlock()
	if fake.ListAttachedGroupPoliciesPagesStub != nil {
		return fake.ListAttachedGroupPoliciesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listAttachedGroupPoliciesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesPagesCallCount() int {
	fake.listAttachedGroupPoliciesPagesMutex.RLock()
	defer fake.listAttachedGroupPoliciesPagesMutex.RUnlock()
	return len(fake.listAttachedGroupPoliciesPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesPagesCalls(stub func(*iam.ListAttachedGroupPoliciesInput, func(*iam.ListAttachedGroupPoliciesOutput, bool) bool) error) {
	fake.listAttachedGroupPoliciesPagesMutex.Lock()
	defer fake.listAttachedGroupPoliciesPagesMutex.Unlock()
	fake.ListAttachedGroupPoliciesPagesStub = stub
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesPagesArgsForCall(i int) (*iam.ListAttachedGroupPoliciesInput, func(*iam.ListAttachedGroupPoliciesOutput, bool) bool) {
	fake.listAttachedGroupPoliciesPagesMutex.RLock()
	defer fake.listAttachedGroupPoliciesPagesMutex.RUnlock()
	argsForCall := fake.listAttachedGroupPoliciesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesPagesReturns(result1 error) {
	fake.listAttachedGroupPoliciesPagesMutex.Lock()
	defer fake.listAttachedGroupPoliciesPagesMutex.Unlock()
	fake.ListAttachedGroupPoliciesPagesStub = nil
	fake.listAttachedGroupPoliciesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesPagesReturnsOnCall(i int, result1 error) {
	fake.listAttachedGroupPoliciesPagesMutex.Lock()
	defer fake.listAttachedGroupPoliciesPagesMutex.Unlock()
	fake.ListAttachedGroupPoliciesPagesStub = nil
	if fake.listAttachedGroupPoliciesPagesReturnsOnCall == nil {
		fake.listAttachedGroupPoliciesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAttachedGroupPoliciesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesPagesWithContext(arg1 context.Context, arg2 *iam.ListAttachedGroupPoliciesInput, arg3 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listAttachedGroupPoliciesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listAttachedGroupPoliciesPagesWithContextReturnsOnCall[len(fake.listAttachedGroupPoliciesPagesWithContextArgsForCall)]
	fake.listAttachedGroupPoliciesPagesWithContextArgsForCall = append(fake.listAttachedGroupPoliciesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListAttachedGroupPoliciesInput
		arg3 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListAttachedGroupPoliciesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listAttachedGroupPoliciesPagesWithContextMutex.Unlock()
	if fake.ListAttachedGroupPoliciesPagesWithContextStub != nil {
		return fake.ListAttachedGroupPoliciesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listAttachedGroupPoliciesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesPagesWithContextCallCount() int {
	fake.listAttachedGroupPoliciesPagesWithContextMutex.RLock()
	defer fake.listAttachedGroupPoliciesPagesWithContextMutex.RUnlock()
	return len(fake.listAttachedGroupPoliciesPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesPagesWithContextCalls(stub func(context.Context, *iam.ListAttachedGroupPoliciesInput, func(*iam.ListAttachedGroupPoliciesOutput, bool) bool, ...request.Option) error) {
	fake.listAttachedGroupPoliciesPagesWithContextMutex.Lock()
	defer fake.listAttachedGroupPoliciesPagesWithContextMutex.Unlock()
	fake.ListAttachedGroupPoliciesPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesPagesWithContextArgsForCall(i int) (context.Context, *iam.ListAttachedGroupPoliciesInput, func(*iam.ListAttachedGroupPoliciesOutput, bool) bool, []request.Option) {
	fake.listAttachedGroupPoliciesPagesWithContextMutex.RLock()
	defer fake.listAttachedGroupPoliciesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listAttachedGroupPoliciesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesPagesWithContextReturns(result1 error) {
	fake.listAttachedGroupPoliciesPagesWithContextMutex.Lock()
	defer fake.listAttachedGroupPoliciesPagesWithContextMutex.Unlock()
	fake.ListAttachedGroupPoliciesPagesWithContextStub = nil
	fake.listAttachedGroupPoliciesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listAttachedGroupPoliciesPagesWithContextMutex.Lock()
	defer fake.listAttachedGroupPoliciesPagesWithContextMutex.Unlock()
	fake.ListAttachedGroupPoliciesPagesWithContextStub = nil
	if fake.listAttachedGroupPoliciesPagesWithContextReturnsOnCall == nil {
		fake.listAttachedGroupPoliciesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAttachedGroupPoliciesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesRequest(arg1 *iam.ListAttachedGroupPoliciesInput) (*request.Request, *iam.ListAttachedGroupPoliciesOutput) {
	fake.listAttachedGroupPoliciesRequestMutex.Lock()
	ret, specificReturn := fake.listAttachedGroupPoliciesRequestReturnsOnCall[len(fake.listAttachedGroupPoliciesRequestArgsForCall)]
	fake.listAttachedGroupPoliciesRequestArgsForCall = append(fake.listAttachedGroupPoliciesRequestArgsForCall, struct {
		arg1 *iam.ListAttachedGroupPoliciesInput
	}{arg1})
	fake.recordInvocation("ListAttachedGroupPoliciesRequest", []interface{}{arg1})
	fake.listAttachedGroupPoliciesRequestMutex.Unlock()
	if fake.ListAttachedGroupPoliciesRequestStub != nil {
		return fake.ListAttachedGroupPoliciesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAttachedGroupPoliciesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesRequestCallCount() int {
	fake.listAttachedGroupPoliciesRequestMutex.RLock()
	defer fake.listAttachedGroupPoliciesRequestMutex.RUnlock()
	return len(fake.listAttachedGroupPoliciesRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesRequestCalls(stub func(*iam.ListAttachedGroupPoliciesInput) (*request.Request, *iam.ListAttachedGroupPoliciesOutput)) {
	fake.listAttachedGroupPoliciesRequestMutex.Lock()
	defer fake.listAttachedGroupPoliciesRequestMutex.Unlock()
	fake.ListAttachedGroupPoliciesRequestStub = stub
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesRequestArgsForCall(i int) *iam.ListAttachedGroupPoliciesInput {
	fake.listAttachedGroupPoliciesRequestMutex.RLock()
	defer fake.listAttachedGroupPoliciesRequestMutex.RUnlock()
	argsForCall := fake.listAttachedGroupPoliciesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesRequestReturns(result1 *request.Request, result2 *iam.ListAttachedGroupPoliciesOutput) {
	fake.listAttachedGroupPoliciesRequestMutex.Lock()
	defer fake.listAttachedGroupPoliciesRequestMutex.Unlock()
	fake.ListAttachedGroupPoliciesRequestStub = nil
	fake.listAttachedGroupPoliciesRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListAttachedGroupPoliciesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListAttachedGroupPoliciesOutput) {
	fake.listAttachedGroupPoliciesRequestMutex.Lock()
	defer fake.listAttachedGroupPoliciesRequestMutex.Unlock()
	fake.ListAttachedGroupPoliciesRequestStub = nil
	if fake.listAttachedGroupPoliciesRequestReturnsOnCall == nil {
		fake.listAttachedGroupPoliciesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListAttachedGroupPoliciesOutput
		})
	}
	fake.listAttachedGroupPoliciesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListAttachedGroupPoliciesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesWithContext(arg1 context.Context, arg2 *iam.ListAttachedGroupPoliciesInput, arg3 ...request.Option) (*iam.ListAttachedGroupPoliciesOutput, error) {
	fake.listAttachedGroupPoliciesWithContextMutex.Lock()
	ret, specificReturn := fake.listAttachedGroupPoliciesWithContextReturnsOnCall[len(fake.listAttachedGroupPoliciesWithContextArgsForCall)]
	fake.listAttachedGroupPoliciesWithContextArgsForCall = append(fake.listAttachedGroupPoliciesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListAttachedGroupPoliciesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListAttachedGroupPoliciesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listAttachedGroupPoliciesWithContextMutex.Unlock()
	if fake.ListAttachedGroupPoliciesWithContextStub != nil {
		return fake.ListAttachedGroupPoliciesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAttachedGroupPoliciesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesWithContextCallCount() int {
	fake.listAttachedGroupPoliciesWithContextMutex.RLock()
	defer fake.listAttachedGroupPoliciesWithContextMutex.RUnlock()
	return len(fake.listAttachedGroupPoliciesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesWithContextCalls(stub func(context.Context, *iam.ListAttachedGroupPoliciesInput, ...request.Option) (*iam.ListAttachedGroupPoliciesOutput, error)) {
	fake.listAttachedGroupPoliciesWithContextMutex.Lock()
	defer fake.listAttachedGroupPoliciesWithContextMutex.Unlock()
	fake.ListAttachedGroupPoliciesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesWithContextArgsForCall(i int) (context.Context, *iam.ListAttachedGroupPoliciesInput, []request.Option) {
	fake.listAttachedGroupPoliciesWithContextMutex.RLock()
	defer fake.listAttachedGroupPoliciesWithContextMutex.RUnlock()
	argsForCall := fake.listAttachedGroupPoliciesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesWithContextReturns(result1 *iam.ListAttachedGroupPoliciesOutput, result2 error) {
	fake.listAttachedGroupPoliciesWithContextMutex.Lock()
	defer fake.listAttachedGroupPoliciesWithContextMutex.Unlock()
	fake.ListAttachedGroupPoliciesWithContextStub = nil
	fake.listAttachedGroupPoliciesWithContextReturns = struct {
		result1 *iam.ListAttachedGroupPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedGroupPoliciesWithContextReturnsOnCall(i int, result1 *iam.ListAttachedGroupPoliciesOutput, result2 error) {
	fake.listAttachedGroupPoliciesWithContextMutex.Lock()
	defer fake.listAttachedGroupPoliciesWithContextMutex.Unlock()
	fake.ListAttachedGroupPoliciesWithContextStub = nil
	if fake.listAttachedGroupPoliciesWithContextReturnsOnCall == nil {
		fake.listAttachedGroupPoliciesWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListAttachedGroupPoliciesOutput
			result2 error
		})
	}
	fake.listAttachedGroupPoliciesWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListAttachedGroupPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedRolePolicies(arg1 *iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error) {
	fake.listAttachedRolePoliciesMutex.Lock()
	ret, specificReturn := fake.listAttachedRolePoliciesReturnsOnCall[len(fake.listAttachedRolePoliciesArgsForCall)]
	fake.listAttachedRolePoliciesArgsForCall = append(fake.listAttachedRolePoliciesArgsForCall, struct {
		arg1 *iam.ListAttachedRolePoliciesInput
	}{arg1})
	fake.recordInvocation("ListAttachedRolePolicies", []interface{}{arg1})
	fake.listAttachedRolePoliciesMutex.Unlock()
	if fake.ListAttachedRolePoliciesStub != nil {
		return fake.ListAttachedRolePoliciesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAttachedRolePoliciesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesCallCount() int {
	fake.listAttachedRolePoliciesMutex.RLock()
	defer fake.listAttachedRolePoliciesMutex.RUnlock()
	return len(fake.listAttachedRolePoliciesArgsForCall)
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesCalls(stub func(*iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error)) {
	fake.listAttachedRolePoliciesMutex.Lock()
	defer fake.listAttachedRolePoliciesMutex.Unlock()
	fake.ListAttachedRolePoliciesStub = stub
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesArgsForCall(i int) *iam.ListAttachedRolePoliciesInput {
	fake.listAttachedRolePoliciesMutex.RLock()
	defer fake.listAttachedRolePoliciesMutex.RUnlock()
	argsForCall := fake.listAttachedRolePoliciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesReturns(result1 *iam.ListAttachedRolePoliciesOutput, result2 error) {
	fake.listAttachedRolePoliciesMutex.Lock()
	defer fake.listAttachedRolePoliciesMutex.Unlock()
	fake.ListAttachedRolePoliciesStub = nil
	fake.listAttachedRolePoliciesReturns = struct {
		result1 *iam.ListAttachedRolePoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesReturnsOnCall(i int, result1 *iam.ListAttachedRolePoliciesOutput, result2 error) {
	fake.listAttachedRolePoliciesMutex.Lock()
	defer fake.listAttachedRolePoliciesMutex.Unlock()
	fake.ListAttachedRolePoliciesStub = nil
	if fake.listAttachedRolePoliciesReturnsOnCall == nil {
		fake.listAttachedRolePoliciesReturnsOnCall = make(map[int]struct {
			result1 *iam.ListAttachedRolePoliciesOutput
			result2 error
		})
	}
	fake.listAttachedRolePoliciesReturnsOnCall[i] = struct {
		result1 *iam.ListAttachedRolePoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesPages(arg1 *iam.ListAttachedRolePoliciesInput, arg2 func(*iam.ListAttachedRolePoliciesOutput, bool) bool) error {
	fake.listAttachedRolePoliciesPagesMutex.Lock()
	ret, specificReturn := fake.listAttachedRolePoliciesPagesReturnsOnCall[len(fake.listAttachedRolePoliciesPagesArgsForCall)]
	fake.listAttachedRolePoliciesPagesArgsForCall = append(fake.listAttachedRolePoliciesPagesArgsForCall, struct {
		arg1 *iam.ListAttachedRolePoliciesInput
		arg2 func(*iam.ListAttachedRolePoliciesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListAttachedRolePoliciesPages", []interface{}{arg1, arg2})
	fake.listAttachedRolePoliciesPagesMutex.Unlock()
	if fake.ListAttachedRolePoliciesPagesStub != nil {
		return fake.ListAttachedRolePoliciesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listAttachedRolePoliciesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesPagesCallCount() int {
	fake.listAttachedRolePoliciesPagesMutex.RLock()
	defer fake.listAttachedRolePoliciesPagesMutex.RUnlock()
	return len(fake.listAttachedRolePoliciesPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesPagesCalls(stub func(*iam.ListAttachedRolePoliciesInput, func(*iam.ListAttachedRolePoliciesOutput, bool) bool) error) {
	fake.listAttachedRolePoliciesPagesMutex.Lock()
	defer fake.listAttachedRolePoliciesPagesMutex.Unlock()
	fake.ListAttachedRolePoliciesPagesStub = stub
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesPagesArgsForCall(i int) (*iam.ListAttachedRolePoliciesInput, func(*iam.ListAttachedRolePoliciesOutput, bool) bool) {
	fake.listAttachedRolePoliciesPagesMutex.RLock()
	defer fake.listAttachedRolePoliciesPagesMutex.RUnlock()
	argsForCall := fake.listAttachedRolePoliciesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesPagesReturns(result1 error) {
	fake.listAttachedRolePoliciesPagesMutex.Lock()
	defer fake.listAttachedRolePoliciesPagesMutex.Unlock()
	fake.ListAttachedRolePoliciesPagesStub = nil
	fake.listAttachedRolePoliciesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesPagesReturnsOnCall(i int, result1 error) {
	fake.listAttachedRolePoliciesPagesMutex.Lock()
	defer fake.listAttachedRolePoliciesPagesMutex.Unlock()
	fake.ListAttachedRolePoliciesPagesStub = nil
	if fake.listAttachedRolePoliciesPagesReturnsOnCall == nil {
		fake.listAttachedRolePoliciesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAttachedRolePoliciesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesPagesWithContext(arg1 context.Context, arg2 *iam.ListAttachedRolePoliciesInput, arg3 func(*iam.ListAttachedRolePoliciesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listAttachedRolePoliciesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listAttachedRolePoliciesPagesWithContextReturnsOnCall[len(fake.listAttachedRolePoliciesPagesWithContextArgsForCall)]
	fake.listAttachedRolePoliciesPagesWithContextArgsForCall = append(fake.listAttachedRolePoliciesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListAttachedRolePoliciesInput
		arg3 func(*iam.ListAttachedRolePoliciesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListAttachedRolePoliciesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listAttachedRolePoliciesPagesWithContextMutex.Unlock()
	if fake.ListAttachedRolePoliciesPagesWithContextStub != nil {
		return fake.ListAttachedRolePoliciesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listAttachedRolePoliciesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesPagesWithContextCallCount() int {
	fake.listAttachedRolePoliciesPagesWithContextMutex.RLock()
	defer fake.listAttachedRolePoliciesPagesWithContextMutex.RUnlock()
	return len(fake.listAttachedRolePoliciesPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesPagesWithContextCalls(stub func(context.Context, *iam.ListAttachedRolePoliciesInput, func(*iam.ListAttachedRolePoliciesOutput, bool) bool, ...request.Option) error) {
	fake.listAttachedRolePoliciesPagesWithContextMutex.Lock()
	defer fake.listAttachedRolePoliciesPagesWithContextMutex.Unlock()
	fake.ListAttachedRolePoliciesPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesPagesWithContextArgsForCall(i int) (context.Context, *iam.ListAttachedRolePoliciesInput, func(*iam.ListAttachedRolePoliciesOutput, bool) bool, []request.Option) {
	fake.listAttachedRolePoliciesPagesWithContextMutex.RLock()
	defer fake.listAttachedRolePoliciesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listAttachedRolePoliciesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesPagesWithContextReturns(result1 error) {
	fake.listAttachedRolePoliciesPagesWithContextMutex.Lock()
	defer fake.listAttachedRolePoliciesPagesWithContextMutex.Unlock()
	fake.ListAttachedRolePoliciesPagesWithContextStub = nil
	fake.listAttachedRolePoliciesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listAttachedRolePoliciesPagesWithContextMutex.Lock()
	defer fake.listAttachedRolePoliciesPagesWithContextMutex.Unlock()
	fake.ListAttachedRolePoliciesPagesWithContextStub = nil
	if fake.listAttachedRolePoliciesPagesWithContextReturnsOnCall == nil {
		fake.listAttachedRolePoliciesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAttachedRolePoliciesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesRequest(arg1 *iam.ListAttachedRolePoliciesInput) (*request.Request, *iam.ListAttachedRolePoliciesOutput) {
	fake.listAttachedRolePoliciesRequestMutex.Lock()
	ret, specificReturn := fake.listAttachedRolePoliciesRequestReturnsOnCall[len(fake.listAttachedRolePoliciesRequestArgsForCall)]
	fake.listAttachedRolePoliciesRequestArgsForCall = append(fake.listAttachedRolePoliciesRequestArgsForCall, struct {
		arg1 *iam.ListAttachedRolePoliciesInput
	}{arg1})
	fake.recordInvocation("ListAttachedRolePoliciesRequest", []interface{}{arg1})
	fake.listAttachedRolePoliciesRequestMutex.Unlock()
	if fake.ListAttachedRolePoliciesRequestStub != nil {
		return fake.ListAttachedRolePoliciesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAttachedRolePoliciesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesRequestCallCount() int {
	fake.listAttachedRolePoliciesRequestMutex.RLock()
	defer fake.listAttachedRolePoliciesRequestMutex.RUnlock()
	return len(fake.listAttachedRolePoliciesRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesRequestCalls(stub func(*iam.ListAttachedRolePoliciesInput) (*request.Request, *iam.ListAttachedRolePoliciesOutput)) {
	fake.listAttachedRolePoliciesRequestMutex.Lock()
	defer fake.listAttachedRolePoliciesRequestMutex.Unlock()
	fake.ListAttachedRolePoliciesRequestStub = stub
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesRequestArgsForCall(i int) *iam.ListAttachedRolePoliciesInput {
	fake.listAttachedRolePoliciesRequestMutex.RLock()
	defer fake.listAttachedRolePoliciesRequestMutex.RUnlock()
	argsForCall := fake.listAttachedRolePoliciesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesRequestReturns(result1 *request.Request, result2 *iam.ListAttachedRolePoliciesOutput) {
	fake.listAttachedRolePoliciesRequestMutex.Lock()
	defer fake.listAttachedRolePoliciesRequestMutex.Unlock()
	fake.ListAttachedRolePoliciesRequestStub = nil
	fake.listAttachedRolePoliciesRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListAttachedRolePoliciesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListAttachedRolePoliciesOutput) {
	fake.listAttachedRolePoliciesRequestMutex.Lock()
	defer fake.listAttachedRolePoliciesRequestMutex.Unlock()
	fake.ListAttachedRolePoliciesRequestStub = nil
	if fake.listAttachedRolePoliciesRequestReturnsOnCall == nil {
		fake.listAttachedRolePoliciesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListAttachedRolePoliciesOutput
		})
	}
	fake.listAttachedRolePoliciesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListAttachedRolePoliciesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesWithContext(arg1 context.Context, arg2 *iam.ListAttachedRolePoliciesInput, arg3 ...request.Option) (*iam.ListAttachedRolePoliciesOutput, error) {
	fake.listAttachedRolePoliciesWithContextMutex.Lock()
	ret, specificReturn := fake.listAttachedRolePoliciesWithContextReturnsOnCall[len(fake.listAttachedRolePoliciesWithContextArgsForCall)]
	fake.listAttachedRolePoliciesWithContextArgsForCall = append(fake.listAttachedRolePoliciesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListAttachedRolePoliciesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListAttachedRolePoliciesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listAttachedRolePoliciesWithContextMutex.Unlock()
	if fake.ListAttachedRolePoliciesWithContextStub != nil {
		return fake.ListAttachedRolePoliciesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAttachedRolePoliciesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesWithContextCallCount() int {
	fake.listAttachedRolePoliciesWithContextMutex.RLock()
	defer fake.listAttachedRolePoliciesWithContextMutex.RUnlock()
	return len(fake.listAttachedRolePoliciesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesWithContextCalls(stub func(context.Context, *iam.ListAttachedRolePoliciesInput, ...request.Option) (*iam.ListAttachedRolePoliciesOutput, error)) {
	fake.listAttachedRolePoliciesWithContextMutex.Lock()
	defer fake.listAttachedRolePoliciesWithContextMutex.Unlock()
	fake.ListAttachedRolePoliciesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesWithContextArgsForCall(i int) (context.Context, *iam.ListAttachedRolePoliciesInput, []request.Option) {
	fake.listAttachedRolePoliciesWithContextMutex.RLock()
	defer fake.listAttachedRolePoliciesWithContextMutex.RUnlock()
	argsForCall := fake.listAttachedRolePoliciesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesWithContextReturns(result1 *iam.ListAttachedRolePoliciesOutput, result2 error) {
	fake.listAttachedRolePoliciesWithContextMutex.Lock()
	defer fake.listAttachedRolePoliciesWithContextMutex.Unlock()
	fake.ListAttachedRolePoliciesWithContextStub = nil
	fake.listAttachedRolePoliciesWithContextReturns = struct {
		result1 *iam.ListAttachedRolePoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedRolePoliciesWithContextReturnsOnCall(i int, result1 *iam.ListAttachedRolePoliciesOutput, result2 error) {
	fake.listAttachedRolePoliciesWithContextMutex.Lock()
	defer fake.listAttachedRolePoliciesWithContextMutex.Unlock()
	fake.ListAttachedRolePoliciesWithContextStub = nil
	if fake.listAttachedRolePoliciesWithContextReturnsOnCall == nil {
		fake.listAttachedRolePoliciesWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListAttachedRolePoliciesOutput
			result2 error
		})
	}
	fake.listAttachedRolePoliciesWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListAttachedRolePoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedUserPolicies(arg1 *iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error) {
	fake.listAttachedUserPoliciesMutex.Lock()
	ret, specificReturn := fake.listAttachedUserPoliciesReturnsOnCall[len(fake.listAttachedUserPoliciesArgsForCall)]
	fake.listAttachedUserPoliciesArgsForCall = append(fake.listAttachedUserPoliciesArgsForCall, struct {
		arg1 *iam.ListAttachedUserPoliciesInput
	}{arg1})
	fake.recordInvocation("ListAttachedUserPolicies", []interface{}{arg1})
	fake.listAttachedUserPoliciesMutex.Unlock()
	if fake.ListAttachedUserPoliciesStub != nil {
		return fake.ListAttachedUserPoliciesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAttachedUserPoliciesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesCallCount() int {
	fake.listAttachedUserPoliciesMutex.RLock()
	defer fake.listAttachedUserPoliciesMutex.RUnlock()
	return len(fake.listAttachedUserPoliciesArgsForCall)
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesCalls(stub func(*iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error)) {
	fake.listAttachedUserPoliciesMutex.Lock()
	defer fake.listAttachedUserPoliciesMutex.Unlock()
	fake.ListAttachedUserPoliciesStub = stub
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesArgsForCall(i int) *iam.ListAttachedUserPoliciesInput {
	fake.listAttachedUserPoliciesMutex.RLock()
	defer fake.listAttachedUserPoliciesMutex.RUnlock()
	argsForCall := fake.listAttachedUserPoliciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesReturns(result1 *iam.ListAttachedUserPoliciesOutput, result2 error) {
	fake.listAttachedUserPoliciesMutex.Lock()
	defer fake.listAttachedUserPoliciesMutex.Unlock()
	fake.ListAttachedUserPoliciesStub = nil
	fake.listAttachedUserPoliciesReturns = struct {
		result1 *iam.ListAttachedUserPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesReturnsOnCall(i int, result1 *iam.ListAttachedUserPoliciesOutput, result2 error) {
	fake.listAttachedUserPoliciesMutex.Lock()
	defer fake.listAttachedUserPoliciesMutex.Unlock()
	fake.ListAttachedUserPoliciesStub = nil
	if fake.listAttachedUserPoliciesReturnsOnCall == nil {
		fake.listAttachedUserPoliciesReturnsOnCall = make(map[int]struct {
			result1 *iam.ListAttachedUserPoliciesOutput
			result2 error
		})
	}
	fake.listAttachedUserPoliciesReturnsOnCall[i] = struct {
		result1 *iam.ListAttachedUserPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesPages(arg1 *iam.ListAttachedUserPoliciesInput, arg2 func(*iam.ListAttachedUserPoliciesOutput, bool) bool) error {
	fake.listAttachedUserPoliciesPagesMutex.Lock()
	ret, specificReturn := fake.listAttachedUserPoliciesPagesReturnsOnCall[len(fake.listAttachedUserPoliciesPagesArgsForCall)]
	fake.listAttachedUserPoliciesPagesArgsForCall = append(fake.listAttachedUserPoliciesPagesArgsForCall, struct {
		arg1 *iam.ListAttachedUserPoliciesInput
		arg2 func(*iam.ListAttachedUserPoliciesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListAttachedUserPoliciesPages", []interface{}{arg1, arg2})
	fake.listAttachedUserPoliciesPagesMutex.Unlock()
	if fake.ListAttachedUserPoliciesPagesStub != nil {
		return fake.ListAttachedUserPoliciesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listAttachedUserPoliciesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesPagesCallCount() int {
	fake.listAttachedUserPoliciesPagesMutex.RLock()
	defer fake.listAttachedUserPoliciesPagesMutex.RUnlock()
	return len(fake.listAttachedUserPoliciesPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesPagesCalls(stub func(*iam.ListAttachedUserPoliciesInput, func(*iam.ListAttachedUserPoliciesOutput, bool) bool) error) {
	fake.listAttachedUserPoliciesPagesMutex.Lock()
	defer fake.listAttachedUserPoliciesPagesMutex.Unlock()
	fake.ListAttachedUserPoliciesPagesStub = stub
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesPagesArgsForCall(i int) (*iam.ListAttachedUserPoliciesInput, func(*iam.ListAttachedUserPoliciesOutput, bool) bool) {
	fake.listAttachedUserPoliciesPagesMutex.RLock()
	defer fake.listAttachedUserPoliciesPagesMutex.RUnlock()
	argsForCall := fake.listAttachedUserPoliciesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesPagesReturns(result1 error) {
	fake.listAttachedUserPoliciesPagesMutex.Lock()
	defer fake.listAttachedUserPoliciesPagesMutex.Unlock()
	fake.ListAttachedUserPoliciesPagesStub = nil
	fake.listAttachedUserPoliciesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesPagesReturnsOnCall(i int, result1 error) {
	fake.listAttachedUserPoliciesPagesMutex.Lock()
	defer fake.listAttachedUserPoliciesPagesMutex.Unlock()
	fake.ListAttachedUserPoliciesPagesStub = nil
	if fake.listAttachedUserPoliciesPagesReturnsOnCall == nil {
		fake.listAttachedUserPoliciesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAttachedUserPoliciesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesPagesWithContext(arg1 context.Context, arg2 *iam.ListAttachedUserPoliciesInput, arg3 func(*iam.ListAttachedUserPoliciesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listAttachedUserPoliciesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listAttachedUserPoliciesPagesWithContextReturnsOnCall[len(fake.listAttachedUserPoliciesPagesWithContextArgsForCall)]
	fake.listAttachedUserPoliciesPagesWithContextArgsForCall = append(fake.listAttachedUserPoliciesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListAttachedUserPoliciesInput
		arg3 func(*iam.ListAttachedUserPoliciesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListAttachedUserPoliciesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listAttachedUserPoliciesPagesWithContextMutex.Unlock()
	if fake.ListAttachedUserPoliciesPagesWithContextStub != nil {
		return fake.ListAttachedUserPoliciesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listAttachedUserPoliciesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesPagesWithContextCallCount() int {
	fake.listAttachedUserPoliciesPagesWithContextMutex.RLock()
	defer fake.listAttachedUserPoliciesPagesWithContextMutex.RUnlock()
	return len(fake.listAttachedUserPoliciesPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesPagesWithContextCalls(stub func(context.Context, *iam.ListAttachedUserPoliciesInput, func(*iam.ListAttachedUserPoliciesOutput, bool) bool, ...request.Option) error) {
	fake.listAttachedUserPoliciesPagesWithContextMutex.Lock()
	defer fake.listAttachedUserPoliciesPagesWithContextMutex.Unlock()
	fake.ListAttachedUserPoliciesPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesPagesWithContextArgsForCall(i int) (context.Context, *iam.ListAttachedUserPoliciesInput, func(*iam.ListAttachedUserPoliciesOutput, bool) bool, []request.Option) {
	fake.listAttachedUserPoliciesPagesWithContextMutex.RLock()
	defer fake.listAttachedUserPoliciesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listAttachedUserPoliciesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesPagesWithContextReturns(result1 error) {
	fake.listAttachedUserPoliciesPagesWithContextMutex.Lock()
	defer fake.listAttachedUserPoliciesPagesWithContextMutex.Unlock()
	fake.ListAttachedUserPoliciesPagesWithContextStub = nil
	fake.listAttachedUserPoliciesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listAttachedUserPoliciesPagesWithContextMutex.Lock()
	defer fake.listAttachedUserPoliciesPagesWithContextMutex.Unlock()
	fake.ListAttachedUserPoliciesPagesWithContextStub = nil
	if fake.listAttachedUserPoliciesPagesWithContextReturnsOnCall == nil {
		fake.listAttachedUserPoliciesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAttachedUserPoliciesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesRequest(arg1 *iam.ListAttachedUserPoliciesInput) (*request.Request, *iam.ListAttachedUserPoliciesOutput) {
	fake.listAttachedUserPoliciesRequestMutex.Lock()
	ret, specificReturn := fake.listAttachedUserPoliciesRequestReturnsOnCall[len(fake.listAttachedUserPoliciesRequestArgsForCall)]
	fake.listAttachedUserPoliciesRequestArgsForCall = append(fake.listAttachedUserPoliciesRequestArgsForCall, struct {
		arg1 *iam.ListAttachedUserPoliciesInput
	}{arg1})
	fake.recordInvocation("ListAttachedUserPoliciesRequest", []interface{}{arg1})
	fake.listAttachedUserPoliciesRequestMutex.Unlock()
	if fake.ListAttachedUserPoliciesRequestStub != nil {
		return fake.ListAttachedUserPoliciesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAttachedUserPoliciesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesRequestCallCount() int {
	fake.listAttachedUserPoliciesRequestMutex.RLock()
	defer fake.listAttachedUserPoliciesRequestMutex.RUnlock()
	return len(fake.listAttachedUserPoliciesRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesRequestCalls(stub func(*iam.ListAttachedUserPoliciesInput) (*request.Request, *iam.ListAttachedUserPoliciesOutput)) {
	fake.listAttachedUserPoliciesRequestMutex.Lock()
	defer fake.listAttachedUserPoliciesRequestMutex.Unlock()
	fake.ListAttachedUserPoliciesRequestStub = stub
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesRequestArgsForCall(i int) *iam.ListAttachedUserPoliciesInput {
	fake.listAttachedUserPoliciesRequestMutex.RLock()
	defer fake.listAttachedUserPoliciesRequestMutex.RUnlock()
	argsForCall := fake.listAttachedUserPoliciesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesRequestReturns(result1 *request.Request, result2 *iam.ListAttachedUserPoliciesOutput) {
	fake.listAttachedUserPoliciesRequestMutex.Lock()
	defer fake.listAttachedUserPoliciesRequestMutex.Unlock()
	fake.ListAttachedUserPoliciesRequestStub = nil
	fake.listAttachedUserPoliciesRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListAttachedUserPoliciesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListAttachedUserPoliciesOutput) {
	fake.listAttachedUserPoliciesRequestMutex.Lock()
	defer fake.listAttachedUserPoliciesRequestMutex.Unlock()
	fake.ListAttachedUserPoliciesRequestStub = nil
	if fake.listAttachedUserPoliciesRequestReturnsOnCall == nil {
		fake.listAttachedUserPoliciesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListAttachedUserPoliciesOutput
		})
	}
	fake.listAttachedUserPoliciesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListAttachedUserPoliciesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesWithContext(arg1 context.Context, arg2 *iam.ListAttachedUserPoliciesInput, arg3 ...request.Option) (*iam.ListAttachedUserPoliciesOutput, error) {
	fake.listAttachedUserPoliciesWithContextMutex.Lock()
	ret, specificReturn := fake.listAttachedUserPoliciesWithContextReturnsOnCall[len(fake.listAttachedUserPoliciesWithContextArgsForCall)]
	fake.listAttachedUserPoliciesWithContextArgsForCall = append(fake.listAttachedUserPoliciesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListAttachedUserPoliciesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListAttachedUserPoliciesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listAttachedUserPoliciesWithContextMutex.Unlock()
	if fake.ListAttachedUserPoliciesWithContextStub != nil {
		return fake.ListAttachedUserPoliciesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAttachedUserPoliciesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesWithContextCallCount() int {
	fake.listAttachedUserPoliciesWithContextMutex.RLock()
	defer fake.listAttachedUserPoliciesWithContextMutex.RUnlock()
	return len(fake.listAttachedUserPoliciesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesWithContextCalls(stub func(context.Context, *iam.ListAttachedUserPoliciesInput, ...request.Option) (*iam.ListAttachedUserPoliciesOutput, error)) {
	fake.listAttachedUserPoliciesWithContextMutex.Lock()
	defer fake.listAttachedUserPoliciesWithContextMutex.Unlock()
	fake.ListAttachedUserPoliciesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesWithContextArgsForCall(i int) (context.Context, *iam.ListAttachedUserPoliciesInput, []request.Option) {
	fake.listAttachedUserPoliciesWithContextMutex.RLock()
	defer fake.listAttachedUserPoliciesWithContextMutex.RUnlock()
	argsForCall := fake.listAttachedUserPoliciesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesWithContextReturns(result1 *iam.ListAttachedUserPoliciesOutput, result2 error) {
	fake.listAttachedUserPoliciesWithContextMutex.Lock()
	defer fake.listAttachedUserPoliciesWithContextMutex.Unlock()
	fake.ListAttachedUserPoliciesWithContextStub = nil
	fake.listAttachedUserPoliciesWithContextReturns = struct {
		result1 *iam.ListAttachedUserPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListAttachedUserPoliciesWithContextReturnsOnCall(i int, result1 *iam.ListAttachedUserPoliciesOutput, result2 error) {
	fake.listAttachedUserPoliciesWithContextMutex.Lock()
	defer fake.listAttachedUserPoliciesWithContextMutex.Unlock()
	fake.ListAttachedUserPoliciesWithContextStub = nil
	if fake.listAttachedUserPoliciesWithContextReturnsOnCall == nil {
		fake.listAttachedUserPoliciesWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListAttachedUserPoliciesOutput
			result2 error
		})
	}
	fake.listAttachedUserPoliciesWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListAttachedUserPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListEntitiesForPolicy(arg1 *iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error) {
	fake.listEntitiesForPolicyMutex.Lock()
	ret, specificReturn := fake.listEntitiesForPolicyReturnsOnCall[len(fake.listEntitiesForPolicyArgsForCall)]
	fake.listEntitiesForPolicyArgsForCall = append(fake.listEntitiesForPolicyArgsForCall, struct {
		arg1 *iam.ListEntitiesForPolicyInput
	}{arg1})
	fake.recordInvocation("ListEntitiesForPolicy", []interface{}{arg1})
	fake.listEntitiesForPolicyMutex.Unlock()
	if fake.ListEntitiesForPolicyStub != nil {
		return fake.ListEntitiesForPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listEntitiesForPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyCallCount() int {
	fake.listEntitiesForPolicyMutex.RLock()
	defer fake.listEntitiesForPolicyMutex.RUnlock()
	return len(fake.listEntitiesForPolicyArgsForCall)
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyCalls(stub func(*iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error)) {
	fake.listEntitiesForPolicyMutex.Lock()
	defer fake.listEntitiesForPolicyMutex.Unlock()
	fake.ListEntitiesForPolicyStub = stub
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyArgsForCall(i int) *iam.ListEntitiesForPolicyInput {
	fake.listEntitiesForPolicyMutex.RLock()
	defer fake.listEntitiesForPolicyMutex.RUnlock()
	argsForCall := fake.listEntitiesForPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyReturns(result1 *iam.ListEntitiesForPolicyOutput, result2 error) {
	fake.listEntitiesForPolicyMutex.Lock()
	defer fake.listEntitiesForPolicyMutex.Unlock()
	fake.ListEntitiesForPolicyStub = nil
	fake.listEntitiesForPolicyReturns = struct {
		result1 *iam.ListEntitiesForPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyReturnsOnCall(i int, result1 *iam.ListEntitiesForPolicyOutput, result2 error) {
	fake.listEntitiesForPolicyMutex.Lock()
	defer fake.listEntitiesForPolicyMutex.Unlock()
	fake.ListEntitiesForPolicyStub = nil
	if fake.listEntitiesForPolicyReturnsOnCall == nil {
		fake.listEntitiesForPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.ListEntitiesForPolicyOutput
			result2 error
		})
	}
	fake.listEntitiesForPolicyReturnsOnCall[i] = struct {
		result1 *iam.ListEntitiesForPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyPages(arg1 *iam.ListEntitiesForPolicyInput, arg2 func(*iam.ListEntitiesForPolicyOutput, bool) bool) error {
	fake.listEntitiesForPolicyPagesMutex.Lock()
	ret, specificReturn := fake.listEntitiesForPolicyPagesReturnsOnCall[len(fake.listEntitiesForPolicyPagesArgsForCall)]
	fake.listEntitiesForPolicyPagesArgsForCall = append(fake.listEntitiesForPolicyPagesArgsForCall, struct {
		arg1 *iam.ListEntitiesForPolicyInput
		arg2 func(*iam.ListEntitiesForPolicyOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListEntitiesForPolicyPages", []interface{}{arg1, arg2})
	fake.listEntitiesForPolicyPagesMutex.Unlock()
	if fake.ListEntitiesForPolicyPagesStub != nil {
		return fake.ListEntitiesForPolicyPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listEntitiesForPolicyPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyPagesCallCount() int {
	fake.listEntitiesForPolicyPagesMutex.RLock()
	defer fake.listEntitiesForPolicyPagesMutex.RUnlock()
	return len(fake.listEntitiesForPolicyPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyPagesCalls(stub func(*iam.ListEntitiesForPolicyInput, func(*iam.ListEntitiesForPolicyOutput, bool) bool) error) {
	fake.listEntitiesForPolicyPagesMutex.Lock()
	defer fake.listEntitiesForPolicyPagesMutex.Unlock()
	fake.ListEntitiesForPolicyPagesStub = stub
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyPagesArgsForCall(i int) (*iam.ListEntitiesForPolicyInput, func(*iam.ListEntitiesForPolicyOutput, bool) bool) {
	fake.listEntitiesForPolicyPagesMutex.RLock()
	defer fake.listEntitiesForPolicyPagesMutex.RUnlock()
	argsForCall := fake.listEntitiesForPolicyPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyPagesReturns(result1 error) {
	fake.listEntitiesForPolicyPagesMutex.Lock()
	defer fake.listEntitiesForPolicyPagesMutex.Unlock()
	fake.ListEntitiesForPolicyPagesStub = nil
	fake.listEntitiesForPolicyPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyPagesReturnsOnCall(i int, result1 error) {
	fake.listEntitiesForPolicyPagesMutex.Lock()
	defer fake.listEntitiesForPolicyPagesMutex.Unlock()
	fake.ListEntitiesForPolicyPagesStub = nil
	if fake.listEntitiesForPolicyPagesReturnsOnCall == nil {
		fake.listEntitiesForPolicyPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listEntitiesForPolicyPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyPagesWithContext(arg1 context.Context, arg2 *iam.ListEntitiesForPolicyInput, arg3 func(*iam.ListEntitiesForPolicyOutput, bool) bool, arg4 ...request.Option) error {
	fake.listEntitiesForPolicyPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listEntitiesForPolicyPagesWithContextReturnsOnCall[len(fake.listEntitiesForPolicyPagesWithContextArgsForCall)]
	fake.listEntitiesForPolicyPagesWithContextArgsForCall = append(fake.listEntitiesForPolicyPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListEntitiesForPolicyInput
		arg3 func(*iam.ListEntitiesForPolicyOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListEntitiesForPolicyPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listEntitiesForPolicyPagesWithContextMutex.Unlock()
	if fake.ListEntitiesForPolicyPagesWithContextStub != nil {
		return fake.ListEntitiesForPolicyPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listEntitiesForPolicyPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyPagesWithContextCallCount() int {
	fake.listEntitiesForPolicyPagesWithContextMutex.RLock()
	defer fake.listEntitiesForPolicyPagesWithContextMutex.RUnlock()
	return len(fake.listEntitiesForPolicyPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyPagesWithContextCalls(stub func(context.Context, *iam.ListEntitiesForPolicyInput, func(*iam.ListEntitiesForPolicyOutput, bool) bool, ...request.Option) error) {
	fake.listEntitiesForPolicyPagesWithContextMutex.Lock()
	defer fake.listEntitiesForPolicyPagesWithContextMutex.Unlock()
	fake.ListEntitiesForPolicyPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyPagesWithContextArgsForCall(i int) (context.Context, *iam.ListEntitiesForPolicyInput, func(*iam.ListEntitiesForPolicyOutput, bool) bool, []request.Option) {
	fake.listEntitiesForPolicyPagesWithContextMutex.RLock()
	defer fake.listEntitiesForPolicyPagesWithContextMutex.RUnlock()
	argsForCall := fake.listEntitiesForPolicyPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyPagesWithContextReturns(result1 error) {
	fake.listEntitiesForPolicyPagesWithContextMutex.Lock()
	defer fake.listEntitiesForPolicyPagesWithContextMutex.Unlock()
	fake.ListEntitiesForPolicyPagesWithContextStub = nil
	fake.listEntitiesForPolicyPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listEntitiesForPolicyPagesWithContextMutex.Lock()
	defer fake.listEntitiesForPolicyPagesWithContextMutex.Unlock()
	fake.ListEntitiesForPolicyPagesWithContextStub = nil
	if fake.listEntitiesForPolicyPagesWithContextReturnsOnCall == nil {
		fake.listEntitiesForPolicyPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listEntitiesForPolicyPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyRequest(arg1 *iam.ListEntitiesForPolicyInput) (*request.Request, *iam.ListEntitiesForPolicyOutput) {
	fake.listEntitiesForPolicyRequestMutex.Lock()
	ret, specificReturn := fake.listEntitiesForPolicyRequestReturnsOnCall[len(fake.listEntitiesForPolicyRequestArgsForCall)]
	fake.listEntitiesForPolicyRequestArgsForCall = append(fake.listEntitiesForPolicyRequestArgsForCall, struct {
		arg1 *iam.ListEntitiesForPolicyInput
	}{arg1})
	fake.recordInvocation("ListEntitiesForPolicyRequest", []interface{}{arg1})
	fake.listEntitiesForPolicyRequestMutex.Unlock()
	if fake.ListEntitiesForPolicyRequestStub != nil {
		return fake.ListEntitiesForPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listEntitiesForPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyRequestCallCount() int {
	fake.listEntitiesForPolicyRequestMutex.RLock()
	defer fake.listEntitiesForPolicyRequestMutex.RUnlock()
	return len(fake.listEntitiesForPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyRequestCalls(stub func(*iam.ListEntitiesForPolicyInput) (*request.Request, *iam.ListEntitiesForPolicyOutput)) {
	fake.listEntitiesForPolicyRequestMutex.Lock()
	defer fake.listEntitiesForPolicyRequestMutex.Unlock()
	fake.ListEntitiesForPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyRequestArgsForCall(i int) *iam.ListEntitiesForPolicyInput {
	fake.listEntitiesForPolicyRequestMutex.RLock()
	defer fake.listEntitiesForPolicyRequestMutex.RUnlock()
	argsForCall := fake.listEntitiesForPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyRequestReturns(result1 *request.Request, result2 *iam.ListEntitiesForPolicyOutput) {
	fake.listEntitiesForPolicyRequestMutex.Lock()
	defer fake.listEntitiesForPolicyRequestMutex.Unlock()
	fake.ListEntitiesForPolicyRequestStub = nil
	fake.listEntitiesForPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListEntitiesForPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListEntitiesForPolicyOutput) {
	fake.listEntitiesForPolicyRequestMutex.Lock()
	defer fake.listEntitiesForPolicyRequestMutex.Unlock()
	fake.ListEntitiesForPolicyRequestStub = nil
	if fake.listEntitiesForPolicyRequestReturnsOnCall == nil {
		fake.listEntitiesForPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListEntitiesForPolicyOutput
		})
	}
	fake.listEntitiesForPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListEntitiesForPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyWithContext(arg1 context.Context, arg2 *iam.ListEntitiesForPolicyInput, arg3 ...request.Option) (*iam.ListEntitiesForPolicyOutput, error) {
	fake.listEntitiesForPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.listEntitiesForPolicyWithContextReturnsOnCall[len(fake.listEntitiesForPolicyWithContextArgsForCall)]
	fake.listEntitiesForPolicyWithContextArgsForCall = append(fake.listEntitiesForPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListEntitiesForPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListEntitiesForPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.listEntitiesForPolicyWithContextMutex.Unlock()
	if fake.ListEntitiesForPolicyWithContextStub != nil {
		return fake.ListEntitiesForPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listEntitiesForPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyWithContextCallCount() int {
	fake.listEntitiesForPolicyWithContextMutex.RLock()
	defer fake.listEntitiesForPolicyWithContextMutex.RUnlock()
	return len(fake.listEntitiesForPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyWithContextCalls(stub func(context.Context, *iam.ListEntitiesForPolicyInput, ...request.Option) (*iam.ListEntitiesForPolicyOutput, error)) {
	fake.listEntitiesForPolicyWithContextMutex.Lock()
	defer fake.listEntitiesForPolicyWithContextMutex.Unlock()
	fake.ListEntitiesForPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyWithContextArgsForCall(i int) (context.Context, *iam.ListEntitiesForPolicyInput, []request.Option) {
	fake.listEntitiesForPolicyWithContextMutex.RLock()
	defer fake.listEntitiesForPolicyWithContextMutex.RUnlock()
	argsForCall := fake.listEntitiesForPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyWithContextReturns(result1 *iam.ListEntitiesForPolicyOutput, result2 error) {
	fake.listEntitiesForPolicyWithContextMutex.Lock()
	defer fake.listEntitiesForPolicyWithContextMutex.Unlock()
	fake.ListEntitiesForPolicyWithContextStub = nil
	fake.listEntitiesForPolicyWithContextReturns = struct {
		result1 *iam.ListEntitiesForPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListEntitiesForPolicyWithContextReturnsOnCall(i int, result1 *iam.ListEntitiesForPolicyOutput, result2 error) {
	fake.listEntitiesForPolicyWithContextMutex.Lock()
	defer fake.listEntitiesForPolicyWithContextMutex.Unlock()
	fake.ListEntitiesForPolicyWithContextStub = nil
	if fake.listEntitiesForPolicyWithContextReturnsOnCall == nil {
		fake.listEntitiesForPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListEntitiesForPolicyOutput
			result2 error
		})
	}
	fake.listEntitiesForPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListEntitiesForPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroupPolicies(arg1 *iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error) {
	fake.listGroupPoliciesMutex.Lock()
	ret, specificReturn := fake.listGroupPoliciesReturnsOnCall[len(fake.listGroupPoliciesArgsForCall)]
	fake.listGroupPoliciesArgsForCall = append(fake.listGroupPoliciesArgsForCall, struct {
		arg1 *iam.ListGroupPoliciesInput
	}{arg1})
	fake.recordInvocation("ListGroupPolicies", []interface{}{arg1})
	fake.listGroupPoliciesMutex.Unlock()
	if fake.ListGroupPoliciesStub != nil {
		return fake.ListGroupPoliciesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listGroupPoliciesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListGroupPoliciesCallCount() int {
	fake.listGroupPoliciesMutex.RLock()
	defer fake.listGroupPoliciesMutex.RUnlock()
	return len(fake.listGroupPoliciesArgsForCall)
}

func (fake *FakeIAMAPI) ListGroupPoliciesCalls(stub func(*iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error)) {
	fake.listGroupPoliciesMutex.Lock()
	defer fake.listGroupPoliciesMutex.Unlock()
	fake.ListGroupPoliciesStub = stub
}

func (fake *FakeIAMAPI) ListGroupPoliciesArgsForCall(i int) *iam.ListGroupPoliciesInput {
	fake.listGroupPoliciesMutex.RLock()
	defer fake.listGroupPoliciesMutex.RUnlock()
	argsForCall := fake.listGroupPoliciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListGroupPoliciesReturns(result1 *iam.ListGroupPoliciesOutput, result2 error) {
	fake.listGroupPoliciesMutex.Lock()
	defer fake.listGroupPoliciesMutex.Unlock()
	fake.ListGroupPoliciesStub = nil
	fake.listGroupPoliciesReturns = struct {
		result1 *iam.ListGroupPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroupPoliciesReturnsOnCall(i int, result1 *iam.ListGroupPoliciesOutput, result2 error) {
	fake.listGroupPoliciesMutex.Lock()
	defer fake.listGroupPoliciesMutex.Unlock()
	fake.ListGroupPoliciesStub = nil
	if fake.listGroupPoliciesReturnsOnCall == nil {
		fake.listGroupPoliciesReturnsOnCall = make(map[int]struct {
			result1 *iam.ListGroupPoliciesOutput
			result2 error
		})
	}
	fake.listGroupPoliciesReturnsOnCall[i] = struct {
		result1 *iam.ListGroupPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroupPoliciesPages(arg1 *iam.ListGroupPoliciesInput, arg2 func(*iam.ListGroupPoliciesOutput, bool) bool) error {
	fake.listGroupPoliciesPagesMutex.Lock()
	ret, specificReturn := fake.listGroupPoliciesPagesReturnsOnCall[len(fake.listGroupPoliciesPagesArgsForCall)]
	fake.listGroupPoliciesPagesArgsForCall = append(fake.listGroupPoliciesPagesArgsForCall, struct {
		arg1 *iam.ListGroupPoliciesInput
		arg2 func(*iam.ListGroupPoliciesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListGroupPoliciesPages", []interface{}{arg1, arg2})
	fake.listGroupPoliciesPagesMutex.Unlock()
	if fake.ListGroupPoliciesPagesStub != nil {
		return fake.ListGroupPoliciesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listGroupPoliciesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListGroupPoliciesPagesCallCount() int {
	fake.listGroupPoliciesPagesMutex.RLock()
	defer fake.listGroupPoliciesPagesMutex.RUnlock()
	return len(fake.listGroupPoliciesPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListGroupPoliciesPagesCalls(stub func(*iam.ListGroupPoliciesInput, func(*iam.ListGroupPoliciesOutput, bool) bool) error) {
	fake.listGroupPoliciesPagesMutex.Lock()
	defer fake.listGroupPoliciesPagesMutex.Unlock()
	fake.ListGroupPoliciesPagesStub = stub
}

func (fake *FakeIAMAPI) ListGroupPoliciesPagesArgsForCall(i int) (*iam.ListGroupPoliciesInput, func(*iam.ListGroupPoliciesOutput, bool) bool) {
	fake.listGroupPoliciesPagesMutex.RLock()
	defer fake.listGroupPoliciesPagesMutex.RUnlock()
	argsForCall := fake.listGroupPoliciesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListGroupPoliciesPagesReturns(result1 error) {
	fake.listGroupPoliciesPagesMutex.Lock()
	defer fake.listGroupPoliciesPagesMutex.Unlock()
	fake.ListGroupPoliciesPagesStub = nil
	fake.listGroupPoliciesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListGroupPoliciesPagesReturnsOnCall(i int, result1 error) {
	fake.listGroupPoliciesPagesMutex.Lock()
	defer fake.listGroupPoliciesPagesMutex.Unlock()
	fake.ListGroupPoliciesPagesStub = nil
	if fake.listGroupPoliciesPagesReturnsOnCall == nil {
		fake.listGroupPoliciesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listGroupPoliciesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListGroupPoliciesPagesWithContext(arg1 context.Context, arg2 *iam.ListGroupPoliciesInput, arg3 func(*iam.ListGroupPoliciesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listGroupPoliciesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listGroupPoliciesPagesWithContextReturnsOnCall[len(fake.listGroupPoliciesPagesWithContextArgsForCall)]
	fake.listGroupPoliciesPagesWithContextArgsForCall = append(fake.listGroupPoliciesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListGroupPoliciesInput
		arg3 func(*iam.ListGroupPoliciesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListGroupPoliciesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listGroupPoliciesPagesWithContextMutex.Unlock()
	if fake.ListGroupPoliciesPagesWithContextStub != nil {
		return fake.ListGroupPoliciesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listGroupPoliciesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListGroupPoliciesPagesWithContextCallCount() int {
	fake.listGroupPoliciesPagesWithContextMutex.RLock()
	defer fake.listGroupPoliciesPagesWithContextMutex.RUnlock()
	return len(fake.listGroupPoliciesPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListGroupPoliciesPagesWithContextCalls(stub func(context.Context, *iam.ListGroupPoliciesInput, func(*iam.ListGroupPoliciesOutput, bool) bool, ...request.Option) error) {
	fake.listGroupPoliciesPagesWithContextMutex.Lock()
	defer fake.listGroupPoliciesPagesWithContextMutex.Unlock()
	fake.ListGroupPoliciesPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListGroupPoliciesPagesWithContextArgsForCall(i int) (context.Context, *iam.ListGroupPoliciesInput, func(*iam.ListGroupPoliciesOutput, bool) bool, []request.Option) {
	fake.listGroupPoliciesPagesWithContextMutex.RLock()
	defer fake.listGroupPoliciesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listGroupPoliciesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListGroupPoliciesPagesWithContextReturns(result1 error) {
	fake.listGroupPoliciesPagesWithContextMutex.Lock()
	defer fake.listGroupPoliciesPagesWithContextMutex.Unlock()
	fake.ListGroupPoliciesPagesWithContextStub = nil
	fake.listGroupPoliciesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListGroupPoliciesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listGroupPoliciesPagesWithContextMutex.Lock()
	defer fake.listGroupPoliciesPagesWithContextMutex.Unlock()
	fake.ListGroupPoliciesPagesWithContextStub = nil
	if fake.listGroupPoliciesPagesWithContextReturnsOnCall == nil {
		fake.listGroupPoliciesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listGroupPoliciesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListGroupPoliciesRequest(arg1 *iam.ListGroupPoliciesInput) (*request.Request, *iam.ListGroupPoliciesOutput) {
	fake.listGroupPoliciesRequestMutex.Lock()
	ret, specificReturn := fake.listGroupPoliciesRequestReturnsOnCall[len(fake.listGroupPoliciesRequestArgsForCall)]
	fake.listGroupPoliciesRequestArgsForCall = append(fake.listGroupPoliciesRequestArgsForCall, struct {
		arg1 *iam.ListGroupPoliciesInput
	}{arg1})
	fake.recordInvocation("ListGroupPoliciesRequest", []interface{}{arg1})
	fake.listGroupPoliciesRequestMutex.Unlock()
	if fake.ListGroupPoliciesRequestStub != nil {
		return fake.ListGroupPoliciesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listGroupPoliciesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListGroupPoliciesRequestCallCount() int {
	fake.listGroupPoliciesRequestMutex.RLock()
	defer fake.listGroupPoliciesRequestMutex.RUnlock()
	return len(fake.listGroupPoliciesRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListGroupPoliciesRequestCalls(stub func(*iam.ListGroupPoliciesInput) (*request.Request, *iam.ListGroupPoliciesOutput)) {
	fake.listGroupPoliciesRequestMutex.Lock()
	defer fake.listGroupPoliciesRequestMutex.Unlock()
	fake.ListGroupPoliciesRequestStub = stub
}

func (fake *FakeIAMAPI) ListGroupPoliciesRequestArgsForCall(i int) *iam.ListGroupPoliciesInput {
	fake.listGroupPoliciesRequestMutex.RLock()
	defer fake.listGroupPoliciesRequestMutex.RUnlock()
	argsForCall := fake.listGroupPoliciesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListGroupPoliciesRequestReturns(result1 *request.Request, result2 *iam.ListGroupPoliciesOutput) {
	fake.listGroupPoliciesRequestMutex.Lock()
	defer fake.listGroupPoliciesRequestMutex.Unlock()
	fake.ListGroupPoliciesRequestStub = nil
	fake.listGroupPoliciesRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListGroupPoliciesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroupPoliciesRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListGroupPoliciesOutput) {
	fake.listGroupPoliciesRequestMutex.Lock()
	defer fake.listGroupPoliciesRequestMutex.Unlock()
	fake.ListGroupPoliciesRequestStub = nil
	if fake.listGroupPoliciesRequestReturnsOnCall == nil {
		fake.listGroupPoliciesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListGroupPoliciesOutput
		})
	}
	fake.listGroupPoliciesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListGroupPoliciesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroupPoliciesWithContext(arg1 context.Context, arg2 *iam.ListGroupPoliciesInput, arg3 ...request.Option) (*iam.ListGroupPoliciesOutput, error) {
	fake.listGroupPoliciesWithContextMutex.Lock()
	ret, specificReturn := fake.listGroupPoliciesWithContextReturnsOnCall[len(fake.listGroupPoliciesWithContextArgsForCall)]
	fake.listGroupPoliciesWithContextArgsForCall = append(fake.listGroupPoliciesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListGroupPoliciesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListGroupPoliciesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listGroupPoliciesWithContextMutex.Unlock()
	if fake.ListGroupPoliciesWithContextStub != nil {
		return fake.ListGroupPoliciesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listGroupPoliciesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListGroupPoliciesWithContextCallCount() int {
	fake.listGroupPoliciesWithContextMutex.RLock()
	defer fake.listGroupPoliciesWithContextMutex.RUnlock()
	return len(fake.listGroupPoliciesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListGroupPoliciesWithContextCalls(stub func(context.Context, *iam.ListGroupPoliciesInput, ...request.Option) (*iam.ListGroupPoliciesOutput, error)) {
	fake.listGroupPoliciesWithContextMutex.Lock()
	defer fake.listGroupPoliciesWithContextMutex.Unlock()
	fake.ListGroupPoliciesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListGroupPoliciesWithContextArgsForCall(i int) (context.Context, *iam.ListGroupPoliciesInput, []request.Option) {
	fake.listGroupPoliciesWithContextMutex.RLock()
	defer fake.listGroupPoliciesWithContextMutex.RUnlock()
	argsForCall := fake.listGroupPoliciesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListGroupPoliciesWithContextReturns(result1 *iam.ListGroupPoliciesOutput, result2 error) {
	fake.listGroupPoliciesWithContextMutex.Lock()
	defer fake.listGroupPoliciesWithContextMutex.Unlock()
	fake.ListGroupPoliciesWithContextStub = nil
	fake.listGroupPoliciesWithContextReturns = struct {
		result1 *iam.ListGroupPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroupPoliciesWithContextReturnsOnCall(i int, result1 *iam.ListGroupPoliciesOutput, result2 error) {
	fake.listGroupPoliciesWithContextMutex.Lock()
	defer fake.listGroupPoliciesWithContextMutex.Unlock()
	fake.ListGroupPoliciesWithContextStub = nil
	if fake.listGroupPoliciesWithContextReturnsOnCall == nil {
		fake.listGroupPoliciesWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListGroupPoliciesOutput
			result2 error
		})
	}
	fake.listGroupPoliciesWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListGroupPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroups(arg1 *iam.ListGroupsInput) (*iam.ListGroupsOutput, error) {
	fake.listGroupsMutex.Lock()
	ret, specificReturn := fake.listGroupsReturnsOnCall[len(fake.listGroupsArgsForCall)]
	fake.listGroupsArgsForCall = append(fake.listGroupsArgsForCall, struct {
		arg1 *iam.ListGroupsInput
	}{arg1})
	fake.recordInvocation("ListGroups", []interface{}{arg1})
	fake.listGroupsMutex.Unlock()
	if fake.ListGroupsStub != nil {
		return fake.ListGroupsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listGroupsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListGroupsCallCount() int {
	fake.listGroupsMutex.RLock()
	defer fake.listGroupsMutex.RUnlock()
	return len(fake.listGroupsArgsForCall)
}

func (fake *FakeIAMAPI) ListGroupsCalls(stub func(*iam.ListGroupsInput) (*iam.ListGroupsOutput, error)) {
	fake.listGroupsMutex.Lock()
	defer fake.listGroupsMutex.Unlock()
	fake.ListGroupsStub = stub
}

func (fake *FakeIAMAPI) ListGroupsArgsForCall(i int) *iam.ListGroupsInput {
	fake.listGroupsMutex.RLock()
	defer fake.listGroupsMutex.RUnlock()
	argsForCall := fake.listGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListGroupsReturns(result1 *iam.ListGroupsOutput, result2 error) {
	fake.listGroupsMutex.Lock()
	defer fake.listGroupsMutex.Unlock()
	fake.ListGroupsStub = nil
	fake.listGroupsReturns = struct {
		result1 *iam.ListGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroupsReturnsOnCall(i int, result1 *iam.ListGroupsOutput, result2 error) {
	fake.listGroupsMutex.Lock()
	defer fake.listGroupsMutex.Unlock()
	fake.ListGroupsStub = nil
	if fake.listGroupsReturnsOnCall == nil {
		fake.listGroupsReturnsOnCall = make(map[int]struct {
			result1 *iam.ListGroupsOutput
			result2 error
		})
	}
	fake.listGroupsReturnsOnCall[i] = struct {
		result1 *iam.ListGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroupsForUser(arg1 *iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error) {
	fake.listGroupsForUserMutex.Lock()
	ret, specificReturn := fake.listGroupsForUserReturnsOnCall[len(fake.listGroupsForUserArgsForCall)]
	fake.listGroupsForUserArgsForCall = append(fake.listGroupsForUserArgsForCall, struct {
		arg1 *iam.ListGroupsForUserInput
	}{arg1})
	fake.recordInvocation("ListGroupsForUser", []interface{}{arg1})
	fake.listGroupsForUserMutex.Unlock()
	if fake.ListGroupsForUserStub != nil {
		return fake.ListGroupsForUserStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listGroupsForUserReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListGroupsForUserCallCount() int {
	fake.listGroupsForUserMutex.RLock()
	defer fake.listGroupsForUserMutex.RUnlock()
	return len(fake.listGroupsForUserArgsForCall)
}

func (fake *FakeIAMAPI) ListGroupsForUserCalls(stub func(*iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error)) {
	fake.listGroupsForUserMutex.Lock()
	defer fake.listGroupsForUserMutex.Unlock()
	fake.ListGroupsForUserStub = stub
}

func (fake *FakeIAMAPI) ListGroupsForUserArgsForCall(i int) *iam.ListGroupsForUserInput {
	fake.listGroupsForUserMutex.RLock()
	defer fake.listGroupsForUserMutex.RUnlock()
	argsForCall := fake.listGroupsForUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListGroupsForUserReturns(result1 *iam.ListGroupsForUserOutput, result2 error) {
	fake.listGroupsForUserMutex.Lock()
	defer fake.listGroupsForUserMutex.Unlock()
	fake.ListGroupsForUserStub = nil
	fake.listGroupsForUserReturns = struct {
		result1 *iam.ListGroupsForUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroupsForUserReturnsOnCall(i int, result1 *iam.ListGroupsForUserOutput, result2 error) {
	fake.listGroupsForUserMutex.Lock()
	defer fake.listGroupsForUserMutex.Unlock()
	fake.ListGroupsForUserStub = nil
	if fake.listGroupsForUserReturnsOnCall == nil {
		fake.listGroupsForUserReturnsOnCall = make(map[int]struct {
			result1 *iam.ListGroupsForUserOutput
			result2 error
		})
	}
	fake.listGroupsForUserReturnsOnCall[i] = struct {
		result1 *iam.ListGroupsForUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroupsForUserPages(arg1 *iam.ListGroupsForUserInput, arg2 func(*iam.ListGroupsForUserOutput, bool) bool) error {
	fake.listGroupsForUserPagesMutex.Lock()
	ret, specificReturn := fake.listGroupsForUserPagesReturnsOnCall[len(fake.listGroupsForUserPagesArgsForCall)]
	fake.listGroupsForUserPagesArgsForCall = append(fake.listGroupsForUserPagesArgsForCall, struct {
		arg1 *iam.ListGroupsForUserInput
		arg2 func(*iam.ListGroupsForUserOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListGroupsForUserPages", []interface{}{arg1, arg2})
	fake.listGroupsForUserPagesMutex.Unlock()
	if fake.ListGroupsForUserPagesStub != nil {
		return fake.ListGroupsForUserPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listGroupsForUserPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListGroupsForUserPagesCallCount() int {
	fake.listGroupsForUserPagesMutex.RLock()
	defer fake.listGroupsForUserPagesMutex.RUnlock()
	return len(fake.listGroupsForUserPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListGroupsForUserPagesCalls(stub func(*iam.ListGroupsForUserInput, func(*iam.ListGroupsForUserOutput, bool) bool) error) {
	fake.listGroupsForUserPagesMutex.Lock()
	defer fake.listGroupsForUserPagesMutex.Unlock()
	fake.ListGroupsForUserPagesStub = stub
}

func (fake *FakeIAMAPI) ListGroupsForUserPagesArgsForCall(i int) (*iam.ListGroupsForUserInput, func(*iam.ListGroupsForUserOutput, bool) bool) {
	fake.listGroupsForUserPagesMutex.RLock()
	defer fake.listGroupsForUserPagesMutex.RUnlock()
	argsForCall := fake.listGroupsForUserPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListGroupsForUserPagesReturns(result1 error) {
	fake.listGroupsForUserPagesMutex.Lock()
	defer fake.listGroupsForUserPagesMutex.Unlock()
	fake.ListGroupsForUserPagesStub = nil
	fake.listGroupsForUserPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListGroupsForUserPagesReturnsOnCall(i int, result1 error) {
	fake.listGroupsForUserPagesMutex.Lock()
	defer fake.listGroupsForUserPagesMutex.Unlock()
	fake.ListGroupsForUserPagesStub = nil
	if fake.listGroupsForUserPagesReturnsOnCall == nil {
		fake.listGroupsForUserPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listGroupsForUserPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListGroupsForUserPagesWithContext(arg1 context.Context, arg2 *iam.ListGroupsForUserInput, arg3 func(*iam.ListGroupsForUserOutput, bool) bool, arg4 ...request.Option) error {
	fake.listGroupsForUserPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listGroupsForUserPagesWithContextReturnsOnCall[len(fake.listGroupsForUserPagesWithContextArgsForCall)]
	fake.listGroupsForUserPagesWithContextArgsForCall = append(fake.listGroupsForUserPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListGroupsForUserInput
		arg3 func(*iam.ListGroupsForUserOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListGroupsForUserPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listGroupsForUserPagesWithContextMutex.Unlock()
	if fake.ListGroupsForUserPagesWithContextStub != nil {
		return fake.ListGroupsForUserPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listGroupsForUserPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListGroupsForUserPagesWithContextCallCount() int {
	fake.listGroupsForUserPagesWithContextMutex.RLock()
	defer fake.listGroupsForUserPagesWithContextMutex.RUnlock()
	return len(fake.listGroupsForUserPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListGroupsForUserPagesWithContextCalls(stub func(context.Context, *iam.ListGroupsForUserInput, func(*iam.ListGroupsForUserOutput, bool) bool, ...request.Option) error) {
	fake.listGroupsForUserPagesWithContextMutex.Lock()
	defer fake.listGroupsForUserPagesWithContextMutex.Unlock()
	fake.ListGroupsForUserPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListGroupsForUserPagesWithContextArgsForCall(i int) (context.Context, *iam.ListGroupsForUserInput, func(*iam.ListGroupsForUserOutput, bool) bool, []request.Option) {
	fake.listGroupsForUserPagesWithContextMutex.RLock()
	defer fake.listGroupsForUserPagesWithContextMutex.RUnlock()
	argsForCall := fake.listGroupsForUserPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListGroupsForUserPagesWithContextReturns(result1 error) {
	fake.listGroupsForUserPagesWithContextMutex.Lock()
	defer fake.listGroupsForUserPagesWithContextMutex.Unlock()
	fake.ListGroupsForUserPagesWithContextStub = nil
	fake.listGroupsForUserPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListGroupsForUserPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listGroupsForUserPagesWithContextMutex.Lock()
	defer fake.listGroupsForUserPagesWithContextMutex.Unlock()
	fake.ListGroupsForUserPagesWithContextStub = nil
	if fake.listGroupsForUserPagesWithContextReturnsOnCall == nil {
		fake.listGroupsForUserPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listGroupsForUserPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListGroupsForUserRequest(arg1 *iam.ListGroupsForUserInput) (*request.Request, *iam.ListGroupsForUserOutput) {
	fake.listGroupsForUserRequestMutex.Lock()
	ret, specificReturn := fake.listGroupsForUserRequestReturnsOnCall[len(fake.listGroupsForUserRequestArgsForCall)]
	fake.listGroupsForUserRequestArgsForCall = append(fake.listGroupsForUserRequestArgsForCall, struct {
		arg1 *iam.ListGroupsForUserInput
	}{arg1})
	fake.recordInvocation("ListGroupsForUserRequest", []interface{}{arg1})
	fake.listGroupsForUserRequestMutex.Unlock()
	if fake.ListGroupsForUserRequestStub != nil {
		return fake.ListGroupsForUserRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listGroupsForUserRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListGroupsForUserRequestCallCount() int {
	fake.listGroupsForUserRequestMutex.RLock()
	defer fake.listGroupsForUserRequestMutex.RUnlock()
	return len(fake.listGroupsForUserRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListGroupsForUserRequestCalls(stub func(*iam.ListGroupsForUserInput) (*request.Request, *iam.ListGroupsForUserOutput)) {
	fake.listGroupsForUserRequestMutex.Lock()
	defer fake.listGroupsForUserRequestMutex.Unlock()
	fake.ListGroupsForUserRequestStub = stub
}

func (fake *FakeIAMAPI) ListGroupsForUserRequestArgsForCall(i int) *iam.ListGroupsForUserInput {
	fake.listGroupsForUserRequestMutex.RLock()
	defer fake.listGroupsForUserRequestMutex.RUnlock()
	argsForCall := fake.listGroupsForUserRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListGroupsForUserRequestReturns(result1 *request.Request, result2 *iam.ListGroupsForUserOutput) {
	fake.listGroupsForUserRequestMutex.Lock()
	defer fake.listGroupsForUserRequestMutex.Unlock()
	fake.ListGroupsForUserRequestStub = nil
	fake.listGroupsForUserRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListGroupsForUserOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroupsForUserRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListGroupsForUserOutput) {
	fake.listGroupsForUserRequestMutex.Lock()
	defer fake.listGroupsForUserRequestMutex.Unlock()
	fake.ListGroupsForUserRequestStub = nil
	if fake.listGroupsForUserRequestReturnsOnCall == nil {
		fake.listGroupsForUserRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListGroupsForUserOutput
		})
	}
	fake.listGroupsForUserRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListGroupsForUserOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroupsForUserWithContext(arg1 context.Context, arg2 *iam.ListGroupsForUserInput, arg3 ...request.Option) (*iam.ListGroupsForUserOutput, error) {
	fake.listGroupsForUserWithContextMutex.Lock()
	ret, specificReturn := fake.listGroupsForUserWithContextReturnsOnCall[len(fake.listGroupsForUserWithContextArgsForCall)]
	fake.listGroupsForUserWithContextArgsForCall = append(fake.listGroupsForUserWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListGroupsForUserInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListGroupsForUserWithContext", []interface{}{arg1, arg2, arg3})
	fake.listGroupsForUserWithContextMutex.Unlock()
	if fake.ListGroupsForUserWithContextStub != nil {
		return fake.ListGroupsForUserWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listGroupsForUserWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListGroupsForUserWithContextCallCount() int {
	fake.listGroupsForUserWithContextMutex.RLock()
	defer fake.listGroupsForUserWithContextMutex.RUnlock()
	return len(fake.listGroupsForUserWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListGroupsForUserWithContextCalls(stub func(context.Context, *iam.ListGroupsForUserInput, ...request.Option) (*iam.ListGroupsForUserOutput, error)) {
	fake.listGroupsForUserWithContextMutex.Lock()
	defer fake.listGroupsForUserWithContextMutex.Unlock()
	fake.ListGroupsForUserWithContextStub = stub
}

func (fake *FakeIAMAPI) ListGroupsForUserWithContextArgsForCall(i int) (context.Context, *iam.ListGroupsForUserInput, []request.Option) {
	fake.listGroupsForUserWithContextMutex.RLock()
	defer fake.listGroupsForUserWithContextMutex.RUnlock()
	argsForCall := fake.listGroupsForUserWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListGroupsForUserWithContextReturns(result1 *iam.ListGroupsForUserOutput, result2 error) {
	fake.listGroupsForUserWithContextMutex.Lock()
	defer fake.listGroupsForUserWithContextMutex.Unlock()
	fake.ListGroupsForUserWithContextStub = nil
	fake.listGroupsForUserWithContextReturns = struct {
		result1 *iam.ListGroupsForUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroupsForUserWithContextReturnsOnCall(i int, result1 *iam.ListGroupsForUserOutput, result2 error) {
	fake.listGroupsForUserWithContextMutex.Lock()
	defer fake.listGroupsForUserWithContextMutex.Unlock()
	fake.ListGroupsForUserWithContextStub = nil
	if fake.listGroupsForUserWithContextReturnsOnCall == nil {
		fake.listGroupsForUserWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListGroupsForUserOutput
			result2 error
		})
	}
	fake.listGroupsForUserWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListGroupsForUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroupsPages(arg1 *iam.ListGroupsInput, arg2 func(*iam.ListGroupsOutput, bool) bool) error {
	fake.listGroupsPagesMutex.Lock()
	ret, specificReturn := fake.listGroupsPagesReturnsOnCall[len(fake.listGroupsPagesArgsForCall)]
	fake.listGroupsPagesArgsForCall = append(fake.listGroupsPagesArgsForCall, struct {
		arg1 *iam.ListGroupsInput
		arg2 func(*iam.ListGroupsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListGroupsPages", []interface{}{arg1, arg2})
	fake.listGroupsPagesMutex.Unlock()
	if fake.ListGroupsPagesStub != nil {
		return fake.ListGroupsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listGroupsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListGroupsPagesCallCount() int {
	fake.listGroupsPagesMutex.RLock()
	defer fake.listGroupsPagesMutex.RUnlock()
	return len(fake.listGroupsPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListGroupsPagesCalls(stub func(*iam.ListGroupsInput, func(*iam.ListGroupsOutput, bool) bool) error) {
	fake.listGroupsPagesMutex.Lock()
	defer fake.listGroupsPagesMutex.Unlock()
	fake.ListGroupsPagesStub = stub
}

func (fake *FakeIAMAPI) ListGroupsPagesArgsForCall(i int) (*iam.ListGroupsInput, func(*iam.ListGroupsOutput, bool) bool) {
	fake.listGroupsPagesMutex.RLock()
	defer fake.listGroupsPagesMutex.RUnlock()
	argsForCall := fake.listGroupsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListGroupsPagesReturns(result1 error) {
	fake.listGroupsPagesMutex.Lock()
	defer fake.listGroupsPagesMutex.Unlock()
	fake.ListGroupsPagesStub = nil
	fake.listGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.listGroupsPagesMutex.Lock()
	defer fake.listGroupsPagesMutex.Unlock()
	fake.ListGroupsPagesStub = nil
	if fake.listGroupsPagesReturnsOnCall == nil {
		fake.listGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListGroupsPagesWithContext(arg1 context.Context, arg2 *iam.ListGroupsInput, arg3 func(*iam.ListGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listGroupsPagesWithContextReturnsOnCall[len(fake.listGroupsPagesWithContextArgsForCall)]
	fake.listGroupsPagesWithContextArgsForCall = append(fake.listGroupsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListGroupsInput
		arg3 func(*iam.ListGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listGroupsPagesWithContextMutex.Unlock()
	if fake.ListGroupsPagesWithContextStub != nil {
		return fake.ListGroupsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listGroupsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListGroupsPagesWithContextCallCount() int {
	fake.listGroupsPagesWithContextMutex.RLock()
	defer fake.listGroupsPagesWithContextMutex.RUnlock()
	return len(fake.listGroupsPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListGroupsPagesWithContextCalls(stub func(context.Context, *iam.ListGroupsInput, func(*iam.ListGroupsOutput, bool) bool, ...request.Option) error) {
	fake.listGroupsPagesWithContextMutex.Lock()
	defer fake.listGroupsPagesWithContextMutex.Unlock()
	fake.ListGroupsPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListGroupsPagesWithContextArgsForCall(i int) (context.Context, *iam.ListGroupsInput, func(*iam.ListGroupsOutput, bool) bool, []request.Option) {
	fake.listGroupsPagesWithContextMutex.RLock()
	defer fake.listGroupsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listGroupsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListGroupsPagesWithContextReturns(result1 error) {
	fake.listGroupsPagesWithContextMutex.Lock()
	defer fake.listGroupsPagesWithContextMutex.Unlock()
	fake.ListGroupsPagesWithContextStub = nil
	fake.listGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listGroupsPagesWithContextMutex.Lock()
	defer fake.listGroupsPagesWithContextMutex.Unlock()
	fake.ListGroupsPagesWithContextStub = nil
	if fake.listGroupsPagesWithContextReturnsOnCall == nil {
		fake.listGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListGroupsRequest(arg1 *iam.ListGroupsInput) (*request.Request, *iam.ListGroupsOutput) {
	fake.listGroupsRequestMutex.Lock()
	ret, specificReturn := fake.listGroupsRequestReturnsOnCall[len(fake.listGroupsRequestArgsForCall)]
	fake.listGroupsRequestArgsForCall = append(fake.listGroupsRequestArgsForCall, struct {
		arg1 *iam.ListGroupsInput
	}{arg1})
	fake.recordInvocation("ListGroupsRequest", []interface{}{arg1})
	fake.listGroupsRequestMutex.Unlock()
	if fake.ListGroupsRequestStub != nil {
		return fake.ListGroupsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listGroupsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListGroupsRequestCallCount() int {
	fake.listGroupsRequestMutex.RLock()
	defer fake.listGroupsRequestMutex.RUnlock()
	return len(fake.listGroupsRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListGroupsRequestCalls(stub func(*iam.ListGroupsInput) (*request.Request, *iam.ListGroupsOutput)) {
	fake.listGroupsRequestMutex.Lock()
	defer fake.listGroupsRequestMutex.Unlock()
	fake.ListGroupsRequestStub = stub
}

func (fake *FakeIAMAPI) ListGroupsRequestArgsForCall(i int) *iam.ListGroupsInput {
	fake.listGroupsRequestMutex.RLock()
	defer fake.listGroupsRequestMutex.RUnlock()
	argsForCall := fake.listGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListGroupsRequestReturns(result1 *request.Request, result2 *iam.ListGroupsOutput) {
	fake.listGroupsRequestMutex.Lock()
	defer fake.listGroupsRequestMutex.Unlock()
	fake.ListGroupsRequestStub = nil
	fake.listGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListGroupsOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListGroupsOutput) {
	fake.listGroupsRequestMutex.Lock()
	defer fake.listGroupsRequestMutex.Unlock()
	fake.ListGroupsRequestStub = nil
	if fake.listGroupsRequestReturnsOnCall == nil {
		fake.listGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListGroupsOutput
		})
	}
	fake.listGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListGroupsOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroupsWithContext(arg1 context.Context, arg2 *iam.ListGroupsInput, arg3 ...request.Option) (*iam.ListGroupsOutput, error) {
	fake.listGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.listGroupsWithContextReturnsOnCall[len(fake.listGroupsWithContextArgsForCall)]
	fake.listGroupsWithContextArgsForCall = append(fake.listGroupsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listGroupsWithContextMutex.Unlock()
	if fake.ListGroupsWithContextStub != nil {
		return fake.ListGroupsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listGroupsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListGroupsWithContextCallCount() int {
	fake.listGroupsWithContextMutex.RLock()
	defer fake.listGroupsWithContextMutex.RUnlock()
	return len(fake.listGroupsWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListGroupsWithContextCalls(stub func(context.Context, *iam.ListGroupsInput, ...request.Option) (*iam.ListGroupsOutput, error)) {
	fake.listGroupsWithContextMutex.Lock()
	defer fake.listGroupsWithContextMutex.Unlock()
	fake.ListGroupsWithContextStub = stub
}

func (fake *FakeIAMAPI) ListGroupsWithContextArgsForCall(i int) (context.Context, *iam.ListGroupsInput, []request.Option) {
	fake.listGroupsWithContextMutex.RLock()
	defer fake.listGroupsWithContextMutex.RUnlock()
	argsForCall := fake.listGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListGroupsWithContextReturns(result1 *iam.ListGroupsOutput, result2 error) {
	fake.listGroupsWithContextMutex.Lock()
	defer fake.listGroupsWithContextMutex.Unlock()
	fake.ListGroupsWithContextStub = nil
	fake.listGroupsWithContextReturns = struct {
		result1 *iam.ListGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListGroupsWithContextReturnsOnCall(i int, result1 *iam.ListGroupsOutput, result2 error) {
	fake.listGroupsWithContextMutex.Lock()
	defer fake.listGroupsWithContextMutex.Unlock()
	fake.ListGroupsWithContextStub = nil
	if fake.listGroupsWithContextReturnsOnCall == nil {
		fake.listGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListGroupsOutput
			result2 error
		})
	}
	fake.listGroupsWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListInstanceProfiles(arg1 *iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error) {
	fake.listInstanceProfilesMutex.Lock()
	ret, specificReturn := fake.listInstanceProfilesReturnsOnCall[len(fake.listInstanceProfilesArgsForCall)]
	fake.listInstanceProfilesArgsForCall = append(fake.listInstanceProfilesArgsForCall, struct {
		arg1 *iam.ListInstanceProfilesInput
	}{arg1})
	fake.recordInvocation("ListInstanceProfiles", []interface{}{arg1})
	fake.listInstanceProfilesMutex.Unlock()
	if fake.ListInstanceProfilesStub != nil {
		return fake.ListInstanceProfilesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listInstanceProfilesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListInstanceProfilesCallCount() int {
	fake.listInstanceProfilesMutex.RLock()
	defer fake.listInstanceProfilesMutex.RUnlock()
	return len(fake.listInstanceProfilesArgsForCall)
}

func (fake *FakeIAMAPI) ListInstanceProfilesCalls(stub func(*iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error)) {
	fake.listInstanceProfilesMutex.Lock()
	defer fake.listInstanceProfilesMutex.Unlock()
	fake.ListInstanceProfilesStub = stub
}

func (fake *FakeIAMAPI) ListInstanceProfilesArgsForCall(i int) *iam.ListInstanceProfilesInput {
	fake.listInstanceProfilesMutex.RLock()
	defer fake.listInstanceProfilesMutex.RUnlock()
	argsForCall := fake.listInstanceProfilesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListInstanceProfilesReturns(result1 *iam.ListInstanceProfilesOutput, result2 error) {
	fake.listInstanceProfilesMutex.Lock()
	defer fake.listInstanceProfilesMutex.Unlock()
	fake.ListInstanceProfilesStub = nil
	fake.listInstanceProfilesReturns = struct {
		result1 *iam.ListInstanceProfilesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListInstanceProfilesReturnsOnCall(i int, result1 *iam.ListInstanceProfilesOutput, result2 error) {
	fake.listInstanceProfilesMutex.Lock()
	defer fake.listInstanceProfilesMutex.Unlock()
	fake.ListInstanceProfilesStub = nil
	if fake.listInstanceProfilesReturnsOnCall == nil {
		fake.listInstanceProfilesReturnsOnCall = make(map[int]struct {
			result1 *iam.ListInstanceProfilesOutput
			result2 error
		})
	}
	fake.listInstanceProfilesReturnsOnCall[i] = struct {
		result1 *iam.ListInstanceProfilesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRole(arg1 *iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error) {
	fake.listInstanceProfilesForRoleMutex.Lock()
	ret, specificReturn := fake.listInstanceProfilesForRoleReturnsOnCall[len(fake.listInstanceProfilesForRoleArgsForCall)]
	fake.listInstanceProfilesForRoleArgsForCall = append(fake.listInstanceProfilesForRoleArgsForCall, struct {
		arg1 *iam.ListInstanceProfilesForRoleInput
	}{arg1})
	fake.recordInvocation("ListInstanceProfilesForRole", []interface{}{arg1})
	fake.listInstanceProfilesForRoleMutex.Unlock()
	if fake.ListInstanceProfilesForRoleStub != nil {
		return fake.ListInstanceProfilesForRoleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listInstanceProfilesForRoleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRoleCallCount() int {
	fake.listInstanceProfilesForRoleMutex.RLock()
	defer fake.listInstanceProfilesForRoleMutex.RUnlock()
	return len(fake.listInstanceProfilesForRoleArgsForCall)
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRoleCalls(stub func(*iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error)) {
	fake.listInstanceProfilesForRoleMutex.Lock()
	defer fake.listInstanceProfilesForRoleMutex.Unlock()
	fake.ListInstanceProfilesForRoleStub = stub
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRoleArgsForCall(i int) *iam.ListInstanceProfilesForRoleInput {
	fake.listInstanceProfilesForRoleMutex.RLock()
	defer fake.listInstanceProfilesForRoleMutex.RUnlock()
	argsForCall := fake.listInstanceProfilesForRoleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRoleReturns(result1 *iam.ListInstanceProfilesForRoleOutput, result2 error) {
	fake.listInstanceProfilesForRoleMutex.Lock()
	defer fake.listInstanceProfilesForRoleMutex.Unlock()
	fake.ListInstanceProfilesForRoleStub = nil
	fake.listInstanceProfilesForRoleReturns = struct {
		result1 *iam.ListInstanceProfilesForRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRoleReturnsOnCall(i int, result1 *iam.ListInstanceProfilesForRoleOutput, result2 error) {
	fake.listInstanceProfilesForRoleMutex.Lock()
	defer fake.listInstanceProfilesForRoleMutex.Unlock()
	fake.ListInstanceProfilesForRoleStub = nil
	if fake.listInstanceProfilesForRoleReturnsOnCall == nil {
		fake.listInstanceProfilesForRoleReturnsOnCall = make(map[int]struct {
			result1 *iam.ListInstanceProfilesForRoleOutput
			result2 error
		})
	}
	fake.listInstanceProfilesForRoleReturnsOnCall[i] = struct {
		result1 *iam.ListInstanceProfilesForRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRolePages(arg1 *iam.ListInstanceProfilesForRoleInput, arg2 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool) error {
	fake.listInstanceProfilesForRolePagesMutex.Lock()
	ret, specificReturn := fake.listInstanceProfilesForRolePagesReturnsOnCall[len(fake.listInstanceProfilesForRolePagesArgsForCall)]
	fake.listInstanceProfilesForRolePagesArgsForCall = append(fake.listInstanceProfilesForRolePagesArgsForCall, struct {
		arg1 *iam.ListInstanceProfilesForRoleInput
		arg2 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListInstanceProfilesForRolePages", []interface{}{arg1, arg2})
	fake.listInstanceProfilesForRolePagesMutex.Unlock()
	if fake.ListInstanceProfilesForRolePagesStub != nil {
		return fake.ListInstanceProfilesForRolePagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listInstanceProfilesForRolePagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRolePagesCallCount() int {
	fake.listInstanceProfilesForRolePagesMutex.RLock()
	defer fake.listInstanceProfilesForRolePagesMutex.RUnlock()
	return len(fake.listInstanceProfilesForRolePagesArgsForCall)
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRolePagesCalls(stub func(*iam.ListInstanceProfilesForRoleInput, func(*iam.ListInstanceProfilesForRoleOutput, bool) bool) error) {
	fake.listInstanceProfilesForRolePagesMutex.Lock()
	defer fake.listInstanceProfilesForRolePagesMutex.Unlock()
	fake.ListInstanceProfilesForRolePagesStub = stub
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRolePagesArgsForCall(i int) (*iam.ListInstanceProfilesForRoleInput, func(*iam.ListInstanceProfilesForRoleOutput, bool) bool) {
	fake.listInstanceProfilesForRolePagesMutex.RLock()
	defer fake.listInstanceProfilesForRolePagesMutex.RUnlock()
	argsForCall := fake.listInstanceProfilesForRolePagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRolePagesReturns(result1 error) {
	fake.listInstanceProfilesForRolePagesMutex.Lock()
	defer fake.listInstanceProfilesForRolePagesMutex.Unlock()
	fake.ListInstanceProfilesForRolePagesStub = nil
	fake.listInstanceProfilesForRolePagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRolePagesReturnsOnCall(i int, result1 error) {
	fake.listInstanceProfilesForRolePagesMutex.Lock()
	defer fake.listInstanceProfilesForRolePagesMutex.Unlock()
	fake.ListInstanceProfilesForRolePagesStub = nil
	if fake.listInstanceProfilesForRolePagesReturnsOnCall == nil {
		fake.listInstanceProfilesForRolePagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listInstanceProfilesForRolePagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRolePagesWithContext(arg1 context.Context, arg2 *iam.ListInstanceProfilesForRoleInput, arg3 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool, arg4 ...request.Option) error {
	fake.listInstanceProfilesForRolePagesWithContextMutex.Lock()
	ret, specificReturn := fake.listInstanceProfilesForRolePagesWithContextReturnsOnCall[len(fake.listInstanceProfilesForRolePagesWithContextArgsForCall)]
	fake.listInstanceProfilesForRolePagesWithContextArgsForCall = append(fake.listInstanceProfilesForRolePagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListInstanceProfilesForRoleInput
		arg3 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListInstanceProfilesForRolePagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listInstanceProfilesForRolePagesWithContextMutex.Unlock()
	if fake.ListInstanceProfilesForRolePagesWithContextStub != nil {
		return fake.ListInstanceProfilesForRolePagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listInstanceProfilesForRolePagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRolePagesWithContextCallCount() int {
	fake.listInstanceProfilesForRolePagesWithContextMutex.RLock()
	defer fake.listInstanceProfilesForRolePagesWithContextMutex.RUnlock()
	return len(fake.listInstanceProfilesForRolePagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRolePagesWithContextCalls(stub func(context.Context, *iam.ListInstanceProfilesForRoleInput, func(*iam.ListInstanceProfilesForRoleOutput, bool) bool, ...request.Option) error) {
	fake.listInstanceProfilesForRolePagesWithContextMutex.Lock()
	defer fake.listInstanceProfilesForRolePagesWithContextMutex.Unlock()
	fake.ListInstanceProfilesForRolePagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRolePagesWithContextArgsForCall(i int) (context.Context, *iam.ListInstanceProfilesForRoleInput, func(*iam.ListInstanceProfilesForRoleOutput, bool) bool, []request.Option) {
	fake.listInstanceProfilesForRolePagesWithContextMutex.RLock()
	defer fake.listInstanceProfilesForRolePagesWithContextMutex.RUnlock()
	argsForCall := fake.listInstanceProfilesForRolePagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRolePagesWithContextReturns(result1 error) {
	fake.listInstanceProfilesForRolePagesWithContextMutex.Lock()
	defer fake.listInstanceProfilesForRolePagesWithContextMutex.Unlock()
	fake.ListInstanceProfilesForRolePagesWithContextStub = nil
	fake.listInstanceProfilesForRolePagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRolePagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listInstanceProfilesForRolePagesWithContextMutex.Lock()
	defer fake.listInstanceProfilesForRolePagesWithContextMutex.Unlock()
	fake.ListInstanceProfilesForRolePagesWithContextStub = nil
	if fake.listInstanceProfilesForRolePagesWithContextReturnsOnCall == nil {
		fake.listInstanceProfilesForRolePagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listInstanceProfilesForRolePagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRoleRequest(arg1 *iam.ListInstanceProfilesForRoleInput) (*request.Request, *iam.ListInstanceProfilesForRoleOutput) {
	fake.listInstanceProfilesForRoleRequestMutex.Lock()
	ret, specificReturn := fake.listInstanceProfilesForRoleRequestReturnsOnCall[len(fake.listInstanceProfilesForRoleRequestArgsForCall)]
	fake.listInstanceProfilesForRoleRequestArgsForCall = append(fake.listInstanceProfilesForRoleRequestArgsForCall, struct {
		arg1 *iam.ListInstanceProfilesForRoleInput
	}{arg1})
	fake.recordInvocation("ListInstanceProfilesForRoleRequest", []interface{}{arg1})
	fake.listInstanceProfilesForRoleRequestMutex.Unlock()
	if fake.ListInstanceProfilesForRoleRequestStub != nil {
		return fake.ListInstanceProfilesForRoleRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listInstanceProfilesForRoleRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRoleRequestCallCount() int {
	fake.listInstanceProfilesForRoleRequestMutex.RLock()
	defer fake.listInstanceProfilesForRoleRequestMutex.RUnlock()
	return len(fake.listInstanceProfilesForRoleRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRoleRequestCalls(stub func(*iam.ListInstanceProfilesForRoleInput) (*request.Request, *iam.ListInstanceProfilesForRoleOutput)) {
	fake.listInstanceProfilesForRoleRequestMutex.Lock()
	defer fake.listInstanceProfilesForRoleRequestMutex.Unlock()
	fake.ListInstanceProfilesForRoleRequestStub = stub
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRoleRequestArgsForCall(i int) *iam.ListInstanceProfilesForRoleInput {
	fake.listInstanceProfilesForRoleRequestMutex.RLock()
	defer fake.listInstanceProfilesForRoleRequestMutex.RUnlock()
	argsForCall := fake.listInstanceProfilesForRoleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRoleRequestReturns(result1 *request.Request, result2 *iam.ListInstanceProfilesForRoleOutput) {
	fake.listInstanceProfilesForRoleRequestMutex.Lock()
	defer fake.listInstanceProfilesForRoleRequestMutex.Unlock()
	fake.ListInstanceProfilesForRoleRequestStub = nil
	fake.listInstanceProfilesForRoleRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListInstanceProfilesForRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRoleRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListInstanceProfilesForRoleOutput) {
	fake.listInstanceProfilesForRoleRequestMutex.Lock()
	defer fake.listInstanceProfilesForRoleRequestMutex.Unlock()
	fake.ListInstanceProfilesForRoleRequestStub = nil
	if fake.listInstanceProfilesForRoleRequestReturnsOnCall == nil {
		fake.listInstanceProfilesForRoleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListInstanceProfilesForRoleOutput
		})
	}
	fake.listInstanceProfilesForRoleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListInstanceProfilesForRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRoleWithContext(arg1 context.Context, arg2 *iam.ListInstanceProfilesForRoleInput, arg3 ...request.Option) (*iam.ListInstanceProfilesForRoleOutput, error) {
	fake.listInstanceProfilesForRoleWithContextMutex.Lock()
	ret, specificReturn := fake.listInstanceProfilesForRoleWithContextReturnsOnCall[len(fake.listInstanceProfilesForRoleWithContextArgsForCall)]
	fake.listInstanceProfilesForRoleWithContextArgsForCall = append(fake.listInstanceProfilesForRoleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListInstanceProfilesForRoleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListInstanceProfilesForRoleWithContext", []interface{}{arg1, arg2, arg3})
	fake.listInstanceProfilesForRoleWithContextMutex.Unlock()
	if fake.ListInstanceProfilesForRoleWithContextStub != nil {
		return fake.ListInstanceProfilesForRoleWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listInstanceProfilesForRoleWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRoleWithContextCallCount() int {
	fake.listInstanceProfilesForRoleWithContextMutex.RLock()
	defer fake.listInstanceProfilesForRoleWithContextMutex.RUnlock()
	return len(fake.listInstanceProfilesForRoleWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRoleWithContextCalls(stub func(context.Context, *iam.ListInstanceProfilesForRoleInput, ...request.Option) (*iam.ListInstanceProfilesForRoleOutput, error)) {
	fake.listInstanceProfilesForRoleWithContextMutex.Lock()
	defer fake.listInstanceProfilesForRoleWithContextMutex.Unlock()
	fake.ListInstanceProfilesForRoleWithContextStub = stub
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRoleWithContextArgsForCall(i int) (context.Context, *iam.ListInstanceProfilesForRoleInput, []request.Option) {
	fake.listInstanceProfilesForRoleWithContextMutex.RLock()
	defer fake.listInstanceProfilesForRoleWithContextMutex.RUnlock()
	argsForCall := fake.listInstanceProfilesForRoleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRoleWithContextReturns(result1 *iam.ListInstanceProfilesForRoleOutput, result2 error) {
	fake.listInstanceProfilesForRoleWithContextMutex.Lock()
	defer fake.listInstanceProfilesForRoleWithContextMutex.Unlock()
	fake.ListInstanceProfilesForRoleWithContextStub = nil
	fake.listInstanceProfilesForRoleWithContextReturns = struct {
		result1 *iam.ListInstanceProfilesForRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListInstanceProfilesForRoleWithContextReturnsOnCall(i int, result1 *iam.ListInstanceProfilesForRoleOutput, result2 error) {
	fake.listInstanceProfilesForRoleWithContextMutex.Lock()
	defer fake.listInstanceProfilesForRoleWithContextMutex.Unlock()
	fake.ListInstanceProfilesForRoleWithContextStub = nil
	if fake.listInstanceProfilesForRoleWithContextReturnsOnCall == nil {
		fake.listInstanceProfilesForRoleWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListInstanceProfilesForRoleOutput
			result2 error
		})
	}
	fake.listInstanceProfilesForRoleWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListInstanceProfilesForRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListInstanceProfilesPages(arg1 *iam.ListInstanceProfilesInput, arg2 func(*iam.ListInstanceProfilesOutput, bool) bool) error {
	fake.listInstanceProfilesPagesMutex.Lock()
	ret, specificReturn := fake.listInstanceProfilesPagesReturnsOnCall[len(fake.listInstanceProfilesPagesArgsForCall)]
	fake.listInstanceProfilesPagesArgsForCall = append(fake.listInstanceProfilesPagesArgsForCall, struct {
		arg1 *iam.ListInstanceProfilesInput
		arg2 func(*iam.ListInstanceProfilesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListInstanceProfilesPages", []interface{}{arg1, arg2})
	fake.listInstanceProfilesPagesMutex.Unlock()
	if fake.ListInstanceProfilesPagesStub != nil {
		return fake.ListInstanceProfilesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listInstanceProfilesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListInstanceProfilesPagesCallCount() int {
	fake.listInstanceProfilesPagesMutex.RLock()
	defer fake.listInstanceProfilesPagesMutex.RUnlock()
	return len(fake.listInstanceProfilesPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListInstanceProfilesPagesCalls(stub func(*iam.ListInstanceProfilesInput, func(*iam.ListInstanceProfilesOutput, bool) bool) error) {
	fake.listInstanceProfilesPagesMutex.Lock()
	defer fake.listInstanceProfilesPagesMutex.Unlock()
	fake.ListInstanceProfilesPagesStub = stub
}

func (fake *FakeIAMAPI) ListInstanceProfilesPagesArgsForCall(i int) (*iam.ListInstanceProfilesInput, func(*iam.ListInstanceProfilesOutput, bool) bool) {
	fake.listInstanceProfilesPagesMutex.RLock()
	defer fake.listInstanceProfilesPagesMutex.RUnlock()
	argsForCall := fake.listInstanceProfilesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListInstanceProfilesPagesReturns(result1 error) {
	fake.listInstanceProfilesPagesMutex.Lock()
	defer fake.listInstanceProfilesPagesMutex.Unlock()
	fake.ListInstanceProfilesPagesStub = nil
	fake.listInstanceProfilesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListInstanceProfilesPagesReturnsOnCall(i int, result1 error) {
	fake.listInstanceProfilesPagesMutex.Lock()
	defer fake.listInstanceProfilesPagesMutex.Unlock()
	fake.ListInstanceProfilesPagesStub = nil
	if fake.listInstanceProfilesPagesReturnsOnCall == nil {
		fake.listInstanceProfilesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listInstanceProfilesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListInstanceProfilesPagesWithContext(arg1 context.Context, arg2 *iam.ListInstanceProfilesInput, arg3 func(*iam.ListInstanceProfilesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listInstanceProfilesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listInstanceProfilesPagesWithContextReturnsOnCall[len(fake.listInstanceProfilesPagesWithContextArgsForCall)]
	fake.listInstanceProfilesPagesWithContextArgsForCall = append(fake.listInstanceProfilesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListInstanceProfilesInput
		arg3 func(*iam.ListInstanceProfilesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListInstanceProfilesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listInstanceProfilesPagesWithContextMutex.Unlock()
	if fake.ListInstanceProfilesPagesWithContextStub != nil {
		return fake.ListInstanceProfilesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listInstanceProfilesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListInstanceProfilesPagesWithContextCallCount() int {
	fake.listInstanceProfilesPagesWithContextMutex.RLock()
	defer fake.listInstanceProfilesPagesWithContextMutex.RUnlock()
	return len(fake.listInstanceProfilesPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListInstanceProfilesPagesWithContextCalls(stub func(context.Context, *iam.ListInstanceProfilesInput, func(*iam.ListInstanceProfilesOutput, bool) bool, ...request.Option) error) {
	fake.listInstanceProfilesPagesWithContextMutex.Lock()
	defer fake.listInstanceProfilesPagesWithContextMutex.Unlock()
	fake.ListInstanceProfilesPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListInstanceProfilesPagesWithContextArgsForCall(i int) (context.Context, *iam.ListInstanceProfilesInput, func(*iam.ListInstanceProfilesOutput, bool) bool, []request.Option) {
	fake.listInstanceProfilesPagesWithContextMutex.RLock()
	defer fake.listInstanceProfilesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listInstanceProfilesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListInstanceProfilesPagesWithContextReturns(result1 error) {
	fake.listInstanceProfilesPagesWithContextMutex.Lock()
	defer fake.listInstanceProfilesPagesWithContextMutex.Unlock()
	fake.ListInstanceProfilesPagesWithContextStub = nil
	fake.listInstanceProfilesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListInstanceProfilesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listInstanceProfilesPagesWithContextMutex.Lock()
	defer fake.listInstanceProfilesPagesWithContextMutex.Unlock()
	fake.ListInstanceProfilesPagesWithContextStub = nil
	if fake.listInstanceProfilesPagesWithContextReturnsOnCall == nil {
		fake.listInstanceProfilesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listInstanceProfilesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListInstanceProfilesRequest(arg1 *iam.ListInstanceProfilesInput) (*request.Request, *iam.ListInstanceProfilesOutput) {
	fake.listInstanceProfilesRequestMutex.Lock()
	ret, specificReturn := fake.listInstanceProfilesRequestReturnsOnCall[len(fake.listInstanceProfilesRequestArgsForCall)]
	fake.listInstanceProfilesRequestArgsForCall = append(fake.listInstanceProfilesRequestArgsForCall, struct {
		arg1 *iam.ListInstanceProfilesInput
	}{arg1})
	fake.recordInvocation("ListInstanceProfilesRequest", []interface{}{arg1})
	fake.listInstanceProfilesRequestMutex.Unlock()
	if fake.ListInstanceProfilesRequestStub != nil {
		return fake.ListInstanceProfilesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listInstanceProfilesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListInstanceProfilesRequestCallCount() int {
	fake.listInstanceProfilesRequestMutex.RLock()
	defer fake.listInstanceProfilesRequestMutex.RUnlock()
	return len(fake.listInstanceProfilesRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListInstanceProfilesRequestCalls(stub func(*iam.ListInstanceProfilesInput) (*request.Request, *iam.ListInstanceProfilesOutput)) {
	fake.listInstanceProfilesRequestMutex.Lock()
	defer fake.listInstanceProfilesRequestMutex.Unlock()
	fake.ListInstanceProfilesRequestStub = stub
}

func (fake *FakeIAMAPI) ListInstanceProfilesRequestArgsForCall(i int) *iam.ListInstanceProfilesInput {
	fake.listInstanceProfilesRequestMutex.RLock()
	defer fake.listInstanceProfilesRequestMutex.RUnlock()
	argsForCall := fake.listInstanceProfilesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListInstanceProfilesRequestReturns(result1 *request.Request, result2 *iam.ListInstanceProfilesOutput) {
	fake.listInstanceProfilesRequestMutex.Lock()
	defer fake.listInstanceProfilesRequestMutex.Unlock()
	fake.ListInstanceProfilesRequestStub = nil
	fake.listInstanceProfilesRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListInstanceProfilesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListInstanceProfilesRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListInstanceProfilesOutput) {
	fake.listInstanceProfilesRequestMutex.Lock()
	defer fake.listInstanceProfilesRequestMutex.Unlock()
	fake.ListInstanceProfilesRequestStub = nil
	if fake.listInstanceProfilesRequestReturnsOnCall == nil {
		fake.listInstanceProfilesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListInstanceProfilesOutput
		})
	}
	fake.listInstanceProfilesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListInstanceProfilesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListInstanceProfilesWithContext(arg1 context.Context, arg2 *iam.ListInstanceProfilesInput, arg3 ...request.Option) (*iam.ListInstanceProfilesOutput, error) {
	fake.listInstanceProfilesWithContextMutex.Lock()
	ret, specificReturn := fake.listInstanceProfilesWithContextReturnsOnCall[len(fake.listInstanceProfilesWithContextArgsForCall)]
	fake.listInstanceProfilesWithContextArgsForCall = append(fake.listInstanceProfilesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListInstanceProfilesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListInstanceProfilesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listInstanceProfilesWithContextMutex.Unlock()
	if fake.ListInstanceProfilesWithContextStub != nil {
		return fake.ListInstanceProfilesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listInstanceProfilesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListInstanceProfilesWithContextCallCount() int {
	fake.listInstanceProfilesWithContextMutex.RLock()
	defer fake.listInstanceProfilesWithContextMutex.RUnlock()
	return len(fake.listInstanceProfilesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListInstanceProfilesWithContextCalls(stub func(context.Context, *iam.ListInstanceProfilesInput, ...request.Option) (*iam.ListInstanceProfilesOutput, error)) {
	fake.listInstanceProfilesWithContextMutex.Lock()
	defer fake.listInstanceProfilesWithContextMutex.Unlock()
	fake.ListInstanceProfilesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListInstanceProfilesWithContextArgsForCall(i int) (context.Context, *iam.ListInstanceProfilesInput, []request.Option) {
	fake.listInstanceProfilesWithContextMutex.RLock()
	defer fake.listInstanceProfilesWithContextMutex.RUnlock()
	argsForCall := fake.listInstanceProfilesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListInstanceProfilesWithContextReturns(result1 *iam.ListInstanceProfilesOutput, result2 error) {
	fake.listInstanceProfilesWithContextMutex.Lock()
	defer fake.listInstanceProfilesWithContextMutex.Unlock()
	fake.ListInstanceProfilesWithContextStub = nil
	fake.listInstanceProfilesWithContextReturns = struct {
		result1 *iam.ListInstanceProfilesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListInstanceProfilesWithContextReturnsOnCall(i int, result1 *iam.ListInstanceProfilesOutput, result2 error) {
	fake.listInstanceProfilesWithContextMutex.Lock()
	defer fake.listInstanceProfilesWithContextMutex.Unlock()
	fake.ListInstanceProfilesWithContextStub = nil
	if fake.listInstanceProfilesWithContextReturnsOnCall == nil {
		fake.listInstanceProfilesWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListInstanceProfilesOutput
			result2 error
		})
	}
	fake.listInstanceProfilesWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListInstanceProfilesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListMFADevices(arg1 *iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error) {
	fake.listMFADevicesMutex.Lock()
	ret, specificReturn := fake.listMFADevicesReturnsOnCall[len(fake.listMFADevicesArgsForCall)]
	fake.listMFADevicesArgsForCall = append(fake.listMFADevicesArgsForCall, struct {
		arg1 *iam.ListMFADevicesInput
	}{arg1})
	fake.recordInvocation("ListMFADevices", []interface{}{arg1})
	fake.listMFADevicesMutex.Unlock()
	if fake.ListMFADevicesStub != nil {
		return fake.ListMFADevicesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listMFADevicesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListMFADevicesCallCount() int {
	fake.listMFADevicesMutex.RLock()
	defer fake.listMFADevicesMutex.RUnlock()
	return len(fake.listMFADevicesArgsForCall)
}

func (fake *FakeIAMAPI) ListMFADevicesCalls(stub func(*iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error)) {
	fake.listMFADevicesMutex.Lock()
	defer fake.listMFADevicesMutex.Unlock()
	fake.ListMFADevicesStub = stub
}

func (fake *FakeIAMAPI) ListMFADevicesArgsForCall(i int) *iam.ListMFADevicesInput {
	fake.listMFADevicesMutex.RLock()
	defer fake.listMFADevicesMutex.RUnlock()
	argsForCall := fake.listMFADevicesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListMFADevicesReturns(result1 *iam.ListMFADevicesOutput, result2 error) {
	fake.listMFADevicesMutex.Lock()
	defer fake.listMFADevicesMutex.Unlock()
	fake.ListMFADevicesStub = nil
	fake.listMFADevicesReturns = struct {
		result1 *iam.ListMFADevicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListMFADevicesReturnsOnCall(i int, result1 *iam.ListMFADevicesOutput, result2 error) {
	fake.listMFADevicesMutex.Lock()
	defer fake.listMFADevicesMutex.Unlock()
	fake.ListMFADevicesStub = nil
	if fake.listMFADevicesReturnsOnCall == nil {
		fake.listMFADevicesReturnsOnCall = make(map[int]struct {
			result1 *iam.ListMFADevicesOutput
			result2 error
		})
	}
	fake.listMFADevicesReturnsOnCall[i] = struct {
		result1 *iam.ListMFADevicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListMFADevicesPages(arg1 *iam.ListMFADevicesInput, arg2 func(*iam.ListMFADevicesOutput, bool) bool) error {
	fake.listMFADevicesPagesMutex.Lock()
	ret, specificReturn := fake.listMFADevicesPagesReturnsOnCall[len(fake.listMFADevicesPagesArgsForCall)]
	fake.listMFADevicesPagesArgsForCall = append(fake.listMFADevicesPagesArgsForCall, struct {
		arg1 *iam.ListMFADevicesInput
		arg2 func(*iam.ListMFADevicesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListMFADevicesPages", []interface{}{arg1, arg2})
	fake.listMFADevicesPagesMutex.Unlock()
	if fake.ListMFADevicesPagesStub != nil {
		return fake.ListMFADevicesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listMFADevicesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListMFADevicesPagesCallCount() int {
	fake.listMFADevicesPagesMutex.RLock()
	defer fake.listMFADevicesPagesMutex.RUnlock()
	return len(fake.listMFADevicesPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListMFADevicesPagesCalls(stub func(*iam.ListMFADevicesInput, func(*iam.ListMFADevicesOutput, bool) bool) error) {
	fake.listMFADevicesPagesMutex.Lock()
	defer fake.listMFADevicesPagesMutex.Unlock()
	fake.ListMFADevicesPagesStub = stub
}

func (fake *FakeIAMAPI) ListMFADevicesPagesArgsForCall(i int) (*iam.ListMFADevicesInput, func(*iam.ListMFADevicesOutput, bool) bool) {
	fake.listMFADevicesPagesMutex.RLock()
	defer fake.listMFADevicesPagesMutex.RUnlock()
	argsForCall := fake.listMFADevicesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListMFADevicesPagesReturns(result1 error) {
	fake.listMFADevicesPagesMutex.Lock()
	defer fake.listMFADevicesPagesMutex.Unlock()
	fake.ListMFADevicesPagesStub = nil
	fake.listMFADevicesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListMFADevicesPagesReturnsOnCall(i int, result1 error) {
	fake.listMFADevicesPagesMutex.Lock()
	defer fake.listMFADevicesPagesMutex.Unlock()
	fake.ListMFADevicesPagesStub = nil
	if fake.listMFADevicesPagesReturnsOnCall == nil {
		fake.listMFADevicesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listMFADevicesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListMFADevicesPagesWithContext(arg1 context.Context, arg2 *iam.ListMFADevicesInput, arg3 func(*iam.ListMFADevicesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listMFADevicesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listMFADevicesPagesWithContextReturnsOnCall[len(fake.listMFADevicesPagesWithContextArgsForCall)]
	fake.listMFADevicesPagesWithContextArgsForCall = append(fake.listMFADevicesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListMFADevicesInput
		arg3 func(*iam.ListMFADevicesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListMFADevicesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listMFADevicesPagesWithContextMutex.Unlock()
	if fake.ListMFADevicesPagesWithContextStub != nil {
		return fake.ListMFADevicesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listMFADevicesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListMFADevicesPagesWithContextCallCount() int {
	fake.listMFADevicesPagesWithContextMutex.RLock()
	defer fake.listMFADevicesPagesWithContextMutex.RUnlock()
	return len(fake.listMFADevicesPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListMFADevicesPagesWithContextCalls(stub func(context.Context, *iam.ListMFADevicesInput, func(*iam.ListMFADevicesOutput, bool) bool, ...request.Option) error) {
	fake.listMFADevicesPagesWithContextMutex.Lock()
	defer fake.listMFADevicesPagesWithContextMutex.Unlock()
	fake.ListMFADevicesPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListMFADevicesPagesWithContextArgsForCall(i int) (context.Context, *iam.ListMFADevicesInput, func(*iam.ListMFADevicesOutput, bool) bool, []request.Option) {
	fake.listMFADevicesPagesWithContextMutex.RLock()
	defer fake.listMFADevicesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listMFADevicesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListMFADevicesPagesWithContextReturns(result1 error) {
	fake.listMFADevicesPagesWithContextMutex.Lock()
	defer fake.listMFADevicesPagesWithContextMutex.Unlock()
	fake.ListMFADevicesPagesWithContextStub = nil
	fake.listMFADevicesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListMFADevicesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listMFADevicesPagesWithContextMutex.Lock()
	defer fake.listMFADevicesPagesWithContextMutex.Unlock()
	fake.ListMFADevicesPagesWithContextStub = nil
	if fake.listMFADevicesPagesWithContextReturnsOnCall == nil {
		fake.listMFADevicesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listMFADevicesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListMFADevicesRequest(arg1 *iam.ListMFADevicesInput) (*request.Request, *iam.ListMFADevicesOutput) {
	fake.listMFADevicesRequestMutex.Lock()
	ret, specificReturn := fake.listMFADevicesRequestReturnsOnCall[len(fake.listMFADevicesRequestArgsForCall)]
	fake.listMFADevicesRequestArgsForCall = append(fake.listMFADevicesRequestArgsForCall, struct {
		arg1 *iam.ListMFADevicesInput
	}{arg1})
	fake.recordInvocation("ListMFADevicesRequest", []interface{}{arg1})
	fake.listMFADevicesRequestMutex.Unlock()
	if fake.ListMFADevicesRequestStub != nil {
		return fake.ListMFADevicesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listMFADevicesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListMFADevicesRequestCallCount() int {
	fake.listMFADevicesRequestMutex.RLock()
	defer fake.listMFADevicesRequestMutex.RUnlock()
	return len(fake.listMFADevicesRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListMFADevicesRequestCalls(stub func(*iam.ListMFADevicesInput) (*request.Request, *iam.ListMFADevicesOutput)) {
	fake.listMFADevicesRequestMutex.Lock()
	defer fake.listMFADevicesRequestMutex.Unlock()
	fake.ListMFADevicesRequestStub = stub
}

func (fake *FakeIAMAPI) ListMFADevicesRequestArgsForCall(i int) *iam.ListMFADevicesInput {
	fake.listMFADevicesRequestMutex.RLock()
	defer fake.listMFADevicesRequestMutex.RUnlock()
	argsForCall := fake.listMFADevicesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListMFADevicesRequestReturns(result1 *request.Request, result2 *iam.ListMFADevicesOutput) {
	fake.listMFADevicesRequestMutex.Lock()
	defer fake.listMFADevicesRequestMutex.Unlock()
	fake.ListMFADevicesRequestStub = nil
	fake.listMFADevicesRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListMFADevicesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListMFADevicesRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListMFADevicesOutput) {
	fake.listMFADevicesRequestMutex.Lock()
	defer fake.listMFADevicesRequestMutex.Unlock()
	fake.ListMFADevicesRequestStub = nil
	if fake.listMFADevicesRequestReturnsOnCall == nil {
		fake.listMFADevicesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListMFADevicesOutput
		})
	}
	fake.listMFADevicesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListMFADevicesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListMFADevicesWithContext(arg1 context.Context, arg2 *iam.ListMFADevicesInput, arg3 ...request.Option) (*iam.ListMFADevicesOutput, error) {
	fake.listMFADevicesWithContextMutex.Lock()
	ret, specificReturn := fake.listMFADevicesWithContextReturnsOnCall[len(fake.listMFADevicesWithContextArgsForCall)]
	fake.listMFADevicesWithContextArgsForCall = append(fake.listMFADevicesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListMFADevicesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListMFADevicesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listMFADevicesWithContextMutex.Unlock()
	if fake.ListMFADevicesWithContextStub != nil {
		return fake.ListMFADevicesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listMFADevicesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListMFADevicesWithContextCallCount() int {
	fake.listMFADevicesWithContextMutex.RLock()
	defer fake.listMFADevicesWithContextMutex.RUnlock()
	return len(fake.listMFADevicesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListMFADevicesWithContextCalls(stub func(context.Context, *iam.ListMFADevicesInput, ...request.Option) (*iam.ListMFADevicesOutput, error)) {
	fake.listMFADevicesWithContextMutex.Lock()
	defer fake.listMFADevicesWithContextMutex.Unlock()
	fake.ListMFADevicesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListMFADevicesWithContextArgsForCall(i int) (context.Context, *iam.ListMFADevicesInput, []request.Option) {
	fake.listMFADevicesWithContextMutex.RLock()
	defer fake.listMFADevicesWithContextMutex.RUnlock()
	argsForCall := fake.listMFADevicesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListMFADevicesWithContextReturns(result1 *iam.ListMFADevicesOutput, result2 error) {
	fake.listMFADevicesWithContextMutex.Lock()
	defer fake.listMFADevicesWithContextMutex.Unlock()
	fake.ListMFADevicesWithContextStub = nil
	fake.listMFADevicesWithContextReturns = struct {
		result1 *iam.ListMFADevicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListMFADevicesWithContextReturnsOnCall(i int, result1 *iam.ListMFADevicesOutput, result2 error) {
	fake.listMFADevicesWithContextMutex.Lock()
	defer fake.listMFADevicesWithContextMutex.Unlock()
	fake.ListMFADevicesWithContextStub = nil
	if fake.listMFADevicesWithContextReturnsOnCall == nil {
		fake.listMFADevicesWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListMFADevicesOutput
			result2 error
		})
	}
	fake.listMFADevicesWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListMFADevicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListOpenIDConnectProviders(arg1 *iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error) {
	fake.listOpenIDConnectProvidersMutex.Lock()
	ret, specificReturn := fake.listOpenIDConnectProvidersReturnsOnCall[len(fake.listOpenIDConnectProvidersArgsForCall)]
	fake.listOpenIDConnectProvidersArgsForCall = append(fake.listOpenIDConnectProvidersArgsForCall, struct {
		arg1 *iam.ListOpenIDConnectProvidersInput
	}{arg1})
	fake.recordInvocation("ListOpenIDConnectProviders", []interface{}{arg1})
	fake.listOpenIDConnectProvidersMutex.Unlock()
	if fake.ListOpenIDConnectProvidersStub != nil {
		return fake.ListOpenIDConnectProvidersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOpenIDConnectProvidersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListOpenIDConnectProvidersCallCount() int {
	fake.listOpenIDConnectProvidersMutex.RLock()
	defer fake.listOpenIDConnectProvidersMutex.RUnlock()
	return len(fake.listOpenIDConnectProvidersArgsForCall)
}

func (fake *FakeIAMAPI) ListOpenIDConnectProvidersCalls(stub func(*iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error)) {
	fake.listOpenIDConnectProvidersMutex.Lock()
	defer fake.listOpenIDConnectProvidersMutex.Unlock()
	fake.ListOpenIDConnectProvidersStub = stub
}

func (fake *FakeIAMAPI) ListOpenIDConnectProvidersArgsForCall(i int) *iam.ListOpenIDConnectProvidersInput {
	fake.listOpenIDConnectProvidersMutex.RLock()
	defer fake.listOpenIDConnectProvidersMutex.RUnlock()
	argsForCall := fake.listOpenIDConnectProvidersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListOpenIDConnectProvidersReturns(result1 *iam.ListOpenIDConnectProvidersOutput, result2 error) {
	fake.listOpenIDConnectProvidersMutex.Lock()
	defer fake.listOpenIDConnectProvidersMutex.Unlock()
	fake.ListOpenIDConnectProvidersStub = nil
	fake.listOpenIDConnectProvidersReturns = struct {
		result1 *iam.ListOpenIDConnectProvidersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListOpenIDConnectProvidersReturnsOnCall(i int, result1 *iam.ListOpenIDConnectProvidersOutput, result2 error) {
	fake.listOpenIDConnectProvidersMutex.Lock()
	defer fake.listOpenIDConnectProvidersMutex.Unlock()
	fake.ListOpenIDConnectProvidersStub = nil
	if fake.listOpenIDConnectProvidersReturnsOnCall == nil {
		fake.listOpenIDConnectProvidersReturnsOnCall = make(map[int]struct {
			result1 *iam.ListOpenIDConnectProvidersOutput
			result2 error
		})
	}
	fake.listOpenIDConnectProvidersReturnsOnCall[i] = struct {
		result1 *iam.ListOpenIDConnectProvidersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListOpenIDConnectProvidersRequest(arg1 *iam.ListOpenIDConnectProvidersInput) (*request.Request, *iam.ListOpenIDConnectProvidersOutput) {
	fake.listOpenIDConnectProvidersRequestMutex.Lock()
	ret, specificReturn := fake.listOpenIDConnectProvidersRequestReturnsOnCall[len(fake.listOpenIDConnectProvidersRequestArgsForCall)]
	fake.listOpenIDConnectProvidersRequestArgsForCall = append(fake.listOpenIDConnectProvidersRequestArgsForCall, struct {
		arg1 *iam.ListOpenIDConnectProvidersInput
	}{arg1})
	fake.recordInvocation("ListOpenIDConnectProvidersRequest", []interface{}{arg1})
	fake.listOpenIDConnectProvidersRequestMutex.Unlock()
	if fake.ListOpenIDConnectProvidersRequestStub != nil {
		return fake.ListOpenIDConnectProvidersRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOpenIDConnectProvidersRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListOpenIDConnectProvidersRequestCallCount() int {
	fake.listOpenIDConnectProvidersRequestMutex.RLock()
	defer fake.listOpenIDConnectProvidersRequestMutex.RUnlock()
	return len(fake.listOpenIDConnectProvidersRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListOpenIDConnectProvidersRequestCalls(stub func(*iam.ListOpenIDConnectProvidersInput) (*request.Request, *iam.ListOpenIDConnectProvidersOutput)) {
	fake.listOpenIDConnectProvidersRequestMutex.Lock()
	defer fake.listOpenIDConnectProvidersRequestMutex.Unlock()
	fake.ListOpenIDConnectProvidersRequestStub = stub
}

func (fake *FakeIAMAPI) ListOpenIDConnectProvidersRequestArgsForCall(i int) *iam.ListOpenIDConnectProvidersInput {
	fake.listOpenIDConnectProvidersRequestMutex.RLock()
	defer fake.listOpenIDConnectProvidersRequestMutex.RUnlock()
	argsForCall := fake.listOpenIDConnectProvidersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListOpenIDConnectProvidersRequestReturns(result1 *request.Request, result2 *iam.ListOpenIDConnectProvidersOutput) {
	fake.listOpenIDConnectProvidersRequestMutex.Lock()
	defer fake.listOpenIDConnectProvidersRequestMutex.Unlock()
	fake.ListOpenIDConnectProvidersRequestStub = nil
	fake.listOpenIDConnectProvidersRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListOpenIDConnectProvidersOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListOpenIDConnectProvidersRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListOpenIDConnectProvidersOutput) {
	fake.listOpenIDConnectProvidersRequestMutex.Lock()
	defer fake.listOpenIDConnectProvidersRequestMutex.Unlock()
	fake.ListOpenIDConnectProvidersRequestStub = nil
	if fake.listOpenIDConnectProvidersRequestReturnsOnCall == nil {
		fake.listOpenIDConnectProvidersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListOpenIDConnectProvidersOutput
		})
	}
	fake.listOpenIDConnectProvidersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListOpenIDConnectProvidersOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListOpenIDConnectProvidersWithContext(arg1 context.Context, arg2 *iam.ListOpenIDConnectProvidersInput, arg3 ...request.Option) (*iam.ListOpenIDConnectProvidersOutput, error) {
	fake.listOpenIDConnectProvidersWithContextMutex.Lock()
	ret, specificReturn := fake.listOpenIDConnectProvidersWithContextReturnsOnCall[len(fake.listOpenIDConnectProvidersWithContextArgsForCall)]
	fake.listOpenIDConnectProvidersWithContextArgsForCall = append(fake.listOpenIDConnectProvidersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListOpenIDConnectProvidersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListOpenIDConnectProvidersWithContext", []interface{}{arg1, arg2, arg3})
	fake.listOpenIDConnectProvidersWithContextMutex.Unlock()
	if fake.ListOpenIDConnectProvidersWithContextStub != nil {
		return fake.ListOpenIDConnectProvidersWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOpenIDConnectProvidersWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListOpenIDConnectProvidersWithContextCallCount() int {
	fake.listOpenIDConnectProvidersWithContextMutex.RLock()
	defer fake.listOpenIDConnectProvidersWithContextMutex.RUnlock()
	return len(fake.listOpenIDConnectProvidersWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListOpenIDConnectProvidersWithContextCalls(stub func(context.Context, *iam.ListOpenIDConnectProvidersInput, ...request.Option) (*iam.ListOpenIDConnectProvidersOutput, error)) {
	fake.listOpenIDConnectProvidersWithContextMutex.Lock()
	defer fake.listOpenIDConnectProvidersWithContextMutex.Unlock()
	fake.ListOpenIDConnectProvidersWithContextStub = stub
}

func (fake *FakeIAMAPI) ListOpenIDConnectProvidersWithContextArgsForCall(i int) (context.Context, *iam.ListOpenIDConnectProvidersInput, []request.Option) {
	fake.listOpenIDConnectProvidersWithContextMutex.RLock()
	defer fake.listOpenIDConnectProvidersWithContextMutex.RUnlock()
	argsForCall := fake.listOpenIDConnectProvidersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListOpenIDConnectProvidersWithContextReturns(result1 *iam.ListOpenIDConnectProvidersOutput, result2 error) {
	fake.listOpenIDConnectProvidersWithContextMutex.Lock()
	defer fake.listOpenIDConnectProvidersWithContextMutex.Unlock()
	fake.ListOpenIDConnectProvidersWithContextStub = nil
	fake.listOpenIDConnectProvidersWithContextReturns = struct {
		result1 *iam.ListOpenIDConnectProvidersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListOpenIDConnectProvidersWithContextReturnsOnCall(i int, result1 *iam.ListOpenIDConnectProvidersOutput, result2 error) {
	fake.listOpenIDConnectProvidersWithContextMutex.Lock()
	defer fake.listOpenIDConnectProvidersWithContextMutex.Unlock()
	fake.ListOpenIDConnectProvidersWithContextStub = nil
	if fake.listOpenIDConnectProvidersWithContextReturnsOnCall == nil {
		fake.listOpenIDConnectProvidersWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListOpenIDConnectProvidersOutput
			result2 error
		})
	}
	fake.listOpenIDConnectProvidersWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListOpenIDConnectProvidersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPolicies(arg1 *iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error) {
	fake.listPoliciesMutex.Lock()
	ret, specificReturn := fake.listPoliciesReturnsOnCall[len(fake.listPoliciesArgsForCall)]
	fake.listPoliciesArgsForCall = append(fake.listPoliciesArgsForCall, struct {
		arg1 *iam.ListPoliciesInput
	}{arg1})
	fake.recordInvocation("ListPolicies", []interface{}{arg1})
	fake.listPoliciesMutex.Unlock()
	if fake.ListPoliciesStub != nil {
		return fake.ListPoliciesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPoliciesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListPoliciesCallCount() int {
	fake.listPoliciesMutex.RLock()
	defer fake.listPoliciesMutex.RUnlock()
	return len(fake.listPoliciesArgsForCall)
}

func (fake *FakeIAMAPI) ListPoliciesCalls(stub func(*iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error)) {
	fake.listPoliciesMutex.Lock()
	defer fake.listPoliciesMutex.Unlock()
	fake.ListPoliciesStub = stub
}

func (fake *FakeIAMAPI) ListPoliciesArgsForCall(i int) *iam.ListPoliciesInput {
	fake.listPoliciesMutex.RLock()
	defer fake.listPoliciesMutex.RUnlock()
	argsForCall := fake.listPoliciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListPoliciesReturns(result1 *iam.ListPoliciesOutput, result2 error) {
	fake.listPoliciesMutex.Lock()
	defer fake.listPoliciesMutex.Unlock()
	fake.ListPoliciesStub = nil
	fake.listPoliciesReturns = struct {
		result1 *iam.ListPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPoliciesReturnsOnCall(i int, result1 *iam.ListPoliciesOutput, result2 error) {
	fake.listPoliciesMutex.Lock()
	defer fake.listPoliciesMutex.Unlock()
	fake.ListPoliciesStub = nil
	if fake.listPoliciesReturnsOnCall == nil {
		fake.listPoliciesReturnsOnCall = make(map[int]struct {
			result1 *iam.ListPoliciesOutput
			result2 error
		})
	}
	fake.listPoliciesReturnsOnCall[i] = struct {
		result1 *iam.ListPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccess(arg1 *iam.ListPoliciesGrantingServiceAccessInput) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
	fake.listPoliciesGrantingServiceAccessMutex.Lock()
	ret, specificReturn := fake.listPoliciesGrantingServiceAccessReturnsOnCall[len(fake.listPoliciesGrantingServiceAccessArgsForCall)]
	fake.listPoliciesGrantingServiceAccessArgsForCall = append(fake.listPoliciesGrantingServiceAccessArgsForCall, struct {
		arg1 *iam.ListPoliciesGrantingServiceAccessInput
	}{arg1})
	fake.recordInvocation("ListPoliciesGrantingServiceAccess", []interface{}{arg1})
	fake.listPoliciesGrantingServiceAccessMutex.Unlock()
	if fake.ListPoliciesGrantingServiceAccessStub != nil {
		return fake.ListPoliciesGrantingServiceAccessStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPoliciesGrantingServiceAccessReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccessCallCount() int {
	fake.listPoliciesGrantingServiceAccessMutex.RLock()
	defer fake.listPoliciesGrantingServiceAccessMutex.RUnlock()
	return len(fake.listPoliciesGrantingServiceAccessArgsForCall)
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccessCalls(stub func(*iam.ListPoliciesGrantingServiceAccessInput) (*iam.ListPoliciesGrantingServiceAccessOutput, error)) {
	fake.listPoliciesGrantingServiceAccessMutex.Lock()
	defer fake.listPoliciesGrantingServiceAccessMutex.Unlock()
	fake.ListPoliciesGrantingServiceAccessStub = stub
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccessArgsForCall(i int) *iam.ListPoliciesGrantingServiceAccessInput {
	fake.listPoliciesGrantingServiceAccessMutex.RLock()
	defer fake.listPoliciesGrantingServiceAccessMutex.RUnlock()
	argsForCall := fake.listPoliciesGrantingServiceAccessArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccessReturns(result1 *iam.ListPoliciesGrantingServiceAccessOutput, result2 error) {
	fake.listPoliciesGrantingServiceAccessMutex.Lock()
	defer fake.listPoliciesGrantingServiceAccessMutex.Unlock()
	fake.ListPoliciesGrantingServiceAccessStub = nil
	fake.listPoliciesGrantingServiceAccessReturns = struct {
		result1 *iam.ListPoliciesGrantingServiceAccessOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccessReturnsOnCall(i int, result1 *iam.ListPoliciesGrantingServiceAccessOutput, result2 error) {
	fake.listPoliciesGrantingServiceAccessMutex.Lock()
	defer fake.listPoliciesGrantingServiceAccessMutex.Unlock()
	fake.ListPoliciesGrantingServiceAccessStub = nil
	if fake.listPoliciesGrantingServiceAccessReturnsOnCall == nil {
		fake.listPoliciesGrantingServiceAccessReturnsOnCall = make(map[int]struct {
			result1 *iam.ListPoliciesGrantingServiceAccessOutput
			result2 error
		})
	}
	fake.listPoliciesGrantingServiceAccessReturnsOnCall[i] = struct {
		result1 *iam.ListPoliciesGrantingServiceAccessOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccessRequest(arg1 *iam.ListPoliciesGrantingServiceAccessInput) (*request.Request, *iam.ListPoliciesGrantingServiceAccessOutput) {
	fake.listPoliciesGrantingServiceAccessRequestMutex.Lock()
	ret, specificReturn := fake.listPoliciesGrantingServiceAccessRequestReturnsOnCall[len(fake.listPoliciesGrantingServiceAccessRequestArgsForCall)]
	fake.listPoliciesGrantingServiceAccessRequestArgsForCall = append(fake.listPoliciesGrantingServiceAccessRequestArgsForCall, struct {
		arg1 *iam.ListPoliciesGrantingServiceAccessInput
	}{arg1})
	fake.recordInvocation("ListPoliciesGrantingServiceAccessRequest", []interface{}{arg1})
	fake.listPoliciesGrantingServiceAccessRequestMutex.Unlock()
	if fake.ListPoliciesGrantingServiceAccessRequestStub != nil {
		return fake.ListPoliciesGrantingServiceAccessRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPoliciesGrantingServiceAccessRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccessRequestCallCount() int {
	fake.listPoliciesGrantingServiceAccessRequestMutex.RLock()
	defer fake.listPoliciesGrantingServiceAccessRequestMutex.RUnlock()
	return len(fake.listPoliciesGrantingServiceAccessRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccessRequestCalls(stub func(*iam.ListPoliciesGrantingServiceAccessInput) (*request.Request, *iam.ListPoliciesGrantingServiceAccessOutput)) {
	fake.listPoliciesGrantingServiceAccessRequestMutex.Lock()
	defer fake.listPoliciesGrantingServiceAccessRequestMutex.Unlock()
	fake.ListPoliciesGrantingServiceAccessRequestStub = stub
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccessRequestArgsForCall(i int) *iam.ListPoliciesGrantingServiceAccessInput {
	fake.listPoliciesGrantingServiceAccessRequestMutex.RLock()
	defer fake.listPoliciesGrantingServiceAccessRequestMutex.RUnlock()
	argsForCall := fake.listPoliciesGrantingServiceAccessRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccessRequestReturns(result1 *request.Request, result2 *iam.ListPoliciesGrantingServiceAccessOutput) {
	fake.listPoliciesGrantingServiceAccessRequestMutex.Lock()
	defer fake.listPoliciesGrantingServiceAccessRequestMutex.Unlock()
	fake.ListPoliciesGrantingServiceAccessRequestStub = nil
	fake.listPoliciesGrantingServiceAccessRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListPoliciesGrantingServiceAccessOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccessRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListPoliciesGrantingServiceAccessOutput) {
	fake.listPoliciesGrantingServiceAccessRequestMutex.Lock()
	defer fake.listPoliciesGrantingServiceAccessRequestMutex.Unlock()
	fake.ListPoliciesGrantingServiceAccessRequestStub = nil
	if fake.listPoliciesGrantingServiceAccessRequestReturnsOnCall == nil {
		fake.listPoliciesGrantingServiceAccessRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListPoliciesGrantingServiceAccessOutput
		})
	}
	fake.listPoliciesGrantingServiceAccessRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListPoliciesGrantingServiceAccessOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccessWithContext(arg1 context.Context, arg2 *iam.ListPoliciesGrantingServiceAccessInput, arg3 ...request.Option) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
	fake.listPoliciesGrantingServiceAccessWithContextMutex.Lock()
	ret, specificReturn := fake.listPoliciesGrantingServiceAccessWithContextReturnsOnCall[len(fake.listPoliciesGrantingServiceAccessWithContextArgsForCall)]
	fake.listPoliciesGrantingServiceAccessWithContextArgsForCall = append(fake.listPoliciesGrantingServiceAccessWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListPoliciesGrantingServiceAccessInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListPoliciesGrantingServiceAccessWithContext", []interface{}{arg1, arg2, arg3})
	fake.listPoliciesGrantingServiceAccessWithContextMutex.Unlock()
	if fake.ListPoliciesGrantingServiceAccessWithContextStub != nil {
		return fake.ListPoliciesGrantingServiceAccessWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPoliciesGrantingServiceAccessWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccessWithContextCallCount() int {
	fake.listPoliciesGrantingServiceAccessWithContextMutex.RLock()
	defer fake.listPoliciesGrantingServiceAccessWithContextMutex.RUnlock()
	return len(fake.listPoliciesGrantingServiceAccessWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccessWithContextCalls(stub func(context.Context, *iam.ListPoliciesGrantingServiceAccessInput, ...request.Option) (*iam.ListPoliciesGrantingServiceAccessOutput, error)) {
	fake.listPoliciesGrantingServiceAccessWithContextMutex.Lock()
	defer fake.listPoliciesGrantingServiceAccessWithContextMutex.Unlock()
	fake.ListPoliciesGrantingServiceAccessWithContextStub = stub
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccessWithContextArgsForCall(i int) (context.Context, *iam.ListPoliciesGrantingServiceAccessInput, []request.Option) {
	fake.listPoliciesGrantingServiceAccessWithContextMutex.RLock()
	defer fake.listPoliciesGrantingServiceAccessWithContextMutex.RUnlock()
	argsForCall := fake.listPoliciesGrantingServiceAccessWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccessWithContextReturns(result1 *iam.ListPoliciesGrantingServiceAccessOutput, result2 error) {
	fake.listPoliciesGrantingServiceAccessWithContextMutex.Lock()
	defer fake.listPoliciesGrantingServiceAccessWithContextMutex.Unlock()
	fake.ListPoliciesGrantingServiceAccessWithContextStub = nil
	fake.listPoliciesGrantingServiceAccessWithContextReturns = struct {
		result1 *iam.ListPoliciesGrantingServiceAccessOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPoliciesGrantingServiceAccessWithContextReturnsOnCall(i int, result1 *iam.ListPoliciesGrantingServiceAccessOutput, result2 error) {
	fake.listPoliciesGrantingServiceAccessWithContextMutex.Lock()
	defer fake.listPoliciesGrantingServiceAccessWithContextMutex.Unlock()
	fake.ListPoliciesGrantingServiceAccessWithContextStub = nil
	if fake.listPoliciesGrantingServiceAccessWithContextReturnsOnCall == nil {
		fake.listPoliciesGrantingServiceAccessWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListPoliciesGrantingServiceAccessOutput
			result2 error
		})
	}
	fake.listPoliciesGrantingServiceAccessWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListPoliciesGrantingServiceAccessOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPoliciesPages(arg1 *iam.ListPoliciesInput, arg2 func(*iam.ListPoliciesOutput, bool) bool) error {
	fake.listPoliciesPagesMutex.Lock()
	ret, specificReturn := fake.listPoliciesPagesReturnsOnCall[len(fake.listPoliciesPagesArgsForCall)]
	fake.listPoliciesPagesArgsForCall = append(fake.listPoliciesPagesArgsForCall, struct {
		arg1 *iam.ListPoliciesInput
		arg2 func(*iam.ListPoliciesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListPoliciesPages", []interface{}{arg1, arg2})
	fake.listPoliciesPagesMutex.Unlock()
	if fake.ListPoliciesPagesStub != nil {
		return fake.ListPoliciesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listPoliciesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListPoliciesPagesCallCount() int {
	fake.listPoliciesPagesMutex.RLock()
	defer fake.listPoliciesPagesMutex.RUnlock()
	return len(fake.listPoliciesPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListPoliciesPagesCalls(stub func(*iam.ListPoliciesInput, func(*iam.ListPoliciesOutput, bool) bool) error) {
	fake.listPoliciesPagesMutex.Lock()
	defer fake.listPoliciesPagesMutex.Unlock()
	fake.ListPoliciesPagesStub = stub
}

func (fake *FakeIAMAPI) ListPoliciesPagesArgsForCall(i int) (*iam.ListPoliciesInput, func(*iam.ListPoliciesOutput, bool) bool) {
	fake.listPoliciesPagesMutex.RLock()
	defer fake.listPoliciesPagesMutex.RUnlock()
	argsForCall := fake.listPoliciesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListPoliciesPagesReturns(result1 error) {
	fake.listPoliciesPagesMutex.Lock()
	defer fake.listPoliciesPagesMutex.Unlock()
	fake.ListPoliciesPagesStub = nil
	fake.listPoliciesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListPoliciesPagesReturnsOnCall(i int, result1 error) {
	fake.listPoliciesPagesMutex.Lock()
	defer fake.listPoliciesPagesMutex.Unlock()
	fake.ListPoliciesPagesStub = nil
	if fake.listPoliciesPagesReturnsOnCall == nil {
		fake.listPoliciesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listPoliciesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListPoliciesPagesWithContext(arg1 context.Context, arg2 *iam.ListPoliciesInput, arg3 func(*iam.ListPoliciesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listPoliciesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listPoliciesPagesWithContextReturnsOnCall[len(fake.listPoliciesPagesWithContextArgsForCall)]
	fake.listPoliciesPagesWithContextArgsForCall = append(fake.listPoliciesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListPoliciesInput
		arg3 func(*iam.ListPoliciesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListPoliciesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listPoliciesPagesWithContextMutex.Unlock()
	if fake.ListPoliciesPagesWithContextStub != nil {
		return fake.ListPoliciesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listPoliciesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListPoliciesPagesWithContextCallCount() int {
	fake.listPoliciesPagesWithContextMutex.RLock()
	defer fake.listPoliciesPagesWithContextMutex.RUnlock()
	return len(fake.listPoliciesPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListPoliciesPagesWithContextCalls(stub func(context.Context, *iam.ListPoliciesInput, func(*iam.ListPoliciesOutput, bool) bool, ...request.Option) error) {
	fake.listPoliciesPagesWithContextMutex.Lock()
	defer fake.listPoliciesPagesWithContextMutex.Unlock()
	fake.ListPoliciesPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListPoliciesPagesWithContextArgsForCall(i int) (context.Context, *iam.ListPoliciesInput, func(*iam.ListPoliciesOutput, bool) bool, []request.Option) {
	fake.listPoliciesPagesWithContextMutex.RLock()
	defer fake.listPoliciesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listPoliciesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListPoliciesPagesWithContextReturns(result1 error) {
	fake.listPoliciesPagesWithContextMutex.Lock()
	defer fake.listPoliciesPagesWithContextMutex.Unlock()
	fake.ListPoliciesPagesWithContextStub = nil
	fake.listPoliciesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListPoliciesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listPoliciesPagesWithContextMutex.Lock()
	defer fake.listPoliciesPagesWithContextMutex.Unlock()
	fake.ListPoliciesPagesWithContextStub = nil
	if fake.listPoliciesPagesWithContextReturnsOnCall == nil {
		fake.listPoliciesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listPoliciesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListPoliciesRequest(arg1 *iam.ListPoliciesInput) (*request.Request, *iam.ListPoliciesOutput) {
	fake.listPoliciesRequestMutex.Lock()
	ret, specificReturn := fake.listPoliciesRequestReturnsOnCall[len(fake.listPoliciesRequestArgsForCall)]
	fake.listPoliciesRequestArgsForCall = append(fake.listPoliciesRequestArgsForCall, struct {
		arg1 *iam.ListPoliciesInput
	}{arg1})
	fake.recordInvocation("ListPoliciesRequest", []interface{}{arg1})
	fake.listPoliciesRequestMutex.Unlock()
	if fake.ListPoliciesRequestStub != nil {
		return fake.ListPoliciesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPoliciesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListPoliciesRequestCallCount() int {
	fake.listPoliciesRequestMutex.RLock()
	defer fake.listPoliciesRequestMutex.RUnlock()
	return len(fake.listPoliciesRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListPoliciesRequestCalls(stub func(*iam.ListPoliciesInput) (*request.Request, *iam.ListPoliciesOutput)) {
	fake.listPoliciesRequestMutex.Lock()
	defer fake.listPoliciesRequestMutex.Unlock()
	fake.ListPoliciesRequestStub = stub
}

func (fake *FakeIAMAPI) ListPoliciesRequestArgsForCall(i int) *iam.ListPoliciesInput {
	fake.listPoliciesRequestMutex.RLock()
	defer fake.listPoliciesRequestMutex.RUnlock()
	argsForCall := fake.listPoliciesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListPoliciesRequestReturns(result1 *request.Request, result2 *iam.ListPoliciesOutput) {
	fake.listPoliciesRequestMutex.Lock()
	defer fake.listPoliciesRequestMutex.Unlock()
	fake.ListPoliciesRequestStub = nil
	fake.listPoliciesRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListPoliciesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPoliciesRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListPoliciesOutput) {
	fake.listPoliciesRequestMutex.Lock()
	defer fake.listPoliciesRequestMutex.Unlock()
	fake.ListPoliciesRequestStub = nil
	if fake.listPoliciesRequestReturnsOnCall == nil {
		fake.listPoliciesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListPoliciesOutput
		})
	}
	fake.listPoliciesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListPoliciesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPoliciesWithContext(arg1 context.Context, arg2 *iam.ListPoliciesInput, arg3 ...request.Option) (*iam.ListPoliciesOutput, error) {
	fake.listPoliciesWithContextMutex.Lock()
	ret, specificReturn := fake.listPoliciesWithContextReturnsOnCall[len(fake.listPoliciesWithContextArgsForCall)]
	fake.listPoliciesWithContextArgsForCall = append(fake.listPoliciesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListPoliciesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListPoliciesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listPoliciesWithContextMutex.Unlock()
	if fake.ListPoliciesWithContextStub != nil {
		return fake.ListPoliciesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPoliciesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListPoliciesWithContextCallCount() int {
	fake.listPoliciesWithContextMutex.RLock()
	defer fake.listPoliciesWithContextMutex.RUnlock()
	return len(fake.listPoliciesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListPoliciesWithContextCalls(stub func(context.Context, *iam.ListPoliciesInput, ...request.Option) (*iam.ListPoliciesOutput, error)) {
	fake.listPoliciesWithContextMutex.Lock()
	defer fake.listPoliciesWithContextMutex.Unlock()
	fake.ListPoliciesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListPoliciesWithContextArgsForCall(i int) (context.Context, *iam.ListPoliciesInput, []request.Option) {
	fake.listPoliciesWithContextMutex.RLock()
	defer fake.listPoliciesWithContextMutex.RUnlock()
	argsForCall := fake.listPoliciesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListPoliciesWithContextReturns(result1 *iam.ListPoliciesOutput, result2 error) {
	fake.listPoliciesWithContextMutex.Lock()
	defer fake.listPoliciesWithContextMutex.Unlock()
	fake.ListPoliciesWithContextStub = nil
	fake.listPoliciesWithContextReturns = struct {
		result1 *iam.ListPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPoliciesWithContextReturnsOnCall(i int, result1 *iam.ListPoliciesOutput, result2 error) {
	fake.listPoliciesWithContextMutex.Lock()
	defer fake.listPoliciesWithContextMutex.Unlock()
	fake.ListPoliciesWithContextStub = nil
	if fake.listPoliciesWithContextReturnsOnCall == nil {
		fake.listPoliciesWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListPoliciesOutput
			result2 error
		})
	}
	fake.listPoliciesWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPolicyVersions(arg1 *iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error) {
	fake.listPolicyVersionsMutex.Lock()
	ret, specificReturn := fake.listPolicyVersionsReturnsOnCall[len(fake.listPolicyVersionsArgsForCall)]
	fake.listPolicyVersionsArgsForCall = append(fake.listPolicyVersionsArgsForCall, struct {
		arg1 *iam.ListPolicyVersionsInput
	}{arg1})
	fake.recordInvocation("ListPolicyVersions", []interface{}{arg1})
	fake.listPolicyVersionsMutex.Unlock()
	if fake.ListPolicyVersionsStub != nil {
		return fake.ListPolicyVersionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPolicyVersionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListPolicyVersionsCallCount() int {
	fake.listPolicyVersionsMutex.RLock()
	defer fake.listPolicyVersionsMutex.RUnlock()
	return len(fake.listPolicyVersionsArgsForCall)
}

func (fake *FakeIAMAPI) ListPolicyVersionsCalls(stub func(*iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error)) {
	fake.listPolicyVersionsMutex.Lock()
	defer fake.listPolicyVersionsMutex.Unlock()
	fake.ListPolicyVersionsStub = stub
}

func (fake *FakeIAMAPI) ListPolicyVersionsArgsForCall(i int) *iam.ListPolicyVersionsInput {
	fake.listPolicyVersionsMutex.RLock()
	defer fake.listPolicyVersionsMutex.RUnlock()
	argsForCall := fake.listPolicyVersionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListPolicyVersionsReturns(result1 *iam.ListPolicyVersionsOutput, result2 error) {
	fake.listPolicyVersionsMutex.Lock()
	defer fake.listPolicyVersionsMutex.Unlock()
	fake.ListPolicyVersionsStub = nil
	fake.listPolicyVersionsReturns = struct {
		result1 *iam.ListPolicyVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPolicyVersionsReturnsOnCall(i int, result1 *iam.ListPolicyVersionsOutput, result2 error) {
	fake.listPolicyVersionsMutex.Lock()
	defer fake.listPolicyVersionsMutex.Unlock()
	fake.ListPolicyVersionsStub = nil
	if fake.listPolicyVersionsReturnsOnCall == nil {
		fake.listPolicyVersionsReturnsOnCall = make(map[int]struct {
			result1 *iam.ListPolicyVersionsOutput
			result2 error
		})
	}
	fake.listPolicyVersionsReturnsOnCall[i] = struct {
		result1 *iam.ListPolicyVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPolicyVersionsPages(arg1 *iam.ListPolicyVersionsInput, arg2 func(*iam.ListPolicyVersionsOutput, bool) bool) error {
	fake.listPolicyVersionsPagesMutex.Lock()
	ret, specificReturn := fake.listPolicyVersionsPagesReturnsOnCall[len(fake.listPolicyVersionsPagesArgsForCall)]
	fake.listPolicyVersionsPagesArgsForCall = append(fake.listPolicyVersionsPagesArgsForCall, struct {
		arg1 *iam.ListPolicyVersionsInput
		arg2 func(*iam.ListPolicyVersionsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListPolicyVersionsPages", []interface{}{arg1, arg2})
	fake.listPolicyVersionsPagesMutex.Unlock()
	if fake.ListPolicyVersionsPagesStub != nil {
		return fake.ListPolicyVersionsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listPolicyVersionsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListPolicyVersionsPagesCallCount() int {
	fake.listPolicyVersionsPagesMutex.RLock()
	defer fake.listPolicyVersionsPagesMutex.RUnlock()
	return len(fake.listPolicyVersionsPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListPolicyVersionsPagesCalls(stub func(*iam.ListPolicyVersionsInput, func(*iam.ListPolicyVersionsOutput, bool) bool) error) {
	fake.listPolicyVersionsPagesMutex.Lock()
	defer fake.listPolicyVersionsPagesMutex.Unlock()
	fake.ListPolicyVersionsPagesStub = stub
}

func (fake *FakeIAMAPI) ListPolicyVersionsPagesArgsForCall(i int) (*iam.ListPolicyVersionsInput, func(*iam.ListPolicyVersionsOutput, bool) bool) {
	fake.listPolicyVersionsPagesMutex.RLock()
	defer fake.listPolicyVersionsPagesMutex.RUnlock()
	argsForCall := fake.listPolicyVersionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListPolicyVersionsPagesReturns(result1 error) {
	fake.listPolicyVersionsPagesMutex.Lock()
	defer fake.listPolicyVersionsPagesMutex.Unlock()
	fake.ListPolicyVersionsPagesStub = nil
	fake.listPolicyVersionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListPolicyVersionsPagesReturnsOnCall(i int, result1 error) {
	fake.listPolicyVersionsPagesMutex.Lock()
	defer fake.listPolicyVersionsPagesMutex.Unlock()
	fake.ListPolicyVersionsPagesStub = nil
	if fake.listPolicyVersionsPagesReturnsOnCall == nil {
		fake.listPolicyVersionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listPolicyVersionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListPolicyVersionsPagesWithContext(arg1 context.Context, arg2 *iam.ListPolicyVersionsInput, arg3 func(*iam.ListPolicyVersionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listPolicyVersionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listPolicyVersionsPagesWithContextReturnsOnCall[len(fake.listPolicyVersionsPagesWithContextArgsForCall)]
	fake.listPolicyVersionsPagesWithContextArgsForCall = append(fake.listPolicyVersionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListPolicyVersionsInput
		arg3 func(*iam.ListPolicyVersionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListPolicyVersionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listPolicyVersionsPagesWithContextMutex.Unlock()
	if fake.ListPolicyVersionsPagesWithContextStub != nil {
		return fake.ListPolicyVersionsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listPolicyVersionsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListPolicyVersionsPagesWithContextCallCount() int {
	fake.listPolicyVersionsPagesWithContextMutex.RLock()
	defer fake.listPolicyVersionsPagesWithContextMutex.RUnlock()
	return len(fake.listPolicyVersionsPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListPolicyVersionsPagesWithContextCalls(stub func(context.Context, *iam.ListPolicyVersionsInput, func(*iam.ListPolicyVersionsOutput, bool) bool, ...request.Option) error) {
	fake.listPolicyVersionsPagesWithContextMutex.Lock()
	defer fake.listPolicyVersionsPagesWithContextMutex.Unlock()
	fake.ListPolicyVersionsPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListPolicyVersionsPagesWithContextArgsForCall(i int) (context.Context, *iam.ListPolicyVersionsInput, func(*iam.ListPolicyVersionsOutput, bool) bool, []request.Option) {
	fake.listPolicyVersionsPagesWithContextMutex.RLock()
	defer fake.listPolicyVersionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listPolicyVersionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListPolicyVersionsPagesWithContextReturns(result1 error) {
	fake.listPolicyVersionsPagesWithContextMutex.Lock()
	defer fake.listPolicyVersionsPagesWithContextMutex.Unlock()
	fake.ListPolicyVersionsPagesWithContextStub = nil
	fake.listPolicyVersionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListPolicyVersionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listPolicyVersionsPagesWithContextMutex.Lock()
	defer fake.listPolicyVersionsPagesWithContextMutex.Unlock()
	fake.ListPolicyVersionsPagesWithContextStub = nil
	if fake.listPolicyVersionsPagesWithContextReturnsOnCall == nil {
		fake.listPolicyVersionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listPolicyVersionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListPolicyVersionsRequest(arg1 *iam.ListPolicyVersionsInput) (*request.Request, *iam.ListPolicyVersionsOutput) {
	fake.listPolicyVersionsRequestMutex.Lock()
	ret, specificReturn := fake.listPolicyVersionsRequestReturnsOnCall[len(fake.listPolicyVersionsRequestArgsForCall)]
	fake.listPolicyVersionsRequestArgsForCall = append(fake.listPolicyVersionsRequestArgsForCall, struct {
		arg1 *iam.ListPolicyVersionsInput
	}{arg1})
	fake.recordInvocation("ListPolicyVersionsRequest", []interface{}{arg1})
	fake.listPolicyVersionsRequestMutex.Unlock()
	if fake.ListPolicyVersionsRequestStub != nil {
		return fake.ListPolicyVersionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPolicyVersionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListPolicyVersionsRequestCallCount() int {
	fake.listPolicyVersionsRequestMutex.RLock()
	defer fake.listPolicyVersionsRequestMutex.RUnlock()
	return len(fake.listPolicyVersionsRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListPolicyVersionsRequestCalls(stub func(*iam.ListPolicyVersionsInput) (*request.Request, *iam.ListPolicyVersionsOutput)) {
	fake.listPolicyVersionsRequestMutex.Lock()
	defer fake.listPolicyVersionsRequestMutex.Unlock()
	fake.ListPolicyVersionsRequestStub = stub
}

func (fake *FakeIAMAPI) ListPolicyVersionsRequestArgsForCall(i int) *iam.ListPolicyVersionsInput {
	fake.listPolicyVersionsRequestMutex.RLock()
	defer fake.listPolicyVersionsRequestMutex.RUnlock()
	argsForCall := fake.listPolicyVersionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListPolicyVersionsRequestReturns(result1 *request.Request, result2 *iam.ListPolicyVersionsOutput) {
	fake.listPolicyVersionsRequestMutex.Lock()
	defer fake.listPolicyVersionsRequestMutex.Unlock()
	fake.ListPolicyVersionsRequestStub = nil
	fake.listPolicyVersionsRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListPolicyVersionsOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPolicyVersionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListPolicyVersionsOutput) {
	fake.listPolicyVersionsRequestMutex.Lock()
	defer fake.listPolicyVersionsRequestMutex.Unlock()
	fake.ListPolicyVersionsRequestStub = nil
	if fake.listPolicyVersionsRequestReturnsOnCall == nil {
		fake.listPolicyVersionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListPolicyVersionsOutput
		})
	}
	fake.listPolicyVersionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListPolicyVersionsOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPolicyVersionsWithContext(arg1 context.Context, arg2 *iam.ListPolicyVersionsInput, arg3 ...request.Option) (*iam.ListPolicyVersionsOutput, error) {
	fake.listPolicyVersionsWithContextMutex.Lock()
	ret, specificReturn := fake.listPolicyVersionsWithContextReturnsOnCall[len(fake.listPolicyVersionsWithContextArgsForCall)]
	fake.listPolicyVersionsWithContextArgsForCall = append(fake.listPolicyVersionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListPolicyVersionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListPolicyVersionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listPolicyVersionsWithContextMutex.Unlock()
	if fake.ListPolicyVersionsWithContextStub != nil {
		return fake.ListPolicyVersionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPolicyVersionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListPolicyVersionsWithContextCallCount() int {
	fake.listPolicyVersionsWithContextMutex.RLock()
	defer fake.listPolicyVersionsWithContextMutex.RUnlock()
	return len(fake.listPolicyVersionsWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListPolicyVersionsWithContextCalls(stub func(context.Context, *iam.ListPolicyVersionsInput, ...request.Option) (*iam.ListPolicyVersionsOutput, error)) {
	fake.listPolicyVersionsWithContextMutex.Lock()
	defer fake.listPolicyVersionsWithContextMutex.Unlock()
	fake.ListPolicyVersionsWithContextStub = stub
}

func (fake *FakeIAMAPI) ListPolicyVersionsWithContextArgsForCall(i int) (context.Context, *iam.ListPolicyVersionsInput, []request.Option) {
	fake.listPolicyVersionsWithContextMutex.RLock()
	defer fake.listPolicyVersionsWithContextMutex.RUnlock()
	argsForCall := fake.listPolicyVersionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListPolicyVersionsWithContextReturns(result1 *iam.ListPolicyVersionsOutput, result2 error) {
	fake.listPolicyVersionsWithContextMutex.Lock()
	defer fake.listPolicyVersionsWithContextMutex.Unlock()
	fake.ListPolicyVersionsWithContextStub = nil
	fake.listPolicyVersionsWithContextReturns = struct {
		result1 *iam.ListPolicyVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListPolicyVersionsWithContextReturnsOnCall(i int, result1 *iam.ListPolicyVersionsOutput, result2 error) {
	fake.listPolicyVersionsWithContextMutex.Lock()
	defer fake.listPolicyVersionsWithContextMutex.Unlock()
	fake.ListPolicyVersionsWithContextStub = nil
	if fake.listPolicyVersionsWithContextReturnsOnCall == nil {
		fake.listPolicyVersionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListPolicyVersionsOutput
			result2 error
		})
	}
	fake.listPolicyVersionsWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListPolicyVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRolePolicies(arg1 *iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error) {
	fake.listRolePoliciesMutex.Lock()
	ret, specificReturn := fake.listRolePoliciesReturnsOnCall[len(fake.listRolePoliciesArgsForCall)]
	fake.listRolePoliciesArgsForCall = append(fake.listRolePoliciesArgsForCall, struct {
		arg1 *iam.ListRolePoliciesInput
	}{arg1})
	fake.recordInvocation("ListRolePolicies", []interface{}{arg1})
	fake.listRolePoliciesMutex.Unlock()
	if fake.ListRolePoliciesStub != nil {
		return fake.ListRolePoliciesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listRolePoliciesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListRolePoliciesCallCount() int {
	fake.listRolePoliciesMutex.RLock()
	defer fake.listRolePoliciesMutex.RUnlock()
	return len(fake.listRolePoliciesArgsForCall)
}

func (fake *FakeIAMAPI) ListRolePoliciesCalls(stub func(*iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error)) {
	fake.listRolePoliciesMutex.Lock()
	defer fake.listRolePoliciesMutex.Unlock()
	fake.ListRolePoliciesStub = stub
}

func (fake *FakeIAMAPI) ListRolePoliciesArgsForCall(i int) *iam.ListRolePoliciesInput {
	fake.listRolePoliciesMutex.RLock()
	defer fake.listRolePoliciesMutex.RUnlock()
	argsForCall := fake.listRolePoliciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListRolePoliciesReturns(result1 *iam.ListRolePoliciesOutput, result2 error) {
	fake.listRolePoliciesMutex.Lock()
	defer fake.listRolePoliciesMutex.Unlock()
	fake.ListRolePoliciesStub = nil
	fake.listRolePoliciesReturns = struct {
		result1 *iam.ListRolePoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRolePoliciesReturnsOnCall(i int, result1 *iam.ListRolePoliciesOutput, result2 error) {
	fake.listRolePoliciesMutex.Lock()
	defer fake.listRolePoliciesMutex.Unlock()
	fake.ListRolePoliciesStub = nil
	if fake.listRolePoliciesReturnsOnCall == nil {
		fake.listRolePoliciesReturnsOnCall = make(map[int]struct {
			result1 *iam.ListRolePoliciesOutput
			result2 error
		})
	}
	fake.listRolePoliciesReturnsOnCall[i] = struct {
		result1 *iam.ListRolePoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRolePoliciesPages(arg1 *iam.ListRolePoliciesInput, arg2 func(*iam.ListRolePoliciesOutput, bool) bool) error {
	fake.listRolePoliciesPagesMutex.Lock()
	ret, specificReturn := fake.listRolePoliciesPagesReturnsOnCall[len(fake.listRolePoliciesPagesArgsForCall)]
	fake.listRolePoliciesPagesArgsForCall = append(fake.listRolePoliciesPagesArgsForCall, struct {
		arg1 *iam.ListRolePoliciesInput
		arg2 func(*iam.ListRolePoliciesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListRolePoliciesPages", []interface{}{arg1, arg2})
	fake.listRolePoliciesPagesMutex.Unlock()
	if fake.ListRolePoliciesPagesStub != nil {
		return fake.ListRolePoliciesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listRolePoliciesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListRolePoliciesPagesCallCount() int {
	fake.listRolePoliciesPagesMutex.RLock()
	defer fake.listRolePoliciesPagesMutex.RUnlock()
	return len(fake.listRolePoliciesPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListRolePoliciesPagesCalls(stub func(*iam.ListRolePoliciesInput, func(*iam.ListRolePoliciesOutput, bool) bool) error) {
	fake.listRolePoliciesPagesMutex.Lock()
	defer fake.listRolePoliciesPagesMutex.Unlock()
	fake.ListRolePoliciesPagesStub = stub
}

func (fake *FakeIAMAPI) ListRolePoliciesPagesArgsForCall(i int) (*iam.ListRolePoliciesInput, func(*iam.ListRolePoliciesOutput, bool) bool) {
	fake.listRolePoliciesPagesMutex.RLock()
	defer fake.listRolePoliciesPagesMutex.RUnlock()
	argsForCall := fake.listRolePoliciesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListRolePoliciesPagesReturns(result1 error) {
	fake.listRolePoliciesPagesMutex.Lock()
	defer fake.listRolePoliciesPagesMutex.Unlock()
	fake.ListRolePoliciesPagesStub = nil
	fake.listRolePoliciesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListRolePoliciesPagesReturnsOnCall(i int, result1 error) {
	fake.listRolePoliciesPagesMutex.Lock()
	defer fake.listRolePoliciesPagesMutex.Unlock()
	fake.ListRolePoliciesPagesStub = nil
	if fake.listRolePoliciesPagesReturnsOnCall == nil {
		fake.listRolePoliciesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listRolePoliciesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListRolePoliciesPagesWithContext(arg1 context.Context, arg2 *iam.ListRolePoliciesInput, arg3 func(*iam.ListRolePoliciesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listRolePoliciesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listRolePoliciesPagesWithContextReturnsOnCall[len(fake.listRolePoliciesPagesWithContextArgsForCall)]
	fake.listRolePoliciesPagesWithContextArgsForCall = append(fake.listRolePoliciesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListRolePoliciesInput
		arg3 func(*iam.ListRolePoliciesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListRolePoliciesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listRolePoliciesPagesWithContextMutex.Unlock()
	if fake.ListRolePoliciesPagesWithContextStub != nil {
		return fake.ListRolePoliciesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listRolePoliciesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListRolePoliciesPagesWithContextCallCount() int {
	fake.listRolePoliciesPagesWithContextMutex.RLock()
	defer fake.listRolePoliciesPagesWithContextMutex.RUnlock()
	return len(fake.listRolePoliciesPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListRolePoliciesPagesWithContextCalls(stub func(context.Context, *iam.ListRolePoliciesInput, func(*iam.ListRolePoliciesOutput, bool) bool, ...request.Option) error) {
	fake.listRolePoliciesPagesWithContextMutex.Lock()
	defer fake.listRolePoliciesPagesWithContextMutex.Unlock()
	fake.ListRolePoliciesPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListRolePoliciesPagesWithContextArgsForCall(i int) (context.Context, *iam.ListRolePoliciesInput, func(*iam.ListRolePoliciesOutput, bool) bool, []request.Option) {
	fake.listRolePoliciesPagesWithContextMutex.RLock()
	defer fake.listRolePoliciesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listRolePoliciesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListRolePoliciesPagesWithContextReturns(result1 error) {
	fake.listRolePoliciesPagesWithContextMutex.Lock()
	defer fake.listRolePoliciesPagesWithContextMutex.Unlock()
	fake.ListRolePoliciesPagesWithContextStub = nil
	fake.listRolePoliciesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListRolePoliciesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listRolePoliciesPagesWithContextMutex.Lock()
	defer fake.listRolePoliciesPagesWithContextMutex.Unlock()
	fake.ListRolePoliciesPagesWithContextStub = nil
	if fake.listRolePoliciesPagesWithContextReturnsOnCall == nil {
		fake.listRolePoliciesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listRolePoliciesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListRolePoliciesRequest(arg1 *iam.ListRolePoliciesInput) (*request.Request, *iam.ListRolePoliciesOutput) {
	fake.listRolePoliciesRequestMutex.Lock()
	ret, specificReturn := fake.listRolePoliciesRequestReturnsOnCall[len(fake.listRolePoliciesRequestArgsForCall)]
	fake.listRolePoliciesRequestArgsForCall = append(fake.listRolePoliciesRequestArgsForCall, struct {
		arg1 *iam.ListRolePoliciesInput
	}{arg1})
	fake.recordInvocation("ListRolePoliciesRequest", []interface{}{arg1})
	fake.listRolePoliciesRequestMutex.Unlock()
	if fake.ListRolePoliciesRequestStub != nil {
		return fake.ListRolePoliciesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listRolePoliciesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListRolePoliciesRequestCallCount() int {
	fake.listRolePoliciesRequestMutex.RLock()
	defer fake.listRolePoliciesRequestMutex.RUnlock()
	return len(fake.listRolePoliciesRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListRolePoliciesRequestCalls(stub func(*iam.ListRolePoliciesInput) (*request.Request, *iam.ListRolePoliciesOutput)) {
	fake.listRolePoliciesRequestMutex.Lock()
	defer fake.listRolePoliciesRequestMutex.Unlock()
	fake.ListRolePoliciesRequestStub = stub
}

func (fake *FakeIAMAPI) ListRolePoliciesRequestArgsForCall(i int) *iam.ListRolePoliciesInput {
	fake.listRolePoliciesRequestMutex.RLock()
	defer fake.listRolePoliciesRequestMutex.RUnlock()
	argsForCall := fake.listRolePoliciesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListRolePoliciesRequestReturns(result1 *request.Request, result2 *iam.ListRolePoliciesOutput) {
	fake.listRolePoliciesRequestMutex.Lock()
	defer fake.listRolePoliciesRequestMutex.Unlock()
	fake.ListRolePoliciesRequestStub = nil
	fake.listRolePoliciesRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListRolePoliciesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRolePoliciesRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListRolePoliciesOutput) {
	fake.listRolePoliciesRequestMutex.Lock()
	defer fake.listRolePoliciesRequestMutex.Unlock()
	fake.ListRolePoliciesRequestStub = nil
	if fake.listRolePoliciesRequestReturnsOnCall == nil {
		fake.listRolePoliciesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListRolePoliciesOutput
		})
	}
	fake.listRolePoliciesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListRolePoliciesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRolePoliciesWithContext(arg1 context.Context, arg2 *iam.ListRolePoliciesInput, arg3 ...request.Option) (*iam.ListRolePoliciesOutput, error) {
	fake.listRolePoliciesWithContextMutex.Lock()
	ret, specificReturn := fake.listRolePoliciesWithContextReturnsOnCall[len(fake.listRolePoliciesWithContextArgsForCall)]
	fake.listRolePoliciesWithContextArgsForCall = append(fake.listRolePoliciesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListRolePoliciesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListRolePoliciesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listRolePoliciesWithContextMutex.Unlock()
	if fake.ListRolePoliciesWithContextStub != nil {
		return fake.ListRolePoliciesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listRolePoliciesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListRolePoliciesWithContextCallCount() int {
	fake.listRolePoliciesWithContextMutex.RLock()
	defer fake.listRolePoliciesWithContextMutex.RUnlock()
	return len(fake.listRolePoliciesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListRolePoliciesWithContextCalls(stub func(context.Context, *iam.ListRolePoliciesInput, ...request.Option) (*iam.ListRolePoliciesOutput, error)) {
	fake.listRolePoliciesWithContextMutex.Lock()
	defer fake.listRolePoliciesWithContextMutex.Unlock()
	fake.ListRolePoliciesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListRolePoliciesWithContextArgsForCall(i int) (context.Context, *iam.ListRolePoliciesInput, []request.Option) {
	fake.listRolePoliciesWithContextMutex.RLock()
	defer fake.listRolePoliciesWithContextMutex.RUnlock()
	argsForCall := fake.listRolePoliciesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListRolePoliciesWithContextReturns(result1 *iam.ListRolePoliciesOutput, result2 error) {
	fake.listRolePoliciesWithContextMutex.Lock()
	defer fake.listRolePoliciesWithContextMutex.Unlock()
	fake.ListRolePoliciesWithContextStub = nil
	fake.listRolePoliciesWithContextReturns = struct {
		result1 *iam.ListRolePoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRolePoliciesWithContextReturnsOnCall(i int, result1 *iam.ListRolePoliciesOutput, result2 error) {
	fake.listRolePoliciesWithContextMutex.Lock()
	defer fake.listRolePoliciesWithContextMutex.Unlock()
	fake.ListRolePoliciesWithContextStub = nil
	if fake.listRolePoliciesWithContextReturnsOnCall == nil {
		fake.listRolePoliciesWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListRolePoliciesOutput
			result2 error
		})
	}
	fake.listRolePoliciesWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListRolePoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRoleTags(arg1 *iam.ListRoleTagsInput) (*iam.ListRoleTagsOutput, error) {
	fake.listRoleTagsMutex.Lock()
	ret, specificReturn := fake.listRoleTagsReturnsOnCall[len(fake.listRoleTagsArgsForCall)]
	fake.listRoleTagsArgsForCall = append(fake.listRoleTagsArgsForCall, struct {
		arg1 *iam.ListRoleTagsInput
	}{arg1})
	fake.recordInvocation("ListRoleTags", []interface{}{arg1})
	fake.listRoleTagsMutex.Unlock()
	if fake.ListRoleTagsStub != nil {
		return fake.ListRoleTagsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listRoleTagsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListRoleTagsCallCount() int {
	fake.listRoleTagsMutex.RLock()
	defer fake.listRoleTagsMutex.RUnlock()
	return len(fake.listRoleTagsArgsForCall)
}

func (fake *FakeIAMAPI) ListRoleTagsCalls(stub func(*iam.ListRoleTagsInput) (*iam.ListRoleTagsOutput, error)) {
	fake.listRoleTagsMutex.Lock()
	defer fake.listRoleTagsMutex.Unlock()
	fake.ListRoleTagsStub = stub
}

func (fake *FakeIAMAPI) ListRoleTagsArgsForCall(i int) *iam.ListRoleTagsInput {
	fake.listRoleTagsMutex.RLock()
	defer fake.listRoleTagsMutex.RUnlock()
	argsForCall := fake.listRoleTagsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListRoleTagsReturns(result1 *iam.ListRoleTagsOutput, result2 error) {
	fake.listRoleTagsMutex.Lock()
	defer fake.listRoleTagsMutex.Unlock()
	fake.ListRoleTagsStub = nil
	fake.listRoleTagsReturns = struct {
		result1 *iam.ListRoleTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRoleTagsReturnsOnCall(i int, result1 *iam.ListRoleTagsOutput, result2 error) {
	fake.listRoleTagsMutex.Lock()
	defer fake.listRoleTagsMutex.Unlock()
	fake.ListRoleTagsStub = nil
	if fake.listRoleTagsReturnsOnCall == nil {
		fake.listRoleTagsReturnsOnCall = make(map[int]struct {
			result1 *iam.ListRoleTagsOutput
			result2 error
		})
	}
	fake.listRoleTagsReturnsOnCall[i] = struct {
		result1 *iam.ListRoleTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRoleTagsRequest(arg1 *iam.ListRoleTagsInput) (*request.Request, *iam.ListRoleTagsOutput) {
	fake.listRoleTagsRequestMutex.Lock()
	ret, specificReturn := fake.listRoleTagsRequestReturnsOnCall[len(fake.listRoleTagsRequestArgsForCall)]
	fake.listRoleTagsRequestArgsForCall = append(fake.listRoleTagsRequestArgsForCall, struct {
		arg1 *iam.ListRoleTagsInput
	}{arg1})
	fake.recordInvocation("ListRoleTagsRequest", []interface{}{arg1})
	fake.listRoleTagsRequestMutex.Unlock()
	if fake.ListRoleTagsRequestStub != nil {
		return fake.ListRoleTagsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listRoleTagsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListRoleTagsRequestCallCount() int {
	fake.listRoleTagsRequestMutex.RLock()
	defer fake.listRoleTagsRequestMutex.RUnlock()
	return len(fake.listRoleTagsRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListRoleTagsRequestCalls(stub func(*iam.ListRoleTagsInput) (*request.Request, *iam.ListRoleTagsOutput)) {
	fake.listRoleTagsRequestMutex.Lock()
	defer fake.listRoleTagsRequestMutex.Unlock()
	fake.ListRoleTagsRequestStub = stub
}

func (fake *FakeIAMAPI) ListRoleTagsRequestArgsForCall(i int) *iam.ListRoleTagsInput {
	fake.listRoleTagsRequestMutex.RLock()
	defer fake.listRoleTagsRequestMutex.RUnlock()
	argsForCall := fake.listRoleTagsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListRoleTagsRequestReturns(result1 *request.Request, result2 *iam.ListRoleTagsOutput) {
	fake.listRoleTagsRequestMutex.Lock()
	defer fake.listRoleTagsRequestMutex.Unlock()
	fake.ListRoleTagsRequestStub = nil
	fake.listRoleTagsRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListRoleTagsOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRoleTagsRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListRoleTagsOutput) {
	fake.listRoleTagsRequestMutex.Lock()
	defer fake.listRoleTagsRequestMutex.Unlock()
	fake.ListRoleTagsRequestStub = nil
	if fake.listRoleTagsRequestReturnsOnCall == nil {
		fake.listRoleTagsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListRoleTagsOutput
		})
	}
	fake.listRoleTagsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListRoleTagsOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRoleTagsWithContext(arg1 context.Context, arg2 *iam.ListRoleTagsInput, arg3 ...request.Option) (*iam.ListRoleTagsOutput, error) {
	fake.listRoleTagsWithContextMutex.Lock()
	ret, specificReturn := fake.listRoleTagsWithContextReturnsOnCall[len(fake.listRoleTagsWithContextArgsForCall)]
	fake.listRoleTagsWithContextArgsForCall = append(fake.listRoleTagsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListRoleTagsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListRoleTagsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listRoleTagsWithContextMutex.Unlock()
	if fake.ListRoleTagsWithContextStub != nil {
		return fake.ListRoleTagsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listRoleTagsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListRoleTagsWithContextCallCount() int {
	fake.listRoleTagsWithContextMutex.RLock()
	defer fake.listRoleTagsWithContextMutex.RUnlock()
	return len(fake.listRoleTagsWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListRoleTagsWithContextCalls(stub func(context.Context, *iam.ListRoleTagsInput, ...request.Option) (*iam.ListRoleTagsOutput, error)) {
	fake.listRoleTagsWithContextMutex.Lock()
	defer fake.listRoleTagsWithContextMutex.Unlock()
	fake.ListRoleTagsWithContextStub = stub
}

func (fake *FakeIAMAPI) ListRoleTagsWithContextArgsForCall(i int) (context.Context, *iam.ListRoleTagsInput, []request.Option) {
	fake.listRoleTagsWithContextMutex.RLock()
	defer fake.listRoleTagsWithContextMutex.RUnlock()
	argsForCall := fake.listRoleTagsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListRoleTagsWithContextReturns(result1 *iam.ListRoleTagsOutput, result2 error) {
	fake.listRoleTagsWithContextMutex.Lock()
	defer fake.listRoleTagsWithContextMutex.Unlock()
	fake.ListRoleTagsWithContextStub = nil
	fake.listRoleTagsWithContextReturns = struct {
		result1 *iam.ListRoleTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRoleTagsWithContextReturnsOnCall(i int, result1 *iam.ListRoleTagsOutput, result2 error) {
	fake.listRoleTagsWithContextMutex.Lock()
	defer fake.listRoleTagsWithContextMutex.Unlock()
	fake.ListRoleTagsWithContextStub = nil
	if fake.listRoleTagsWithContextReturnsOnCall == nil {
		fake.listRoleTagsWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListRoleTagsOutput
			result2 error
		})
	}
	fake.listRoleTagsWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListRoleTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRoles(arg1 *iam.ListRolesInput) (*iam.ListRolesOutput, error) {
	fake.listRolesMutex.Lock()
	ret, specificReturn := fake.listRolesReturnsOnCall[len(fake.listRolesArgsForCall)]
	fake.listRolesArgsForCall = append(fake.listRolesArgsForCall, struct {
		arg1 *iam.ListRolesInput
	}{arg1})
	fake.recordInvocation("ListRoles", []interface{}{arg1})
	fake.listRolesMutex.Unlock()
	if fake.ListRolesStub != nil {
		return fake.ListRolesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listRolesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListRolesCallCount() int {
	fake.listRolesMutex.RLock()
	defer fake.listRolesMutex.RUnlock()
	return len(fake.listRolesArgsForCall)
}

func (fake *FakeIAMAPI) ListRolesCalls(stub func(*iam.ListRolesInput) (*iam.ListRolesOutput, error)) {
	fake.listRolesMutex.Lock()
	defer fake.listRolesMutex.Unlock()
	fake.ListRolesStub = stub
}

func (fake *FakeIAMAPI) ListRolesArgsForCall(i int) *iam.ListRolesInput {
	fake.listRolesMutex.RLock()
	defer fake.listRolesMutex.RUnlock()
	argsForCall := fake.listRolesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListRolesReturns(result1 *iam.ListRolesOutput, result2 error) {
	fake.listRolesMutex.Lock()
	defer fake.listRolesMutex.Unlock()
	fake.ListRolesStub = nil
	fake.listRolesReturns = struct {
		result1 *iam.ListRolesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRolesReturnsOnCall(i int, result1 *iam.ListRolesOutput, result2 error) {
	fake.listRolesMutex.Lock()
	defer fake.listRolesMutex.Unlock()
	fake.ListRolesStub = nil
	if fake.listRolesReturnsOnCall == nil {
		fake.listRolesReturnsOnCall = make(map[int]struct {
			result1 *iam.ListRolesOutput
			result2 error
		})
	}
	fake.listRolesReturnsOnCall[i] = struct {
		result1 *iam.ListRolesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRolesPages(arg1 *iam.ListRolesInput, arg2 func(*iam.ListRolesOutput, bool) bool) error {
	fake.listRolesPagesMutex.Lock()
	ret, specificReturn := fake.listRolesPagesReturnsOnCall[len(fake.listRolesPagesArgsForCall)]
	fake.listRolesPagesArgsForCall = append(fake.listRolesPagesArgsForCall, struct {
		arg1 *iam.ListRolesInput
		arg2 func(*iam.ListRolesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListRolesPages", []interface{}{arg1, arg2})
	fake.listRolesPagesMutex.Unlock()
	if fake.ListRolesPagesStub != nil {
		return fake.ListRolesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listRolesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListRolesPagesCallCount() int {
	fake.listRolesPagesMutex.RLock()
	defer fake.listRolesPagesMutex.RUnlock()
	return len(fake.listRolesPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListRolesPagesCalls(stub func(*iam.ListRolesInput, func(*iam.ListRolesOutput, bool) bool) error) {
	fake.listRolesPagesMutex.Lock()
	defer fake.listRolesPagesMutex.Unlock()
	fake.ListRolesPagesStub = stub
}

func (fake *FakeIAMAPI) ListRolesPagesArgsForCall(i int) (*iam.ListRolesInput, func(*iam.ListRolesOutput, bool) bool) {
	fake.listRolesPagesMutex.RLock()
	defer fake.listRolesPagesMutex.RUnlock()
	argsForCall := fake.listRolesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListRolesPagesReturns(result1 error) {
	fake.listRolesPagesMutex.Lock()
	defer fake.listRolesPagesMutex.Unlock()
	fake.ListRolesPagesStub = nil
	fake.listRolesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListRolesPagesReturnsOnCall(i int, result1 error) {
	fake.listRolesPagesMutex.Lock()
	defer fake.listRolesPagesMutex.Unlock()
	fake.ListRolesPagesStub = nil
	if fake.listRolesPagesReturnsOnCall == nil {
		fake.listRolesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listRolesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListRolesPagesWithContext(arg1 context.Context, arg2 *iam.ListRolesInput, arg3 func(*iam.ListRolesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listRolesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listRolesPagesWithContextReturnsOnCall[len(fake.listRolesPagesWithContextArgsForCall)]
	fake.listRolesPagesWithContextArgsForCall = append(fake.listRolesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListRolesInput
		arg3 func(*iam.ListRolesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListRolesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listRolesPagesWithContextMutex.Unlock()
	if fake.ListRolesPagesWithContextStub != nil {
		return fake.ListRolesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listRolesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListRolesPagesWithContextCallCount() int {
	fake.listRolesPagesWithContextMutex.RLock()
	defer fake.listRolesPagesWithContextMutex.RUnlock()
	return len(fake.listRolesPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListRolesPagesWithContextCalls(stub func(context.Context, *iam.ListRolesInput, func(*iam.ListRolesOutput, bool) bool, ...request.Option) error) {
	fake.listRolesPagesWithContextMutex.Lock()
	defer fake.listRolesPagesWithContextMutex.Unlock()
	fake.ListRolesPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListRolesPagesWithContextArgsForCall(i int) (context.Context, *iam.ListRolesInput, func(*iam.ListRolesOutput, bool) bool, []request.Option) {
	fake.listRolesPagesWithContextMutex.RLock()
	defer fake.listRolesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listRolesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListRolesPagesWithContextReturns(result1 error) {
	fake.listRolesPagesWithContextMutex.Lock()
	defer fake.listRolesPagesWithContextMutex.Unlock()
	fake.ListRolesPagesWithContextStub = nil
	fake.listRolesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListRolesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listRolesPagesWithContextMutex.Lock()
	defer fake.listRolesPagesWithContextMutex.Unlock()
	fake.ListRolesPagesWithContextStub = nil
	if fake.listRolesPagesWithContextReturnsOnCall == nil {
		fake.listRolesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listRolesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListRolesRequest(arg1 *iam.ListRolesInput) (*request.Request, *iam.ListRolesOutput) {
	fake.listRolesRequestMutex.Lock()
	ret, specificReturn := fake.listRolesRequestReturnsOnCall[len(fake.listRolesRequestArgsForCall)]
	fake.listRolesRequestArgsForCall = append(fake.listRolesRequestArgsForCall, struct {
		arg1 *iam.ListRolesInput
	}{arg1})
	fake.recordInvocation("ListRolesRequest", []interface{}{arg1})
	fake.listRolesRequestMutex.Unlock()
	if fake.ListRolesRequestStub != nil {
		return fake.ListRolesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listRolesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListRolesRequestCallCount() int {
	fake.listRolesRequestMutex.RLock()
	defer fake.listRolesRequestMutex.RUnlock()
	return len(fake.listRolesRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListRolesRequestCalls(stub func(*iam.ListRolesInput) (*request.Request, *iam.ListRolesOutput)) {
	fake.listRolesRequestMutex.Lock()
	defer fake.listRolesRequestMutex.Unlock()
	fake.ListRolesRequestStub = stub
}

func (fake *FakeIAMAPI) ListRolesRequestArgsForCall(i int) *iam.ListRolesInput {
	fake.listRolesRequestMutex.RLock()
	defer fake.listRolesRequestMutex.RUnlock()
	argsForCall := fake.listRolesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListRolesRequestReturns(result1 *request.Request, result2 *iam.ListRolesOutput) {
	fake.listRolesRequestMutex.Lock()
	defer fake.listRolesRequestMutex.Unlock()
	fake.ListRolesRequestStub = nil
	fake.listRolesRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListRolesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRolesRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListRolesOutput) {
	fake.listRolesRequestMutex.Lock()
	defer fake.listRolesRequestMutex.Unlock()
	fake.ListRolesRequestStub = nil
	if fake.listRolesRequestReturnsOnCall == nil {
		fake.listRolesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListRolesOutput
		})
	}
	fake.listRolesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListRolesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRolesWithContext(arg1 context.Context, arg2 *iam.ListRolesInput, arg3 ...request.Option) (*iam.ListRolesOutput, error) {
	fake.listRolesWithContextMutex.Lock()
	ret, specificReturn := fake.listRolesWithContextReturnsOnCall[len(fake.listRolesWithContextArgsForCall)]
	fake.listRolesWithContextArgsForCall = append(fake.listRolesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListRolesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListRolesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listRolesWithContextMutex.Unlock()
	if fake.ListRolesWithContextStub != nil {
		return fake.ListRolesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listRolesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListRolesWithContextCallCount() int {
	fake.listRolesWithContextMutex.RLock()
	defer fake.listRolesWithContextMutex.RUnlock()
	return len(fake.listRolesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListRolesWithContextCalls(stub func(context.Context, *iam.ListRolesInput, ...request.Option) (*iam.ListRolesOutput, error)) {
	fake.listRolesWithContextMutex.Lock()
	defer fake.listRolesWithContextMutex.Unlock()
	fake.ListRolesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListRolesWithContextArgsForCall(i int) (context.Context, *iam.ListRolesInput, []request.Option) {
	fake.listRolesWithContextMutex.RLock()
	defer fake.listRolesWithContextMutex.RUnlock()
	argsForCall := fake.listRolesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListRolesWithContextReturns(result1 *iam.ListRolesOutput, result2 error) {
	fake.listRolesWithContextMutex.Lock()
	defer fake.listRolesWithContextMutex.Unlock()
	fake.ListRolesWithContextStub = nil
	fake.listRolesWithContextReturns = struct {
		result1 *iam.ListRolesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListRolesWithContextReturnsOnCall(i int, result1 *iam.ListRolesOutput, result2 error) {
	fake.listRolesWithContextMutex.Lock()
	defer fake.listRolesWithContextMutex.Unlock()
	fake.ListRolesWithContextStub = nil
	if fake.listRolesWithContextReturnsOnCall == nil {
		fake.listRolesWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListRolesOutput
			result2 error
		})
	}
	fake.listRolesWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListRolesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSAMLProviders(arg1 *iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error) {
	fake.listSAMLProvidersMutex.Lock()
	ret, specificReturn := fake.listSAMLProvidersReturnsOnCall[len(fake.listSAMLProvidersArgsForCall)]
	fake.listSAMLProvidersArgsForCall = append(fake.listSAMLProvidersArgsForCall, struct {
		arg1 *iam.ListSAMLProvidersInput
	}{arg1})
	fake.recordInvocation("ListSAMLProviders", []interface{}{arg1})
	fake.listSAMLProvidersMutex.Unlock()
	if fake.ListSAMLProvidersStub != nil {
		return fake.ListSAMLProvidersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSAMLProvidersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListSAMLProvidersCallCount() int {
	fake.listSAMLProvidersMutex.RLock()
	defer fake.listSAMLProvidersMutex.RUnlock()
	return len(fake.listSAMLProvidersArgsForCall)
}

func (fake *FakeIAMAPI) ListSAMLProvidersCalls(stub func(*iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error)) {
	fake.listSAMLProvidersMutex.Lock()
	defer fake.listSAMLProvidersMutex.Unlock()
	fake.ListSAMLProvidersStub = stub
}

func (fake *FakeIAMAPI) ListSAMLProvidersArgsForCall(i int) *iam.ListSAMLProvidersInput {
	fake.listSAMLProvidersMutex.RLock()
	defer fake.listSAMLProvidersMutex.RUnlock()
	argsForCall := fake.listSAMLProvidersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListSAMLProvidersReturns(result1 *iam.ListSAMLProvidersOutput, result2 error) {
	fake.listSAMLProvidersMutex.Lock()
	defer fake.listSAMLProvidersMutex.Unlock()
	fake.ListSAMLProvidersStub = nil
	fake.listSAMLProvidersReturns = struct {
		result1 *iam.ListSAMLProvidersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSAMLProvidersReturnsOnCall(i int, result1 *iam.ListSAMLProvidersOutput, result2 error) {
	fake.listSAMLProvidersMutex.Lock()
	defer fake.listSAMLProvidersMutex.Unlock()
	fake.ListSAMLProvidersStub = nil
	if fake.listSAMLProvidersReturnsOnCall == nil {
		fake.listSAMLProvidersReturnsOnCall = make(map[int]struct {
			result1 *iam.ListSAMLProvidersOutput
			result2 error
		})
	}
	fake.listSAMLProvidersReturnsOnCall[i] = struct {
		result1 *iam.ListSAMLProvidersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSAMLProvidersRequest(arg1 *iam.ListSAMLProvidersInput) (*request.Request, *iam.ListSAMLProvidersOutput) {
	fake.listSAMLProvidersRequestMutex.Lock()
	ret, specificReturn := fake.listSAMLProvidersRequestReturnsOnCall[len(fake.listSAMLProvidersRequestArgsForCall)]
	fake.listSAMLProvidersRequestArgsForCall = append(fake.listSAMLProvidersRequestArgsForCall, struct {
		arg1 *iam.ListSAMLProvidersInput
	}{arg1})
	fake.recordInvocation("ListSAMLProvidersRequest", []interface{}{arg1})
	fake.listSAMLProvidersRequestMutex.Unlock()
	if fake.ListSAMLProvidersRequestStub != nil {
		return fake.ListSAMLProvidersRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSAMLProvidersRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListSAMLProvidersRequestCallCount() int {
	fake.listSAMLProvidersRequestMutex.RLock()
	defer fake.listSAMLProvidersRequestMutex.RUnlock()
	return len(fake.listSAMLProvidersRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListSAMLProvidersRequestCalls(stub func(*iam.ListSAMLProvidersInput) (*request.Request, *iam.ListSAMLProvidersOutput)) {
	fake.listSAMLProvidersRequestMutex.Lock()
	defer fake.listSAMLProvidersRequestMutex.Unlock()
	fake.ListSAMLProvidersRequestStub = stub
}

func (fake *FakeIAMAPI) ListSAMLProvidersRequestArgsForCall(i int) *iam.ListSAMLProvidersInput {
	fake.listSAMLProvidersRequestMutex.RLock()
	defer fake.listSAMLProvidersRequestMutex.RUnlock()
	argsForCall := fake.listSAMLProvidersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListSAMLProvidersRequestReturns(result1 *request.Request, result2 *iam.ListSAMLProvidersOutput) {
	fake.listSAMLProvidersRequestMutex.Lock()
	defer fake.listSAMLProvidersRequestMutex.Unlock()
	fake.ListSAMLProvidersRequestStub = nil
	fake.listSAMLProvidersRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListSAMLProvidersOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSAMLProvidersRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListSAMLProvidersOutput) {
	fake.listSAMLProvidersRequestMutex.Lock()
	defer fake.listSAMLProvidersRequestMutex.Unlock()
	fake.ListSAMLProvidersRequestStub = nil
	if fake.listSAMLProvidersRequestReturnsOnCall == nil {
		fake.listSAMLProvidersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListSAMLProvidersOutput
		})
	}
	fake.listSAMLProvidersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListSAMLProvidersOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSAMLProvidersWithContext(arg1 context.Context, arg2 *iam.ListSAMLProvidersInput, arg3 ...request.Option) (*iam.ListSAMLProvidersOutput, error) {
	fake.listSAMLProvidersWithContextMutex.Lock()
	ret, specificReturn := fake.listSAMLProvidersWithContextReturnsOnCall[len(fake.listSAMLProvidersWithContextArgsForCall)]
	fake.listSAMLProvidersWithContextArgsForCall = append(fake.listSAMLProvidersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListSAMLProvidersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListSAMLProvidersWithContext", []interface{}{arg1, arg2, arg3})
	fake.listSAMLProvidersWithContextMutex.Unlock()
	if fake.ListSAMLProvidersWithContextStub != nil {
		return fake.ListSAMLProvidersWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSAMLProvidersWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListSAMLProvidersWithContextCallCount() int {
	fake.listSAMLProvidersWithContextMutex.RLock()
	defer fake.listSAMLProvidersWithContextMutex.RUnlock()
	return len(fake.listSAMLProvidersWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListSAMLProvidersWithContextCalls(stub func(context.Context, *iam.ListSAMLProvidersInput, ...request.Option) (*iam.ListSAMLProvidersOutput, error)) {
	fake.listSAMLProvidersWithContextMutex.Lock()
	defer fake.listSAMLProvidersWithContextMutex.Unlock()
	fake.ListSAMLProvidersWithContextStub = stub
}

func (fake *FakeIAMAPI) ListSAMLProvidersWithContextArgsForCall(i int) (context.Context, *iam.ListSAMLProvidersInput, []request.Option) {
	fake.listSAMLProvidersWithContextMutex.RLock()
	defer fake.listSAMLProvidersWithContextMutex.RUnlock()
	argsForCall := fake.listSAMLProvidersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListSAMLProvidersWithContextReturns(result1 *iam.ListSAMLProvidersOutput, result2 error) {
	fake.listSAMLProvidersWithContextMutex.Lock()
	defer fake.listSAMLProvidersWithContextMutex.Unlock()
	fake.ListSAMLProvidersWithContextStub = nil
	fake.listSAMLProvidersWithContextReturns = struct {
		result1 *iam.ListSAMLProvidersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSAMLProvidersWithContextReturnsOnCall(i int, result1 *iam.ListSAMLProvidersOutput, result2 error) {
	fake.listSAMLProvidersWithContextMutex.Lock()
	defer fake.listSAMLProvidersWithContextMutex.Unlock()
	fake.ListSAMLProvidersWithContextStub = nil
	if fake.listSAMLProvidersWithContextReturnsOnCall == nil {
		fake.listSAMLProvidersWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListSAMLProvidersOutput
			result2 error
		})
	}
	fake.listSAMLProvidersWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListSAMLProvidersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSSHPublicKeys(arg1 *iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error) {
	fake.listSSHPublicKeysMutex.Lock()
	ret, specificReturn := fake.listSSHPublicKeysReturnsOnCall[len(fake.listSSHPublicKeysArgsForCall)]
	fake.listSSHPublicKeysArgsForCall = append(fake.listSSHPublicKeysArgsForCall, struct {
		arg1 *iam.ListSSHPublicKeysInput
	}{arg1})
	fake.recordInvocation("ListSSHPublicKeys", []interface{}{arg1})
	fake.listSSHPublicKeysMutex.Unlock()
	if fake.ListSSHPublicKeysStub != nil {
		return fake.ListSSHPublicKeysStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSSHPublicKeysReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListSSHPublicKeysCallCount() int {
	fake.listSSHPublicKeysMutex.RLock()
	defer fake.listSSHPublicKeysMutex.RUnlock()
	return len(fake.listSSHPublicKeysArgsForCall)
}

func (fake *FakeIAMAPI) ListSSHPublicKeysCalls(stub func(*iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error)) {
	fake.listSSHPublicKeysMutex.Lock()
	defer fake.listSSHPublicKeysMutex.Unlock()
	fake.ListSSHPublicKeysStub = stub
}

func (fake *FakeIAMAPI) ListSSHPublicKeysArgsForCall(i int) *iam.ListSSHPublicKeysInput {
	fake.listSSHPublicKeysMutex.RLock()
	defer fake.listSSHPublicKeysMutex.RUnlock()
	argsForCall := fake.listSSHPublicKeysArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListSSHPublicKeysReturns(result1 *iam.ListSSHPublicKeysOutput, result2 error) {
	fake.listSSHPublicKeysMutex.Lock()
	defer fake.listSSHPublicKeysMutex.Unlock()
	fake.ListSSHPublicKeysStub = nil
	fake.listSSHPublicKeysReturns = struct {
		result1 *iam.ListSSHPublicKeysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSSHPublicKeysReturnsOnCall(i int, result1 *iam.ListSSHPublicKeysOutput, result2 error) {
	fake.listSSHPublicKeysMutex.Lock()
	defer fake.listSSHPublicKeysMutex.Unlock()
	fake.ListSSHPublicKeysStub = nil
	if fake.listSSHPublicKeysReturnsOnCall == nil {
		fake.listSSHPublicKeysReturnsOnCall = make(map[int]struct {
			result1 *iam.ListSSHPublicKeysOutput
			result2 error
		})
	}
	fake.listSSHPublicKeysReturnsOnCall[i] = struct {
		result1 *iam.ListSSHPublicKeysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSSHPublicKeysPages(arg1 *iam.ListSSHPublicKeysInput, arg2 func(*iam.ListSSHPublicKeysOutput, bool) bool) error {
	fake.listSSHPublicKeysPagesMutex.Lock()
	ret, specificReturn := fake.listSSHPublicKeysPagesReturnsOnCall[len(fake.listSSHPublicKeysPagesArgsForCall)]
	fake.listSSHPublicKeysPagesArgsForCall = append(fake.listSSHPublicKeysPagesArgsForCall, struct {
		arg1 *iam.ListSSHPublicKeysInput
		arg2 func(*iam.ListSSHPublicKeysOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListSSHPublicKeysPages", []interface{}{arg1, arg2})
	fake.listSSHPublicKeysPagesMutex.Unlock()
	if fake.ListSSHPublicKeysPagesStub != nil {
		return fake.ListSSHPublicKeysPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listSSHPublicKeysPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListSSHPublicKeysPagesCallCount() int {
	fake.listSSHPublicKeysPagesMutex.RLock()
	defer fake.listSSHPublicKeysPagesMutex.RUnlock()
	return len(fake.listSSHPublicKeysPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListSSHPublicKeysPagesCalls(stub func(*iam.ListSSHPublicKeysInput, func(*iam.ListSSHPublicKeysOutput, bool) bool) error) {
	fake.listSSHPublicKeysPagesMutex.Lock()
	defer fake.listSSHPublicKeysPagesMutex.Unlock()
	fake.ListSSHPublicKeysPagesStub = stub
}

func (fake *FakeIAMAPI) ListSSHPublicKeysPagesArgsForCall(i int) (*iam.ListSSHPublicKeysInput, func(*iam.ListSSHPublicKeysOutput, bool) bool) {
	fake.listSSHPublicKeysPagesMutex.RLock()
	defer fake.listSSHPublicKeysPagesMutex.RUnlock()
	argsForCall := fake.listSSHPublicKeysPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListSSHPublicKeysPagesReturns(result1 error) {
	fake.listSSHPublicKeysPagesMutex.Lock()
	defer fake.listSSHPublicKeysPagesMutex.Unlock()
	fake.ListSSHPublicKeysPagesStub = nil
	fake.listSSHPublicKeysPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListSSHPublicKeysPagesReturnsOnCall(i int, result1 error) {
	fake.listSSHPublicKeysPagesMutex.Lock()
	defer fake.listSSHPublicKeysPagesMutex.Unlock()
	fake.ListSSHPublicKeysPagesStub = nil
	if fake.listSSHPublicKeysPagesReturnsOnCall == nil {
		fake.listSSHPublicKeysPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listSSHPublicKeysPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListSSHPublicKeysPagesWithContext(arg1 context.Context, arg2 *iam.ListSSHPublicKeysInput, arg3 func(*iam.ListSSHPublicKeysOutput, bool) bool, arg4 ...request.Option) error {
	fake.listSSHPublicKeysPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listSSHPublicKeysPagesWithContextReturnsOnCall[len(fake.listSSHPublicKeysPagesWithContextArgsForCall)]
	fake.listSSHPublicKeysPagesWithContextArgsForCall = append(fake.listSSHPublicKeysPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListSSHPublicKeysInput
		arg3 func(*iam.ListSSHPublicKeysOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListSSHPublicKeysPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listSSHPublicKeysPagesWithContextMutex.Unlock()
	if fake.ListSSHPublicKeysPagesWithContextStub != nil {
		return fake.ListSSHPublicKeysPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listSSHPublicKeysPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListSSHPublicKeysPagesWithContextCallCount() int {
	fake.listSSHPublicKeysPagesWithContextMutex.RLock()
	defer fake.listSSHPublicKeysPagesWithContextMutex.RUnlock()
	return len(fake.listSSHPublicKeysPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListSSHPublicKeysPagesWithContextCalls(stub func(context.Context, *iam.ListSSHPublicKeysInput, func(*iam.ListSSHPublicKeysOutput, bool) bool, ...request.Option) error) {
	fake.listSSHPublicKeysPagesWithContextMutex.Lock()
	defer fake.listSSHPublicKeysPagesWithContextMutex.Unlock()
	fake.ListSSHPublicKeysPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListSSHPublicKeysPagesWithContextArgsForCall(i int) (context.Context, *iam.ListSSHPublicKeysInput, func(*iam.ListSSHPublicKeysOutput, bool) bool, []request.Option) {
	fake.listSSHPublicKeysPagesWithContextMutex.RLock()
	defer fake.listSSHPublicKeysPagesWithContextMutex.RUnlock()
	argsForCall := fake.listSSHPublicKeysPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListSSHPublicKeysPagesWithContextReturns(result1 error) {
	fake.listSSHPublicKeysPagesWithContextMutex.Lock()
	defer fake.listSSHPublicKeysPagesWithContextMutex.Unlock()
	fake.ListSSHPublicKeysPagesWithContextStub = nil
	fake.listSSHPublicKeysPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListSSHPublicKeysPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listSSHPublicKeysPagesWithContextMutex.Lock()
	defer fake.listSSHPublicKeysPagesWithContextMutex.Unlock()
	fake.ListSSHPublicKeysPagesWithContextStub = nil
	if fake.listSSHPublicKeysPagesWithContextReturnsOnCall == nil {
		fake.listSSHPublicKeysPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listSSHPublicKeysPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListSSHPublicKeysRequest(arg1 *iam.ListSSHPublicKeysInput) (*request.Request, *iam.ListSSHPublicKeysOutput) {
	fake.listSSHPublicKeysRequestMutex.Lock()
	ret, specificReturn := fake.listSSHPublicKeysRequestReturnsOnCall[len(fake.listSSHPublicKeysRequestArgsForCall)]
	fake.listSSHPublicKeysRequestArgsForCall = append(fake.listSSHPublicKeysRequestArgsForCall, struct {
		arg1 *iam.ListSSHPublicKeysInput
	}{arg1})
	fake.recordInvocation("ListSSHPublicKeysRequest", []interface{}{arg1})
	fake.listSSHPublicKeysRequestMutex.Unlock()
	if fake.ListSSHPublicKeysRequestStub != nil {
		return fake.ListSSHPublicKeysRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSSHPublicKeysRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListSSHPublicKeysRequestCallCount() int {
	fake.listSSHPublicKeysRequestMutex.RLock()
	defer fake.listSSHPublicKeysRequestMutex.RUnlock()
	return len(fake.listSSHPublicKeysRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListSSHPublicKeysRequestCalls(stub func(*iam.ListSSHPublicKeysInput) (*request.Request, *iam.ListSSHPublicKeysOutput)) {
	fake.listSSHPublicKeysRequestMutex.Lock()
	defer fake.listSSHPublicKeysRequestMutex.Unlock()
	fake.ListSSHPublicKeysRequestStub = stub
}

func (fake *FakeIAMAPI) ListSSHPublicKeysRequestArgsForCall(i int) *iam.ListSSHPublicKeysInput {
	fake.listSSHPublicKeysRequestMutex.RLock()
	defer fake.listSSHPublicKeysRequestMutex.RUnlock()
	argsForCall := fake.listSSHPublicKeysRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListSSHPublicKeysRequestReturns(result1 *request.Request, result2 *iam.ListSSHPublicKeysOutput) {
	fake.listSSHPublicKeysRequestMutex.Lock()
	defer fake.listSSHPublicKeysRequestMutex.Unlock()
	fake.ListSSHPublicKeysRequestStub = nil
	fake.listSSHPublicKeysRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListSSHPublicKeysOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSSHPublicKeysRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListSSHPublicKeysOutput) {
	fake.listSSHPublicKeysRequestMutex.Lock()
	defer fake.listSSHPublicKeysRequestMutex.Unlock()
	fake.ListSSHPublicKeysRequestStub = nil
	if fake.listSSHPublicKeysRequestReturnsOnCall == nil {
		fake.listSSHPublicKeysRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListSSHPublicKeysOutput
		})
	}
	fake.listSSHPublicKeysRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListSSHPublicKeysOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSSHPublicKeysWithContext(arg1 context.Context, arg2 *iam.ListSSHPublicKeysInput, arg3 ...request.Option) (*iam.ListSSHPublicKeysOutput, error) {
	fake.listSSHPublicKeysWithContextMutex.Lock()
	ret, specificReturn := fake.listSSHPublicKeysWithContextReturnsOnCall[len(fake.listSSHPublicKeysWithContextArgsForCall)]
	fake.listSSHPublicKeysWithContextArgsForCall = append(fake.listSSHPublicKeysWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListSSHPublicKeysInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListSSHPublicKeysWithContext", []interface{}{arg1, arg2, arg3})
	fake.listSSHPublicKeysWithContextMutex.Unlock()
	if fake.ListSSHPublicKeysWithContextStub != nil {
		return fake.ListSSHPublicKeysWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSSHPublicKeysWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListSSHPublicKeysWithContextCallCount() int {
	fake.listSSHPublicKeysWithContextMutex.RLock()
	defer fake.listSSHPublicKeysWithContextMutex.RUnlock()
	return len(fake.listSSHPublicKeysWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListSSHPublicKeysWithContextCalls(stub func(context.Context, *iam.ListSSHPublicKeysInput, ...request.Option) (*iam.ListSSHPublicKeysOutput, error)) {
	fake.listSSHPublicKeysWithContextMutex.Lock()
	defer fake.listSSHPublicKeysWithContextMutex.Unlock()
	fake.ListSSHPublicKeysWithContextStub = stub
}

func (fake *FakeIAMAPI) ListSSHPublicKeysWithContextArgsForCall(i int) (context.Context, *iam.ListSSHPublicKeysInput, []request.Option) {
	fake.listSSHPublicKeysWithContextMutex.RLock()
	defer fake.listSSHPublicKeysWithContextMutex.RUnlock()
	argsForCall := fake.listSSHPublicKeysWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListSSHPublicKeysWithContextReturns(result1 *iam.ListSSHPublicKeysOutput, result2 error) {
	fake.listSSHPublicKeysWithContextMutex.Lock()
	defer fake.listSSHPublicKeysWithContextMutex.Unlock()
	fake.ListSSHPublicKeysWithContextStub = nil
	fake.listSSHPublicKeysWithContextReturns = struct {
		result1 *iam.ListSSHPublicKeysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSSHPublicKeysWithContextReturnsOnCall(i int, result1 *iam.ListSSHPublicKeysOutput, result2 error) {
	fake.listSSHPublicKeysWithContextMutex.Lock()
	defer fake.listSSHPublicKeysWithContextMutex.Unlock()
	fake.ListSSHPublicKeysWithContextStub = nil
	if fake.listSSHPublicKeysWithContextReturnsOnCall == nil {
		fake.listSSHPublicKeysWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListSSHPublicKeysOutput
			result2 error
		})
	}
	fake.listSSHPublicKeysWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListSSHPublicKeysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListServerCertificates(arg1 *iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error) {
	fake.listServerCertificatesMutex.Lock()
	ret, specificReturn := fake.listServerCertificatesReturnsOnCall[len(fake.listServerCertificatesArgsForCall)]
	fake.listServerCertificatesArgsForCall = append(fake.listServerCertificatesArgsForCall, struct {
		arg1 *iam.ListServerCertificatesInput
	}{arg1})
	fake.recordInvocation("ListServerCertificates", []interface{}{arg1})
	fake.listServerCertificatesMutex.Unlock()
	if fake.ListServerCertificatesStub != nil {
		return fake.ListServerCertificatesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServerCertificatesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListServerCertificatesCallCount() int {
	fake.listServerCertificatesMutex.RLock()
	defer fake.listServerCertificatesMutex.RUnlock()
	return len(fake.listServerCertificatesArgsForCall)
}

func (fake *FakeIAMAPI) ListServerCertificatesCalls(stub func(*iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error)) {
	fake.listServerCertificatesMutex.Lock()
	defer fake.listServerCertificatesMutex.Unlock()
	fake.ListServerCertificatesStub = stub
}

func (fake *FakeIAMAPI) ListServerCertificatesArgsForCall(i int) *iam.ListServerCertificatesInput {
	fake.listServerCertificatesMutex.RLock()
	defer fake.listServerCertificatesMutex.RUnlock()
	argsForCall := fake.listServerCertificatesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListServerCertificatesReturns(result1 *iam.ListServerCertificatesOutput, result2 error) {
	fake.listServerCertificatesMutex.Lock()
	defer fake.listServerCertificatesMutex.Unlock()
	fake.ListServerCertificatesStub = nil
	fake.listServerCertificatesReturns = struct {
		result1 *iam.ListServerCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListServerCertificatesReturnsOnCall(i int, result1 *iam.ListServerCertificatesOutput, result2 error) {
	fake.listServerCertificatesMutex.Lock()
	defer fake.listServerCertificatesMutex.Unlock()
	fake.ListServerCertificatesStub = nil
	if fake.listServerCertificatesReturnsOnCall == nil {
		fake.listServerCertificatesReturnsOnCall = make(map[int]struct {
			result1 *iam.ListServerCertificatesOutput
			result2 error
		})
	}
	fake.listServerCertificatesReturnsOnCall[i] = struct {
		result1 *iam.ListServerCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListServerCertificatesPages(arg1 *iam.ListServerCertificatesInput, arg2 func(*iam.ListServerCertificatesOutput, bool) bool) error {
	fake.listServerCertificatesPagesMutex.Lock()
	ret, specificReturn := fake.listServerCertificatesPagesReturnsOnCall[len(fake.listServerCertificatesPagesArgsForCall)]
	fake.listServerCertificatesPagesArgsForCall = append(fake.listServerCertificatesPagesArgsForCall, struct {
		arg1 *iam.ListServerCertificatesInput
		arg2 func(*iam.ListServerCertificatesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListServerCertificatesPages", []interface{}{arg1, arg2})
	fake.listServerCertificatesPagesMutex.Unlock()
	if fake.ListServerCertificatesPagesStub != nil {
		return fake.ListServerCertificatesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listServerCertificatesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListServerCertificatesPagesCallCount() int {
	fake.listServerCertificatesPagesMutex.RLock()
	defer fake.listServerCertificatesPagesMutex.RUnlock()
	return len(fake.listServerCertificatesPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListServerCertificatesPagesCalls(stub func(*iam.ListServerCertificatesInput, func(*iam.ListServerCertificatesOutput, bool) bool) error) {
	fake.listServerCertificatesPagesMutex.Lock()
	defer fake.listServerCertificatesPagesMutex.Unlock()
	fake.ListServerCertificatesPagesStub = stub
}

func (fake *FakeIAMAPI) ListServerCertificatesPagesArgsForCall(i int) (*iam.ListServerCertificatesInput, func(*iam.ListServerCertificatesOutput, bool) bool) {
	fake.listServerCertificatesPagesMutex.RLock()
	defer fake.listServerCertificatesPagesMutex.RUnlock()
	argsForCall := fake.listServerCertificatesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListServerCertificatesPagesReturns(result1 error) {
	fake.listServerCertificatesPagesMutex.Lock()
	defer fake.listServerCertificatesPagesMutex.Unlock()
	fake.ListServerCertificatesPagesStub = nil
	fake.listServerCertificatesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListServerCertificatesPagesReturnsOnCall(i int, result1 error) {
	fake.listServerCertificatesPagesMutex.Lock()
	defer fake.listServerCertificatesPagesMutex.Unlock()
	fake.ListServerCertificatesPagesStub = nil
	if fake.listServerCertificatesPagesReturnsOnCall == nil {
		fake.listServerCertificatesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listServerCertificatesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListServerCertificatesPagesWithContext(arg1 context.Context, arg2 *iam.ListServerCertificatesInput, arg3 func(*iam.ListServerCertificatesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listServerCertificatesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listServerCertificatesPagesWithContextReturnsOnCall[len(fake.listServerCertificatesPagesWithContextArgsForCall)]
	fake.listServerCertificatesPagesWithContextArgsForCall = append(fake.listServerCertificatesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListServerCertificatesInput
		arg3 func(*iam.ListServerCertificatesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListServerCertificatesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listServerCertificatesPagesWithContextMutex.Unlock()
	if fake.ListServerCertificatesPagesWithContextStub != nil {
		return fake.ListServerCertificatesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listServerCertificatesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListServerCertificatesPagesWithContextCallCount() int {
	fake.listServerCertificatesPagesWithContextMutex.RLock()
	defer fake.listServerCertificatesPagesWithContextMutex.RUnlock()
	return len(fake.listServerCertificatesPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListServerCertificatesPagesWithContextCalls(stub func(context.Context, *iam.ListServerCertificatesInput, func(*iam.ListServerCertificatesOutput, bool) bool, ...request.Option) error) {
	fake.listServerCertificatesPagesWithContextMutex.Lock()
	defer fake.listServerCertificatesPagesWithContextMutex.Unlock()
	fake.ListServerCertificatesPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListServerCertificatesPagesWithContextArgsForCall(i int) (context.Context, *iam.ListServerCertificatesInput, func(*iam.ListServerCertificatesOutput, bool) bool, []request.Option) {
	fake.listServerCertificatesPagesWithContextMutex.RLock()
	defer fake.listServerCertificatesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listServerCertificatesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListServerCertificatesPagesWithContextReturns(result1 error) {
	fake.listServerCertificatesPagesWithContextMutex.Lock()
	defer fake.listServerCertificatesPagesWithContextMutex.Unlock()
	fake.ListServerCertificatesPagesWithContextStub = nil
	fake.listServerCertificatesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListServerCertificatesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listServerCertificatesPagesWithContextMutex.Lock()
	defer fake.listServerCertificatesPagesWithContextMutex.Unlock()
	fake.ListServerCertificatesPagesWithContextStub = nil
	if fake.listServerCertificatesPagesWithContextReturnsOnCall == nil {
		fake.listServerCertificatesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listServerCertificatesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListServerCertificatesRequest(arg1 *iam.ListServerCertificatesInput) (*request.Request, *iam.ListServerCertificatesOutput) {
	fake.listServerCertificatesRequestMutex.Lock()
	ret, specificReturn := fake.listServerCertificatesRequestReturnsOnCall[len(fake.listServerCertificatesRequestArgsForCall)]
	fake.listServerCertificatesRequestArgsForCall = append(fake.listServerCertificatesRequestArgsForCall, struct {
		arg1 *iam.ListServerCertificatesInput
	}{arg1})
	fake.recordInvocation("ListServerCertificatesRequest", []interface{}{arg1})
	fake.listServerCertificatesRequestMutex.Unlock()
	if fake.ListServerCertificatesRequestStub != nil {
		return fake.ListServerCertificatesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServerCertificatesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListServerCertificatesRequestCallCount() int {
	fake.listServerCertificatesRequestMutex.RLock()
	defer fake.listServerCertificatesRequestMutex.RUnlock()
	return len(fake.listServerCertificatesRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListServerCertificatesRequestCalls(stub func(*iam.ListServerCertificatesInput) (*request.Request, *iam.ListServerCertificatesOutput)) {
	fake.listServerCertificatesRequestMutex.Lock()
	defer fake.listServerCertificatesRequestMutex.Unlock()
	fake.ListServerCertificatesRequestStub = stub
}

func (fake *FakeIAMAPI) ListServerCertificatesRequestArgsForCall(i int) *iam.ListServerCertificatesInput {
	fake.listServerCertificatesRequestMutex.RLock()
	defer fake.listServerCertificatesRequestMutex.RUnlock()
	argsForCall := fake.listServerCertificatesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListServerCertificatesRequestReturns(result1 *request.Request, result2 *iam.ListServerCertificatesOutput) {
	fake.listServerCertificatesRequestMutex.Lock()
	defer fake.listServerCertificatesRequestMutex.Unlock()
	fake.ListServerCertificatesRequestStub = nil
	fake.listServerCertificatesRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListServerCertificatesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListServerCertificatesRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListServerCertificatesOutput) {
	fake.listServerCertificatesRequestMutex.Lock()
	defer fake.listServerCertificatesRequestMutex.Unlock()
	fake.ListServerCertificatesRequestStub = nil
	if fake.listServerCertificatesRequestReturnsOnCall == nil {
		fake.listServerCertificatesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListServerCertificatesOutput
		})
	}
	fake.listServerCertificatesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListServerCertificatesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListServerCertificatesWithContext(arg1 context.Context, arg2 *iam.ListServerCertificatesInput, arg3 ...request.Option) (*iam.ListServerCertificatesOutput, error) {
	fake.listServerCertificatesWithContextMutex.Lock()
	ret, specificReturn := fake.listServerCertificatesWithContextReturnsOnCall[len(fake.listServerCertificatesWithContextArgsForCall)]
	fake.listServerCertificatesWithContextArgsForCall = append(fake.listServerCertificatesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListServerCertificatesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListServerCertificatesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listServerCertificatesWithContextMutex.Unlock()
	if fake.ListServerCertificatesWithContextStub != nil {
		return fake.ListServerCertificatesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServerCertificatesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListServerCertificatesWithContextCallCount() int {
	fake.listServerCertificatesWithContextMutex.RLock()
	defer fake.listServerCertificatesWithContextMutex.RUnlock()
	return len(fake.listServerCertificatesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListServerCertificatesWithContextCalls(stub func(context.Context, *iam.ListServerCertificatesInput, ...request.Option) (*iam.ListServerCertificatesOutput, error)) {
	fake.listServerCertificatesWithContextMutex.Lock()
	defer fake.listServerCertificatesWithContextMutex.Unlock()
	fake.ListServerCertificatesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListServerCertificatesWithContextArgsForCall(i int) (context.Context, *iam.ListServerCertificatesInput, []request.Option) {
	fake.listServerCertificatesWithContextMutex.RLock()
	defer fake.listServerCertificatesWithContextMutex.RUnlock()
	argsForCall := fake.listServerCertificatesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListServerCertificatesWithContextReturns(result1 *iam.ListServerCertificatesOutput, result2 error) {
	fake.listServerCertificatesWithContextMutex.Lock()
	defer fake.listServerCertificatesWithContextMutex.Unlock()
	fake.ListServerCertificatesWithContextStub = nil
	fake.listServerCertificatesWithContextReturns = struct {
		result1 *iam.ListServerCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListServerCertificatesWithContextReturnsOnCall(i int, result1 *iam.ListServerCertificatesOutput, result2 error) {
	fake.listServerCertificatesWithContextMutex.Lock()
	defer fake.listServerCertificatesWithContextMutex.Unlock()
	fake.ListServerCertificatesWithContextStub = nil
	if fake.listServerCertificatesWithContextReturnsOnCall == nil {
		fake.listServerCertificatesWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListServerCertificatesOutput
			result2 error
		})
	}
	fake.listServerCertificatesWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListServerCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentials(arg1 *iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error) {
	fake.listServiceSpecificCredentialsMutex.Lock()
	ret, specificReturn := fake.listServiceSpecificCredentialsReturnsOnCall[len(fake.listServiceSpecificCredentialsArgsForCall)]
	fake.listServiceSpecificCredentialsArgsForCall = append(fake.listServiceSpecificCredentialsArgsForCall, struct {
		arg1 *iam.ListServiceSpecificCredentialsInput
	}{arg1})
	fake.recordInvocation("ListServiceSpecificCredentials", []interface{}{arg1})
	fake.listServiceSpecificCredentialsMutex.Unlock()
	if fake.ListServiceSpecificCredentialsStub != nil {
		return fake.ListServiceSpecificCredentialsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServiceSpecificCredentialsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentialsCallCount() int {
	fake.listServiceSpecificCredentialsMutex.RLock()
	defer fake.listServiceSpecificCredentialsMutex.RUnlock()
	return len(fake.listServiceSpecificCredentialsArgsForCall)
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentialsCalls(stub func(*iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error)) {
	fake.listServiceSpecificCredentialsMutex.Lock()
	defer fake.listServiceSpecificCredentialsMutex.Unlock()
	fake.ListServiceSpecificCredentialsStub = stub
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentialsArgsForCall(i int) *iam.ListServiceSpecificCredentialsInput {
	fake.listServiceSpecificCredentialsMutex.RLock()
	defer fake.listServiceSpecificCredentialsMutex.RUnlock()
	argsForCall := fake.listServiceSpecificCredentialsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentialsReturns(result1 *iam.ListServiceSpecificCredentialsOutput, result2 error) {
	fake.listServiceSpecificCredentialsMutex.Lock()
	defer fake.listServiceSpecificCredentialsMutex.Unlock()
	fake.ListServiceSpecificCredentialsStub = nil
	fake.listServiceSpecificCredentialsReturns = struct {
		result1 *iam.ListServiceSpecificCredentialsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentialsReturnsOnCall(i int, result1 *iam.ListServiceSpecificCredentialsOutput, result2 error) {
	fake.listServiceSpecificCredentialsMutex.Lock()
	defer fake.listServiceSpecificCredentialsMutex.Unlock()
	fake.ListServiceSpecificCredentialsStub = nil
	if fake.listServiceSpecificCredentialsReturnsOnCall == nil {
		fake.listServiceSpecificCredentialsReturnsOnCall = make(map[int]struct {
			result1 *iam.ListServiceSpecificCredentialsOutput
			result2 error
		})
	}
	fake.listServiceSpecificCredentialsReturnsOnCall[i] = struct {
		result1 *iam.ListServiceSpecificCredentialsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentialsRequest(arg1 *iam.ListServiceSpecificCredentialsInput) (*request.Request, *iam.ListServiceSpecificCredentialsOutput) {
	fake.listServiceSpecificCredentialsRequestMutex.Lock()
	ret, specificReturn := fake.listServiceSpecificCredentialsRequestReturnsOnCall[len(fake.listServiceSpecificCredentialsRequestArgsForCall)]
	fake.listServiceSpecificCredentialsRequestArgsForCall = append(fake.listServiceSpecificCredentialsRequestArgsForCall, struct {
		arg1 *iam.ListServiceSpecificCredentialsInput
	}{arg1})
	fake.recordInvocation("ListServiceSpecificCredentialsRequest", []interface{}{arg1})
	fake.listServiceSpecificCredentialsRequestMutex.Unlock()
	if fake.ListServiceSpecificCredentialsRequestStub != nil {
		return fake.ListServiceSpecificCredentialsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServiceSpecificCredentialsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentialsRequestCallCount() int {
	fake.listServiceSpecificCredentialsRequestMutex.RLock()
	defer fake.listServiceSpecificCredentialsRequestMutex.RUnlock()
	return len(fake.listServiceSpecificCredentialsRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentialsRequestCalls(stub func(*iam.ListServiceSpecificCredentialsInput) (*request.Request, *iam.ListServiceSpecificCredentialsOutput)) {
	fake.listServiceSpecificCredentialsRequestMutex.Lock()
	defer fake.listServiceSpecificCredentialsRequestMutex.Unlock()
	fake.ListServiceSpecificCredentialsRequestStub = stub
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentialsRequestArgsForCall(i int) *iam.ListServiceSpecificCredentialsInput {
	fake.listServiceSpecificCredentialsRequestMutex.RLock()
	defer fake.listServiceSpecificCredentialsRequestMutex.RUnlock()
	argsForCall := fake.listServiceSpecificCredentialsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentialsRequestReturns(result1 *request.Request, result2 *iam.ListServiceSpecificCredentialsOutput) {
	fake.listServiceSpecificCredentialsRequestMutex.Lock()
	defer fake.listServiceSpecificCredentialsRequestMutex.Unlock()
	fake.ListServiceSpecificCredentialsRequestStub = nil
	fake.listServiceSpecificCredentialsRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListServiceSpecificCredentialsOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentialsRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListServiceSpecificCredentialsOutput) {
	fake.listServiceSpecificCredentialsRequestMutex.Lock()
	defer fake.listServiceSpecificCredentialsRequestMutex.Unlock()
	fake.ListServiceSpecificCredentialsRequestStub = nil
	if fake.listServiceSpecificCredentialsRequestReturnsOnCall == nil {
		fake.listServiceSpecificCredentialsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListServiceSpecificCredentialsOutput
		})
	}
	fake.listServiceSpecificCredentialsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListServiceSpecificCredentialsOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentialsWithContext(arg1 context.Context, arg2 *iam.ListServiceSpecificCredentialsInput, arg3 ...request.Option) (*iam.ListServiceSpecificCredentialsOutput, error) {
	fake.listServiceSpecificCredentialsWithContextMutex.Lock()
	ret, specificReturn := fake.listServiceSpecificCredentialsWithContextReturnsOnCall[len(fake.listServiceSpecificCredentialsWithContextArgsForCall)]
	fake.listServiceSpecificCredentialsWithContextArgsForCall = append(fake.listServiceSpecificCredentialsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListServiceSpecificCredentialsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListServiceSpecificCredentialsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listServiceSpecificCredentialsWithContextMutex.Unlock()
	if fake.ListServiceSpecificCredentialsWithContextStub != nil {
		return fake.ListServiceSpecificCredentialsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServiceSpecificCredentialsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentialsWithContextCallCount() int {
	fake.listServiceSpecificCredentialsWithContextMutex.RLock()
	defer fake.listServiceSpecificCredentialsWithContextMutex.RUnlock()
	return len(fake.listServiceSpecificCredentialsWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentialsWithContextCalls(stub func(context.Context, *iam.ListServiceSpecificCredentialsInput, ...request.Option) (*iam.ListServiceSpecificCredentialsOutput, error)) {
	fake.listServiceSpecificCredentialsWithContextMutex.Lock()
	defer fake.listServiceSpecificCredentialsWithContextMutex.Unlock()
	fake.ListServiceSpecificCredentialsWithContextStub = stub
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentialsWithContextArgsForCall(i int) (context.Context, *iam.ListServiceSpecificCredentialsInput, []request.Option) {
	fake.listServiceSpecificCredentialsWithContextMutex.RLock()
	defer fake.listServiceSpecificCredentialsWithContextMutex.RUnlock()
	argsForCall := fake.listServiceSpecificCredentialsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentialsWithContextReturns(result1 *iam.ListServiceSpecificCredentialsOutput, result2 error) {
	fake.listServiceSpecificCredentialsWithContextMutex.Lock()
	defer fake.listServiceSpecificCredentialsWithContextMutex.Unlock()
	fake.ListServiceSpecificCredentialsWithContextStub = nil
	fake.listServiceSpecificCredentialsWithContextReturns = struct {
		result1 *iam.ListServiceSpecificCredentialsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListServiceSpecificCredentialsWithContextReturnsOnCall(i int, result1 *iam.ListServiceSpecificCredentialsOutput, result2 error) {
	fake.listServiceSpecificCredentialsWithContextMutex.Lock()
	defer fake.listServiceSpecificCredentialsWithContextMutex.Unlock()
	fake.ListServiceSpecificCredentialsWithContextStub = nil
	if fake.listServiceSpecificCredentialsWithContextReturnsOnCall == nil {
		fake.listServiceSpecificCredentialsWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListServiceSpecificCredentialsOutput
			result2 error
		})
	}
	fake.listServiceSpecificCredentialsWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListServiceSpecificCredentialsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSigningCertificates(arg1 *iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error) {
	fake.listSigningCertificatesMutex.Lock()
	ret, specificReturn := fake.listSigningCertificatesReturnsOnCall[len(fake.listSigningCertificatesArgsForCall)]
	fake.listSigningCertificatesArgsForCall = append(fake.listSigningCertificatesArgsForCall, struct {
		arg1 *iam.ListSigningCertificatesInput
	}{arg1})
	fake.recordInvocation("ListSigningCertificates", []interface{}{arg1})
	fake.listSigningCertificatesMutex.Unlock()
	if fake.ListSigningCertificatesStub != nil {
		return fake.ListSigningCertificatesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSigningCertificatesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListSigningCertificatesCallCount() int {
	fake.listSigningCertificatesMutex.RLock()
	defer fake.listSigningCertificatesMutex.RUnlock()
	return len(fake.listSigningCertificatesArgsForCall)
}

func (fake *FakeIAMAPI) ListSigningCertificatesCalls(stub func(*iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error)) {
	fake.listSigningCertificatesMutex.Lock()
	defer fake.listSigningCertificatesMutex.Unlock()
	fake.ListSigningCertificatesStub = stub
}

func (fake *FakeIAMAPI) ListSigningCertificatesArgsForCall(i int) *iam.ListSigningCertificatesInput {
	fake.listSigningCertificatesMutex.RLock()
	defer fake.listSigningCertificatesMutex.RUnlock()
	argsForCall := fake.listSigningCertificatesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListSigningCertificatesReturns(result1 *iam.ListSigningCertificatesOutput, result2 error) {
	fake.listSigningCertificatesMutex.Lock()
	defer fake.listSigningCertificatesMutex.Unlock()
	fake.ListSigningCertificatesStub = nil
	fake.listSigningCertificatesReturns = struct {
		result1 *iam.ListSigningCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSigningCertificatesReturnsOnCall(i int, result1 *iam.ListSigningCertificatesOutput, result2 error) {
	fake.listSigningCertificatesMutex.Lock()
	defer fake.listSigningCertificatesMutex.Unlock()
	fake.ListSigningCertificatesStub = nil
	if fake.listSigningCertificatesReturnsOnCall == nil {
		fake.listSigningCertificatesReturnsOnCall = make(map[int]struct {
			result1 *iam.ListSigningCertificatesOutput
			result2 error
		})
	}
	fake.listSigningCertificatesReturnsOnCall[i] = struct {
		result1 *iam.ListSigningCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSigningCertificatesPages(arg1 *iam.ListSigningCertificatesInput, arg2 func(*iam.ListSigningCertificatesOutput, bool) bool) error {
	fake.listSigningCertificatesPagesMutex.Lock()
	ret, specificReturn := fake.listSigningCertificatesPagesReturnsOnCall[len(fake.listSigningCertificatesPagesArgsForCall)]
	fake.listSigningCertificatesPagesArgsForCall = append(fake.listSigningCertificatesPagesArgsForCall, struct {
		arg1 *iam.ListSigningCertificatesInput
		arg2 func(*iam.ListSigningCertificatesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListSigningCertificatesPages", []interface{}{arg1, arg2})
	fake.listSigningCertificatesPagesMutex.Unlock()
	if fake.ListSigningCertificatesPagesStub != nil {
		return fake.ListSigningCertificatesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listSigningCertificatesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListSigningCertificatesPagesCallCount() int {
	fake.listSigningCertificatesPagesMutex.RLock()
	defer fake.listSigningCertificatesPagesMutex.RUnlock()
	return len(fake.listSigningCertificatesPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListSigningCertificatesPagesCalls(stub func(*iam.ListSigningCertificatesInput, func(*iam.ListSigningCertificatesOutput, bool) bool) error) {
	fake.listSigningCertificatesPagesMutex.Lock()
	defer fake.listSigningCertificatesPagesMutex.Unlock()
	fake.ListSigningCertificatesPagesStub = stub
}

func (fake *FakeIAMAPI) ListSigningCertificatesPagesArgsForCall(i int) (*iam.ListSigningCertificatesInput, func(*iam.ListSigningCertificatesOutput, bool) bool) {
	fake.listSigningCertificatesPagesMutex.RLock()
	defer fake.listSigningCertificatesPagesMutex.RUnlock()
	argsForCall := fake.listSigningCertificatesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListSigningCertificatesPagesReturns(result1 error) {
	fake.listSigningCertificatesPagesMutex.Lock()
	defer fake.listSigningCertificatesPagesMutex.Unlock()
	fake.ListSigningCertificatesPagesStub = nil
	fake.listSigningCertificatesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListSigningCertificatesPagesReturnsOnCall(i int, result1 error) {
	fake.listSigningCertificatesPagesMutex.Lock()
	defer fake.listSigningCertificatesPagesMutex.Unlock()
	fake.ListSigningCertificatesPagesStub = nil
	if fake.listSigningCertificatesPagesReturnsOnCall == nil {
		fake.listSigningCertificatesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listSigningCertificatesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListSigningCertificatesPagesWithContext(arg1 context.Context, arg2 *iam.ListSigningCertificatesInput, arg3 func(*iam.ListSigningCertificatesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listSigningCertificatesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listSigningCertificatesPagesWithContextReturnsOnCall[len(fake.listSigningCertificatesPagesWithContextArgsForCall)]
	fake.listSigningCertificatesPagesWithContextArgsForCall = append(fake.listSigningCertificatesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListSigningCertificatesInput
		arg3 func(*iam.ListSigningCertificatesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListSigningCertificatesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listSigningCertificatesPagesWithContextMutex.Unlock()
	if fake.ListSigningCertificatesPagesWithContextStub != nil {
		return fake.ListSigningCertificatesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listSigningCertificatesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListSigningCertificatesPagesWithContextCallCount() int {
	fake.listSigningCertificatesPagesWithContextMutex.RLock()
	defer fake.listSigningCertificatesPagesWithContextMutex.RUnlock()
	return len(fake.listSigningCertificatesPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListSigningCertificatesPagesWithContextCalls(stub func(context.Context, *iam.ListSigningCertificatesInput, func(*iam.ListSigningCertificatesOutput, bool) bool, ...request.Option) error) {
	fake.listSigningCertificatesPagesWithContextMutex.Lock()
	defer fake.listSigningCertificatesPagesWithContextMutex.Unlock()
	fake.ListSigningCertificatesPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListSigningCertificatesPagesWithContextArgsForCall(i int) (context.Context, *iam.ListSigningCertificatesInput, func(*iam.ListSigningCertificatesOutput, bool) bool, []request.Option) {
	fake.listSigningCertificatesPagesWithContextMutex.RLock()
	defer fake.listSigningCertificatesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listSigningCertificatesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListSigningCertificatesPagesWithContextReturns(result1 error) {
	fake.listSigningCertificatesPagesWithContextMutex.Lock()
	defer fake.listSigningCertificatesPagesWithContextMutex.Unlock()
	fake.ListSigningCertificatesPagesWithContextStub = nil
	fake.listSigningCertificatesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListSigningCertificatesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listSigningCertificatesPagesWithContextMutex.Lock()
	defer fake.listSigningCertificatesPagesWithContextMutex.Unlock()
	fake.ListSigningCertificatesPagesWithContextStub = nil
	if fake.listSigningCertificatesPagesWithContextReturnsOnCall == nil {
		fake.listSigningCertificatesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listSigningCertificatesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListSigningCertificatesRequest(arg1 *iam.ListSigningCertificatesInput) (*request.Request, *iam.ListSigningCertificatesOutput) {
	fake.listSigningCertificatesRequestMutex.Lock()
	ret, specificReturn := fake.listSigningCertificatesRequestReturnsOnCall[len(fake.listSigningCertificatesRequestArgsForCall)]
	fake.listSigningCertificatesRequestArgsForCall = append(fake.listSigningCertificatesRequestArgsForCall, struct {
		arg1 *iam.ListSigningCertificatesInput
	}{arg1})
	fake.recordInvocation("ListSigningCertificatesRequest", []interface{}{arg1})
	fake.listSigningCertificatesRequestMutex.Unlock()
	if fake.ListSigningCertificatesRequestStub != nil {
		return fake.ListSigningCertificatesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSigningCertificatesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListSigningCertificatesRequestCallCount() int {
	fake.listSigningCertificatesRequestMutex.RLock()
	defer fake.listSigningCertificatesRequestMutex.RUnlock()
	return len(fake.listSigningCertificatesRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListSigningCertificatesRequestCalls(stub func(*iam.ListSigningCertificatesInput) (*request.Request, *iam.ListSigningCertificatesOutput)) {
	fake.listSigningCertificatesRequestMutex.Lock()
	defer fake.listSigningCertificatesRequestMutex.Unlock()
	fake.ListSigningCertificatesRequestStub = stub
}

func (fake *FakeIAMAPI) ListSigningCertificatesRequestArgsForCall(i int) *iam.ListSigningCertificatesInput {
	fake.listSigningCertificatesRequestMutex.RLock()
	defer fake.listSigningCertificatesRequestMutex.RUnlock()
	argsForCall := fake.listSigningCertificatesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListSigningCertificatesRequestReturns(result1 *request.Request, result2 *iam.ListSigningCertificatesOutput) {
	fake.listSigningCertificatesRequestMutex.Lock()
	defer fake.listSigningCertificatesRequestMutex.Unlock()
	fake.ListSigningCertificatesRequestStub = nil
	fake.listSigningCertificatesRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListSigningCertificatesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSigningCertificatesRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListSigningCertificatesOutput) {
	fake.listSigningCertificatesRequestMutex.Lock()
	defer fake.listSigningCertificatesRequestMutex.Unlock()
	fake.ListSigningCertificatesRequestStub = nil
	if fake.listSigningCertificatesRequestReturnsOnCall == nil {
		fake.listSigningCertificatesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListSigningCertificatesOutput
		})
	}
	fake.listSigningCertificatesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListSigningCertificatesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSigningCertificatesWithContext(arg1 context.Context, arg2 *iam.ListSigningCertificatesInput, arg3 ...request.Option) (*iam.ListSigningCertificatesOutput, error) {
	fake.listSigningCertificatesWithContextMutex.Lock()
	ret, specificReturn := fake.listSigningCertificatesWithContextReturnsOnCall[len(fake.listSigningCertificatesWithContextArgsForCall)]
	fake.listSigningCertificatesWithContextArgsForCall = append(fake.listSigningCertificatesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListSigningCertificatesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListSigningCertificatesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listSigningCertificatesWithContextMutex.Unlock()
	if fake.ListSigningCertificatesWithContextStub != nil {
		return fake.ListSigningCertificatesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSigningCertificatesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListSigningCertificatesWithContextCallCount() int {
	fake.listSigningCertificatesWithContextMutex.RLock()
	defer fake.listSigningCertificatesWithContextMutex.RUnlock()
	return len(fake.listSigningCertificatesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListSigningCertificatesWithContextCalls(stub func(context.Context, *iam.ListSigningCertificatesInput, ...request.Option) (*iam.ListSigningCertificatesOutput, error)) {
	fake.listSigningCertificatesWithContextMutex.Lock()
	defer fake.listSigningCertificatesWithContextMutex.Unlock()
	fake.ListSigningCertificatesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListSigningCertificatesWithContextArgsForCall(i int) (context.Context, *iam.ListSigningCertificatesInput, []request.Option) {
	fake.listSigningCertificatesWithContextMutex.RLock()
	defer fake.listSigningCertificatesWithContextMutex.RUnlock()
	argsForCall := fake.listSigningCertificatesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListSigningCertificatesWithContextReturns(result1 *iam.ListSigningCertificatesOutput, result2 error) {
	fake.listSigningCertificatesWithContextMutex.Lock()
	defer fake.listSigningCertificatesWithContextMutex.Unlock()
	fake.ListSigningCertificatesWithContextStub = nil
	fake.listSigningCertificatesWithContextReturns = struct {
		result1 *iam.ListSigningCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListSigningCertificatesWithContextReturnsOnCall(i int, result1 *iam.ListSigningCertificatesOutput, result2 error) {
	fake.listSigningCertificatesWithContextMutex.Lock()
	defer fake.listSigningCertificatesWithContextMutex.Unlock()
	fake.ListSigningCertificatesWithContextStub = nil
	if fake.listSigningCertificatesWithContextReturnsOnCall == nil {
		fake.listSigningCertificatesWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListSigningCertificatesOutput
			result2 error
		})
	}
	fake.listSigningCertificatesWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListSigningCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUserPolicies(arg1 *iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error) {
	fake.listUserPoliciesMutex.Lock()
	ret, specificReturn := fake.listUserPoliciesReturnsOnCall[len(fake.listUserPoliciesArgsForCall)]
	fake.listUserPoliciesArgsForCall = append(fake.listUserPoliciesArgsForCall, struct {
		arg1 *iam.ListUserPoliciesInput
	}{arg1})
	fake.recordInvocation("ListUserPolicies", []interface{}{arg1})
	fake.listUserPoliciesMutex.Unlock()
	if fake.ListUserPoliciesStub != nil {
		return fake.ListUserPoliciesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUserPoliciesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListUserPoliciesCallCount() int {
	fake.listUserPoliciesMutex.RLock()
	defer fake.listUserPoliciesMutex.RUnlock()
	return len(fake.listUserPoliciesArgsForCall)
}

func (fake *FakeIAMAPI) ListUserPoliciesCalls(stub func(*iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error)) {
	fake.listUserPoliciesMutex.Lock()
	defer fake.listUserPoliciesMutex.Unlock()
	fake.ListUserPoliciesStub = stub
}

func (fake *FakeIAMAPI) ListUserPoliciesArgsForCall(i int) *iam.ListUserPoliciesInput {
	fake.listUserPoliciesMutex.RLock()
	defer fake.listUserPoliciesMutex.RUnlock()
	argsForCall := fake.listUserPoliciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListUserPoliciesReturns(result1 *iam.ListUserPoliciesOutput, result2 error) {
	fake.listUserPoliciesMutex.Lock()
	defer fake.listUserPoliciesMutex.Unlock()
	fake.ListUserPoliciesStub = nil
	fake.listUserPoliciesReturns = struct {
		result1 *iam.ListUserPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUserPoliciesReturnsOnCall(i int, result1 *iam.ListUserPoliciesOutput, result2 error) {
	fake.listUserPoliciesMutex.Lock()
	defer fake.listUserPoliciesMutex.Unlock()
	fake.ListUserPoliciesStub = nil
	if fake.listUserPoliciesReturnsOnCall == nil {
		fake.listUserPoliciesReturnsOnCall = make(map[int]struct {
			result1 *iam.ListUserPoliciesOutput
			result2 error
		})
	}
	fake.listUserPoliciesReturnsOnCall[i] = struct {
		result1 *iam.ListUserPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUserPoliciesPages(arg1 *iam.ListUserPoliciesInput, arg2 func(*iam.ListUserPoliciesOutput, bool) bool) error {
	fake.listUserPoliciesPagesMutex.Lock()
	ret, specificReturn := fake.listUserPoliciesPagesReturnsOnCall[len(fake.listUserPoliciesPagesArgsForCall)]
	fake.listUserPoliciesPagesArgsForCall = append(fake.listUserPoliciesPagesArgsForCall, struct {
		arg1 *iam.ListUserPoliciesInput
		arg2 func(*iam.ListUserPoliciesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListUserPoliciesPages", []interface{}{arg1, arg2})
	fake.listUserPoliciesPagesMutex.Unlock()
	if fake.ListUserPoliciesPagesStub != nil {
		return fake.ListUserPoliciesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listUserPoliciesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListUserPoliciesPagesCallCount() int {
	fake.listUserPoliciesPagesMutex.RLock()
	defer fake.listUserPoliciesPagesMutex.RUnlock()
	return len(fake.listUserPoliciesPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListUserPoliciesPagesCalls(stub func(*iam.ListUserPoliciesInput, func(*iam.ListUserPoliciesOutput, bool) bool) error) {
	fake.listUserPoliciesPagesMutex.Lock()
	defer fake.listUserPoliciesPagesMutex.Unlock()
	fake.ListUserPoliciesPagesStub = stub
}

func (fake *FakeIAMAPI) ListUserPoliciesPagesArgsForCall(i int) (*iam.ListUserPoliciesInput, func(*iam.ListUserPoliciesOutput, bool) bool) {
	fake.listUserPoliciesPagesMutex.RLock()
	defer fake.listUserPoliciesPagesMutex.RUnlock()
	argsForCall := fake.listUserPoliciesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListUserPoliciesPagesReturns(result1 error) {
	fake.listUserPoliciesPagesMutex.Lock()
	defer fake.listUserPoliciesPagesMutex.Unlock()
	fake.ListUserPoliciesPagesStub = nil
	fake.listUserPoliciesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListUserPoliciesPagesReturnsOnCall(i int, result1 error) {
	fake.listUserPoliciesPagesMutex.Lock()
	defer fake.listUserPoliciesPagesMutex.Unlock()
	fake.ListUserPoliciesPagesStub = nil
	if fake.listUserPoliciesPagesReturnsOnCall == nil {
		fake.listUserPoliciesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listUserPoliciesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListUserPoliciesPagesWithContext(arg1 context.Context, arg2 *iam.ListUserPoliciesInput, arg3 func(*iam.ListUserPoliciesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listUserPoliciesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listUserPoliciesPagesWithContextReturnsOnCall[len(fake.listUserPoliciesPagesWithContextArgsForCall)]
	fake.listUserPoliciesPagesWithContextArgsForCall = append(fake.listUserPoliciesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListUserPoliciesInput
		arg3 func(*iam.ListUserPoliciesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListUserPoliciesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listUserPoliciesPagesWithContextMutex.Unlock()
	if fake.ListUserPoliciesPagesWithContextStub != nil {
		return fake.ListUserPoliciesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listUserPoliciesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListUserPoliciesPagesWithContextCallCount() int {
	fake.listUserPoliciesPagesWithContextMutex.RLock()
	defer fake.listUserPoliciesPagesWithContextMutex.RUnlock()
	return len(fake.listUserPoliciesPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListUserPoliciesPagesWithContextCalls(stub func(context.Context, *iam.ListUserPoliciesInput, func(*iam.ListUserPoliciesOutput, bool) bool, ...request.Option) error) {
	fake.listUserPoliciesPagesWithContextMutex.Lock()
	defer fake.listUserPoliciesPagesWithContextMutex.Unlock()
	fake.ListUserPoliciesPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListUserPoliciesPagesWithContextArgsForCall(i int) (context.Context, *iam.ListUserPoliciesInput, func(*iam.ListUserPoliciesOutput, bool) bool, []request.Option) {
	fake.listUserPoliciesPagesWithContextMutex.RLock()
	defer fake.listUserPoliciesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listUserPoliciesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListUserPoliciesPagesWithContextReturns(result1 error) {
	fake.listUserPoliciesPagesWithContextMutex.Lock()
	defer fake.listUserPoliciesPagesWithContextMutex.Unlock()
	fake.ListUserPoliciesPagesWithContextStub = nil
	fake.listUserPoliciesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListUserPoliciesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listUserPoliciesPagesWithContextMutex.Lock()
	defer fake.listUserPoliciesPagesWithContextMutex.Unlock()
	fake.ListUserPoliciesPagesWithContextStub = nil
	if fake.listUserPoliciesPagesWithContextReturnsOnCall == nil {
		fake.listUserPoliciesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listUserPoliciesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListUserPoliciesRequest(arg1 *iam.ListUserPoliciesInput) (*request.Request, *iam.ListUserPoliciesOutput) {
	fake.listUserPoliciesRequestMutex.Lock()
	ret, specificReturn := fake.listUserPoliciesRequestReturnsOnCall[len(fake.listUserPoliciesRequestArgsForCall)]
	fake.listUserPoliciesRequestArgsForCall = append(fake.listUserPoliciesRequestArgsForCall, struct {
		arg1 *iam.ListUserPoliciesInput
	}{arg1})
	fake.recordInvocation("ListUserPoliciesRequest", []interface{}{arg1})
	fake.listUserPoliciesRequestMutex.Unlock()
	if fake.ListUserPoliciesRequestStub != nil {
		return fake.ListUserPoliciesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUserPoliciesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListUserPoliciesRequestCallCount() int {
	fake.listUserPoliciesRequestMutex.RLock()
	defer fake.listUserPoliciesRequestMutex.RUnlock()
	return len(fake.listUserPoliciesRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListUserPoliciesRequestCalls(stub func(*iam.ListUserPoliciesInput) (*request.Request, *iam.ListUserPoliciesOutput)) {
	fake.listUserPoliciesRequestMutex.Lock()
	defer fake.listUserPoliciesRequestMutex.Unlock()
	fake.ListUserPoliciesRequestStub = stub
}

func (fake *FakeIAMAPI) ListUserPoliciesRequestArgsForCall(i int) *iam.ListUserPoliciesInput {
	fake.listUserPoliciesRequestMutex.RLock()
	defer fake.listUserPoliciesRequestMutex.RUnlock()
	argsForCall := fake.listUserPoliciesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListUserPoliciesRequestReturns(result1 *request.Request, result2 *iam.ListUserPoliciesOutput) {
	fake.listUserPoliciesRequestMutex.Lock()
	defer fake.listUserPoliciesRequestMutex.Unlock()
	fake.ListUserPoliciesRequestStub = nil
	fake.listUserPoliciesRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListUserPoliciesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUserPoliciesRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListUserPoliciesOutput) {
	fake.listUserPoliciesRequestMutex.Lock()
	defer fake.listUserPoliciesRequestMutex.Unlock()
	fake.ListUserPoliciesRequestStub = nil
	if fake.listUserPoliciesRequestReturnsOnCall == nil {
		fake.listUserPoliciesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListUserPoliciesOutput
		})
	}
	fake.listUserPoliciesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListUserPoliciesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUserPoliciesWithContext(arg1 context.Context, arg2 *iam.ListUserPoliciesInput, arg3 ...request.Option) (*iam.ListUserPoliciesOutput, error) {
	fake.listUserPoliciesWithContextMutex.Lock()
	ret, specificReturn := fake.listUserPoliciesWithContextReturnsOnCall[len(fake.listUserPoliciesWithContextArgsForCall)]
	fake.listUserPoliciesWithContextArgsForCall = append(fake.listUserPoliciesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListUserPoliciesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListUserPoliciesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listUserPoliciesWithContextMutex.Unlock()
	if fake.ListUserPoliciesWithContextStub != nil {
		return fake.ListUserPoliciesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUserPoliciesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListUserPoliciesWithContextCallCount() int {
	fake.listUserPoliciesWithContextMutex.RLock()
	defer fake.listUserPoliciesWithContextMutex.RUnlock()
	return len(fake.listUserPoliciesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListUserPoliciesWithContextCalls(stub func(context.Context, *iam.ListUserPoliciesInput, ...request.Option) (*iam.ListUserPoliciesOutput, error)) {
	fake.listUserPoliciesWithContextMutex.Lock()
	defer fake.listUserPoliciesWithContextMutex.Unlock()
	fake.ListUserPoliciesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListUserPoliciesWithContextArgsForCall(i int) (context.Context, *iam.ListUserPoliciesInput, []request.Option) {
	fake.listUserPoliciesWithContextMutex.RLock()
	defer fake.listUserPoliciesWithContextMutex.RUnlock()
	argsForCall := fake.listUserPoliciesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListUserPoliciesWithContextReturns(result1 *iam.ListUserPoliciesOutput, result2 error) {
	fake.listUserPoliciesWithContextMutex.Lock()
	defer fake.listUserPoliciesWithContextMutex.Unlock()
	fake.ListUserPoliciesWithContextStub = nil
	fake.listUserPoliciesWithContextReturns = struct {
		result1 *iam.ListUserPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUserPoliciesWithContextReturnsOnCall(i int, result1 *iam.ListUserPoliciesOutput, result2 error) {
	fake.listUserPoliciesWithContextMutex.Lock()
	defer fake.listUserPoliciesWithContextMutex.Unlock()
	fake.ListUserPoliciesWithContextStub = nil
	if fake.listUserPoliciesWithContextReturnsOnCall == nil {
		fake.listUserPoliciesWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListUserPoliciesOutput
			result2 error
		})
	}
	fake.listUserPoliciesWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListUserPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUserTags(arg1 *iam.ListUserTagsInput) (*iam.ListUserTagsOutput, error) {
	fake.listUserTagsMutex.Lock()
	ret, specificReturn := fake.listUserTagsReturnsOnCall[len(fake.listUserTagsArgsForCall)]
	fake.listUserTagsArgsForCall = append(fake.listUserTagsArgsForCall, struct {
		arg1 *iam.ListUserTagsInput
	}{arg1})
	fake.recordInvocation("ListUserTags", []interface{}{arg1})
	fake.listUserTagsMutex.Unlock()
	if fake.ListUserTagsStub != nil {
		return fake.ListUserTagsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUserTagsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListUserTagsCallCount() int {
	fake.listUserTagsMutex.RLock()
	defer fake.listUserTagsMutex.RUnlock()
	return len(fake.listUserTagsArgsForCall)
}

func (fake *FakeIAMAPI) ListUserTagsCalls(stub func(*iam.ListUserTagsInput) (*iam.ListUserTagsOutput, error)) {
	fake.listUserTagsMutex.Lock()
	defer fake.listUserTagsMutex.Unlock()
	fake.ListUserTagsStub = stub
}

func (fake *FakeIAMAPI) ListUserTagsArgsForCall(i int) *iam.ListUserTagsInput {
	fake.listUserTagsMutex.RLock()
	defer fake.listUserTagsMutex.RUnlock()
	argsForCall := fake.listUserTagsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListUserTagsReturns(result1 *iam.ListUserTagsOutput, result2 error) {
	fake.listUserTagsMutex.Lock()
	defer fake.listUserTagsMutex.Unlock()
	fake.ListUserTagsStub = nil
	fake.listUserTagsReturns = struct {
		result1 *iam.ListUserTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUserTagsReturnsOnCall(i int, result1 *iam.ListUserTagsOutput, result2 error) {
	fake.listUserTagsMutex.Lock()
	defer fake.listUserTagsMutex.Unlock()
	fake.ListUserTagsStub = nil
	if fake.listUserTagsReturnsOnCall == nil {
		fake.listUserTagsReturnsOnCall = make(map[int]struct {
			result1 *iam.ListUserTagsOutput
			result2 error
		})
	}
	fake.listUserTagsReturnsOnCall[i] = struct {
		result1 *iam.ListUserTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUserTagsRequest(arg1 *iam.ListUserTagsInput) (*request.Request, *iam.ListUserTagsOutput) {
	fake.listUserTagsRequestMutex.Lock()
	ret, specificReturn := fake.listUserTagsRequestReturnsOnCall[len(fake.listUserTagsRequestArgsForCall)]
	fake.listUserTagsRequestArgsForCall = append(fake.listUserTagsRequestArgsForCall, struct {
		arg1 *iam.ListUserTagsInput
	}{arg1})
	fake.recordInvocation("ListUserTagsRequest", []interface{}{arg1})
	fake.listUserTagsRequestMutex.Unlock()
	if fake.ListUserTagsRequestStub != nil {
		return fake.ListUserTagsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUserTagsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListUserTagsRequestCallCount() int {
	fake.listUserTagsRequestMutex.RLock()
	defer fake.listUserTagsRequestMutex.RUnlock()
	return len(fake.listUserTagsRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListUserTagsRequestCalls(stub func(*iam.ListUserTagsInput) (*request.Request, *iam.ListUserTagsOutput)) {
	fake.listUserTagsRequestMutex.Lock()
	defer fake.listUserTagsRequestMutex.Unlock()
	fake.ListUserTagsRequestStub = stub
}

func (fake *FakeIAMAPI) ListUserTagsRequestArgsForCall(i int) *iam.ListUserTagsInput {
	fake.listUserTagsRequestMutex.RLock()
	defer fake.listUserTagsRequestMutex.RUnlock()
	argsForCall := fake.listUserTagsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListUserTagsRequestReturns(result1 *request.Request, result2 *iam.ListUserTagsOutput) {
	fake.listUserTagsRequestMutex.Lock()
	defer fake.listUserTagsRequestMutex.Unlock()
	fake.ListUserTagsRequestStub = nil
	fake.listUserTagsRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListUserTagsOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUserTagsRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListUserTagsOutput) {
	fake.listUserTagsRequestMutex.Lock()
	defer fake.listUserTagsRequestMutex.Unlock()
	fake.ListUserTagsRequestStub = nil
	if fake.listUserTagsRequestReturnsOnCall == nil {
		fake.listUserTagsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListUserTagsOutput
		})
	}
	fake.listUserTagsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListUserTagsOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUserTagsWithContext(arg1 context.Context, arg2 *iam.ListUserTagsInput, arg3 ...request.Option) (*iam.ListUserTagsOutput, error) {
	fake.listUserTagsWithContextMutex.Lock()
	ret, specificReturn := fake.listUserTagsWithContextReturnsOnCall[len(fake.listUserTagsWithContextArgsForCall)]
	fake.listUserTagsWithContextArgsForCall = append(fake.listUserTagsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListUserTagsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListUserTagsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listUserTagsWithContextMutex.Unlock()
	if fake.ListUserTagsWithContextStub != nil {
		return fake.ListUserTagsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUserTagsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListUserTagsWithContextCallCount() int {
	fake.listUserTagsWithContextMutex.RLock()
	defer fake.listUserTagsWithContextMutex.RUnlock()
	return len(fake.listUserTagsWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListUserTagsWithContextCalls(stub func(context.Context, *iam.ListUserTagsInput, ...request.Option) (*iam.ListUserTagsOutput, error)) {
	fake.listUserTagsWithContextMutex.Lock()
	defer fake.listUserTagsWithContextMutex.Unlock()
	fake.ListUserTagsWithContextStub = stub
}

func (fake *FakeIAMAPI) ListUserTagsWithContextArgsForCall(i int) (context.Context, *iam.ListUserTagsInput, []request.Option) {
	fake.listUserTagsWithContextMutex.RLock()
	defer fake.listUserTagsWithContextMutex.RUnlock()
	argsForCall := fake.listUserTagsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListUserTagsWithContextReturns(result1 *iam.ListUserTagsOutput, result2 error) {
	fake.listUserTagsWithContextMutex.Lock()
	defer fake.listUserTagsWithContextMutex.Unlock()
	fake.ListUserTagsWithContextStub = nil
	fake.listUserTagsWithContextReturns = struct {
		result1 *iam.ListUserTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUserTagsWithContextReturnsOnCall(i int, result1 *iam.ListUserTagsOutput, result2 error) {
	fake.listUserTagsWithContextMutex.Lock()
	defer fake.listUserTagsWithContextMutex.Unlock()
	fake.ListUserTagsWithContextStub = nil
	if fake.listUserTagsWithContextReturnsOnCall == nil {
		fake.listUserTagsWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListUserTagsOutput
			result2 error
		})
	}
	fake.listUserTagsWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListUserTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUsers(arg1 *iam.ListUsersInput) (*iam.ListUsersOutput, error) {
	fake.listUsersMutex.Lock()
	ret, specificReturn := fake.listUsersReturnsOnCall[len(fake.listUsersArgsForCall)]
	fake.listUsersArgsForCall = append(fake.listUsersArgsForCall, struct {
		arg1 *iam.ListUsersInput
	}{arg1})
	fake.recordInvocation("ListUsers", []interface{}{arg1})
	fake.listUsersMutex.Unlock()
	if fake.ListUsersStub != nil {
		return fake.ListUsersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUsersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListUsersCallCount() int {
	fake.listUsersMutex.RLock()
	defer fake.listUsersMutex.RUnlock()
	return len(fake.listUsersArgsForCall)
}

func (fake *FakeIAMAPI) ListUsersCalls(stub func(*iam.ListUsersInput) (*iam.ListUsersOutput, error)) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = stub
}

func (fake *FakeIAMAPI) ListUsersArgsForCall(i int) *iam.ListUsersInput {
	fake.listUsersMutex.RLock()
	defer fake.listUsersMutex.RUnlock()
	argsForCall := fake.listUsersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListUsersReturns(result1 *iam.ListUsersOutput, result2 error) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = nil
	fake.listUsersReturns = struct {
		result1 *iam.ListUsersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUsersReturnsOnCall(i int, result1 *iam.ListUsersOutput, result2 error) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = nil
	if fake.listUsersReturnsOnCall == nil {
		fake.listUsersReturnsOnCall = make(map[int]struct {
			result1 *iam.ListUsersOutput
			result2 error
		})
	}
	fake.listUsersReturnsOnCall[i] = struct {
		result1 *iam.ListUsersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUsersPages(arg1 *iam.ListUsersInput, arg2 func(*iam.ListUsersOutput, bool) bool) error {
	fake.listUsersPagesMutex.Lock()
	ret, specificReturn := fake.listUsersPagesReturnsOnCall[len(fake.listUsersPagesArgsForCall)]
	fake.listUsersPagesArgsForCall = append(fake.listUsersPagesArgsForCall, struct {
		arg1 *iam.ListUsersInput
		arg2 func(*iam.ListUsersOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListUsersPages", []interface{}{arg1, arg2})
	fake.listUsersPagesMutex.Unlock()
	if fake.ListUsersPagesStub != nil {
		return fake.ListUsersPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listUsersPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListUsersPagesCallCount() int {
	fake.listUsersPagesMutex.RLock()
	defer fake.listUsersPagesMutex.RUnlock()
	return len(fake.listUsersPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListUsersPagesCalls(stub func(*iam.ListUsersInput, func(*iam.ListUsersOutput, bool) bool) error) {
	fake.listUsersPagesMutex.Lock()
	defer fake.listUsersPagesMutex.Unlock()
	fake.ListUsersPagesStub = stub
}

func (fake *FakeIAMAPI) ListUsersPagesArgsForCall(i int) (*iam.ListUsersInput, func(*iam.ListUsersOutput, bool) bool) {
	fake.listUsersPagesMutex.RLock()
	defer fake.listUsersPagesMutex.RUnlock()
	argsForCall := fake.listUsersPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListUsersPagesReturns(result1 error) {
	fake.listUsersPagesMutex.Lock()
	defer fake.listUsersPagesMutex.Unlock()
	fake.ListUsersPagesStub = nil
	fake.listUsersPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListUsersPagesReturnsOnCall(i int, result1 error) {
	fake.listUsersPagesMutex.Lock()
	defer fake.listUsersPagesMutex.Unlock()
	fake.ListUsersPagesStub = nil
	if fake.listUsersPagesReturnsOnCall == nil {
		fake.listUsersPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listUsersPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListUsersPagesWithContext(arg1 context.Context, arg2 *iam.ListUsersInput, arg3 func(*iam.ListUsersOutput, bool) bool, arg4 ...request.Option) error {
	fake.listUsersPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listUsersPagesWithContextReturnsOnCall[len(fake.listUsersPagesWithContextArgsForCall)]
	fake.listUsersPagesWithContextArgsForCall = append(fake.listUsersPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListUsersInput
		arg3 func(*iam.ListUsersOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListUsersPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listUsersPagesWithContextMutex.Unlock()
	if fake.ListUsersPagesWithContextStub != nil {
		return fake.ListUsersPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listUsersPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListUsersPagesWithContextCallCount() int {
	fake.listUsersPagesWithContextMutex.RLock()
	defer fake.listUsersPagesWithContextMutex.RUnlock()
	return len(fake.listUsersPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListUsersPagesWithContextCalls(stub func(context.Context, *iam.ListUsersInput, func(*iam.ListUsersOutput, bool) bool, ...request.Option) error) {
	fake.listUsersPagesWithContextMutex.Lock()
	defer fake.listUsersPagesWithContextMutex.Unlock()
	fake.ListUsersPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListUsersPagesWithContextArgsForCall(i int) (context.Context, *iam.ListUsersInput, func(*iam.ListUsersOutput, bool) bool, []request.Option) {
	fake.listUsersPagesWithContextMutex.RLock()
	defer fake.listUsersPagesWithContextMutex.RUnlock()
	argsForCall := fake.listUsersPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListUsersPagesWithContextReturns(result1 error) {
	fake.listUsersPagesWithContextMutex.Lock()
	defer fake.listUsersPagesWithContextMutex.Unlock()
	fake.ListUsersPagesWithContextStub = nil
	fake.listUsersPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListUsersPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listUsersPagesWithContextMutex.Lock()
	defer fake.listUsersPagesWithContextMutex.Unlock()
	fake.ListUsersPagesWithContextStub = nil
	if fake.listUsersPagesWithContextReturnsOnCall == nil {
		fake.listUsersPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listUsersPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListUsersRequest(arg1 *iam.ListUsersInput) (*request.Request, *iam.ListUsersOutput) {
	fake.listUsersRequestMutex.Lock()
	ret, specificReturn := fake.listUsersRequestReturnsOnCall[len(fake.listUsersRequestArgsForCall)]
	fake.listUsersRequestArgsForCall = append(fake.listUsersRequestArgsForCall, struct {
		arg1 *iam.ListUsersInput
	}{arg1})
	fake.recordInvocation("ListUsersRequest", []interface{}{arg1})
	fake.listUsersRequestMutex.Unlock()
	if fake.ListUsersRequestStub != nil {
		return fake.ListUsersRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUsersRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListUsersRequestCallCount() int {
	fake.listUsersRequestMutex.RLock()
	defer fake.listUsersRequestMutex.RUnlock()
	return len(fake.listUsersRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListUsersRequestCalls(stub func(*iam.ListUsersInput) (*request.Request, *iam.ListUsersOutput)) {
	fake.listUsersRequestMutex.Lock()
	defer fake.listUsersRequestMutex.Unlock()
	fake.ListUsersRequestStub = stub
}

func (fake *FakeIAMAPI) ListUsersRequestArgsForCall(i int) *iam.ListUsersInput {
	fake.listUsersRequestMutex.RLock()
	defer fake.listUsersRequestMutex.RUnlock()
	argsForCall := fake.listUsersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListUsersRequestReturns(result1 *request.Request, result2 *iam.ListUsersOutput) {
	fake.listUsersRequestMutex.Lock()
	defer fake.listUsersRequestMutex.Unlock()
	fake.ListUsersRequestStub = nil
	fake.listUsersRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListUsersOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUsersRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListUsersOutput) {
	fake.listUsersRequestMutex.Lock()
	defer fake.listUsersRequestMutex.Unlock()
	fake.ListUsersRequestStub = nil
	if fake.listUsersRequestReturnsOnCall == nil {
		fake.listUsersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListUsersOutput
		})
	}
	fake.listUsersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListUsersOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUsersWithContext(arg1 context.Context, arg2 *iam.ListUsersInput, arg3 ...request.Option) (*iam.ListUsersOutput, error) {
	fake.listUsersWithContextMutex.Lock()
	ret, specificReturn := fake.listUsersWithContextReturnsOnCall[len(fake.listUsersWithContextArgsForCall)]
	fake.listUsersWithContextArgsForCall = append(fake.listUsersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListUsersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListUsersWithContext", []interface{}{arg1, arg2, arg3})
	fake.listUsersWithContextMutex.Unlock()
	if fake.ListUsersWithContextStub != nil {
		return fake.ListUsersWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUsersWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListUsersWithContextCallCount() int {
	fake.listUsersWithContextMutex.RLock()
	defer fake.listUsersWithContextMutex.RUnlock()
	return len(fake.listUsersWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListUsersWithContextCalls(stub func(context.Context, *iam.ListUsersInput, ...request.Option) (*iam.ListUsersOutput, error)) {
	fake.listUsersWithContextMutex.Lock()
	defer fake.listUsersWithContextMutex.Unlock()
	fake.ListUsersWithContextStub = stub
}

func (fake *FakeIAMAPI) ListUsersWithContextArgsForCall(i int) (context.Context, *iam.ListUsersInput, []request.Option) {
	fake.listUsersWithContextMutex.RLock()
	defer fake.listUsersWithContextMutex.RUnlock()
	argsForCall := fake.listUsersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListUsersWithContextReturns(result1 *iam.ListUsersOutput, result2 error) {
	fake.listUsersWithContextMutex.Lock()
	defer fake.listUsersWithContextMutex.Unlock()
	fake.ListUsersWithContextStub = nil
	fake.listUsersWithContextReturns = struct {
		result1 *iam.ListUsersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListUsersWithContextReturnsOnCall(i int, result1 *iam.ListUsersOutput, result2 error) {
	fake.listUsersWithContextMutex.Lock()
	defer fake.listUsersWithContextMutex.Unlock()
	fake.ListUsersWithContextStub = nil
	if fake.listUsersWithContextReturnsOnCall == nil {
		fake.listUsersWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListUsersOutput
			result2 error
		})
	}
	fake.listUsersWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListUsersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListVirtualMFADevices(arg1 *iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error) {
	fake.listVirtualMFADevicesMutex.Lock()
	ret, specificReturn := fake.listVirtualMFADevicesReturnsOnCall[len(fake.listVirtualMFADevicesArgsForCall)]
	fake.listVirtualMFADevicesArgsForCall = append(fake.listVirtualMFADevicesArgsForCall, struct {
		arg1 *iam.ListVirtualMFADevicesInput
	}{arg1})
	fake.recordInvocation("ListVirtualMFADevices", []interface{}{arg1})
	fake.listVirtualMFADevicesMutex.Unlock()
	if fake.ListVirtualMFADevicesStub != nil {
		return fake.ListVirtualMFADevicesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listVirtualMFADevicesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesCallCount() int {
	fake.listVirtualMFADevicesMutex.RLock()
	defer fake.listVirtualMFADevicesMutex.RUnlock()
	return len(fake.listVirtualMFADevicesArgsForCall)
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesCalls(stub func(*iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error)) {
	fake.listVirtualMFADevicesMutex.Lock()
	defer fake.listVirtualMFADevicesMutex.Unlock()
	fake.ListVirtualMFADevicesStub = stub
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesArgsForCall(i int) *iam.ListVirtualMFADevicesInput {
	fake.listVirtualMFADevicesMutex.RLock()
	defer fake.listVirtualMFADevicesMutex.RUnlock()
	argsForCall := fake.listVirtualMFADevicesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesReturns(result1 *iam.ListVirtualMFADevicesOutput, result2 error) {
	fake.listVirtualMFADevicesMutex.Lock()
	defer fake.listVirtualMFADevicesMutex.Unlock()
	fake.ListVirtualMFADevicesStub = nil
	fake.listVirtualMFADevicesReturns = struct {
		result1 *iam.ListVirtualMFADevicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesReturnsOnCall(i int, result1 *iam.ListVirtualMFADevicesOutput, result2 error) {
	fake.listVirtualMFADevicesMutex.Lock()
	defer fake.listVirtualMFADevicesMutex.Unlock()
	fake.ListVirtualMFADevicesStub = nil
	if fake.listVirtualMFADevicesReturnsOnCall == nil {
		fake.listVirtualMFADevicesReturnsOnCall = make(map[int]struct {
			result1 *iam.ListVirtualMFADevicesOutput
			result2 error
		})
	}
	fake.listVirtualMFADevicesReturnsOnCall[i] = struct {
		result1 *iam.ListVirtualMFADevicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesPages(arg1 *iam.ListVirtualMFADevicesInput, arg2 func(*iam.ListVirtualMFADevicesOutput, bool) bool) error {
	fake.listVirtualMFADevicesPagesMutex.Lock()
	ret, specificReturn := fake.listVirtualMFADevicesPagesReturnsOnCall[len(fake.listVirtualMFADevicesPagesArgsForCall)]
	fake.listVirtualMFADevicesPagesArgsForCall = append(fake.listVirtualMFADevicesPagesArgsForCall, struct {
		arg1 *iam.ListVirtualMFADevicesInput
		arg2 func(*iam.ListVirtualMFADevicesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListVirtualMFADevicesPages", []interface{}{arg1, arg2})
	fake.listVirtualMFADevicesPagesMutex.Unlock()
	if fake.ListVirtualMFADevicesPagesStub != nil {
		return fake.ListVirtualMFADevicesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listVirtualMFADevicesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesPagesCallCount() int {
	fake.listVirtualMFADevicesPagesMutex.RLock()
	defer fake.listVirtualMFADevicesPagesMutex.RUnlock()
	return len(fake.listVirtualMFADevicesPagesArgsForCall)
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesPagesCalls(stub func(*iam.ListVirtualMFADevicesInput, func(*iam.ListVirtualMFADevicesOutput, bool) bool) error) {
	fake.listVirtualMFADevicesPagesMutex.Lock()
	defer fake.listVirtualMFADevicesPagesMutex.Unlock()
	fake.ListVirtualMFADevicesPagesStub = stub
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesPagesArgsForCall(i int) (*iam.ListVirtualMFADevicesInput, func(*iam.ListVirtualMFADevicesOutput, bool) bool) {
	fake.listVirtualMFADevicesPagesMutex.RLock()
	defer fake.listVirtualMFADevicesPagesMutex.RUnlock()
	argsForCall := fake.listVirtualMFADevicesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesPagesReturns(result1 error) {
	fake.listVirtualMFADevicesPagesMutex.Lock()
	defer fake.listVirtualMFADevicesPagesMutex.Unlock()
	fake.ListVirtualMFADevicesPagesStub = nil
	fake.listVirtualMFADevicesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesPagesReturnsOnCall(i int, result1 error) {
	fake.listVirtualMFADevicesPagesMutex.Lock()
	defer fake.listVirtualMFADevicesPagesMutex.Unlock()
	fake.ListVirtualMFADevicesPagesStub = nil
	if fake.listVirtualMFADevicesPagesReturnsOnCall == nil {
		fake.listVirtualMFADevicesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listVirtualMFADevicesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesPagesWithContext(arg1 context.Context, arg2 *iam.ListVirtualMFADevicesInput, arg3 func(*iam.ListVirtualMFADevicesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listVirtualMFADevicesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listVirtualMFADevicesPagesWithContextReturnsOnCall[len(fake.listVirtualMFADevicesPagesWithContextArgsForCall)]
	fake.listVirtualMFADevicesPagesWithContextArgsForCall = append(fake.listVirtualMFADevicesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListVirtualMFADevicesInput
		arg3 func(*iam.ListVirtualMFADevicesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListVirtualMFADevicesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listVirtualMFADevicesPagesWithContextMutex.Unlock()
	if fake.ListVirtualMFADevicesPagesWithContextStub != nil {
		return fake.ListVirtualMFADevicesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listVirtualMFADevicesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesPagesWithContextCallCount() int {
	fake.listVirtualMFADevicesPagesWithContextMutex.RLock()
	defer fake.listVirtualMFADevicesPagesWithContextMutex.RUnlock()
	return len(fake.listVirtualMFADevicesPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesPagesWithContextCalls(stub func(context.Context, *iam.ListVirtualMFADevicesInput, func(*iam.ListVirtualMFADevicesOutput, bool) bool, ...request.Option) error) {
	fake.listVirtualMFADevicesPagesWithContextMutex.Lock()
	defer fake.listVirtualMFADevicesPagesWithContextMutex.Unlock()
	fake.ListVirtualMFADevicesPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesPagesWithContextArgsForCall(i int) (context.Context, *iam.ListVirtualMFADevicesInput, func(*iam.ListVirtualMFADevicesOutput, bool) bool, []request.Option) {
	fake.listVirtualMFADevicesPagesWithContextMutex.RLock()
	defer fake.listVirtualMFADevicesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listVirtualMFADevicesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesPagesWithContextReturns(result1 error) {
	fake.listVirtualMFADevicesPagesWithContextMutex.Lock()
	defer fake.listVirtualMFADevicesPagesWithContextMutex.Unlock()
	fake.ListVirtualMFADevicesPagesWithContextStub = nil
	fake.listVirtualMFADevicesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listVirtualMFADevicesPagesWithContextMutex.Lock()
	defer fake.listVirtualMFADevicesPagesWithContextMutex.Unlock()
	fake.ListVirtualMFADevicesPagesWithContextStub = nil
	if fake.listVirtualMFADevicesPagesWithContextReturnsOnCall == nil {
		fake.listVirtualMFADevicesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listVirtualMFADevicesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesRequest(arg1 *iam.ListVirtualMFADevicesInput) (*request.Request, *iam.ListVirtualMFADevicesOutput) {
	fake.listVirtualMFADevicesRequestMutex.Lock()
	ret, specificReturn := fake.listVirtualMFADevicesRequestReturnsOnCall[len(fake.listVirtualMFADevicesRequestArgsForCall)]
	fake.listVirtualMFADevicesRequestArgsForCall = append(fake.listVirtualMFADevicesRequestArgsForCall, struct {
		arg1 *iam.ListVirtualMFADevicesInput
	}{arg1})
	fake.recordInvocation("ListVirtualMFADevicesRequest", []interface{}{arg1})
	fake.listVirtualMFADevicesRequestMutex.Unlock()
	if fake.ListVirtualMFADevicesRequestStub != nil {
		return fake.ListVirtualMFADevicesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listVirtualMFADevicesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesRequestCallCount() int {
	fake.listVirtualMFADevicesRequestMutex.RLock()
	defer fake.listVirtualMFADevicesRequestMutex.RUnlock()
	return len(fake.listVirtualMFADevicesRequestArgsForCall)
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesRequestCalls(stub func(*iam.ListVirtualMFADevicesInput) (*request.Request, *iam.ListVirtualMFADevicesOutput)) {
	fake.listVirtualMFADevicesRequestMutex.Lock()
	defer fake.listVirtualMFADevicesRequestMutex.Unlock()
	fake.ListVirtualMFADevicesRequestStub = stub
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesRequestArgsForCall(i int) *iam.ListVirtualMFADevicesInput {
	fake.listVirtualMFADevicesRequestMutex.RLock()
	defer fake.listVirtualMFADevicesRequestMutex.RUnlock()
	argsForCall := fake.listVirtualMFADevicesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesRequestReturns(result1 *request.Request, result2 *iam.ListVirtualMFADevicesOutput) {
	fake.listVirtualMFADevicesRequestMutex.Lock()
	defer fake.listVirtualMFADevicesRequestMutex.Unlock()
	fake.ListVirtualMFADevicesRequestStub = nil
	fake.listVirtualMFADevicesRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ListVirtualMFADevicesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ListVirtualMFADevicesOutput) {
	fake.listVirtualMFADevicesRequestMutex.Lock()
	defer fake.listVirtualMFADevicesRequestMutex.Unlock()
	fake.ListVirtualMFADevicesRequestStub = nil
	if fake.listVirtualMFADevicesRequestReturnsOnCall == nil {
		fake.listVirtualMFADevicesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ListVirtualMFADevicesOutput
		})
	}
	fake.listVirtualMFADevicesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ListVirtualMFADevicesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesWithContext(arg1 context.Context, arg2 *iam.ListVirtualMFADevicesInput, arg3 ...request.Option) (*iam.ListVirtualMFADevicesOutput, error) {
	fake.listVirtualMFADevicesWithContextMutex.Lock()
	ret, specificReturn := fake.listVirtualMFADevicesWithContextReturnsOnCall[len(fake.listVirtualMFADevicesWithContextArgsForCall)]
	fake.listVirtualMFADevicesWithContextArgsForCall = append(fake.listVirtualMFADevicesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ListVirtualMFADevicesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListVirtualMFADevicesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listVirtualMFADevicesWithContextMutex.Unlock()
	if fake.ListVirtualMFADevicesWithContextStub != nil {
		return fake.ListVirtualMFADevicesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listVirtualMFADevicesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesWithContextCallCount() int {
	fake.listVirtualMFADevicesWithContextMutex.RLock()
	defer fake.listVirtualMFADevicesWithContextMutex.RUnlock()
	return len(fake.listVirtualMFADevicesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesWithContextCalls(stub func(context.Context, *iam.ListVirtualMFADevicesInput, ...request.Option) (*iam.ListVirtualMFADevicesOutput, error)) {
	fake.listVirtualMFADevicesWithContextMutex.Lock()
	defer fake.listVirtualMFADevicesWithContextMutex.Unlock()
	fake.ListVirtualMFADevicesWithContextStub = stub
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesWithContextArgsForCall(i int) (context.Context, *iam.ListVirtualMFADevicesInput, []request.Option) {
	fake.listVirtualMFADevicesWithContextMutex.RLock()
	defer fake.listVirtualMFADevicesWithContextMutex.RUnlock()
	argsForCall := fake.listVirtualMFADevicesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesWithContextReturns(result1 *iam.ListVirtualMFADevicesOutput, result2 error) {
	fake.listVirtualMFADevicesWithContextMutex.Lock()
	defer fake.listVirtualMFADevicesWithContextMutex.Unlock()
	fake.ListVirtualMFADevicesWithContextStub = nil
	fake.listVirtualMFADevicesWithContextReturns = struct {
		result1 *iam.ListVirtualMFADevicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ListVirtualMFADevicesWithContextReturnsOnCall(i int, result1 *iam.ListVirtualMFADevicesOutput, result2 error) {
	fake.listVirtualMFADevicesWithContextMutex.Lock()
	defer fake.listVirtualMFADevicesWithContextMutex.Unlock()
	fake.ListVirtualMFADevicesWithContextStub = nil
	if fake.listVirtualMFADevicesWithContextReturnsOnCall == nil {
		fake.listVirtualMFADevicesWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ListVirtualMFADevicesOutput
			result2 error
		})
	}
	fake.listVirtualMFADevicesWithContextReturnsOnCall[i] = struct {
		result1 *iam.ListVirtualMFADevicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutGroupPolicy(arg1 *iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error) {
	fake.putGroupPolicyMutex.Lock()
	ret, specificReturn := fake.putGroupPolicyReturnsOnCall[len(fake.putGroupPolicyArgsForCall)]
	fake.putGroupPolicyArgsForCall = append(fake.putGroupPolicyArgsForCall, struct {
		arg1 *iam.PutGroupPolicyInput
	}{arg1})
	fake.recordInvocation("PutGroupPolicy", []interface{}{arg1})
	fake.putGroupPolicyMutex.Unlock()
	if fake.PutGroupPolicyStub != nil {
		return fake.PutGroupPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putGroupPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) PutGroupPolicyCallCount() int {
	fake.putGroupPolicyMutex.RLock()
	defer fake.putGroupPolicyMutex.RUnlock()
	return len(fake.putGroupPolicyArgsForCall)
}

func (fake *FakeIAMAPI) PutGroupPolicyCalls(stub func(*iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error)) {
	fake.putGroupPolicyMutex.Lock()
	defer fake.putGroupPolicyMutex.Unlock()
	fake.PutGroupPolicyStub = stub
}

func (fake *FakeIAMAPI) PutGroupPolicyArgsForCall(i int) *iam.PutGroupPolicyInput {
	fake.putGroupPolicyMutex.RLock()
	defer fake.putGroupPolicyMutex.RUnlock()
	argsForCall := fake.putGroupPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) PutGroupPolicyReturns(result1 *iam.PutGroupPolicyOutput, result2 error) {
	fake.putGroupPolicyMutex.Lock()
	defer fake.putGroupPolicyMutex.Unlock()
	fake.PutGroupPolicyStub = nil
	fake.putGroupPolicyReturns = struct {
		result1 *iam.PutGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutGroupPolicyReturnsOnCall(i int, result1 *iam.PutGroupPolicyOutput, result2 error) {
	fake.putGroupPolicyMutex.Lock()
	defer fake.putGroupPolicyMutex.Unlock()
	fake.PutGroupPolicyStub = nil
	if fake.putGroupPolicyReturnsOnCall == nil {
		fake.putGroupPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.PutGroupPolicyOutput
			result2 error
		})
	}
	fake.putGroupPolicyReturnsOnCall[i] = struct {
		result1 *iam.PutGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutGroupPolicyRequest(arg1 *iam.PutGroupPolicyInput) (*request.Request, *iam.PutGroupPolicyOutput) {
	fake.putGroupPolicyRequestMutex.Lock()
	ret, specificReturn := fake.putGroupPolicyRequestReturnsOnCall[len(fake.putGroupPolicyRequestArgsForCall)]
	fake.putGroupPolicyRequestArgsForCall = append(fake.putGroupPolicyRequestArgsForCall, struct {
		arg1 *iam.PutGroupPolicyInput
	}{arg1})
	fake.recordInvocation("PutGroupPolicyRequest", []interface{}{arg1})
	fake.putGroupPolicyRequestMutex.Unlock()
	if fake.PutGroupPolicyRequestStub != nil {
		return fake.PutGroupPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putGroupPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) PutGroupPolicyRequestCallCount() int {
	fake.putGroupPolicyRequestMutex.RLock()
	defer fake.putGroupPolicyRequestMutex.RUnlock()
	return len(fake.putGroupPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) PutGroupPolicyRequestCalls(stub func(*iam.PutGroupPolicyInput) (*request.Request, *iam.PutGroupPolicyOutput)) {
	fake.putGroupPolicyRequestMutex.Lock()
	defer fake.putGroupPolicyRequestMutex.Unlock()
	fake.PutGroupPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) PutGroupPolicyRequestArgsForCall(i int) *iam.PutGroupPolicyInput {
	fake.putGroupPolicyRequestMutex.RLock()
	defer fake.putGroupPolicyRequestMutex.RUnlock()
	argsForCall := fake.putGroupPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) PutGroupPolicyRequestReturns(result1 *request.Request, result2 *iam.PutGroupPolicyOutput) {
	fake.putGroupPolicyRequestMutex.Lock()
	defer fake.putGroupPolicyRequestMutex.Unlock()
	fake.PutGroupPolicyRequestStub = nil
	fake.putGroupPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.PutGroupPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutGroupPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.PutGroupPolicyOutput) {
	fake.putGroupPolicyRequestMutex.Lock()
	defer fake.putGroupPolicyRequestMutex.Unlock()
	fake.PutGroupPolicyRequestStub = nil
	if fake.putGroupPolicyRequestReturnsOnCall == nil {
		fake.putGroupPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.PutGroupPolicyOutput
		})
	}
	fake.putGroupPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.PutGroupPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutGroupPolicyWithContext(arg1 context.Context, arg2 *iam.PutGroupPolicyInput, arg3 ...request.Option) (*iam.PutGroupPolicyOutput, error) {
	fake.putGroupPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.putGroupPolicyWithContextReturnsOnCall[len(fake.putGroupPolicyWithContextArgsForCall)]
	fake.putGroupPolicyWithContextArgsForCall = append(fake.putGroupPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.PutGroupPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutGroupPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.putGroupPolicyWithContextMutex.Unlock()
	if fake.PutGroupPolicyWithContextStub != nil {
		return fake.PutGroupPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putGroupPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) PutGroupPolicyWithContextCallCount() int {
	fake.putGroupPolicyWithContextMutex.RLock()
	defer fake.putGroupPolicyWithContextMutex.RUnlock()
	return len(fake.putGroupPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) PutGroupPolicyWithContextCalls(stub func(context.Context, *iam.PutGroupPolicyInput, ...request.Option) (*iam.PutGroupPolicyOutput, error)) {
	fake.putGroupPolicyWithContextMutex.Lock()
	defer fake.putGroupPolicyWithContextMutex.Unlock()
	fake.PutGroupPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) PutGroupPolicyWithContextArgsForCall(i int) (context.Context, *iam.PutGroupPolicyInput, []request.Option) {
	fake.putGroupPolicyWithContextMutex.RLock()
	defer fake.putGroupPolicyWithContextMutex.RUnlock()
	argsForCall := fake.putGroupPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) PutGroupPolicyWithContextReturns(result1 *iam.PutGroupPolicyOutput, result2 error) {
	fake.putGroupPolicyWithContextMutex.Lock()
	defer fake.putGroupPolicyWithContextMutex.Unlock()
	fake.PutGroupPolicyWithContextStub = nil
	fake.putGroupPolicyWithContextReturns = struct {
		result1 *iam.PutGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutGroupPolicyWithContextReturnsOnCall(i int, result1 *iam.PutGroupPolicyOutput, result2 error) {
	fake.putGroupPolicyWithContextMutex.Lock()
	defer fake.putGroupPolicyWithContextMutex.Unlock()
	fake.PutGroupPolicyWithContextStub = nil
	if fake.putGroupPolicyWithContextReturnsOnCall == nil {
		fake.putGroupPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.PutGroupPolicyOutput
			result2 error
		})
	}
	fake.putGroupPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.PutGroupPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundary(arg1 *iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error) {
	fake.putRolePermissionsBoundaryMutex.Lock()
	ret, specificReturn := fake.putRolePermissionsBoundaryReturnsOnCall[len(fake.putRolePermissionsBoundaryArgsForCall)]
	fake.putRolePermissionsBoundaryArgsForCall = append(fake.putRolePermissionsBoundaryArgsForCall, struct {
		arg1 *iam.PutRolePermissionsBoundaryInput
	}{arg1})
	fake.recordInvocation("PutRolePermissionsBoundary", []interface{}{arg1})
	fake.putRolePermissionsBoundaryMutex.Unlock()
	if fake.PutRolePermissionsBoundaryStub != nil {
		return fake.PutRolePermissionsBoundaryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putRolePermissionsBoundaryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundaryCallCount() int {
	fake.putRolePermissionsBoundaryMutex.RLock()
	defer fake.putRolePermissionsBoundaryMutex.RUnlock()
	return len(fake.putRolePermissionsBoundaryArgsForCall)
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundaryCalls(stub func(*iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error)) {
	fake.putRolePermissionsBoundaryMutex.Lock()
	defer fake.putRolePermissionsBoundaryMutex.Unlock()
	fake.PutRolePermissionsBoundaryStub = stub
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundaryArgsForCall(i int) *iam.PutRolePermissionsBoundaryInput {
	fake.putRolePermissionsBoundaryMutex.RLock()
	defer fake.putRolePermissionsBoundaryMutex.RUnlock()
	argsForCall := fake.putRolePermissionsBoundaryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundaryReturns(result1 *iam.PutRolePermissionsBoundaryOutput, result2 error) {
	fake.putRolePermissionsBoundaryMutex.Lock()
	defer fake.putRolePermissionsBoundaryMutex.Unlock()
	fake.PutRolePermissionsBoundaryStub = nil
	fake.putRolePermissionsBoundaryReturns = struct {
		result1 *iam.PutRolePermissionsBoundaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundaryReturnsOnCall(i int, result1 *iam.PutRolePermissionsBoundaryOutput, result2 error) {
	fake.putRolePermissionsBoundaryMutex.Lock()
	defer fake.putRolePermissionsBoundaryMutex.Unlock()
	fake.PutRolePermissionsBoundaryStub = nil
	if fake.putRolePermissionsBoundaryReturnsOnCall == nil {
		fake.putRolePermissionsBoundaryReturnsOnCall = make(map[int]struct {
			result1 *iam.PutRolePermissionsBoundaryOutput
			result2 error
		})
	}
	fake.putRolePermissionsBoundaryReturnsOnCall[i] = struct {
		result1 *iam.PutRolePermissionsBoundaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundaryRequest(arg1 *iam.PutRolePermissionsBoundaryInput) (*request.Request, *iam.PutRolePermissionsBoundaryOutput) {
	fake.putRolePermissionsBoundaryRequestMutex.Lock()
	ret, specificReturn := fake.putRolePermissionsBoundaryRequestReturnsOnCall[len(fake.putRolePermissionsBoundaryRequestArgsForCall)]
	fake.putRolePermissionsBoundaryRequestArgsForCall = append(fake.putRolePermissionsBoundaryRequestArgsForCall, struct {
		arg1 *iam.PutRolePermissionsBoundaryInput
	}{arg1})
	fake.recordInvocation("PutRolePermissionsBoundaryRequest", []interface{}{arg1})
	fake.putRolePermissionsBoundaryRequestMutex.Unlock()
	if fake.PutRolePermissionsBoundaryRequestStub != nil {
		return fake.PutRolePermissionsBoundaryRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putRolePermissionsBoundaryRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundaryRequestCallCount() int {
	fake.putRolePermissionsBoundaryRequestMutex.RLock()
	defer fake.putRolePermissionsBoundaryRequestMutex.RUnlock()
	return len(fake.putRolePermissionsBoundaryRequestArgsForCall)
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundaryRequestCalls(stub func(*iam.PutRolePermissionsBoundaryInput) (*request.Request, *iam.PutRolePermissionsBoundaryOutput)) {
	fake.putRolePermissionsBoundaryRequestMutex.Lock()
	defer fake.putRolePermissionsBoundaryRequestMutex.Unlock()
	fake.PutRolePermissionsBoundaryRequestStub = stub
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundaryRequestArgsForCall(i int) *iam.PutRolePermissionsBoundaryInput {
	fake.putRolePermissionsBoundaryRequestMutex.RLock()
	defer fake.putRolePermissionsBoundaryRequestMutex.RUnlock()
	argsForCall := fake.putRolePermissionsBoundaryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundaryRequestReturns(result1 *request.Request, result2 *iam.PutRolePermissionsBoundaryOutput) {
	fake.putRolePermissionsBoundaryRequestMutex.Lock()
	defer fake.putRolePermissionsBoundaryRequestMutex.Unlock()
	fake.PutRolePermissionsBoundaryRequestStub = nil
	fake.putRolePermissionsBoundaryRequestReturns = struct {
		result1 *request.Request
		result2 *iam.PutRolePermissionsBoundaryOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundaryRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.PutRolePermissionsBoundaryOutput) {
	fake.putRolePermissionsBoundaryRequestMutex.Lock()
	defer fake.putRolePermissionsBoundaryRequestMutex.Unlock()
	fake.PutRolePermissionsBoundaryRequestStub = nil
	if fake.putRolePermissionsBoundaryRequestReturnsOnCall == nil {
		fake.putRolePermissionsBoundaryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.PutRolePermissionsBoundaryOutput
		})
	}
	fake.putRolePermissionsBoundaryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.PutRolePermissionsBoundaryOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundaryWithContext(arg1 context.Context, arg2 *iam.PutRolePermissionsBoundaryInput, arg3 ...request.Option) (*iam.PutRolePermissionsBoundaryOutput, error) {
	fake.putRolePermissionsBoundaryWithContextMutex.Lock()
	ret, specificReturn := fake.putRolePermissionsBoundaryWithContextReturnsOnCall[len(fake.putRolePermissionsBoundaryWithContextArgsForCall)]
	fake.putRolePermissionsBoundaryWithContextArgsForCall = append(fake.putRolePermissionsBoundaryWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.PutRolePermissionsBoundaryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutRolePermissionsBoundaryWithContext", []interface{}{arg1, arg2, arg3})
	fake.putRolePermissionsBoundaryWithContextMutex.Unlock()
	if fake.PutRolePermissionsBoundaryWithContextStub != nil {
		return fake.PutRolePermissionsBoundaryWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putRolePermissionsBoundaryWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundaryWithContextCallCount() int {
	fake.putRolePermissionsBoundaryWithContextMutex.RLock()
	defer fake.putRolePermissionsBoundaryWithContextMutex.RUnlock()
	return len(fake.putRolePermissionsBoundaryWithContextArgsForCall)
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundaryWithContextCalls(stub func(context.Context, *iam.PutRolePermissionsBoundaryInput, ...request.Option) (*iam.PutRolePermissionsBoundaryOutput, error)) {
	fake.putRolePermissionsBoundaryWithContextMutex.Lock()
	defer fake.putRolePermissionsBoundaryWithContextMutex.Unlock()
	fake.PutRolePermissionsBoundaryWithContextStub = stub
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundaryWithContextArgsForCall(i int) (context.Context, *iam.PutRolePermissionsBoundaryInput, []request.Option) {
	fake.putRolePermissionsBoundaryWithContextMutex.RLock()
	defer fake.putRolePermissionsBoundaryWithContextMutex.RUnlock()
	argsForCall := fake.putRolePermissionsBoundaryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundaryWithContextReturns(result1 *iam.PutRolePermissionsBoundaryOutput, result2 error) {
	fake.putRolePermissionsBoundaryWithContextMutex.Lock()
	defer fake.putRolePermissionsBoundaryWithContextMutex.Unlock()
	fake.PutRolePermissionsBoundaryWithContextStub = nil
	fake.putRolePermissionsBoundaryWithContextReturns = struct {
		result1 *iam.PutRolePermissionsBoundaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutRolePermissionsBoundaryWithContextReturnsOnCall(i int, result1 *iam.PutRolePermissionsBoundaryOutput, result2 error) {
	fake.putRolePermissionsBoundaryWithContextMutex.Lock()
	defer fake.putRolePermissionsBoundaryWithContextMutex.Unlock()
	fake.PutRolePermissionsBoundaryWithContextStub = nil
	if fake.putRolePermissionsBoundaryWithContextReturnsOnCall == nil {
		fake.putRolePermissionsBoundaryWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.PutRolePermissionsBoundaryOutput
			result2 error
		})
	}
	fake.putRolePermissionsBoundaryWithContextReturnsOnCall[i] = struct {
		result1 *iam.PutRolePermissionsBoundaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutRolePolicy(arg1 *iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error) {
	fake.putRolePolicyMutex.Lock()
	ret, specificReturn := fake.putRolePolicyReturnsOnCall[len(fake.putRolePolicyArgsForCall)]
	fake.putRolePolicyArgsForCall = append(fake.putRolePolicyArgsForCall, struct {
		arg1 *iam.PutRolePolicyInput
	}{arg1})
	fake.recordInvocation("PutRolePolicy", []interface{}{arg1})
	fake.putRolePolicyMutex.Unlock()
	if fake.PutRolePolicyStub != nil {
		return fake.PutRolePolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putRolePolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) PutRolePolicyCallCount() int {
	fake.putRolePolicyMutex.RLock()
	defer fake.putRolePolicyMutex.RUnlock()
	return len(fake.putRolePolicyArgsForCall)
}

func (fake *FakeIAMAPI) PutRolePolicyCalls(stub func(*iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error)) {
	fake.putRolePolicyMutex.Lock()
	defer fake.putRolePolicyMutex.Unlock()
	fake.PutRolePolicyStub = stub
}

func (fake *FakeIAMAPI) PutRolePolicyArgsForCall(i int) *iam.PutRolePolicyInput {
	fake.putRolePolicyMutex.RLock()
	defer fake.putRolePolicyMutex.RUnlock()
	argsForCall := fake.putRolePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) PutRolePolicyReturns(result1 *iam.PutRolePolicyOutput, result2 error) {
	fake.putRolePolicyMutex.Lock()
	defer fake.putRolePolicyMutex.Unlock()
	fake.PutRolePolicyStub = nil
	fake.putRolePolicyReturns = struct {
		result1 *iam.PutRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutRolePolicyReturnsOnCall(i int, result1 *iam.PutRolePolicyOutput, result2 error) {
	fake.putRolePolicyMutex.Lock()
	defer fake.putRolePolicyMutex.Unlock()
	fake.PutRolePolicyStub = nil
	if fake.putRolePolicyReturnsOnCall == nil {
		fake.putRolePolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.PutRolePolicyOutput
			result2 error
		})
	}
	fake.putRolePolicyReturnsOnCall[i] = struct {
		result1 *iam.PutRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutRolePolicyRequest(arg1 *iam.PutRolePolicyInput) (*request.Request, *iam.PutRolePolicyOutput) {
	fake.putRolePolicyRequestMutex.Lock()
	ret, specificReturn := fake.putRolePolicyRequestReturnsOnCall[len(fake.putRolePolicyRequestArgsForCall)]
	fake.putRolePolicyRequestArgsForCall = append(fake.putRolePolicyRequestArgsForCall, struct {
		arg1 *iam.PutRolePolicyInput
	}{arg1})
	fake.recordInvocation("PutRolePolicyRequest", []interface{}{arg1})
	fake.putRolePolicyRequestMutex.Unlock()
	if fake.PutRolePolicyRequestStub != nil {
		return fake.PutRolePolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putRolePolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) PutRolePolicyRequestCallCount() int {
	fake.putRolePolicyRequestMutex.RLock()
	defer fake.putRolePolicyRequestMutex.RUnlock()
	return len(fake.putRolePolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) PutRolePolicyRequestCalls(stub func(*iam.PutRolePolicyInput) (*request.Request, *iam.PutRolePolicyOutput)) {
	fake.putRolePolicyRequestMutex.Lock()
	defer fake.putRolePolicyRequestMutex.Unlock()
	fake.PutRolePolicyRequestStub = stub
}

func (fake *FakeIAMAPI) PutRolePolicyRequestArgsForCall(i int) *iam.PutRolePolicyInput {
	fake.putRolePolicyRequestMutex.RLock()
	defer fake.putRolePolicyRequestMutex.RUnlock()
	argsForCall := fake.putRolePolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) PutRolePolicyRequestReturns(result1 *request.Request, result2 *iam.PutRolePolicyOutput) {
	fake.putRolePolicyRequestMutex.Lock()
	defer fake.putRolePolicyRequestMutex.Unlock()
	fake.PutRolePolicyRequestStub = nil
	fake.putRolePolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.PutRolePolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutRolePolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.PutRolePolicyOutput) {
	fake.putRolePolicyRequestMutex.Lock()
	defer fake.putRolePolicyRequestMutex.Unlock()
	fake.PutRolePolicyRequestStub = nil
	if fake.putRolePolicyRequestReturnsOnCall == nil {
		fake.putRolePolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.PutRolePolicyOutput
		})
	}
	fake.putRolePolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.PutRolePolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutRolePolicyWithContext(arg1 context.Context, arg2 *iam.PutRolePolicyInput, arg3 ...request.Option) (*iam.PutRolePolicyOutput, error) {
	fake.putRolePolicyWithContextMutex.Lock()
	ret, specificReturn := fake.putRolePolicyWithContextReturnsOnCall[len(fake.putRolePolicyWithContextArgsForCall)]
	fake.putRolePolicyWithContextArgsForCall = append(fake.putRolePolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.PutRolePolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutRolePolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.putRolePolicyWithContextMutex.Unlock()
	if fake.PutRolePolicyWithContextStub != nil {
		return fake.PutRolePolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putRolePolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) PutRolePolicyWithContextCallCount() int {
	fake.putRolePolicyWithContextMutex.RLock()
	defer fake.putRolePolicyWithContextMutex.RUnlock()
	return len(fake.putRolePolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) PutRolePolicyWithContextCalls(stub func(context.Context, *iam.PutRolePolicyInput, ...request.Option) (*iam.PutRolePolicyOutput, error)) {
	fake.putRolePolicyWithContextMutex.Lock()
	defer fake.putRolePolicyWithContextMutex.Unlock()
	fake.PutRolePolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) PutRolePolicyWithContextArgsForCall(i int) (context.Context, *iam.PutRolePolicyInput, []request.Option) {
	fake.putRolePolicyWithContextMutex.RLock()
	defer fake.putRolePolicyWithContextMutex.RUnlock()
	argsForCall := fake.putRolePolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) PutRolePolicyWithContextReturns(result1 *iam.PutRolePolicyOutput, result2 error) {
	fake.putRolePolicyWithContextMutex.Lock()
	defer fake.putRolePolicyWithContextMutex.Unlock()
	fake.PutRolePolicyWithContextStub = nil
	fake.putRolePolicyWithContextReturns = struct {
		result1 *iam.PutRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutRolePolicyWithContextReturnsOnCall(i int, result1 *iam.PutRolePolicyOutput, result2 error) {
	fake.putRolePolicyWithContextMutex.Lock()
	defer fake.putRolePolicyWithContextMutex.Unlock()
	fake.PutRolePolicyWithContextStub = nil
	if fake.putRolePolicyWithContextReturnsOnCall == nil {
		fake.putRolePolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.PutRolePolicyOutput
			result2 error
		})
	}
	fake.putRolePolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.PutRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundary(arg1 *iam.PutUserPermissionsBoundaryInput) (*iam.PutUserPermissionsBoundaryOutput, error) {
	fake.putUserPermissionsBoundaryMutex.Lock()
	ret, specificReturn := fake.putUserPermissionsBoundaryReturnsOnCall[len(fake.putUserPermissionsBoundaryArgsForCall)]
	fake.putUserPermissionsBoundaryArgsForCall = append(fake.putUserPermissionsBoundaryArgsForCall, struct {
		arg1 *iam.PutUserPermissionsBoundaryInput
	}{arg1})
	fake.recordInvocation("PutUserPermissionsBoundary", []interface{}{arg1})
	fake.putUserPermissionsBoundaryMutex.Unlock()
	if fake.PutUserPermissionsBoundaryStub != nil {
		return fake.PutUserPermissionsBoundaryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putUserPermissionsBoundaryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundaryCallCount() int {
	fake.putUserPermissionsBoundaryMutex.RLock()
	defer fake.putUserPermissionsBoundaryMutex.RUnlock()
	return len(fake.putUserPermissionsBoundaryArgsForCall)
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundaryCalls(stub func(*iam.PutUserPermissionsBoundaryInput) (*iam.PutUserPermissionsBoundaryOutput, error)) {
	fake.putUserPermissionsBoundaryMutex.Lock()
	defer fake.putUserPermissionsBoundaryMutex.Unlock()
	fake.PutUserPermissionsBoundaryStub = stub
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundaryArgsForCall(i int) *iam.PutUserPermissionsBoundaryInput {
	fake.putUserPermissionsBoundaryMutex.RLock()
	defer fake.putUserPermissionsBoundaryMutex.RUnlock()
	argsForCall := fake.putUserPermissionsBoundaryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundaryReturns(result1 *iam.PutUserPermissionsBoundaryOutput, result2 error) {
	fake.putUserPermissionsBoundaryMutex.Lock()
	defer fake.putUserPermissionsBoundaryMutex.Unlock()
	fake.PutUserPermissionsBoundaryStub = nil
	fake.putUserPermissionsBoundaryReturns = struct {
		result1 *iam.PutUserPermissionsBoundaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundaryReturnsOnCall(i int, result1 *iam.PutUserPermissionsBoundaryOutput, result2 error) {
	fake.putUserPermissionsBoundaryMutex.Lock()
	defer fake.putUserPermissionsBoundaryMutex.Unlock()
	fake.PutUserPermissionsBoundaryStub = nil
	if fake.putUserPermissionsBoundaryReturnsOnCall == nil {
		fake.putUserPermissionsBoundaryReturnsOnCall = make(map[int]struct {
			result1 *iam.PutUserPermissionsBoundaryOutput
			result2 error
		})
	}
	fake.putUserPermissionsBoundaryReturnsOnCall[i] = struct {
		result1 *iam.PutUserPermissionsBoundaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundaryRequest(arg1 *iam.PutUserPermissionsBoundaryInput) (*request.Request, *iam.PutUserPermissionsBoundaryOutput) {
	fake.putUserPermissionsBoundaryRequestMutex.Lock()
	ret, specificReturn := fake.putUserPermissionsBoundaryRequestReturnsOnCall[len(fake.putUserPermissionsBoundaryRequestArgsForCall)]
	fake.putUserPermissionsBoundaryRequestArgsForCall = append(fake.putUserPermissionsBoundaryRequestArgsForCall, struct {
		arg1 *iam.PutUserPermissionsBoundaryInput
	}{arg1})
	fake.recordInvocation("PutUserPermissionsBoundaryRequest", []interface{}{arg1})
	fake.putUserPermissionsBoundaryRequestMutex.Unlock()
	if fake.PutUserPermissionsBoundaryRequestStub != nil {
		return fake.PutUserPermissionsBoundaryRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putUserPermissionsBoundaryRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundaryRequestCallCount() int {
	fake.putUserPermissionsBoundaryRequestMutex.RLock()
	defer fake.putUserPermissionsBoundaryRequestMutex.RUnlock()
	return len(fake.putUserPermissionsBoundaryRequestArgsForCall)
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundaryRequestCalls(stub func(*iam.PutUserPermissionsBoundaryInput) (*request.Request, *iam.PutUserPermissionsBoundaryOutput)) {
	fake.putUserPermissionsBoundaryRequestMutex.Lock()
	defer fake.putUserPermissionsBoundaryRequestMutex.Unlock()
	fake.PutUserPermissionsBoundaryRequestStub = stub
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundaryRequestArgsForCall(i int) *iam.PutUserPermissionsBoundaryInput {
	fake.putUserPermissionsBoundaryRequestMutex.RLock()
	defer fake.putUserPermissionsBoundaryRequestMutex.RUnlock()
	argsForCall := fake.putUserPermissionsBoundaryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundaryRequestReturns(result1 *request.Request, result2 *iam.PutUserPermissionsBoundaryOutput) {
	fake.putUserPermissionsBoundaryRequestMutex.Lock()
	defer fake.putUserPermissionsBoundaryRequestMutex.Unlock()
	fake.PutUserPermissionsBoundaryRequestStub = nil
	fake.putUserPermissionsBoundaryRequestReturns = struct {
		result1 *request.Request
		result2 *iam.PutUserPermissionsBoundaryOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundaryRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.PutUserPermissionsBoundaryOutput) {
	fake.putUserPermissionsBoundaryRequestMutex.Lock()
	defer fake.putUserPermissionsBoundaryRequestMutex.Unlock()
	fake.PutUserPermissionsBoundaryRequestStub = nil
	if fake.putUserPermissionsBoundaryRequestReturnsOnCall == nil {
		fake.putUserPermissionsBoundaryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.PutUserPermissionsBoundaryOutput
		})
	}
	fake.putUserPermissionsBoundaryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.PutUserPermissionsBoundaryOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundaryWithContext(arg1 context.Context, arg2 *iam.PutUserPermissionsBoundaryInput, arg3 ...request.Option) (*iam.PutUserPermissionsBoundaryOutput, error) {
	fake.putUserPermissionsBoundaryWithContextMutex.Lock()
	ret, specificReturn := fake.putUserPermissionsBoundaryWithContextReturnsOnCall[len(fake.putUserPermissionsBoundaryWithContextArgsForCall)]
	fake.putUserPermissionsBoundaryWithContextArgsForCall = append(fake.putUserPermissionsBoundaryWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.PutUserPermissionsBoundaryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutUserPermissionsBoundaryWithContext", []interface{}{arg1, arg2, arg3})
	fake.putUserPermissionsBoundaryWithContextMutex.Unlock()
	if fake.PutUserPermissionsBoundaryWithContextStub != nil {
		return fake.PutUserPermissionsBoundaryWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putUserPermissionsBoundaryWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundaryWithContextCallCount() int {
	fake.putUserPermissionsBoundaryWithContextMutex.RLock()
	defer fake.putUserPermissionsBoundaryWithContextMutex.RUnlock()
	return len(fake.putUserPermissionsBoundaryWithContextArgsForCall)
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundaryWithContextCalls(stub func(context.Context, *iam.PutUserPermissionsBoundaryInput, ...request.Option) (*iam.PutUserPermissionsBoundaryOutput, error)) {
	fake.putUserPermissionsBoundaryWithContextMutex.Lock()
	defer fake.putUserPermissionsBoundaryWithContextMutex.Unlock()
	fake.PutUserPermissionsBoundaryWithContextStub = stub
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundaryWithContextArgsForCall(i int) (context.Context, *iam.PutUserPermissionsBoundaryInput, []request.Option) {
	fake.putUserPermissionsBoundaryWithContextMutex.RLock()
	defer fake.putUserPermissionsBoundaryWithContextMutex.RUnlock()
	argsForCall := fake.putUserPermissionsBoundaryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundaryWithContextReturns(result1 *iam.PutUserPermissionsBoundaryOutput, result2 error) {
	fake.putUserPermissionsBoundaryWithContextMutex.Lock()
	defer fake.putUserPermissionsBoundaryWithContextMutex.Unlock()
	fake.PutUserPermissionsBoundaryWithContextStub = nil
	fake.putUserPermissionsBoundaryWithContextReturns = struct {
		result1 *iam.PutUserPermissionsBoundaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutUserPermissionsBoundaryWithContextReturnsOnCall(i int, result1 *iam.PutUserPermissionsBoundaryOutput, result2 error) {
	fake.putUserPermissionsBoundaryWithContextMutex.Lock()
	defer fake.putUserPermissionsBoundaryWithContextMutex.Unlock()
	fake.PutUserPermissionsBoundaryWithContextStub = nil
	if fake.putUserPermissionsBoundaryWithContextReturnsOnCall == nil {
		fake.putUserPermissionsBoundaryWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.PutUserPermissionsBoundaryOutput
			result2 error
		})
	}
	fake.putUserPermissionsBoundaryWithContextReturnsOnCall[i] = struct {
		result1 *iam.PutUserPermissionsBoundaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutUserPolicy(arg1 *iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error) {
	fake.putUserPolicyMutex.Lock()
	ret, specificReturn := fake.putUserPolicyReturnsOnCall[len(fake.putUserPolicyArgsForCall)]
	fake.putUserPolicyArgsForCall = append(fake.putUserPolicyArgsForCall, struct {
		arg1 *iam.PutUserPolicyInput
	}{arg1})
	fake.recordInvocation("PutUserPolicy", []interface{}{arg1})
	fake.putUserPolicyMutex.Unlock()
	if fake.PutUserPolicyStub != nil {
		return fake.PutUserPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putUserPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) PutUserPolicyCallCount() int {
	fake.putUserPolicyMutex.RLock()
	defer fake.putUserPolicyMutex.RUnlock()
	return len(fake.putUserPolicyArgsForCall)
}

func (fake *FakeIAMAPI) PutUserPolicyCalls(stub func(*iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error)) {
	fake.putUserPolicyMutex.Lock()
	defer fake.putUserPolicyMutex.Unlock()
	fake.PutUserPolicyStub = stub
}

func (fake *FakeIAMAPI) PutUserPolicyArgsForCall(i int) *iam.PutUserPolicyInput {
	fake.putUserPolicyMutex.RLock()
	defer fake.putUserPolicyMutex.RUnlock()
	argsForCall := fake.putUserPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) PutUserPolicyReturns(result1 *iam.PutUserPolicyOutput, result2 error) {
	fake.putUserPolicyMutex.Lock()
	defer fake.putUserPolicyMutex.Unlock()
	fake.PutUserPolicyStub = nil
	fake.putUserPolicyReturns = struct {
		result1 *iam.PutUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutUserPolicyReturnsOnCall(i int, result1 *iam.PutUserPolicyOutput, result2 error) {
	fake.putUserPolicyMutex.Lock()
	defer fake.putUserPolicyMutex.Unlock()
	fake.PutUserPolicyStub = nil
	if fake.putUserPolicyReturnsOnCall == nil {
		fake.putUserPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.PutUserPolicyOutput
			result2 error
		})
	}
	fake.putUserPolicyReturnsOnCall[i] = struct {
		result1 *iam.PutUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutUserPolicyRequest(arg1 *iam.PutUserPolicyInput) (*request.Request, *iam.PutUserPolicyOutput) {
	fake.putUserPolicyRequestMutex.Lock()
	ret, specificReturn := fake.putUserPolicyRequestReturnsOnCall[len(fake.putUserPolicyRequestArgsForCall)]
	fake.putUserPolicyRequestArgsForCall = append(fake.putUserPolicyRequestArgsForCall, struct {
		arg1 *iam.PutUserPolicyInput
	}{arg1})
	fake.recordInvocation("PutUserPolicyRequest", []interface{}{arg1})
	fake.putUserPolicyRequestMutex.Unlock()
	if fake.PutUserPolicyRequestStub != nil {
		return fake.PutUserPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putUserPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) PutUserPolicyRequestCallCount() int {
	fake.putUserPolicyRequestMutex.RLock()
	defer fake.putUserPolicyRequestMutex.RUnlock()
	return len(fake.putUserPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) PutUserPolicyRequestCalls(stub func(*iam.PutUserPolicyInput) (*request.Request, *iam.PutUserPolicyOutput)) {
	fake.putUserPolicyRequestMutex.Lock()
	defer fake.putUserPolicyRequestMutex.Unlock()
	fake.PutUserPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) PutUserPolicyRequestArgsForCall(i int) *iam.PutUserPolicyInput {
	fake.putUserPolicyRequestMutex.RLock()
	defer fake.putUserPolicyRequestMutex.RUnlock()
	argsForCall := fake.putUserPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) PutUserPolicyRequestReturns(result1 *request.Request, result2 *iam.PutUserPolicyOutput) {
	fake.putUserPolicyRequestMutex.Lock()
	defer fake.putUserPolicyRequestMutex.Unlock()
	fake.PutUserPolicyRequestStub = nil
	fake.putUserPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.PutUserPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutUserPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.PutUserPolicyOutput) {
	fake.putUserPolicyRequestMutex.Lock()
	defer fake.putUserPolicyRequestMutex.Unlock()
	fake.PutUserPolicyRequestStub = nil
	if fake.putUserPolicyRequestReturnsOnCall == nil {
		fake.putUserPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.PutUserPolicyOutput
		})
	}
	fake.putUserPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.PutUserPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutUserPolicyWithContext(arg1 context.Context, arg2 *iam.PutUserPolicyInput, arg3 ...request.Option) (*iam.PutUserPolicyOutput, error) {
	fake.putUserPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.putUserPolicyWithContextReturnsOnCall[len(fake.putUserPolicyWithContextArgsForCall)]
	fake.putUserPolicyWithContextArgsForCall = append(fake.putUserPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.PutUserPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutUserPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.putUserPolicyWithContextMutex.Unlock()
	if fake.PutUserPolicyWithContextStub != nil {
		return fake.PutUserPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putUserPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) PutUserPolicyWithContextCallCount() int {
	fake.putUserPolicyWithContextMutex.RLock()
	defer fake.putUserPolicyWithContextMutex.RUnlock()
	return len(fake.putUserPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) PutUserPolicyWithContextCalls(stub func(context.Context, *iam.PutUserPolicyInput, ...request.Option) (*iam.PutUserPolicyOutput, error)) {
	fake.putUserPolicyWithContextMutex.Lock()
	defer fake.putUserPolicyWithContextMutex.Unlock()
	fake.PutUserPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) PutUserPolicyWithContextArgsForCall(i int) (context.Context, *iam.PutUserPolicyInput, []request.Option) {
	fake.putUserPolicyWithContextMutex.RLock()
	defer fake.putUserPolicyWithContextMutex.RUnlock()
	argsForCall := fake.putUserPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) PutUserPolicyWithContextReturns(result1 *iam.PutUserPolicyOutput, result2 error) {
	fake.putUserPolicyWithContextMutex.Lock()
	defer fake.putUserPolicyWithContextMutex.Unlock()
	fake.PutUserPolicyWithContextStub = nil
	fake.putUserPolicyWithContextReturns = struct {
		result1 *iam.PutUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) PutUserPolicyWithContextReturnsOnCall(i int, result1 *iam.PutUserPolicyOutput, result2 error) {
	fake.putUserPolicyWithContextMutex.Lock()
	defer fake.putUserPolicyWithContextMutex.Unlock()
	fake.PutUserPolicyWithContextStub = nil
	if fake.putUserPolicyWithContextReturnsOnCall == nil {
		fake.putUserPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.PutUserPolicyOutput
			result2 error
		})
	}
	fake.putUserPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.PutUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProvider(arg1 *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	fake.removeClientIDFromOpenIDConnectProviderMutex.Lock()
	ret, specificReturn := fake.removeClientIDFromOpenIDConnectProviderReturnsOnCall[len(fake.removeClientIDFromOpenIDConnectProviderArgsForCall)]
	fake.removeClientIDFromOpenIDConnectProviderArgsForCall = append(fake.removeClientIDFromOpenIDConnectProviderArgsForCall, struct {
		arg1 *iam.RemoveClientIDFromOpenIDConnectProviderInput
	}{arg1})
	fake.recordInvocation("RemoveClientIDFromOpenIDConnectProvider", []interface{}{arg1})
	fake.removeClientIDFromOpenIDConnectProviderMutex.Unlock()
	if fake.RemoveClientIDFromOpenIDConnectProviderStub != nil {
		return fake.RemoveClientIDFromOpenIDConnectProviderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.removeClientIDFromOpenIDConnectProviderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProviderCallCount() int {
	fake.removeClientIDFromOpenIDConnectProviderMutex.RLock()
	defer fake.removeClientIDFromOpenIDConnectProviderMutex.RUnlock()
	return len(fake.removeClientIDFromOpenIDConnectProviderArgsForCall)
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProviderCalls(stub func(*iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error)) {
	fake.removeClientIDFromOpenIDConnectProviderMutex.Lock()
	defer fake.removeClientIDFromOpenIDConnectProviderMutex.Unlock()
	fake.RemoveClientIDFromOpenIDConnectProviderStub = stub
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProviderArgsForCall(i int) *iam.RemoveClientIDFromOpenIDConnectProviderInput {
	fake.removeClientIDFromOpenIDConnectProviderMutex.RLock()
	defer fake.removeClientIDFromOpenIDConnectProviderMutex.RUnlock()
	argsForCall := fake.removeClientIDFromOpenIDConnectProviderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProviderReturns(result1 *iam.RemoveClientIDFromOpenIDConnectProviderOutput, result2 error) {
	fake.removeClientIDFromOpenIDConnectProviderMutex.Lock()
	defer fake.removeClientIDFromOpenIDConnectProviderMutex.Unlock()
	fake.RemoveClientIDFromOpenIDConnectProviderStub = nil
	fake.removeClientIDFromOpenIDConnectProviderReturns = struct {
		result1 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProviderReturnsOnCall(i int, result1 *iam.RemoveClientIDFromOpenIDConnectProviderOutput, result2 error) {
	fake.removeClientIDFromOpenIDConnectProviderMutex.Lock()
	defer fake.removeClientIDFromOpenIDConnectProviderMutex.Unlock()
	fake.RemoveClientIDFromOpenIDConnectProviderStub = nil
	if fake.removeClientIDFromOpenIDConnectProviderReturnsOnCall == nil {
		fake.removeClientIDFromOpenIDConnectProviderReturnsOnCall = make(map[int]struct {
			result1 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
			result2 error
		})
	}
	fake.removeClientIDFromOpenIDConnectProviderReturnsOnCall[i] = struct {
		result1 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProviderRequest(arg1 *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*request.Request, *iam.RemoveClientIDFromOpenIDConnectProviderOutput) {
	fake.removeClientIDFromOpenIDConnectProviderRequestMutex.Lock()
	ret, specificReturn := fake.removeClientIDFromOpenIDConnectProviderRequestReturnsOnCall[len(fake.removeClientIDFromOpenIDConnectProviderRequestArgsForCall)]
	fake.removeClientIDFromOpenIDConnectProviderRequestArgsForCall = append(fake.removeClientIDFromOpenIDConnectProviderRequestArgsForCall, struct {
		arg1 *iam.RemoveClientIDFromOpenIDConnectProviderInput
	}{arg1})
	fake.recordInvocation("RemoveClientIDFromOpenIDConnectProviderRequest", []interface{}{arg1})
	fake.removeClientIDFromOpenIDConnectProviderRequestMutex.Unlock()
	if fake.RemoveClientIDFromOpenIDConnectProviderRequestStub != nil {
		return fake.RemoveClientIDFromOpenIDConnectProviderRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.removeClientIDFromOpenIDConnectProviderRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProviderRequestCallCount() int {
	fake.removeClientIDFromOpenIDConnectProviderRequestMutex.RLock()
	defer fake.removeClientIDFromOpenIDConnectProviderRequestMutex.RUnlock()
	return len(fake.removeClientIDFromOpenIDConnectProviderRequestArgsForCall)
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProviderRequestCalls(stub func(*iam.RemoveClientIDFromOpenIDConnectProviderInput) (*request.Request, *iam.RemoveClientIDFromOpenIDConnectProviderOutput)) {
	fake.removeClientIDFromOpenIDConnectProviderRequestMutex.Lock()
	defer fake.removeClientIDFromOpenIDConnectProviderRequestMutex.Unlock()
	fake.RemoveClientIDFromOpenIDConnectProviderRequestStub = stub
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProviderRequestArgsForCall(i int) *iam.RemoveClientIDFromOpenIDConnectProviderInput {
	fake.removeClientIDFromOpenIDConnectProviderRequestMutex.RLock()
	defer fake.removeClientIDFromOpenIDConnectProviderRequestMutex.RUnlock()
	argsForCall := fake.removeClientIDFromOpenIDConnectProviderRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProviderRequestReturns(result1 *request.Request, result2 *iam.RemoveClientIDFromOpenIDConnectProviderOutput) {
	fake.removeClientIDFromOpenIDConnectProviderRequestMutex.Lock()
	defer fake.removeClientIDFromOpenIDConnectProviderRequestMutex.Unlock()
	fake.RemoveClientIDFromOpenIDConnectProviderRequestStub = nil
	fake.removeClientIDFromOpenIDConnectProviderRequestReturns = struct {
		result1 *request.Request
		result2 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProviderRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.RemoveClientIDFromOpenIDConnectProviderOutput) {
	fake.removeClientIDFromOpenIDConnectProviderRequestMutex.Lock()
	defer fake.removeClientIDFromOpenIDConnectProviderRequestMutex.Unlock()
	fake.RemoveClientIDFromOpenIDConnectProviderRequestStub = nil
	if fake.removeClientIDFromOpenIDConnectProviderRequestReturnsOnCall == nil {
		fake.removeClientIDFromOpenIDConnectProviderRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
		})
	}
	fake.removeClientIDFromOpenIDConnectProviderRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProviderWithContext(arg1 context.Context, arg2 *iam.RemoveClientIDFromOpenIDConnectProviderInput, arg3 ...request.Option) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	fake.removeClientIDFromOpenIDConnectProviderWithContextMutex.Lock()
	ret, specificReturn := fake.removeClientIDFromOpenIDConnectProviderWithContextReturnsOnCall[len(fake.removeClientIDFromOpenIDConnectProviderWithContextArgsForCall)]
	fake.removeClientIDFromOpenIDConnectProviderWithContextArgsForCall = append(fake.removeClientIDFromOpenIDConnectProviderWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.RemoveClientIDFromOpenIDConnectProviderInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RemoveClientIDFromOpenIDConnectProviderWithContext", []interface{}{arg1, arg2, arg3})
	fake.removeClientIDFromOpenIDConnectProviderWithContextMutex.Unlock()
	if fake.RemoveClientIDFromOpenIDConnectProviderWithContextStub != nil {
		return fake.RemoveClientIDFromOpenIDConnectProviderWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.removeClientIDFromOpenIDConnectProviderWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProviderWithContextCallCount() int {
	fake.removeClientIDFromOpenIDConnectProviderWithContextMutex.RLock()
	defer fake.removeClientIDFromOpenIDConnectProviderWithContextMutex.RUnlock()
	return len(fake.removeClientIDFromOpenIDConnectProviderWithContextArgsForCall)
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProviderWithContextCalls(stub func(context.Context, *iam.RemoveClientIDFromOpenIDConnectProviderInput, ...request.Option) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error)) {
	fake.removeClientIDFromOpenIDConnectProviderWithContextMutex.Lock()
	defer fake.removeClientIDFromOpenIDConnectProviderWithContextMutex.Unlock()
	fake.RemoveClientIDFromOpenIDConnectProviderWithContextStub = stub
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProviderWithContextArgsForCall(i int) (context.Context, *iam.RemoveClientIDFromOpenIDConnectProviderInput, []request.Option) {
	fake.removeClientIDFromOpenIDConnectProviderWithContextMutex.RLock()
	defer fake.removeClientIDFromOpenIDConnectProviderWithContextMutex.RUnlock()
	argsForCall := fake.removeClientIDFromOpenIDConnectProviderWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProviderWithContextReturns(result1 *iam.RemoveClientIDFromOpenIDConnectProviderOutput, result2 error) {
	fake.removeClientIDFromOpenIDConnectProviderWithContextMutex.Lock()
	defer fake.removeClientIDFromOpenIDConnectProviderWithContextMutex.Unlock()
	fake.RemoveClientIDFromOpenIDConnectProviderWithContextStub = nil
	fake.removeClientIDFromOpenIDConnectProviderWithContextReturns = struct {
		result1 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveClientIDFromOpenIDConnectProviderWithContextReturnsOnCall(i int, result1 *iam.RemoveClientIDFromOpenIDConnectProviderOutput, result2 error) {
	fake.removeClientIDFromOpenIDConnectProviderWithContextMutex.Lock()
	defer fake.removeClientIDFromOpenIDConnectProviderWithContextMutex.Unlock()
	fake.RemoveClientIDFromOpenIDConnectProviderWithContextStub = nil
	if fake.removeClientIDFromOpenIDConnectProviderWithContextReturnsOnCall == nil {
		fake.removeClientIDFromOpenIDConnectProviderWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
			result2 error
		})
	}
	fake.removeClientIDFromOpenIDConnectProviderWithContextReturnsOnCall[i] = struct {
		result1 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfile(arg1 *iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	fake.removeRoleFromInstanceProfileMutex.Lock()
	ret, specificReturn := fake.removeRoleFromInstanceProfileReturnsOnCall[len(fake.removeRoleFromInstanceProfileArgsForCall)]
	fake.removeRoleFromInstanceProfileArgsForCall = append(fake.removeRoleFromInstanceProfileArgsForCall, struct {
		arg1 *iam.RemoveRoleFromInstanceProfileInput
	}{arg1})
	fake.recordInvocation("RemoveRoleFromInstanceProfile", []interface{}{arg1})
	fake.removeRoleFromInstanceProfileMutex.Unlock()
	if fake.RemoveRoleFromInstanceProfileStub != nil {
		return fake.RemoveRoleFromInstanceProfileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.removeRoleFromInstanceProfileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfileCallCount() int {
	fake.removeRoleFromInstanceProfileMutex.RLock()
	defer fake.removeRoleFromInstanceProfileMutex.RUnlock()
	return len(fake.removeRoleFromInstanceProfileArgsForCall)
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfileCalls(stub func(*iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error)) {
	fake.removeRoleFromInstanceProfileMutex.Lock()
	defer fake.removeRoleFromInstanceProfileMutex.Unlock()
	fake.RemoveRoleFromInstanceProfileStub = stub
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfileArgsForCall(i int) *iam.RemoveRoleFromInstanceProfileInput {
	fake.removeRoleFromInstanceProfileMutex.RLock()
	defer fake.removeRoleFromInstanceProfileMutex.RUnlock()
	argsForCall := fake.removeRoleFromInstanceProfileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfileReturns(result1 *iam.RemoveRoleFromInstanceProfileOutput, result2 error) {
	fake.removeRoleFromInstanceProfileMutex.Lock()
	defer fake.removeRoleFromInstanceProfileMutex.Unlock()
	fake.RemoveRoleFromInstanceProfileStub = nil
	fake.removeRoleFromInstanceProfileReturns = struct {
		result1 *iam.RemoveRoleFromInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfileReturnsOnCall(i int, result1 *iam.RemoveRoleFromInstanceProfileOutput, result2 error) {
	fake.removeRoleFromInstanceProfileMutex.Lock()
	defer fake.removeRoleFromInstanceProfileMutex.Unlock()
	fake.RemoveRoleFromInstanceProfileStub = nil
	if fake.removeRoleFromInstanceProfileReturnsOnCall == nil {
		fake.removeRoleFromInstanceProfileReturnsOnCall = make(map[int]struct {
			result1 *iam.RemoveRoleFromInstanceProfileOutput
			result2 error
		})
	}
	fake.removeRoleFromInstanceProfileReturnsOnCall[i] = struct {
		result1 *iam.RemoveRoleFromInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfileRequest(arg1 *iam.RemoveRoleFromInstanceProfileInput) (*request.Request, *iam.RemoveRoleFromInstanceProfileOutput) {
	fake.removeRoleFromInstanceProfileRequestMutex.Lock()
	ret, specificReturn := fake.removeRoleFromInstanceProfileRequestReturnsOnCall[len(fake.removeRoleFromInstanceProfileRequestArgsForCall)]
	fake.removeRoleFromInstanceProfileRequestArgsForCall = append(fake.removeRoleFromInstanceProfileRequestArgsForCall, struct {
		arg1 *iam.RemoveRoleFromInstanceProfileInput
	}{arg1})
	fake.recordInvocation("RemoveRoleFromInstanceProfileRequest", []interface{}{arg1})
	fake.removeRoleFromInstanceProfileRequestMutex.Unlock()
	if fake.RemoveRoleFromInstanceProfileRequestStub != nil {
		return fake.RemoveRoleFromInstanceProfileRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.removeRoleFromInstanceProfileRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfileRequestCallCount() int {
	fake.removeRoleFromInstanceProfileRequestMutex.RLock()
	defer fake.removeRoleFromInstanceProfileRequestMutex.RUnlock()
	return len(fake.removeRoleFromInstanceProfileRequestArgsForCall)
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfileRequestCalls(stub func(*iam.RemoveRoleFromInstanceProfileInput) (*request.Request, *iam.RemoveRoleFromInstanceProfileOutput)) {
	fake.removeRoleFromInstanceProfileRequestMutex.Lock()
	defer fake.removeRoleFromInstanceProfileRequestMutex.Unlock()
	fake.RemoveRoleFromInstanceProfileRequestStub = stub
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfileRequestArgsForCall(i int) *iam.RemoveRoleFromInstanceProfileInput {
	fake.removeRoleFromInstanceProfileRequestMutex.RLock()
	defer fake.removeRoleFromInstanceProfileRequestMutex.RUnlock()
	argsForCall := fake.removeRoleFromInstanceProfileRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfileRequestReturns(result1 *request.Request, result2 *iam.RemoveRoleFromInstanceProfileOutput) {
	fake.removeRoleFromInstanceProfileRequestMutex.Lock()
	defer fake.removeRoleFromInstanceProfileRequestMutex.Unlock()
	fake.RemoveRoleFromInstanceProfileRequestStub = nil
	fake.removeRoleFromInstanceProfileRequestReturns = struct {
		result1 *request.Request
		result2 *iam.RemoveRoleFromInstanceProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfileRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.RemoveRoleFromInstanceProfileOutput) {
	fake.removeRoleFromInstanceProfileRequestMutex.Lock()
	defer fake.removeRoleFromInstanceProfileRequestMutex.Unlock()
	fake.RemoveRoleFromInstanceProfileRequestStub = nil
	if fake.removeRoleFromInstanceProfileRequestReturnsOnCall == nil {
		fake.removeRoleFromInstanceProfileRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.RemoveRoleFromInstanceProfileOutput
		})
	}
	fake.removeRoleFromInstanceProfileRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.RemoveRoleFromInstanceProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfileWithContext(arg1 context.Context, arg2 *iam.RemoveRoleFromInstanceProfileInput, arg3 ...request.Option) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	fake.removeRoleFromInstanceProfileWithContextMutex.Lock()
	ret, specificReturn := fake.removeRoleFromInstanceProfileWithContextReturnsOnCall[len(fake.removeRoleFromInstanceProfileWithContextArgsForCall)]
	fake.removeRoleFromInstanceProfileWithContextArgsForCall = append(fake.removeRoleFromInstanceProfileWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.RemoveRoleFromInstanceProfileInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RemoveRoleFromInstanceProfileWithContext", []interface{}{arg1, arg2, arg3})
	fake.removeRoleFromInstanceProfileWithContextMutex.Unlock()
	if fake.RemoveRoleFromInstanceProfileWithContextStub != nil {
		return fake.RemoveRoleFromInstanceProfileWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.removeRoleFromInstanceProfileWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfileWithContextCallCount() int {
	fake.removeRoleFromInstanceProfileWithContextMutex.RLock()
	defer fake.removeRoleFromInstanceProfileWithContextMutex.RUnlock()
	return len(fake.removeRoleFromInstanceProfileWithContextArgsForCall)
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfileWithContextCalls(stub func(context.Context, *iam.RemoveRoleFromInstanceProfileInput, ...request.Option) (*iam.RemoveRoleFromInstanceProfileOutput, error)) {
	fake.removeRoleFromInstanceProfileWithContextMutex.Lock()
	defer fake.removeRoleFromInstanceProfileWithContextMutex.Unlock()
	fake.RemoveRoleFromInstanceProfileWithContextStub = stub
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfileWithContextArgsForCall(i int) (context.Context, *iam.RemoveRoleFromInstanceProfileInput, []request.Option) {
	fake.removeRoleFromInstanceProfileWithContextMutex.RLock()
	defer fake.removeRoleFromInstanceProfileWithContextMutex.RUnlock()
	argsForCall := fake.removeRoleFromInstanceProfileWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfileWithContextReturns(result1 *iam.RemoveRoleFromInstanceProfileOutput, result2 error) {
	fake.removeRoleFromInstanceProfileWithContextMutex.Lock()
	defer fake.removeRoleFromInstanceProfileWithContextMutex.Unlock()
	fake.RemoveRoleFromInstanceProfileWithContextStub = nil
	fake.removeRoleFromInstanceProfileWithContextReturns = struct {
		result1 *iam.RemoveRoleFromInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveRoleFromInstanceProfileWithContextReturnsOnCall(i int, result1 *iam.RemoveRoleFromInstanceProfileOutput, result2 error) {
	fake.removeRoleFromInstanceProfileWithContextMutex.Lock()
	defer fake.removeRoleFromInstanceProfileWithContextMutex.Unlock()
	fake.RemoveRoleFromInstanceProfileWithContextStub = nil
	if fake.removeRoleFromInstanceProfileWithContextReturnsOnCall == nil {
		fake.removeRoleFromInstanceProfileWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.RemoveRoleFromInstanceProfileOutput
			result2 error
		})
	}
	fake.removeRoleFromInstanceProfileWithContextReturnsOnCall[i] = struct {
		result1 *iam.RemoveRoleFromInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveUserFromGroup(arg1 *iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error) {
	fake.removeUserFromGroupMutex.Lock()
	ret, specificReturn := fake.removeUserFromGroupReturnsOnCall[len(fake.removeUserFromGroupArgsForCall)]
	fake.removeUserFromGroupArgsForCall = append(fake.removeUserFromGroupArgsForCall, struct {
		arg1 *iam.RemoveUserFromGroupInput
	}{arg1})
	fake.recordInvocation("RemoveUserFromGroup", []interface{}{arg1})
	fake.removeUserFromGroupMutex.Unlock()
	if fake.RemoveUserFromGroupStub != nil {
		return fake.RemoveUserFromGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.removeUserFromGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) RemoveUserFromGroupCallCount() int {
	fake.removeUserFromGroupMutex.RLock()
	defer fake.removeUserFromGroupMutex.RUnlock()
	return len(fake.removeUserFromGroupArgsForCall)
}

func (fake *FakeIAMAPI) RemoveUserFromGroupCalls(stub func(*iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error)) {
	fake.removeUserFromGroupMutex.Lock()
	defer fake.removeUserFromGroupMutex.Unlock()
	fake.RemoveUserFromGroupStub = stub
}

func (fake *FakeIAMAPI) RemoveUserFromGroupArgsForCall(i int) *iam.RemoveUserFromGroupInput {
	fake.removeUserFromGroupMutex.RLock()
	defer fake.removeUserFromGroupMutex.RUnlock()
	argsForCall := fake.removeUserFromGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) RemoveUserFromGroupReturns(result1 *iam.RemoveUserFromGroupOutput, result2 error) {
	fake.removeUserFromGroupMutex.Lock()
	defer fake.removeUserFromGroupMutex.Unlock()
	fake.RemoveUserFromGroupStub = nil
	fake.removeUserFromGroupReturns = struct {
		result1 *iam.RemoveUserFromGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveUserFromGroupReturnsOnCall(i int, result1 *iam.RemoveUserFromGroupOutput, result2 error) {
	fake.removeUserFromGroupMutex.Lock()
	defer fake.removeUserFromGroupMutex.Unlock()
	fake.RemoveUserFromGroupStub = nil
	if fake.removeUserFromGroupReturnsOnCall == nil {
		fake.removeUserFromGroupReturnsOnCall = make(map[int]struct {
			result1 *iam.RemoveUserFromGroupOutput
			result2 error
		})
	}
	fake.removeUserFromGroupReturnsOnCall[i] = struct {
		result1 *iam.RemoveUserFromGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveUserFromGroupRequest(arg1 *iam.RemoveUserFromGroupInput) (*request.Request, *iam.RemoveUserFromGroupOutput) {
	fake.removeUserFromGroupRequestMutex.Lock()
	ret, specificReturn := fake.removeUserFromGroupRequestReturnsOnCall[len(fake.removeUserFromGroupRequestArgsForCall)]
	fake.removeUserFromGroupRequestArgsForCall = append(fake.removeUserFromGroupRequestArgsForCall, struct {
		arg1 *iam.RemoveUserFromGroupInput
	}{arg1})
	fake.recordInvocation("RemoveUserFromGroupRequest", []interface{}{arg1})
	fake.removeUserFromGroupRequestMutex.Unlock()
	if fake.RemoveUserFromGroupRequestStub != nil {
		return fake.RemoveUserFromGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.removeUserFromGroupRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) RemoveUserFromGroupRequestCallCount() int {
	fake.removeUserFromGroupRequestMutex.RLock()
	defer fake.removeUserFromGroupRequestMutex.RUnlock()
	return len(fake.removeUserFromGroupRequestArgsForCall)
}

func (fake *FakeIAMAPI) RemoveUserFromGroupRequestCalls(stub func(*iam.RemoveUserFromGroupInput) (*request.Request, *iam.RemoveUserFromGroupOutput)) {
	fake.removeUserFromGroupRequestMutex.Lock()
	defer fake.removeUserFromGroupRequestMutex.Unlock()
	fake.RemoveUserFromGroupRequestStub = stub
}

func (fake *FakeIAMAPI) RemoveUserFromGroupRequestArgsForCall(i int) *iam.RemoveUserFromGroupInput {
	fake.removeUserFromGroupRequestMutex.RLock()
	defer fake.removeUserFromGroupRequestMutex.RUnlock()
	argsForCall := fake.removeUserFromGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) RemoveUserFromGroupRequestReturns(result1 *request.Request, result2 *iam.RemoveUserFromGroupOutput) {
	fake.removeUserFromGroupRequestMutex.Lock()
	defer fake.removeUserFromGroupRequestMutex.Unlock()
	fake.RemoveUserFromGroupRequestStub = nil
	fake.removeUserFromGroupRequestReturns = struct {
		result1 *request.Request
		result2 *iam.RemoveUserFromGroupOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveUserFromGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.RemoveUserFromGroupOutput) {
	fake.removeUserFromGroupRequestMutex.Lock()
	defer fake.removeUserFromGroupRequestMutex.Unlock()
	fake.RemoveUserFromGroupRequestStub = nil
	if fake.removeUserFromGroupRequestReturnsOnCall == nil {
		fake.removeUserFromGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.RemoveUserFromGroupOutput
		})
	}
	fake.removeUserFromGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.RemoveUserFromGroupOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveUserFromGroupWithContext(arg1 context.Context, arg2 *iam.RemoveUserFromGroupInput, arg3 ...request.Option) (*iam.RemoveUserFromGroupOutput, error) {
	fake.removeUserFromGroupWithContextMutex.Lock()
	ret, specificReturn := fake.removeUserFromGroupWithContextReturnsOnCall[len(fake.removeUserFromGroupWithContextArgsForCall)]
	fake.removeUserFromGroupWithContextArgsForCall = append(fake.removeUserFromGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.RemoveUserFromGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RemoveUserFromGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.removeUserFromGroupWithContextMutex.Unlock()
	if fake.RemoveUserFromGroupWithContextStub != nil {
		return fake.RemoveUserFromGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.removeUserFromGroupWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) RemoveUserFromGroupWithContextCallCount() int {
	fake.removeUserFromGroupWithContextMutex.RLock()
	defer fake.removeUserFromGroupWithContextMutex.RUnlock()
	return len(fake.removeUserFromGroupWithContextArgsForCall)
}

func (fake *FakeIAMAPI) RemoveUserFromGroupWithContextCalls(stub func(context.Context, *iam.RemoveUserFromGroupInput, ...request.Option) (*iam.RemoveUserFromGroupOutput, error)) {
	fake.removeUserFromGroupWithContextMutex.Lock()
	defer fake.removeUserFromGroupWithContextMutex.Unlock()
	fake.RemoveUserFromGroupWithContextStub = stub
}

func (fake *FakeIAMAPI) RemoveUserFromGroupWithContextArgsForCall(i int) (context.Context, *iam.RemoveUserFromGroupInput, []request.Option) {
	fake.removeUserFromGroupWithContextMutex.RLock()
	defer fake.removeUserFromGroupWithContextMutex.RUnlock()
	argsForCall := fake.removeUserFromGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) RemoveUserFromGroupWithContextReturns(result1 *iam.RemoveUserFromGroupOutput, result2 error) {
	fake.removeUserFromGroupWithContextMutex.Lock()
	defer fake.removeUserFromGroupWithContextMutex.Unlock()
	fake.RemoveUserFromGroupWithContextStub = nil
	fake.removeUserFromGroupWithContextReturns = struct {
		result1 *iam.RemoveUserFromGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) RemoveUserFromGroupWithContextReturnsOnCall(i int, result1 *iam.RemoveUserFromGroupOutput, result2 error) {
	fake.removeUserFromGroupWithContextMutex.Lock()
	defer fake.removeUserFromGroupWithContextMutex.Unlock()
	fake.RemoveUserFromGroupWithContextStub = nil
	if fake.removeUserFromGroupWithContextReturnsOnCall == nil {
		fake.removeUserFromGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.RemoveUserFromGroupOutput
			result2 error
		})
	}
	fake.removeUserFromGroupWithContextReturnsOnCall[i] = struct {
		result1 *iam.RemoveUserFromGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredential(arg1 *iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error) {
	fake.resetServiceSpecificCredentialMutex.Lock()
	ret, specificReturn := fake.resetServiceSpecificCredentialReturnsOnCall[len(fake.resetServiceSpecificCredentialArgsForCall)]
	fake.resetServiceSpecificCredentialArgsForCall = append(fake.resetServiceSpecificCredentialArgsForCall, struct {
		arg1 *iam.ResetServiceSpecificCredentialInput
	}{arg1})
	fake.recordInvocation("ResetServiceSpecificCredential", []interface{}{arg1})
	fake.resetServiceSpecificCredentialMutex.Unlock()
	if fake.ResetServiceSpecificCredentialStub != nil {
		return fake.ResetServiceSpecificCredentialStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetServiceSpecificCredentialReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredentialCallCount() int {
	fake.resetServiceSpecificCredentialMutex.RLock()
	defer fake.resetServiceSpecificCredentialMutex.RUnlock()
	return len(fake.resetServiceSpecificCredentialArgsForCall)
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredentialCalls(stub func(*iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error)) {
	fake.resetServiceSpecificCredentialMutex.Lock()
	defer fake.resetServiceSpecificCredentialMutex.Unlock()
	fake.ResetServiceSpecificCredentialStub = stub
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredentialArgsForCall(i int) *iam.ResetServiceSpecificCredentialInput {
	fake.resetServiceSpecificCredentialMutex.RLock()
	defer fake.resetServiceSpecificCredentialMutex.RUnlock()
	argsForCall := fake.resetServiceSpecificCredentialArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredentialReturns(result1 *iam.ResetServiceSpecificCredentialOutput, result2 error) {
	fake.resetServiceSpecificCredentialMutex.Lock()
	defer fake.resetServiceSpecificCredentialMutex.Unlock()
	fake.ResetServiceSpecificCredentialStub = nil
	fake.resetServiceSpecificCredentialReturns = struct {
		result1 *iam.ResetServiceSpecificCredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredentialReturnsOnCall(i int, result1 *iam.ResetServiceSpecificCredentialOutput, result2 error) {
	fake.resetServiceSpecificCredentialMutex.Lock()
	defer fake.resetServiceSpecificCredentialMutex.Unlock()
	fake.ResetServiceSpecificCredentialStub = nil
	if fake.resetServiceSpecificCredentialReturnsOnCall == nil {
		fake.resetServiceSpecificCredentialReturnsOnCall = make(map[int]struct {
			result1 *iam.ResetServiceSpecificCredentialOutput
			result2 error
		})
	}
	fake.resetServiceSpecificCredentialReturnsOnCall[i] = struct {
		result1 *iam.ResetServiceSpecificCredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredentialRequest(arg1 *iam.ResetServiceSpecificCredentialInput) (*request.Request, *iam.ResetServiceSpecificCredentialOutput) {
	fake.resetServiceSpecificCredentialRequestMutex.Lock()
	ret, specificReturn := fake.resetServiceSpecificCredentialRequestReturnsOnCall[len(fake.resetServiceSpecificCredentialRequestArgsForCall)]
	fake.resetServiceSpecificCredentialRequestArgsForCall = append(fake.resetServiceSpecificCredentialRequestArgsForCall, struct {
		arg1 *iam.ResetServiceSpecificCredentialInput
	}{arg1})
	fake.recordInvocation("ResetServiceSpecificCredentialRequest", []interface{}{arg1})
	fake.resetServiceSpecificCredentialRequestMutex.Unlock()
	if fake.ResetServiceSpecificCredentialRequestStub != nil {
		return fake.ResetServiceSpecificCredentialRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetServiceSpecificCredentialRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredentialRequestCallCount() int {
	fake.resetServiceSpecificCredentialRequestMutex.RLock()
	defer fake.resetServiceSpecificCredentialRequestMutex.RUnlock()
	return len(fake.resetServiceSpecificCredentialRequestArgsForCall)
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredentialRequestCalls(stub func(*iam.ResetServiceSpecificCredentialInput) (*request.Request, *iam.ResetServiceSpecificCredentialOutput)) {
	fake.resetServiceSpecificCredentialRequestMutex.Lock()
	defer fake.resetServiceSpecificCredentialRequestMutex.Unlock()
	fake.ResetServiceSpecificCredentialRequestStub = stub
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredentialRequestArgsForCall(i int) *iam.ResetServiceSpecificCredentialInput {
	fake.resetServiceSpecificCredentialRequestMutex.RLock()
	defer fake.resetServiceSpecificCredentialRequestMutex.RUnlock()
	argsForCall := fake.resetServiceSpecificCredentialRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredentialRequestReturns(result1 *request.Request, result2 *iam.ResetServiceSpecificCredentialOutput) {
	fake.resetServiceSpecificCredentialRequestMutex.Lock()
	defer fake.resetServiceSpecificCredentialRequestMutex.Unlock()
	fake.ResetServiceSpecificCredentialRequestStub = nil
	fake.resetServiceSpecificCredentialRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ResetServiceSpecificCredentialOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredentialRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ResetServiceSpecificCredentialOutput) {
	fake.resetServiceSpecificCredentialRequestMutex.Lock()
	defer fake.resetServiceSpecificCredentialRequestMutex.Unlock()
	fake.ResetServiceSpecificCredentialRequestStub = nil
	if fake.resetServiceSpecificCredentialRequestReturnsOnCall == nil {
		fake.resetServiceSpecificCredentialRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ResetServiceSpecificCredentialOutput
		})
	}
	fake.resetServiceSpecificCredentialRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ResetServiceSpecificCredentialOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredentialWithContext(arg1 context.Context, arg2 *iam.ResetServiceSpecificCredentialInput, arg3 ...request.Option) (*iam.ResetServiceSpecificCredentialOutput, error) {
	fake.resetServiceSpecificCredentialWithContextMutex.Lock()
	ret, specificReturn := fake.resetServiceSpecificCredentialWithContextReturnsOnCall[len(fake.resetServiceSpecificCredentialWithContextArgsForCall)]
	fake.resetServiceSpecificCredentialWithContextArgsForCall = append(fake.resetServiceSpecificCredentialWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ResetServiceSpecificCredentialInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ResetServiceSpecificCredentialWithContext", []interface{}{arg1, arg2, arg3})
	fake.resetServiceSpecificCredentialWithContextMutex.Unlock()
	if fake.ResetServiceSpecificCredentialWithContextStub != nil {
		return fake.ResetServiceSpecificCredentialWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetServiceSpecificCredentialWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredentialWithContextCallCount() int {
	fake.resetServiceSpecificCredentialWithContextMutex.RLock()
	defer fake.resetServiceSpecificCredentialWithContextMutex.RUnlock()
	return len(fake.resetServiceSpecificCredentialWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredentialWithContextCalls(stub func(context.Context, *iam.ResetServiceSpecificCredentialInput, ...request.Option) (*iam.ResetServiceSpecificCredentialOutput, error)) {
	fake.resetServiceSpecificCredentialWithContextMutex.Lock()
	defer fake.resetServiceSpecificCredentialWithContextMutex.Unlock()
	fake.ResetServiceSpecificCredentialWithContextStub = stub
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredentialWithContextArgsForCall(i int) (context.Context, *iam.ResetServiceSpecificCredentialInput, []request.Option) {
	fake.resetServiceSpecificCredentialWithContextMutex.RLock()
	defer fake.resetServiceSpecificCredentialWithContextMutex.RUnlock()
	argsForCall := fake.resetServiceSpecificCredentialWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredentialWithContextReturns(result1 *iam.ResetServiceSpecificCredentialOutput, result2 error) {
	fake.resetServiceSpecificCredentialWithContextMutex.Lock()
	defer fake.resetServiceSpecificCredentialWithContextMutex.Unlock()
	fake.ResetServiceSpecificCredentialWithContextStub = nil
	fake.resetServiceSpecificCredentialWithContextReturns = struct {
		result1 *iam.ResetServiceSpecificCredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ResetServiceSpecificCredentialWithContextReturnsOnCall(i int, result1 *iam.ResetServiceSpecificCredentialOutput, result2 error) {
	fake.resetServiceSpecificCredentialWithContextMutex.Lock()
	defer fake.resetServiceSpecificCredentialWithContextMutex.Unlock()
	fake.ResetServiceSpecificCredentialWithContextStub = nil
	if fake.resetServiceSpecificCredentialWithContextReturnsOnCall == nil {
		fake.resetServiceSpecificCredentialWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ResetServiceSpecificCredentialOutput
			result2 error
		})
	}
	fake.resetServiceSpecificCredentialWithContextReturnsOnCall[i] = struct {
		result1 *iam.ResetServiceSpecificCredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ResyncMFADevice(arg1 *iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error) {
	fake.resyncMFADeviceMutex.Lock()
	ret, specificReturn := fake.resyncMFADeviceReturnsOnCall[len(fake.resyncMFADeviceArgsForCall)]
	fake.resyncMFADeviceArgsForCall = append(fake.resyncMFADeviceArgsForCall, struct {
		arg1 *iam.ResyncMFADeviceInput
	}{arg1})
	fake.recordInvocation("ResyncMFADevice", []interface{}{arg1})
	fake.resyncMFADeviceMutex.Unlock()
	if fake.ResyncMFADeviceStub != nil {
		return fake.ResyncMFADeviceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resyncMFADeviceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ResyncMFADeviceCallCount() int {
	fake.resyncMFADeviceMutex.RLock()
	defer fake.resyncMFADeviceMutex.RUnlock()
	return len(fake.resyncMFADeviceArgsForCall)
}

func (fake *FakeIAMAPI) ResyncMFADeviceCalls(stub func(*iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error)) {
	fake.resyncMFADeviceMutex.Lock()
	defer fake.resyncMFADeviceMutex.Unlock()
	fake.ResyncMFADeviceStub = stub
}

func (fake *FakeIAMAPI) ResyncMFADeviceArgsForCall(i int) *iam.ResyncMFADeviceInput {
	fake.resyncMFADeviceMutex.RLock()
	defer fake.resyncMFADeviceMutex.RUnlock()
	argsForCall := fake.resyncMFADeviceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ResyncMFADeviceReturns(result1 *iam.ResyncMFADeviceOutput, result2 error) {
	fake.resyncMFADeviceMutex.Lock()
	defer fake.resyncMFADeviceMutex.Unlock()
	fake.ResyncMFADeviceStub = nil
	fake.resyncMFADeviceReturns = struct {
		result1 *iam.ResyncMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ResyncMFADeviceReturnsOnCall(i int, result1 *iam.ResyncMFADeviceOutput, result2 error) {
	fake.resyncMFADeviceMutex.Lock()
	defer fake.resyncMFADeviceMutex.Unlock()
	fake.ResyncMFADeviceStub = nil
	if fake.resyncMFADeviceReturnsOnCall == nil {
		fake.resyncMFADeviceReturnsOnCall = make(map[int]struct {
			result1 *iam.ResyncMFADeviceOutput
			result2 error
		})
	}
	fake.resyncMFADeviceReturnsOnCall[i] = struct {
		result1 *iam.ResyncMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ResyncMFADeviceRequest(arg1 *iam.ResyncMFADeviceInput) (*request.Request, *iam.ResyncMFADeviceOutput) {
	fake.resyncMFADeviceRequestMutex.Lock()
	ret, specificReturn := fake.resyncMFADeviceRequestReturnsOnCall[len(fake.resyncMFADeviceRequestArgsForCall)]
	fake.resyncMFADeviceRequestArgsForCall = append(fake.resyncMFADeviceRequestArgsForCall, struct {
		arg1 *iam.ResyncMFADeviceInput
	}{arg1})
	fake.recordInvocation("ResyncMFADeviceRequest", []interface{}{arg1})
	fake.resyncMFADeviceRequestMutex.Unlock()
	if fake.ResyncMFADeviceRequestStub != nil {
		return fake.ResyncMFADeviceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resyncMFADeviceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ResyncMFADeviceRequestCallCount() int {
	fake.resyncMFADeviceRequestMutex.RLock()
	defer fake.resyncMFADeviceRequestMutex.RUnlock()
	return len(fake.resyncMFADeviceRequestArgsForCall)
}

func (fake *FakeIAMAPI) ResyncMFADeviceRequestCalls(stub func(*iam.ResyncMFADeviceInput) (*request.Request, *iam.ResyncMFADeviceOutput)) {
	fake.resyncMFADeviceRequestMutex.Lock()
	defer fake.resyncMFADeviceRequestMutex.Unlock()
	fake.ResyncMFADeviceRequestStub = stub
}

func (fake *FakeIAMAPI) ResyncMFADeviceRequestArgsForCall(i int) *iam.ResyncMFADeviceInput {
	fake.resyncMFADeviceRequestMutex.RLock()
	defer fake.resyncMFADeviceRequestMutex.RUnlock()
	argsForCall := fake.resyncMFADeviceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) ResyncMFADeviceRequestReturns(result1 *request.Request, result2 *iam.ResyncMFADeviceOutput) {
	fake.resyncMFADeviceRequestMutex.Lock()
	defer fake.resyncMFADeviceRequestMutex.Unlock()
	fake.ResyncMFADeviceRequestStub = nil
	fake.resyncMFADeviceRequestReturns = struct {
		result1 *request.Request
		result2 *iam.ResyncMFADeviceOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ResyncMFADeviceRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.ResyncMFADeviceOutput) {
	fake.resyncMFADeviceRequestMutex.Lock()
	defer fake.resyncMFADeviceRequestMutex.Unlock()
	fake.ResyncMFADeviceRequestStub = nil
	if fake.resyncMFADeviceRequestReturnsOnCall == nil {
		fake.resyncMFADeviceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.ResyncMFADeviceOutput
		})
	}
	fake.resyncMFADeviceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.ResyncMFADeviceOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) ResyncMFADeviceWithContext(arg1 context.Context, arg2 *iam.ResyncMFADeviceInput, arg3 ...request.Option) (*iam.ResyncMFADeviceOutput, error) {
	fake.resyncMFADeviceWithContextMutex.Lock()
	ret, specificReturn := fake.resyncMFADeviceWithContextReturnsOnCall[len(fake.resyncMFADeviceWithContextArgsForCall)]
	fake.resyncMFADeviceWithContextArgsForCall = append(fake.resyncMFADeviceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.ResyncMFADeviceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ResyncMFADeviceWithContext", []interface{}{arg1, arg2, arg3})
	fake.resyncMFADeviceWithContextMutex.Unlock()
	if fake.ResyncMFADeviceWithContextStub != nil {
		return fake.ResyncMFADeviceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resyncMFADeviceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) ResyncMFADeviceWithContextCallCount() int {
	fake.resyncMFADeviceWithContextMutex.RLock()
	defer fake.resyncMFADeviceWithContextMutex.RUnlock()
	return len(fake.resyncMFADeviceWithContextArgsForCall)
}

func (fake *FakeIAMAPI) ResyncMFADeviceWithContextCalls(stub func(context.Context, *iam.ResyncMFADeviceInput, ...request.Option) (*iam.ResyncMFADeviceOutput, error)) {
	fake.resyncMFADeviceWithContextMutex.Lock()
	defer fake.resyncMFADeviceWithContextMutex.Unlock()
	fake.ResyncMFADeviceWithContextStub = stub
}

func (fake *FakeIAMAPI) ResyncMFADeviceWithContextArgsForCall(i int) (context.Context, *iam.ResyncMFADeviceInput, []request.Option) {
	fake.resyncMFADeviceWithContextMutex.RLock()
	defer fake.resyncMFADeviceWithContextMutex.RUnlock()
	argsForCall := fake.resyncMFADeviceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) ResyncMFADeviceWithContextReturns(result1 *iam.ResyncMFADeviceOutput, result2 error) {
	fake.resyncMFADeviceWithContextMutex.Lock()
	defer fake.resyncMFADeviceWithContextMutex.Unlock()
	fake.ResyncMFADeviceWithContextStub = nil
	fake.resyncMFADeviceWithContextReturns = struct {
		result1 *iam.ResyncMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) ResyncMFADeviceWithContextReturnsOnCall(i int, result1 *iam.ResyncMFADeviceOutput, result2 error) {
	fake.resyncMFADeviceWithContextMutex.Lock()
	defer fake.resyncMFADeviceWithContextMutex.Unlock()
	fake.ResyncMFADeviceWithContextStub = nil
	if fake.resyncMFADeviceWithContextReturnsOnCall == nil {
		fake.resyncMFADeviceWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.ResyncMFADeviceOutput
			result2 error
		})
	}
	fake.resyncMFADeviceWithContextReturnsOnCall[i] = struct {
		result1 *iam.ResyncMFADeviceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersion(arg1 *iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error) {
	fake.setDefaultPolicyVersionMutex.Lock()
	ret, specificReturn := fake.setDefaultPolicyVersionReturnsOnCall[len(fake.setDefaultPolicyVersionArgsForCall)]
	fake.setDefaultPolicyVersionArgsForCall = append(fake.setDefaultPolicyVersionArgsForCall, struct {
		arg1 *iam.SetDefaultPolicyVersionInput
	}{arg1})
	fake.recordInvocation("SetDefaultPolicyVersion", []interface{}{arg1})
	fake.setDefaultPolicyVersionMutex.Unlock()
	if fake.SetDefaultPolicyVersionStub != nil {
		return fake.SetDefaultPolicyVersionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setDefaultPolicyVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersionCallCount() int {
	fake.setDefaultPolicyVersionMutex.RLock()
	defer fake.setDefaultPolicyVersionMutex.RUnlock()
	return len(fake.setDefaultPolicyVersionArgsForCall)
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersionCalls(stub func(*iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error)) {
	fake.setDefaultPolicyVersionMutex.Lock()
	defer fake.setDefaultPolicyVersionMutex.Unlock()
	fake.SetDefaultPolicyVersionStub = stub
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersionArgsForCall(i int) *iam.SetDefaultPolicyVersionInput {
	fake.setDefaultPolicyVersionMutex.RLock()
	defer fake.setDefaultPolicyVersionMutex.RUnlock()
	argsForCall := fake.setDefaultPolicyVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersionReturns(result1 *iam.SetDefaultPolicyVersionOutput, result2 error) {
	fake.setDefaultPolicyVersionMutex.Lock()
	defer fake.setDefaultPolicyVersionMutex.Unlock()
	fake.SetDefaultPolicyVersionStub = nil
	fake.setDefaultPolicyVersionReturns = struct {
		result1 *iam.SetDefaultPolicyVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersionReturnsOnCall(i int, result1 *iam.SetDefaultPolicyVersionOutput, result2 error) {
	fake.setDefaultPolicyVersionMutex.Lock()
	defer fake.setDefaultPolicyVersionMutex.Unlock()
	fake.SetDefaultPolicyVersionStub = nil
	if fake.setDefaultPolicyVersionReturnsOnCall == nil {
		fake.setDefaultPolicyVersionReturnsOnCall = make(map[int]struct {
			result1 *iam.SetDefaultPolicyVersionOutput
			result2 error
		})
	}
	fake.setDefaultPolicyVersionReturnsOnCall[i] = struct {
		result1 *iam.SetDefaultPolicyVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersionRequest(arg1 *iam.SetDefaultPolicyVersionInput) (*request.Request, *iam.SetDefaultPolicyVersionOutput) {
	fake.setDefaultPolicyVersionRequestMutex.Lock()
	ret, specificReturn := fake.setDefaultPolicyVersionRequestReturnsOnCall[len(fake.setDefaultPolicyVersionRequestArgsForCall)]
	fake.setDefaultPolicyVersionRequestArgsForCall = append(fake.setDefaultPolicyVersionRequestArgsForCall, struct {
		arg1 *iam.SetDefaultPolicyVersionInput
	}{arg1})
	fake.recordInvocation("SetDefaultPolicyVersionRequest", []interface{}{arg1})
	fake.setDefaultPolicyVersionRequestMutex.Unlock()
	if fake.SetDefaultPolicyVersionRequestStub != nil {
		return fake.SetDefaultPolicyVersionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setDefaultPolicyVersionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersionRequestCallCount() int {
	fake.setDefaultPolicyVersionRequestMutex.RLock()
	defer fake.setDefaultPolicyVersionRequestMutex.RUnlock()
	return len(fake.setDefaultPolicyVersionRequestArgsForCall)
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersionRequestCalls(stub func(*iam.SetDefaultPolicyVersionInput) (*request.Request, *iam.SetDefaultPolicyVersionOutput)) {
	fake.setDefaultPolicyVersionRequestMutex.Lock()
	defer fake.setDefaultPolicyVersionRequestMutex.Unlock()
	fake.SetDefaultPolicyVersionRequestStub = stub
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersionRequestArgsForCall(i int) *iam.SetDefaultPolicyVersionInput {
	fake.setDefaultPolicyVersionRequestMutex.RLock()
	defer fake.setDefaultPolicyVersionRequestMutex.RUnlock()
	argsForCall := fake.setDefaultPolicyVersionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersionRequestReturns(result1 *request.Request, result2 *iam.SetDefaultPolicyVersionOutput) {
	fake.setDefaultPolicyVersionRequestMutex.Lock()
	defer fake.setDefaultPolicyVersionRequestMutex.Unlock()
	fake.SetDefaultPolicyVersionRequestStub = nil
	fake.setDefaultPolicyVersionRequestReturns = struct {
		result1 *request.Request
		result2 *iam.SetDefaultPolicyVersionOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersionRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.SetDefaultPolicyVersionOutput) {
	fake.setDefaultPolicyVersionRequestMutex.Lock()
	defer fake.setDefaultPolicyVersionRequestMutex.Unlock()
	fake.SetDefaultPolicyVersionRequestStub = nil
	if fake.setDefaultPolicyVersionRequestReturnsOnCall == nil {
		fake.setDefaultPolicyVersionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.SetDefaultPolicyVersionOutput
		})
	}
	fake.setDefaultPolicyVersionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.SetDefaultPolicyVersionOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersionWithContext(arg1 context.Context, arg2 *iam.SetDefaultPolicyVersionInput, arg3 ...request.Option) (*iam.SetDefaultPolicyVersionOutput, error) {
	fake.setDefaultPolicyVersionWithContextMutex.Lock()
	ret, specificReturn := fake.setDefaultPolicyVersionWithContextReturnsOnCall[len(fake.setDefaultPolicyVersionWithContextArgsForCall)]
	fake.setDefaultPolicyVersionWithContextArgsForCall = append(fake.setDefaultPolicyVersionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.SetDefaultPolicyVersionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetDefaultPolicyVersionWithContext", []interface{}{arg1, arg2, arg3})
	fake.setDefaultPolicyVersionWithContextMutex.Unlock()
	if fake.SetDefaultPolicyVersionWithContextStub != nil {
		return fake.SetDefaultPolicyVersionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setDefaultPolicyVersionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersionWithContextCallCount() int {
	fake.setDefaultPolicyVersionWithContextMutex.RLock()
	defer fake.setDefaultPolicyVersionWithContextMutex.RUnlock()
	return len(fake.setDefaultPolicyVersionWithContextArgsForCall)
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersionWithContextCalls(stub func(context.Context, *iam.SetDefaultPolicyVersionInput, ...request.Option) (*iam.SetDefaultPolicyVersionOutput, error)) {
	fake.setDefaultPolicyVersionWithContextMutex.Lock()
	defer fake.setDefaultPolicyVersionWithContextMutex.Unlock()
	fake.SetDefaultPolicyVersionWithContextStub = stub
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersionWithContextArgsForCall(i int) (context.Context, *iam.SetDefaultPolicyVersionInput, []request.Option) {
	fake.setDefaultPolicyVersionWithContextMutex.RLock()
	defer fake.setDefaultPolicyVersionWithContextMutex.RUnlock()
	argsForCall := fake.setDefaultPolicyVersionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersionWithContextReturns(result1 *iam.SetDefaultPolicyVersionOutput, result2 error) {
	fake.setDefaultPolicyVersionWithContextMutex.Lock()
	defer fake.setDefaultPolicyVersionWithContextMutex.Unlock()
	fake.SetDefaultPolicyVersionWithContextStub = nil
	fake.setDefaultPolicyVersionWithContextReturns = struct {
		result1 *iam.SetDefaultPolicyVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) SetDefaultPolicyVersionWithContextReturnsOnCall(i int, result1 *iam.SetDefaultPolicyVersionOutput, result2 error) {
	fake.setDefaultPolicyVersionWithContextMutex.Lock()
	defer fake.setDefaultPolicyVersionWithContextMutex.Unlock()
	fake.SetDefaultPolicyVersionWithContextStub = nil
	if fake.setDefaultPolicyVersionWithContextReturnsOnCall == nil {
		fake.setDefaultPolicyVersionWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.SetDefaultPolicyVersionOutput
			result2 error
		})
	}
	fake.setDefaultPolicyVersionWithContextReturnsOnCall[i] = struct {
		result1 *iam.SetDefaultPolicyVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferences(arg1 *iam.SetSecurityTokenServicePreferencesInput) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
	fake.setSecurityTokenServicePreferencesMutex.Lock()
	ret, specificReturn := fake.setSecurityTokenServicePreferencesReturnsOnCall[len(fake.setSecurityTokenServicePreferencesArgsForCall)]
	fake.setSecurityTokenServicePreferencesArgsForCall = append(fake.setSecurityTokenServicePreferencesArgsForCall, struct {
		arg1 *iam.SetSecurityTokenServicePreferencesInput
	}{arg1})
	fake.recordInvocation("SetSecurityTokenServicePreferences", []interface{}{arg1})
	fake.setSecurityTokenServicePreferencesMutex.Unlock()
	if fake.SetSecurityTokenServicePreferencesStub != nil {
		return fake.SetSecurityTokenServicePreferencesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setSecurityTokenServicePreferencesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferencesCallCount() int {
	fake.setSecurityTokenServicePreferencesMutex.RLock()
	defer fake.setSecurityTokenServicePreferencesMutex.RUnlock()
	return len(fake.setSecurityTokenServicePreferencesArgsForCall)
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferencesCalls(stub func(*iam.SetSecurityTokenServicePreferencesInput) (*iam.SetSecurityTokenServicePreferencesOutput, error)) {
	fake.setSecurityTokenServicePreferencesMutex.Lock()
	defer fake.setSecurityTokenServicePreferencesMutex.Unlock()
	fake.SetSecurityTokenServicePreferencesStub = stub
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferencesArgsForCall(i int) *iam.SetSecurityTokenServicePreferencesInput {
	fake.setSecurityTokenServicePreferencesMutex.RLock()
	defer fake.setSecurityTokenServicePreferencesMutex.RUnlock()
	argsForCall := fake.setSecurityTokenServicePreferencesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferencesReturns(result1 *iam.SetSecurityTokenServicePreferencesOutput, result2 error) {
	fake.setSecurityTokenServicePreferencesMutex.Lock()
	defer fake.setSecurityTokenServicePreferencesMutex.Unlock()
	fake.SetSecurityTokenServicePreferencesStub = nil
	fake.setSecurityTokenServicePreferencesReturns = struct {
		result1 *iam.SetSecurityTokenServicePreferencesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferencesReturnsOnCall(i int, result1 *iam.SetSecurityTokenServicePreferencesOutput, result2 error) {
	fake.setSecurityTokenServicePreferencesMutex.Lock()
	defer fake.setSecurityTokenServicePreferencesMutex.Unlock()
	fake.SetSecurityTokenServicePreferencesStub = nil
	if fake.setSecurityTokenServicePreferencesReturnsOnCall == nil {
		fake.setSecurityTokenServicePreferencesReturnsOnCall = make(map[int]struct {
			result1 *iam.SetSecurityTokenServicePreferencesOutput
			result2 error
		})
	}
	fake.setSecurityTokenServicePreferencesReturnsOnCall[i] = struct {
		result1 *iam.SetSecurityTokenServicePreferencesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferencesRequest(arg1 *iam.SetSecurityTokenServicePreferencesInput) (*request.Request, *iam.SetSecurityTokenServicePreferencesOutput) {
	fake.setSecurityTokenServicePreferencesRequestMutex.Lock()
	ret, specificReturn := fake.setSecurityTokenServicePreferencesRequestReturnsOnCall[len(fake.setSecurityTokenServicePreferencesRequestArgsForCall)]
	fake.setSecurityTokenServicePreferencesRequestArgsForCall = append(fake.setSecurityTokenServicePreferencesRequestArgsForCall, struct {
		arg1 *iam.SetSecurityTokenServicePreferencesInput
	}{arg1})
	fake.recordInvocation("SetSecurityTokenServicePreferencesRequest", []interface{}{arg1})
	fake.setSecurityTokenServicePreferencesRequestMutex.Unlock()
	if fake.SetSecurityTokenServicePreferencesRequestStub != nil {
		return fake.SetSecurityTokenServicePreferencesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setSecurityTokenServicePreferencesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferencesRequestCallCount() int {
	fake.setSecurityTokenServicePreferencesRequestMutex.RLock()
	defer fake.setSecurityTokenServicePreferencesRequestMutex.RUnlock()
	return len(fake.setSecurityTokenServicePreferencesRequestArgsForCall)
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferencesRequestCalls(stub func(*iam.SetSecurityTokenServicePreferencesInput) (*request.Request, *iam.SetSecurityTokenServicePreferencesOutput)) {
	fake.setSecurityTokenServicePreferencesRequestMutex.Lock()
	defer fake.setSecurityTokenServicePreferencesRequestMutex.Unlock()
	fake.SetSecurityTokenServicePreferencesRequestStub = stub
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferencesRequestArgsForCall(i int) *iam.SetSecurityTokenServicePreferencesInput {
	fake.setSecurityTokenServicePreferencesRequestMutex.RLock()
	defer fake.setSecurityTokenServicePreferencesRequestMutex.RUnlock()
	argsForCall := fake.setSecurityTokenServicePreferencesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferencesRequestReturns(result1 *request.Request, result2 *iam.SetSecurityTokenServicePreferencesOutput) {
	fake.setSecurityTokenServicePreferencesRequestMutex.Lock()
	defer fake.setSecurityTokenServicePreferencesRequestMutex.Unlock()
	fake.SetSecurityTokenServicePreferencesRequestStub = nil
	fake.setSecurityTokenServicePreferencesRequestReturns = struct {
		result1 *request.Request
		result2 *iam.SetSecurityTokenServicePreferencesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferencesRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.SetSecurityTokenServicePreferencesOutput) {
	fake.setSecurityTokenServicePreferencesRequestMutex.Lock()
	defer fake.setSecurityTokenServicePreferencesRequestMutex.Unlock()
	fake.SetSecurityTokenServicePreferencesRequestStub = nil
	if fake.setSecurityTokenServicePreferencesRequestReturnsOnCall == nil {
		fake.setSecurityTokenServicePreferencesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.SetSecurityTokenServicePreferencesOutput
		})
	}
	fake.setSecurityTokenServicePreferencesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.SetSecurityTokenServicePreferencesOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferencesWithContext(arg1 context.Context, arg2 *iam.SetSecurityTokenServicePreferencesInput, arg3 ...request.Option) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
	fake.setSecurityTokenServicePreferencesWithContextMutex.Lock()
	ret, specificReturn := fake.setSecurityTokenServicePreferencesWithContextReturnsOnCall[len(fake.setSecurityTokenServicePreferencesWithContextArgsForCall)]
	fake.setSecurityTokenServicePreferencesWithContextArgsForCall = append(fake.setSecurityTokenServicePreferencesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.SetSecurityTokenServicePreferencesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetSecurityTokenServicePreferencesWithContext", []interface{}{arg1, arg2, arg3})
	fake.setSecurityTokenServicePreferencesWithContextMutex.Unlock()
	if fake.SetSecurityTokenServicePreferencesWithContextStub != nil {
		return fake.SetSecurityTokenServicePreferencesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setSecurityTokenServicePreferencesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferencesWithContextCallCount() int {
	fake.setSecurityTokenServicePreferencesWithContextMutex.RLock()
	defer fake.setSecurityTokenServicePreferencesWithContextMutex.RUnlock()
	return len(fake.setSecurityTokenServicePreferencesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferencesWithContextCalls(stub func(context.Context, *iam.SetSecurityTokenServicePreferencesInput, ...request.Option) (*iam.SetSecurityTokenServicePreferencesOutput, error)) {
	fake.setSecurityTokenServicePreferencesWithContextMutex.Lock()
	defer fake.setSecurityTokenServicePreferencesWithContextMutex.Unlock()
	fake.SetSecurityTokenServicePreferencesWithContextStub = stub
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferencesWithContextArgsForCall(i int) (context.Context, *iam.SetSecurityTokenServicePreferencesInput, []request.Option) {
	fake.setSecurityTokenServicePreferencesWithContextMutex.RLock()
	defer fake.setSecurityTokenServicePreferencesWithContextMutex.RUnlock()
	argsForCall := fake.setSecurityTokenServicePreferencesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferencesWithContextReturns(result1 *iam.SetSecurityTokenServicePreferencesOutput, result2 error) {
	fake.setSecurityTokenServicePreferencesWithContextMutex.Lock()
	defer fake.setSecurityTokenServicePreferencesWithContextMutex.Unlock()
	fake.SetSecurityTokenServicePreferencesWithContextStub = nil
	fake.setSecurityTokenServicePreferencesWithContextReturns = struct {
		result1 *iam.SetSecurityTokenServicePreferencesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) SetSecurityTokenServicePreferencesWithContextReturnsOnCall(i int, result1 *iam.SetSecurityTokenServicePreferencesOutput, result2 error) {
	fake.setSecurityTokenServicePreferencesWithContextMutex.Lock()
	defer fake.setSecurityTokenServicePreferencesWithContextMutex.Unlock()
	fake.SetSecurityTokenServicePreferencesWithContextStub = nil
	if fake.setSecurityTokenServicePreferencesWithContextReturnsOnCall == nil {
		fake.setSecurityTokenServicePreferencesWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.SetSecurityTokenServicePreferencesOutput
			result2 error
		})
	}
	fake.setSecurityTokenServicePreferencesWithContextReturnsOnCall[i] = struct {
		result1 *iam.SetSecurityTokenServicePreferencesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) SimulateCustomPolicy(arg1 *iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error) {
	fake.simulateCustomPolicyMutex.Lock()
	ret, specificReturn := fake.simulateCustomPolicyReturnsOnCall[len(fake.simulateCustomPolicyArgsForCall)]
	fake.simulateCustomPolicyArgsForCall = append(fake.simulateCustomPolicyArgsForCall, struct {
		arg1 *iam.SimulateCustomPolicyInput
	}{arg1})
	fake.recordInvocation("SimulateCustomPolicy", []interface{}{arg1})
	fake.simulateCustomPolicyMutex.Unlock()
	if fake.SimulateCustomPolicyStub != nil {
		return fake.SimulateCustomPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.simulateCustomPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) SimulateCustomPolicyCallCount() int {
	fake.simulateCustomPolicyMutex.RLock()
	defer fake.simulateCustomPolicyMutex.RUnlock()
	return len(fake.simulateCustomPolicyArgsForCall)
}

func (fake *FakeIAMAPI) SimulateCustomPolicyCalls(stub func(*iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error)) {
	fake.simulateCustomPolicyMutex.Lock()
	defer fake.simulateCustomPolicyMutex.Unlock()
	fake.SimulateCustomPolicyStub = stub
}

func (fake *FakeIAMAPI) SimulateCustomPolicyArgsForCall(i int) *iam.SimulateCustomPolicyInput {
	fake.simulateCustomPolicyMutex.RLock()
	defer fake.simulateCustomPolicyMutex.RUnlock()
	argsForCall := fake.simulateCustomPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) SimulateCustomPolicyReturns(result1 *iam.SimulatePolicyResponse, result2 error) {
	fake.simulateCustomPolicyMutex.Lock()
	defer fake.simulateCustomPolicyMutex.Unlock()
	fake.SimulateCustomPolicyStub = nil
	fake.simulateCustomPolicyReturns = struct {
		result1 *iam.SimulatePolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) SimulateCustomPolicyReturnsOnCall(i int, result1 *iam.SimulatePolicyResponse, result2 error) {
	fake.simulateCustomPolicyMutex.Lock()
	defer fake.simulateCustomPolicyMutex.Unlock()
	fake.SimulateCustomPolicyStub = nil
	if fake.simulateCustomPolicyReturnsOnCall == nil {
		fake.simulateCustomPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.SimulatePolicyResponse
			result2 error
		})
	}
	fake.simulateCustomPolicyReturnsOnCall[i] = struct {
		result1 *iam.SimulatePolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) SimulateCustomPolicyPages(arg1 *iam.SimulateCustomPolicyInput, arg2 func(*iam.SimulatePolicyResponse, bool) bool) error {
	fake.simulateCustomPolicyPagesMutex.Lock()
	ret, specificReturn := fake.simulateCustomPolicyPagesReturnsOnCall[len(fake.simulateCustomPolicyPagesArgsForCall)]
	fake.simulateCustomPolicyPagesArgsForCall = append(fake.simulateCustomPolicyPagesArgsForCall, struct {
		arg1 *iam.SimulateCustomPolicyInput
		arg2 func(*iam.SimulatePolicyResponse, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("SimulateCustomPolicyPages", []interface{}{arg1, arg2})
	fake.simulateCustomPolicyPagesMutex.Unlock()
	if fake.SimulateCustomPolicyPagesStub != nil {
		return fake.SimulateCustomPolicyPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.simulateCustomPolicyPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) SimulateCustomPolicyPagesCallCount() int {
	fake.simulateCustomPolicyPagesMutex.RLock()
	defer fake.simulateCustomPolicyPagesMutex.RUnlock()
	return len(fake.simulateCustomPolicyPagesArgsForCall)
}

func (fake *FakeIAMAPI) SimulateCustomPolicyPagesCalls(stub func(*iam.SimulateCustomPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool) error) {
	fake.simulateCustomPolicyPagesMutex.Lock()
	defer fake.simulateCustomPolicyPagesMutex.Unlock()
	fake.SimulateCustomPolicyPagesStub = stub
}

func (fake *FakeIAMAPI) SimulateCustomPolicyPagesArgsForCall(i int) (*iam.SimulateCustomPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool) {
	fake.simulateCustomPolicyPagesMutex.RLock()
	defer fake.simulateCustomPolicyPagesMutex.RUnlock()
	argsForCall := fake.simulateCustomPolicyPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) SimulateCustomPolicyPagesReturns(result1 error) {
	fake.simulateCustomPolicyPagesMutex.Lock()
	defer fake.simulateCustomPolicyPagesMutex.Unlock()
	fake.SimulateCustomPolicyPagesStub = nil
	fake.simulateCustomPolicyPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) SimulateCustomPolicyPagesReturnsOnCall(i int, result1 error) {
	fake.simulateCustomPolicyPagesMutex.Lock()
	defer fake.simulateCustomPolicyPagesMutex.Unlock()
	fake.SimulateCustomPolicyPagesStub = nil
	if fake.simulateCustomPolicyPagesReturnsOnCall == nil {
		fake.simulateCustomPolicyPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.simulateCustomPolicyPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) SimulateCustomPolicyPagesWithContext(arg1 context.Context, arg2 *iam.SimulateCustomPolicyInput, arg3 func(*iam.SimulatePolicyResponse, bool) bool, arg4 ...request.Option) error {
	fake.simulateCustomPolicyPagesWithContextMutex.Lock()
	ret, specificReturn := fake.simulateCustomPolicyPagesWithContextReturnsOnCall[len(fake.simulateCustomPolicyPagesWithContextArgsForCall)]
	fake.simulateCustomPolicyPagesWithContextArgsForCall = append(fake.simulateCustomPolicyPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.SimulateCustomPolicyInput
		arg3 func(*iam.SimulatePolicyResponse, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("SimulateCustomPolicyPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.simulateCustomPolicyPagesWithContextMutex.Unlock()
	if fake.SimulateCustomPolicyPagesWithContextStub != nil {
		return fake.SimulateCustomPolicyPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.simulateCustomPolicyPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) SimulateCustomPolicyPagesWithContextCallCount() int {
	fake.simulateCustomPolicyPagesWithContextMutex.RLock()
	defer fake.simulateCustomPolicyPagesWithContextMutex.RUnlock()
	return len(fake.simulateCustomPolicyPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) SimulateCustomPolicyPagesWithContextCalls(stub func(context.Context, *iam.SimulateCustomPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool, ...request.Option) error) {
	fake.simulateCustomPolicyPagesWithContextMutex.Lock()
	defer fake.simulateCustomPolicyPagesWithContextMutex.Unlock()
	fake.SimulateCustomPolicyPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) SimulateCustomPolicyPagesWithContextArgsForCall(i int) (context.Context, *iam.SimulateCustomPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool, []request.Option) {
	fake.simulateCustomPolicyPagesWithContextMutex.RLock()
	defer fake.simulateCustomPolicyPagesWithContextMutex.RUnlock()
	argsForCall := fake.simulateCustomPolicyPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) SimulateCustomPolicyPagesWithContextReturns(result1 error) {
	fake.simulateCustomPolicyPagesWithContextMutex.Lock()
	defer fake.simulateCustomPolicyPagesWithContextMutex.Unlock()
	fake.SimulateCustomPolicyPagesWithContextStub = nil
	fake.simulateCustomPolicyPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) SimulateCustomPolicyPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.simulateCustomPolicyPagesWithContextMutex.Lock()
	defer fake.simulateCustomPolicyPagesWithContextMutex.Unlock()
	fake.SimulateCustomPolicyPagesWithContextStub = nil
	if fake.simulateCustomPolicyPagesWithContextReturnsOnCall == nil {
		fake.simulateCustomPolicyPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.simulateCustomPolicyPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) SimulateCustomPolicyRequest(arg1 *iam.SimulateCustomPolicyInput) (*request.Request, *iam.SimulatePolicyResponse) {
	fake.simulateCustomPolicyRequestMutex.Lock()
	ret, specificReturn := fake.simulateCustomPolicyRequestReturnsOnCall[len(fake.simulateCustomPolicyRequestArgsForCall)]
	fake.simulateCustomPolicyRequestArgsForCall = append(fake.simulateCustomPolicyRequestArgsForCall, struct {
		arg1 *iam.SimulateCustomPolicyInput
	}{arg1})
	fake.recordInvocation("SimulateCustomPolicyRequest", []interface{}{arg1})
	fake.simulateCustomPolicyRequestMutex.Unlock()
	if fake.SimulateCustomPolicyRequestStub != nil {
		return fake.SimulateCustomPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.simulateCustomPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) SimulateCustomPolicyRequestCallCount() int {
	fake.simulateCustomPolicyRequestMutex.RLock()
	defer fake.simulateCustomPolicyRequestMutex.RUnlock()
	return len(fake.simulateCustomPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) SimulateCustomPolicyRequestCalls(stub func(*iam.SimulateCustomPolicyInput) (*request.Request, *iam.SimulatePolicyResponse)) {
	fake.simulateCustomPolicyRequestMutex.Lock()
	defer fake.simulateCustomPolicyRequestMutex.Unlock()
	fake.SimulateCustomPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) SimulateCustomPolicyRequestArgsForCall(i int) *iam.SimulateCustomPolicyInput {
	fake.simulateCustomPolicyRequestMutex.RLock()
	defer fake.simulateCustomPolicyRequestMutex.RUnlock()
	argsForCall := fake.simulateCustomPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) SimulateCustomPolicyRequestReturns(result1 *request.Request, result2 *iam.SimulatePolicyResponse) {
	fake.simulateCustomPolicyRequestMutex.Lock()
	defer fake.simulateCustomPolicyRequestMutex.Unlock()
	fake.SimulateCustomPolicyRequestStub = nil
	fake.simulateCustomPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.SimulatePolicyResponse
	}{result1, result2}
}

func (fake *FakeIAMAPI) SimulateCustomPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.SimulatePolicyResponse) {
	fake.simulateCustomPolicyRequestMutex.Lock()
	defer fake.simulateCustomPolicyRequestMutex.Unlock()
	fake.SimulateCustomPolicyRequestStub = nil
	if fake.simulateCustomPolicyRequestReturnsOnCall == nil {
		fake.simulateCustomPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.SimulatePolicyResponse
		})
	}
	fake.simulateCustomPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.SimulatePolicyResponse
	}{result1, result2}
}

func (fake *FakeIAMAPI) SimulateCustomPolicyWithContext(arg1 context.Context, arg2 *iam.SimulateCustomPolicyInput, arg3 ...request.Option) (*iam.SimulatePolicyResponse, error) {
	fake.simulateCustomPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.simulateCustomPolicyWithContextReturnsOnCall[len(fake.simulateCustomPolicyWithContextArgsForCall)]
	fake.simulateCustomPolicyWithContextArgsForCall = append(fake.simulateCustomPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.SimulateCustomPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("SimulateCustomPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.simulateCustomPolicyWithContextMutex.Unlock()
	if fake.SimulateCustomPolicyWithContextStub != nil {
		return fake.SimulateCustomPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.simulateCustomPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) SimulateCustomPolicyWithContextCallCount() int {
	fake.simulateCustomPolicyWithContextMutex.RLock()
	defer fake.simulateCustomPolicyWithContextMutex.RUnlock()
	return len(fake.simulateCustomPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) SimulateCustomPolicyWithContextCalls(stub func(context.Context, *iam.SimulateCustomPolicyInput, ...request.Option) (*iam.SimulatePolicyResponse, error)) {
	fake.simulateCustomPolicyWithContextMutex.Lock()
	defer fake.simulateCustomPolicyWithContextMutex.Unlock()
	fake.SimulateCustomPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) SimulateCustomPolicyWithContextArgsForCall(i int) (context.Context, *iam.SimulateCustomPolicyInput, []request.Option) {
	fake.simulateCustomPolicyWithContextMutex.RLock()
	defer fake.simulateCustomPolicyWithContextMutex.RUnlock()
	argsForCall := fake.simulateCustomPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) SimulateCustomPolicyWithContextReturns(result1 *iam.SimulatePolicyResponse, result2 error) {
	fake.simulateCustomPolicyWithContextMutex.Lock()
	defer fake.simulateCustomPolicyWithContextMutex.Unlock()
	fake.SimulateCustomPolicyWithContextStub = nil
	fake.simulateCustomPolicyWithContextReturns = struct {
		result1 *iam.SimulatePolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) SimulateCustomPolicyWithContextReturnsOnCall(i int, result1 *iam.SimulatePolicyResponse, result2 error) {
	fake.simulateCustomPolicyWithContextMutex.Lock()
	defer fake.simulateCustomPolicyWithContextMutex.Unlock()
	fake.SimulateCustomPolicyWithContextStub = nil
	if fake.simulateCustomPolicyWithContextReturnsOnCall == nil {
		fake.simulateCustomPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.SimulatePolicyResponse
			result2 error
		})
	}
	fake.simulateCustomPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.SimulatePolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicy(arg1 *iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error) {
	fake.simulatePrincipalPolicyMutex.Lock()
	ret, specificReturn := fake.simulatePrincipalPolicyReturnsOnCall[len(fake.simulatePrincipalPolicyArgsForCall)]
	fake.simulatePrincipalPolicyArgsForCall = append(fake.simulatePrincipalPolicyArgsForCall, struct {
		arg1 *iam.SimulatePrincipalPolicyInput
	}{arg1})
	fake.recordInvocation("SimulatePrincipalPolicy", []interface{}{arg1})
	fake.simulatePrincipalPolicyMutex.Unlock()
	if fake.SimulatePrincipalPolicyStub != nil {
		return fake.SimulatePrincipalPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.simulatePrincipalPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyCallCount() int {
	fake.simulatePrincipalPolicyMutex.RLock()
	defer fake.simulatePrincipalPolicyMutex.RUnlock()
	return len(fake.simulatePrincipalPolicyArgsForCall)
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyCalls(stub func(*iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error)) {
	fake.simulatePrincipalPolicyMutex.Lock()
	defer fake.simulatePrincipalPolicyMutex.Unlock()
	fake.SimulatePrincipalPolicyStub = stub
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyArgsForCall(i int) *iam.SimulatePrincipalPolicyInput {
	fake.simulatePrincipalPolicyMutex.RLock()
	defer fake.simulatePrincipalPolicyMutex.RUnlock()
	argsForCall := fake.simulatePrincipalPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyReturns(result1 *iam.SimulatePolicyResponse, result2 error) {
	fake.simulatePrincipalPolicyMutex.Lock()
	defer fake.simulatePrincipalPolicyMutex.Unlock()
	fake.SimulatePrincipalPolicyStub = nil
	fake.simulatePrincipalPolicyReturns = struct {
		result1 *iam.SimulatePolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyReturnsOnCall(i int, result1 *iam.SimulatePolicyResponse, result2 error) {
	fake.simulatePrincipalPolicyMutex.Lock()
	defer fake.simulatePrincipalPolicyMutex.Unlock()
	fake.SimulatePrincipalPolicyStub = nil
	if fake.simulatePrincipalPolicyReturnsOnCall == nil {
		fake.simulatePrincipalPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.SimulatePolicyResponse
			result2 error
		})
	}
	fake.simulatePrincipalPolicyReturnsOnCall[i] = struct {
		result1 *iam.SimulatePolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyPages(arg1 *iam.SimulatePrincipalPolicyInput, arg2 func(*iam.SimulatePolicyResponse, bool) bool) error {
	fake.simulatePrincipalPolicyPagesMutex.Lock()
	ret, specificReturn := fake.simulatePrincipalPolicyPagesReturnsOnCall[len(fake.simulatePrincipalPolicyPagesArgsForCall)]
	fake.simulatePrincipalPolicyPagesArgsForCall = append(fake.simulatePrincipalPolicyPagesArgsForCall, struct {
		arg1 *iam.SimulatePrincipalPolicyInput
		arg2 func(*iam.SimulatePolicyResponse, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("SimulatePrincipalPolicyPages", []interface{}{arg1, arg2})
	fake.simulatePrincipalPolicyPagesMutex.Unlock()
	if fake.SimulatePrincipalPolicyPagesStub != nil {
		return fake.SimulatePrincipalPolicyPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.simulatePrincipalPolicyPagesReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyPagesCallCount() int {
	fake.simulatePrincipalPolicyPagesMutex.RLock()
	defer fake.simulatePrincipalPolicyPagesMutex.RUnlock()
	return len(fake.simulatePrincipalPolicyPagesArgsForCall)
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyPagesCalls(stub func(*iam.SimulatePrincipalPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool) error) {
	fake.simulatePrincipalPolicyPagesMutex.Lock()
	defer fake.simulatePrincipalPolicyPagesMutex.Unlock()
	fake.SimulatePrincipalPolicyPagesStub = stub
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyPagesArgsForCall(i int) (*iam.SimulatePrincipalPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool) {
	fake.simulatePrincipalPolicyPagesMutex.RLock()
	defer fake.simulatePrincipalPolicyPagesMutex.RUnlock()
	argsForCall := fake.simulatePrincipalPolicyPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyPagesReturns(result1 error) {
	fake.simulatePrincipalPolicyPagesMutex.Lock()
	defer fake.simulatePrincipalPolicyPagesMutex.Unlock()
	fake.SimulatePrincipalPolicyPagesStub = nil
	fake.simulatePrincipalPolicyPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyPagesReturnsOnCall(i int, result1 error) {
	fake.simulatePrincipalPolicyPagesMutex.Lock()
	defer fake.simulatePrincipalPolicyPagesMutex.Unlock()
	fake.SimulatePrincipalPolicyPagesStub = nil
	if fake.simulatePrincipalPolicyPagesReturnsOnCall == nil {
		fake.simulatePrincipalPolicyPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.simulatePrincipalPolicyPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyPagesWithContext(arg1 context.Context, arg2 *iam.SimulatePrincipalPolicyInput, arg3 func(*iam.SimulatePolicyResponse, bool) bool, arg4 ...request.Option) error {
	fake.simulatePrincipalPolicyPagesWithContextMutex.Lock()
	ret, specificReturn := fake.simulatePrincipalPolicyPagesWithContextReturnsOnCall[len(fake.simulatePrincipalPolicyPagesWithContextArgsForCall)]
	fake.simulatePrincipalPolicyPagesWithContextArgsForCall = append(fake.simulatePrincipalPolicyPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.SimulatePrincipalPolicyInput
		arg3 func(*iam.SimulatePolicyResponse, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("SimulatePrincipalPolicyPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.simulatePrincipalPolicyPagesWithContextMutex.Unlock()
	if fake.SimulatePrincipalPolicyPagesWithContextStub != nil {
		return fake.SimulatePrincipalPolicyPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.simulatePrincipalPolicyPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyPagesWithContextCallCount() int {
	fake.simulatePrincipalPolicyPagesWithContextMutex.RLock()
	defer fake.simulatePrincipalPolicyPagesWithContextMutex.RUnlock()
	return len(fake.simulatePrincipalPolicyPagesWithContextArgsForCall)
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyPagesWithContextCalls(stub func(context.Context, *iam.SimulatePrincipalPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool, ...request.Option) error) {
	fake.simulatePrincipalPolicyPagesWithContextMutex.Lock()
	defer fake.simulatePrincipalPolicyPagesWithContextMutex.Unlock()
	fake.SimulatePrincipalPolicyPagesWithContextStub = stub
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyPagesWithContextArgsForCall(i int) (context.Context, *iam.SimulatePrincipalPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool, []request.Option) {
	fake.simulatePrincipalPolicyPagesWithContextMutex.RLock()
	defer fake.simulatePrincipalPolicyPagesWithContextMutex.RUnlock()
	argsForCall := fake.simulatePrincipalPolicyPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyPagesWithContextReturns(result1 error) {
	fake.simulatePrincipalPolicyPagesWithContextMutex.Lock()
	defer fake.simulatePrincipalPolicyPagesWithContextMutex.Unlock()
	fake.SimulatePrincipalPolicyPagesWithContextStub = nil
	fake.simulatePrincipalPolicyPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.simulatePrincipalPolicyPagesWithContextMutex.Lock()
	defer fake.simulatePrincipalPolicyPagesWithContextMutex.Unlock()
	fake.SimulatePrincipalPolicyPagesWithContextStub = nil
	if fake.simulatePrincipalPolicyPagesWithContextReturnsOnCall == nil {
		fake.simulatePrincipalPolicyPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.simulatePrincipalPolicyPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyRequest(arg1 *iam.SimulatePrincipalPolicyInput) (*request.Request, *iam.SimulatePolicyResponse) {
	fake.simulatePrincipalPolicyRequestMutex.Lock()
	ret, specificReturn := fake.simulatePrincipalPolicyRequestReturnsOnCall[len(fake.simulatePrincipalPolicyRequestArgsForCall)]
	fake.simulatePrincipalPolicyRequestArgsForCall = append(fake.simulatePrincipalPolicyRequestArgsForCall, struct {
		arg1 *iam.SimulatePrincipalPolicyInput
	}{arg1})
	fake.recordInvocation("SimulatePrincipalPolicyRequest", []interface{}{arg1})
	fake.simulatePrincipalPolicyRequestMutex.Unlock()
	if fake.SimulatePrincipalPolicyRequestStub != nil {
		return fake.SimulatePrincipalPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.simulatePrincipalPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyRequestCallCount() int {
	fake.simulatePrincipalPolicyRequestMutex.RLock()
	defer fake.simulatePrincipalPolicyRequestMutex.RUnlock()
	return len(fake.simulatePrincipalPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyRequestCalls(stub func(*iam.SimulatePrincipalPolicyInput) (*request.Request, *iam.SimulatePolicyResponse)) {
	fake.simulatePrincipalPolicyRequestMutex.Lock()
	defer fake.simulatePrincipalPolicyRequestMutex.Unlock()
	fake.SimulatePrincipalPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyRequestArgsForCall(i int) *iam.SimulatePrincipalPolicyInput {
	fake.simulatePrincipalPolicyRequestMutex.RLock()
	defer fake.simulatePrincipalPolicyRequestMutex.RUnlock()
	argsForCall := fake.simulatePrincipalPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyRequestReturns(result1 *request.Request, result2 *iam.SimulatePolicyResponse) {
	fake.simulatePrincipalPolicyRequestMutex.Lock()
	defer fake.simulatePrincipalPolicyRequestMutex.Unlock()
	fake.SimulatePrincipalPolicyRequestStub = nil
	fake.simulatePrincipalPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.SimulatePolicyResponse
	}{result1, result2}
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.SimulatePolicyResponse) {
	fake.simulatePrincipalPolicyRequestMutex.Lock()
	defer fake.simulatePrincipalPolicyRequestMutex.Unlock()
	fake.SimulatePrincipalPolicyRequestStub = nil
	if fake.simulatePrincipalPolicyRequestReturnsOnCall == nil {
		fake.simulatePrincipalPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.SimulatePolicyResponse
		})
	}
	fake.simulatePrincipalPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.SimulatePolicyResponse
	}{result1, result2}
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyWithContext(arg1 context.Context, arg2 *iam.SimulatePrincipalPolicyInput, arg3 ...request.Option) (*iam.SimulatePolicyResponse, error) {
	fake.simulatePrincipalPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.simulatePrincipalPolicyWithContextReturnsOnCall[len(fake.simulatePrincipalPolicyWithContextArgsForCall)]
	fake.simulatePrincipalPolicyWithContextArgsForCall = append(fake.simulatePrincipalPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.SimulatePrincipalPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("SimulatePrincipalPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.simulatePrincipalPolicyWithContextMutex.Unlock()
	if fake.SimulatePrincipalPolicyWithContextStub != nil {
		return fake.SimulatePrincipalPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.simulatePrincipalPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyWithContextCallCount() int {
	fake.simulatePrincipalPolicyWithContextMutex.RLock()
	defer fake.simulatePrincipalPolicyWithContextMutex.RUnlock()
	return len(fake.simulatePrincipalPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyWithContextCalls(stub func(context.Context, *iam.SimulatePrincipalPolicyInput, ...request.Option) (*iam.SimulatePolicyResponse, error)) {
	fake.simulatePrincipalPolicyWithContextMutex.Lock()
	defer fake.simulatePrincipalPolicyWithContextMutex.Unlock()
	fake.SimulatePrincipalPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyWithContextArgsForCall(i int) (context.Context, *iam.SimulatePrincipalPolicyInput, []request.Option) {
	fake.simulatePrincipalPolicyWithContextMutex.RLock()
	defer fake.simulatePrincipalPolicyWithContextMutex.RUnlock()
	argsForCall := fake.simulatePrincipalPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyWithContextReturns(result1 *iam.SimulatePolicyResponse, result2 error) {
	fake.simulatePrincipalPolicyWithContextMutex.Lock()
	defer fake.simulatePrincipalPolicyWithContextMutex.Unlock()
	fake.SimulatePrincipalPolicyWithContextStub = nil
	fake.simulatePrincipalPolicyWithContextReturns = struct {
		result1 *iam.SimulatePolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) SimulatePrincipalPolicyWithContextReturnsOnCall(i int, result1 *iam.SimulatePolicyResponse, result2 error) {
	fake.simulatePrincipalPolicyWithContextMutex.Lock()
	defer fake.simulatePrincipalPolicyWithContextMutex.Unlock()
	fake.SimulatePrincipalPolicyWithContextStub = nil
	if fake.simulatePrincipalPolicyWithContextReturnsOnCall == nil {
		fake.simulatePrincipalPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.SimulatePolicyResponse
			result2 error
		})
	}
	fake.simulatePrincipalPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.SimulatePolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) TagRole(arg1 *iam.TagRoleInput) (*iam.TagRoleOutput, error) {
	fake.tagRoleMutex.Lock()
	ret, specificReturn := fake.tagRoleReturnsOnCall[len(fake.tagRoleArgsForCall)]
	fake.tagRoleArgsForCall = append(fake.tagRoleArgsForCall, struct {
		arg1 *iam.TagRoleInput
	}{arg1})
	fake.recordInvocation("TagRole", []interface{}{arg1})
	fake.tagRoleMutex.Unlock()
	if fake.TagRoleStub != nil {
		return fake.TagRoleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.tagRoleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) TagRoleCallCount() int {
	fake.tagRoleMutex.RLock()
	defer fake.tagRoleMutex.RUnlock()
	return len(fake.tagRoleArgsForCall)
}

func (fake *FakeIAMAPI) TagRoleCalls(stub func(*iam.TagRoleInput) (*iam.TagRoleOutput, error)) {
	fake.tagRoleMutex.Lock()
	defer fake.tagRoleMutex.Unlock()
	fake.TagRoleStub = stub
}

func (fake *FakeIAMAPI) TagRoleArgsForCall(i int) *iam.TagRoleInput {
	fake.tagRoleMutex.RLock()
	defer fake.tagRoleMutex.RUnlock()
	argsForCall := fake.tagRoleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) TagRoleReturns(result1 *iam.TagRoleOutput, result2 error) {
	fake.tagRoleMutex.Lock()
	defer fake.tagRoleMutex.Unlock()
	fake.TagRoleStub = nil
	fake.tagRoleReturns = struct {
		result1 *iam.TagRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) TagRoleReturnsOnCall(i int, result1 *iam.TagRoleOutput, result2 error) {
	fake.tagRoleMutex.Lock()
	defer fake.tagRoleMutex.Unlock()
	fake.TagRoleStub = nil
	if fake.tagRoleReturnsOnCall == nil {
		fake.tagRoleReturnsOnCall = make(map[int]struct {
			result1 *iam.TagRoleOutput
			result2 error
		})
	}
	fake.tagRoleReturnsOnCall[i] = struct {
		result1 *iam.TagRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) TagRoleRequest(arg1 *iam.TagRoleInput) (*request.Request, *iam.TagRoleOutput) {
	fake.tagRoleRequestMutex.Lock()
	ret, specificReturn := fake.tagRoleRequestReturnsOnCall[len(fake.tagRoleRequestArgsForCall)]
	fake.tagRoleRequestArgsForCall = append(fake.tagRoleRequestArgsForCall, struct {
		arg1 *iam.TagRoleInput
	}{arg1})
	fake.recordInvocation("TagRoleRequest", []interface{}{arg1})
	fake.tagRoleRequestMutex.Unlock()
	if fake.TagRoleRequestStub != nil {
		return fake.TagRoleRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.tagRoleRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) TagRoleRequestCallCount() int {
	fake.tagRoleRequestMutex.RLock()
	defer fake.tagRoleRequestMutex.RUnlock()
	return len(fake.tagRoleRequestArgsForCall)
}

func (fake *FakeIAMAPI) TagRoleRequestCalls(stub func(*iam.TagRoleInput) (*request.Request, *iam.TagRoleOutput)) {
	fake.tagRoleRequestMutex.Lock()
	defer fake.tagRoleRequestMutex.Unlock()
	fake.TagRoleRequestStub = stub
}

func (fake *FakeIAMAPI) TagRoleRequestArgsForCall(i int) *iam.TagRoleInput {
	fake.tagRoleRequestMutex.RLock()
	defer fake.tagRoleRequestMutex.RUnlock()
	argsForCall := fake.tagRoleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) TagRoleRequestReturns(result1 *request.Request, result2 *iam.TagRoleOutput) {
	fake.tagRoleRequestMutex.Lock()
	defer fake.tagRoleRequestMutex.Unlock()
	fake.TagRoleRequestStub = nil
	fake.tagRoleRequestReturns = struct {
		result1 *request.Request
		result2 *iam.TagRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) TagRoleRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.TagRoleOutput) {
	fake.tagRoleRequestMutex.Lock()
	defer fake.tagRoleRequestMutex.Unlock()
	fake.TagRoleRequestStub = nil
	if fake.tagRoleRequestReturnsOnCall == nil {
		fake.tagRoleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.TagRoleOutput
		})
	}
	fake.tagRoleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.TagRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) TagRoleWithContext(arg1 context.Context, arg2 *iam.TagRoleInput, arg3 ...request.Option) (*iam.TagRoleOutput, error) {
	fake.tagRoleWithContextMutex.Lock()
	ret, specificReturn := fake.tagRoleWithContextReturnsOnCall[len(fake.tagRoleWithContextArgsForCall)]
	fake.tagRoleWithContextArgsForCall = append(fake.tagRoleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.TagRoleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("TagRoleWithContext", []interface{}{arg1, arg2, arg3})
	fake.tagRoleWithContextMutex.Unlock()
	if fake.TagRoleWithContextStub != nil {
		return fake.TagRoleWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.tagRoleWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) TagRoleWithContextCallCount() int {
	fake.tagRoleWithContextMutex.RLock()
	defer fake.tagRoleWithContextMutex.RUnlock()
	return len(fake.tagRoleWithContextArgsForCall)
}

func (fake *FakeIAMAPI) TagRoleWithContextCalls(stub func(context.Context, *iam.TagRoleInput, ...request.Option) (*iam.TagRoleOutput, error)) {
	fake.tagRoleWithContextMutex.Lock()
	defer fake.tagRoleWithContextMutex.Unlock()
	fake.TagRoleWithContextStub = stub
}

func (fake *FakeIAMAPI) TagRoleWithContextArgsForCall(i int) (context.Context, *iam.TagRoleInput, []request.Option) {
	fake.tagRoleWithContextMutex.RLock()
	defer fake.tagRoleWithContextMutex.RUnlock()
	argsForCall := fake.tagRoleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) TagRoleWithContextReturns(result1 *iam.TagRoleOutput, result2 error) {
	fake.tagRoleWithContextMutex.Lock()
	defer fake.tagRoleWithContextMutex.Unlock()
	fake.TagRoleWithContextStub = nil
	fake.tagRoleWithContextReturns = struct {
		result1 *iam.TagRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) TagRoleWithContextReturnsOnCall(i int, result1 *iam.TagRoleOutput, result2 error) {
	fake.tagRoleWithContextMutex.Lock()
	defer fake.tagRoleWithContextMutex.Unlock()
	fake.TagRoleWithContextStub = nil
	if fake.tagRoleWithContextReturnsOnCall == nil {
		fake.tagRoleWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.TagRoleOutput
			result2 error
		})
	}
	fake.tagRoleWithContextReturnsOnCall[i] = struct {
		result1 *iam.TagRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) TagUser(arg1 *iam.TagUserInput) (*iam.TagUserOutput, error) {
	fake.tagUserMutex.Lock()
	ret, specificReturn := fake.tagUserReturnsOnCall[len(fake.tagUserArgsForCall)]
	fake.tagUserArgsForCall = append(fake.tagUserArgsForCall, struct {
		arg1 *iam.TagUserInput
	}{arg1})
	fake.recordInvocation("TagUser", []interface{}{arg1})
	fake.tagUserMutex.Unlock()
	if fake.TagUserStub != nil {
		return fake.TagUserStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.tagUserReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) TagUserCallCount() int {
	fake.tagUserMutex.RLock()
	defer fake.tagUserMutex.RUnlock()
	return len(fake.tagUserArgsForCall)
}

func (fake *FakeIAMAPI) TagUserCalls(stub func(*iam.TagUserInput) (*iam.TagUserOutput, error)) {
	fake.tagUserMutex.Lock()
	defer fake.tagUserMutex.Unlock()
	fake.TagUserStub = stub
}

func (fake *FakeIAMAPI) TagUserArgsForCall(i int) *iam.TagUserInput {
	fake.tagUserMutex.RLock()
	defer fake.tagUserMutex.RUnlock()
	argsForCall := fake.tagUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) TagUserReturns(result1 *iam.TagUserOutput, result2 error) {
	fake.tagUserMutex.Lock()
	defer fake.tagUserMutex.Unlock()
	fake.TagUserStub = nil
	fake.tagUserReturns = struct {
		result1 *iam.TagUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) TagUserReturnsOnCall(i int, result1 *iam.TagUserOutput, result2 error) {
	fake.tagUserMutex.Lock()
	defer fake.tagUserMutex.Unlock()
	fake.TagUserStub = nil
	if fake.tagUserReturnsOnCall == nil {
		fake.tagUserReturnsOnCall = make(map[int]struct {
			result1 *iam.TagUserOutput
			result2 error
		})
	}
	fake.tagUserReturnsOnCall[i] = struct {
		result1 *iam.TagUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) TagUserRequest(arg1 *iam.TagUserInput) (*request.Request, *iam.TagUserOutput) {
	fake.tagUserRequestMutex.Lock()
	ret, specificReturn := fake.tagUserRequestReturnsOnCall[len(fake.tagUserRequestArgsForCall)]
	fake.tagUserRequestArgsForCall = append(fake.tagUserRequestArgsForCall, struct {
		arg1 *iam.TagUserInput
	}{arg1})
	fake.recordInvocation("TagUserRequest", []interface{}{arg1})
	fake.tagUserRequestMutex.Unlock()
	if fake.TagUserRequestStub != nil {
		return fake.TagUserRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.tagUserRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) TagUserRequestCallCount() int {
	fake.tagUserRequestMutex.RLock()
	defer fake.tagUserRequestMutex.RUnlock()
	return len(fake.tagUserRequestArgsForCall)
}

func (fake *FakeIAMAPI) TagUserRequestCalls(stub func(*iam.TagUserInput) (*request.Request, *iam.TagUserOutput)) {
	fake.tagUserRequestMutex.Lock()
	defer fake.tagUserRequestMutex.Unlock()
	fake.TagUserRequestStub = stub
}

func (fake *FakeIAMAPI) TagUserRequestArgsForCall(i int) *iam.TagUserInput {
	fake.tagUserRequestMutex.RLock()
	defer fake.tagUserRequestMutex.RUnlock()
	argsForCall := fake.tagUserRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) TagUserRequestReturns(result1 *request.Request, result2 *iam.TagUserOutput) {
	fake.tagUserRequestMutex.Lock()
	defer fake.tagUserRequestMutex.Unlock()
	fake.TagUserRequestStub = nil
	fake.tagUserRequestReturns = struct {
		result1 *request.Request
		result2 *iam.TagUserOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) TagUserRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.TagUserOutput) {
	fake.tagUserRequestMutex.Lock()
	defer fake.tagUserRequestMutex.Unlock()
	fake.TagUserRequestStub = nil
	if fake.tagUserRequestReturnsOnCall == nil {
		fake.tagUserRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.TagUserOutput
		})
	}
	fake.tagUserRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.TagUserOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) TagUserWithContext(arg1 context.Context, arg2 *iam.TagUserInput, arg3 ...request.Option) (*iam.TagUserOutput, error) {
	fake.tagUserWithContextMutex.Lock()
	ret, specificReturn := fake.tagUserWithContextReturnsOnCall[len(fake.tagUserWithContextArgsForCall)]
	fake.tagUserWithContextArgsForCall = append(fake.tagUserWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.TagUserInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("TagUserWithContext", []interface{}{arg1, arg2, arg3})
	fake.tagUserWithContextMutex.Unlock()
	if fake.TagUserWithContextStub != nil {
		return fake.TagUserWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.tagUserWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) TagUserWithContextCallCount() int {
	fake.tagUserWithContextMutex.RLock()
	defer fake.tagUserWithContextMutex.RUnlock()
	return len(fake.tagUserWithContextArgsForCall)
}

func (fake *FakeIAMAPI) TagUserWithContextCalls(stub func(context.Context, *iam.TagUserInput, ...request.Option) (*iam.TagUserOutput, error)) {
	fake.tagUserWithContextMutex.Lock()
	defer fake.tagUserWithContextMutex.Unlock()
	fake.TagUserWithContextStub = stub
}

func (fake *FakeIAMAPI) TagUserWithContextArgsForCall(i int) (context.Context, *iam.TagUserInput, []request.Option) {
	fake.tagUserWithContextMutex.RLock()
	defer fake.tagUserWithContextMutex.RUnlock()
	argsForCall := fake.tagUserWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) TagUserWithContextReturns(result1 *iam.TagUserOutput, result2 error) {
	fake.tagUserWithContextMutex.Lock()
	defer fake.tagUserWithContextMutex.Unlock()
	fake.TagUserWithContextStub = nil
	fake.tagUserWithContextReturns = struct {
		result1 *iam.TagUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) TagUserWithContextReturnsOnCall(i int, result1 *iam.TagUserOutput, result2 error) {
	fake.tagUserWithContextMutex.Lock()
	defer fake.tagUserWithContextMutex.Unlock()
	fake.TagUserWithContextStub = nil
	if fake.tagUserWithContextReturnsOnCall == nil {
		fake.tagUserWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.TagUserOutput
			result2 error
		})
	}
	fake.tagUserWithContextReturnsOnCall[i] = struct {
		result1 *iam.TagUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UntagRole(arg1 *iam.UntagRoleInput) (*iam.UntagRoleOutput, error) {
	fake.untagRoleMutex.Lock()
	ret, specificReturn := fake.untagRoleReturnsOnCall[len(fake.untagRoleArgsForCall)]
	fake.untagRoleArgsForCall = append(fake.untagRoleArgsForCall, struct {
		arg1 *iam.UntagRoleInput
	}{arg1})
	fake.recordInvocation("UntagRole", []interface{}{arg1})
	fake.untagRoleMutex.Unlock()
	if fake.UntagRoleStub != nil {
		return fake.UntagRoleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.untagRoleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UntagRoleCallCount() int {
	fake.untagRoleMutex.RLock()
	defer fake.untagRoleMutex.RUnlock()
	return len(fake.untagRoleArgsForCall)
}

func (fake *FakeIAMAPI) UntagRoleCalls(stub func(*iam.UntagRoleInput) (*iam.UntagRoleOutput, error)) {
	fake.untagRoleMutex.Lock()
	defer fake.untagRoleMutex.Unlock()
	fake.UntagRoleStub = stub
}

func (fake *FakeIAMAPI) UntagRoleArgsForCall(i int) *iam.UntagRoleInput {
	fake.untagRoleMutex.RLock()
	defer fake.untagRoleMutex.RUnlock()
	argsForCall := fake.untagRoleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UntagRoleReturns(result1 *iam.UntagRoleOutput, result2 error) {
	fake.untagRoleMutex.Lock()
	defer fake.untagRoleMutex.Unlock()
	fake.UntagRoleStub = nil
	fake.untagRoleReturns = struct {
		result1 *iam.UntagRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UntagRoleReturnsOnCall(i int, result1 *iam.UntagRoleOutput, result2 error) {
	fake.untagRoleMutex.Lock()
	defer fake.untagRoleMutex.Unlock()
	fake.UntagRoleStub = nil
	if fake.untagRoleReturnsOnCall == nil {
		fake.untagRoleReturnsOnCall = make(map[int]struct {
			result1 *iam.UntagRoleOutput
			result2 error
		})
	}
	fake.untagRoleReturnsOnCall[i] = struct {
		result1 *iam.UntagRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UntagRoleRequest(arg1 *iam.UntagRoleInput) (*request.Request, *iam.UntagRoleOutput) {
	fake.untagRoleRequestMutex.Lock()
	ret, specificReturn := fake.untagRoleRequestReturnsOnCall[len(fake.untagRoleRequestArgsForCall)]
	fake.untagRoleRequestArgsForCall = append(fake.untagRoleRequestArgsForCall, struct {
		arg1 *iam.UntagRoleInput
	}{arg1})
	fake.recordInvocation("UntagRoleRequest", []interface{}{arg1})
	fake.untagRoleRequestMutex.Unlock()
	if fake.UntagRoleRequestStub != nil {
		return fake.UntagRoleRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.untagRoleRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UntagRoleRequestCallCount() int {
	fake.untagRoleRequestMutex.RLock()
	defer fake.untagRoleRequestMutex.RUnlock()
	return len(fake.untagRoleRequestArgsForCall)
}

func (fake *FakeIAMAPI) UntagRoleRequestCalls(stub func(*iam.UntagRoleInput) (*request.Request, *iam.UntagRoleOutput)) {
	fake.untagRoleRequestMutex.Lock()
	defer fake.untagRoleRequestMutex.Unlock()
	fake.UntagRoleRequestStub = stub
}

func (fake *FakeIAMAPI) UntagRoleRequestArgsForCall(i int) *iam.UntagRoleInput {
	fake.untagRoleRequestMutex.RLock()
	defer fake.untagRoleRequestMutex.RUnlock()
	argsForCall := fake.untagRoleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UntagRoleRequestReturns(result1 *request.Request, result2 *iam.UntagRoleOutput) {
	fake.untagRoleRequestMutex.Lock()
	defer fake.untagRoleRequestMutex.Unlock()
	fake.UntagRoleRequestStub = nil
	fake.untagRoleRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UntagRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UntagRoleRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UntagRoleOutput) {
	fake.untagRoleRequestMutex.Lock()
	defer fake.untagRoleRequestMutex.Unlock()
	fake.UntagRoleRequestStub = nil
	if fake.untagRoleRequestReturnsOnCall == nil {
		fake.untagRoleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UntagRoleOutput
		})
	}
	fake.untagRoleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UntagRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UntagRoleWithContext(arg1 context.Context, arg2 *iam.UntagRoleInput, arg3 ...request.Option) (*iam.UntagRoleOutput, error) {
	fake.untagRoleWithContextMutex.Lock()
	ret, specificReturn := fake.untagRoleWithContextReturnsOnCall[len(fake.untagRoleWithContextArgsForCall)]
	fake.untagRoleWithContextArgsForCall = append(fake.untagRoleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UntagRoleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UntagRoleWithContext", []interface{}{arg1, arg2, arg3})
	fake.untagRoleWithContextMutex.Unlock()
	if fake.UntagRoleWithContextStub != nil {
		return fake.UntagRoleWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.untagRoleWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UntagRoleWithContextCallCount() int {
	fake.untagRoleWithContextMutex.RLock()
	defer fake.untagRoleWithContextMutex.RUnlock()
	return len(fake.untagRoleWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UntagRoleWithContextCalls(stub func(context.Context, *iam.UntagRoleInput, ...request.Option) (*iam.UntagRoleOutput, error)) {
	fake.untagRoleWithContextMutex.Lock()
	defer fake.untagRoleWithContextMutex.Unlock()
	fake.UntagRoleWithContextStub = stub
}

func (fake *FakeIAMAPI) UntagRoleWithContextArgsForCall(i int) (context.Context, *iam.UntagRoleInput, []request.Option) {
	fake.untagRoleWithContextMutex.RLock()
	defer fake.untagRoleWithContextMutex.RUnlock()
	argsForCall := fake.untagRoleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UntagRoleWithContextReturns(result1 *iam.UntagRoleOutput, result2 error) {
	fake.untagRoleWithContextMutex.Lock()
	defer fake.untagRoleWithContextMutex.Unlock()
	fake.UntagRoleWithContextStub = nil
	fake.untagRoleWithContextReturns = struct {
		result1 *iam.UntagRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UntagRoleWithContextReturnsOnCall(i int, result1 *iam.UntagRoleOutput, result2 error) {
	fake.untagRoleWithContextMutex.Lock()
	defer fake.untagRoleWithContextMutex.Unlock()
	fake.UntagRoleWithContextStub = nil
	if fake.untagRoleWithContextReturnsOnCall == nil {
		fake.untagRoleWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UntagRoleOutput
			result2 error
		})
	}
	fake.untagRoleWithContextReturnsOnCall[i] = struct {
		result1 *iam.UntagRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UntagUser(arg1 *iam.UntagUserInput) (*iam.UntagUserOutput, error) {
	fake.untagUserMutex.Lock()
	ret, specificReturn := fake.untagUserReturnsOnCall[len(fake.untagUserArgsForCall)]
	fake.untagUserArgsForCall = append(fake.untagUserArgsForCall, struct {
		arg1 *iam.UntagUserInput
	}{arg1})
	fake.recordInvocation("UntagUser", []interface{}{arg1})
	fake.untagUserMutex.Unlock()
	if fake.UntagUserStub != nil {
		return fake.UntagUserStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.untagUserReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UntagUserCallCount() int {
	fake.untagUserMutex.RLock()
	defer fake.untagUserMutex.RUnlock()
	return len(fake.untagUserArgsForCall)
}

func (fake *FakeIAMAPI) UntagUserCalls(stub func(*iam.UntagUserInput) (*iam.UntagUserOutput, error)) {
	fake.untagUserMutex.Lock()
	defer fake.untagUserMutex.Unlock()
	fake.UntagUserStub = stub
}

func (fake *FakeIAMAPI) UntagUserArgsForCall(i int) *iam.UntagUserInput {
	fake.untagUserMutex.RLock()
	defer fake.untagUserMutex.RUnlock()
	argsForCall := fake.untagUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UntagUserReturns(result1 *iam.UntagUserOutput, result2 error) {
	fake.untagUserMutex.Lock()
	defer fake.untagUserMutex.Unlock()
	fake.UntagUserStub = nil
	fake.untagUserReturns = struct {
		result1 *iam.UntagUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UntagUserReturnsOnCall(i int, result1 *iam.UntagUserOutput, result2 error) {
	fake.untagUserMutex.Lock()
	defer fake.untagUserMutex.Unlock()
	fake.UntagUserStub = nil
	if fake.untagUserReturnsOnCall == nil {
		fake.untagUserReturnsOnCall = make(map[int]struct {
			result1 *iam.UntagUserOutput
			result2 error
		})
	}
	fake.untagUserReturnsOnCall[i] = struct {
		result1 *iam.UntagUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UntagUserRequest(arg1 *iam.UntagUserInput) (*request.Request, *iam.UntagUserOutput) {
	fake.untagUserRequestMutex.Lock()
	ret, specificReturn := fake.untagUserRequestReturnsOnCall[len(fake.untagUserRequestArgsForCall)]
	fake.untagUserRequestArgsForCall = append(fake.untagUserRequestArgsForCall, struct {
		arg1 *iam.UntagUserInput
	}{arg1})
	fake.recordInvocation("UntagUserRequest", []interface{}{arg1})
	fake.untagUserRequestMutex.Unlock()
	if fake.UntagUserRequestStub != nil {
		return fake.UntagUserRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.untagUserRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UntagUserRequestCallCount() int {
	fake.untagUserRequestMutex.RLock()
	defer fake.untagUserRequestMutex.RUnlock()
	return len(fake.untagUserRequestArgsForCall)
}

func (fake *FakeIAMAPI) UntagUserRequestCalls(stub func(*iam.UntagUserInput) (*request.Request, *iam.UntagUserOutput)) {
	fake.untagUserRequestMutex.Lock()
	defer fake.untagUserRequestMutex.Unlock()
	fake.UntagUserRequestStub = stub
}

func (fake *FakeIAMAPI) UntagUserRequestArgsForCall(i int) *iam.UntagUserInput {
	fake.untagUserRequestMutex.RLock()
	defer fake.untagUserRequestMutex.RUnlock()
	argsForCall := fake.untagUserRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UntagUserRequestReturns(result1 *request.Request, result2 *iam.UntagUserOutput) {
	fake.untagUserRequestMutex.Lock()
	defer fake.untagUserRequestMutex.Unlock()
	fake.UntagUserRequestStub = nil
	fake.untagUserRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UntagUserOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UntagUserRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UntagUserOutput) {
	fake.untagUserRequestMutex.Lock()
	defer fake.untagUserRequestMutex.Unlock()
	fake.UntagUserRequestStub = nil
	if fake.untagUserRequestReturnsOnCall == nil {
		fake.untagUserRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UntagUserOutput
		})
	}
	fake.untagUserRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UntagUserOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UntagUserWithContext(arg1 context.Context, arg2 *iam.UntagUserInput, arg3 ...request.Option) (*iam.UntagUserOutput, error) {
	fake.untagUserWithContextMutex.Lock()
	ret, specificReturn := fake.untagUserWithContextReturnsOnCall[len(fake.untagUserWithContextArgsForCall)]
	fake.untagUserWithContextArgsForCall = append(fake.untagUserWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UntagUserInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UntagUserWithContext", []interface{}{arg1, arg2, arg3})
	fake.untagUserWithContextMutex.Unlock()
	if fake.UntagUserWithContextStub != nil {
		return fake.UntagUserWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.untagUserWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UntagUserWithContextCallCount() int {
	fake.untagUserWithContextMutex.RLock()
	defer fake.untagUserWithContextMutex.RUnlock()
	return len(fake.untagUserWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UntagUserWithContextCalls(stub func(context.Context, *iam.UntagUserInput, ...request.Option) (*iam.UntagUserOutput, error)) {
	fake.untagUserWithContextMutex.Lock()
	defer fake.untagUserWithContextMutex.Unlock()
	fake.UntagUserWithContextStub = stub
}

func (fake *FakeIAMAPI) UntagUserWithContextArgsForCall(i int) (context.Context, *iam.UntagUserInput, []request.Option) {
	fake.untagUserWithContextMutex.RLock()
	defer fake.untagUserWithContextMutex.RUnlock()
	argsForCall := fake.untagUserWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UntagUserWithContextReturns(result1 *iam.UntagUserOutput, result2 error) {
	fake.untagUserWithContextMutex.Lock()
	defer fake.untagUserWithContextMutex.Unlock()
	fake.UntagUserWithContextStub = nil
	fake.untagUserWithContextReturns = struct {
		result1 *iam.UntagUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UntagUserWithContextReturnsOnCall(i int, result1 *iam.UntagUserOutput, result2 error) {
	fake.untagUserWithContextMutex.Lock()
	defer fake.untagUserWithContextMutex.Unlock()
	fake.UntagUserWithContextStub = nil
	if fake.untagUserWithContextReturnsOnCall == nil {
		fake.untagUserWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UntagUserOutput
			result2 error
		})
	}
	fake.untagUserWithContextReturnsOnCall[i] = struct {
		result1 *iam.UntagUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAccessKey(arg1 *iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error) {
	fake.updateAccessKeyMutex.Lock()
	ret, specificReturn := fake.updateAccessKeyReturnsOnCall[len(fake.updateAccessKeyArgsForCall)]
	fake.updateAccessKeyArgsForCall = append(fake.updateAccessKeyArgsForCall, struct {
		arg1 *iam.UpdateAccessKeyInput
	}{arg1})
	fake.recordInvocation("UpdateAccessKey", []interface{}{arg1})
	fake.updateAccessKeyMutex.Unlock()
	if fake.UpdateAccessKeyStub != nil {
		return fake.UpdateAccessKeyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateAccessKeyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateAccessKeyCallCount() int {
	fake.updateAccessKeyMutex.RLock()
	defer fake.updateAccessKeyMutex.RUnlock()
	return len(fake.updateAccessKeyArgsForCall)
}

func (fake *FakeIAMAPI) UpdateAccessKeyCalls(stub func(*iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error)) {
	fake.updateAccessKeyMutex.Lock()
	defer fake.updateAccessKeyMutex.Unlock()
	fake.UpdateAccessKeyStub = stub
}

func (fake *FakeIAMAPI) UpdateAccessKeyArgsForCall(i int) *iam.UpdateAccessKeyInput {
	fake.updateAccessKeyMutex.RLock()
	defer fake.updateAccessKeyMutex.RUnlock()
	argsForCall := fake.updateAccessKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateAccessKeyReturns(result1 *iam.UpdateAccessKeyOutput, result2 error) {
	fake.updateAccessKeyMutex.Lock()
	defer fake.updateAccessKeyMutex.Unlock()
	fake.UpdateAccessKeyStub = nil
	fake.updateAccessKeyReturns = struct {
		result1 *iam.UpdateAccessKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAccessKeyReturnsOnCall(i int, result1 *iam.UpdateAccessKeyOutput, result2 error) {
	fake.updateAccessKeyMutex.Lock()
	defer fake.updateAccessKeyMutex.Unlock()
	fake.UpdateAccessKeyStub = nil
	if fake.updateAccessKeyReturnsOnCall == nil {
		fake.updateAccessKeyReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateAccessKeyOutput
			result2 error
		})
	}
	fake.updateAccessKeyReturnsOnCall[i] = struct {
		result1 *iam.UpdateAccessKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAccessKeyRequest(arg1 *iam.UpdateAccessKeyInput) (*request.Request, *iam.UpdateAccessKeyOutput) {
	fake.updateAccessKeyRequestMutex.Lock()
	ret, specificReturn := fake.updateAccessKeyRequestReturnsOnCall[len(fake.updateAccessKeyRequestArgsForCall)]
	fake.updateAccessKeyRequestArgsForCall = append(fake.updateAccessKeyRequestArgsForCall, struct {
		arg1 *iam.UpdateAccessKeyInput
	}{arg1})
	fake.recordInvocation("UpdateAccessKeyRequest", []interface{}{arg1})
	fake.updateAccessKeyRequestMutex.Unlock()
	if fake.UpdateAccessKeyRequestStub != nil {
		return fake.UpdateAccessKeyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateAccessKeyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateAccessKeyRequestCallCount() int {
	fake.updateAccessKeyRequestMutex.RLock()
	defer fake.updateAccessKeyRequestMutex.RUnlock()
	return len(fake.updateAccessKeyRequestArgsForCall)
}

func (fake *FakeIAMAPI) UpdateAccessKeyRequestCalls(stub func(*iam.UpdateAccessKeyInput) (*request.Request, *iam.UpdateAccessKeyOutput)) {
	fake.updateAccessKeyRequestMutex.Lock()
	defer fake.updateAccessKeyRequestMutex.Unlock()
	fake.UpdateAccessKeyRequestStub = stub
}

func (fake *FakeIAMAPI) UpdateAccessKeyRequestArgsForCall(i int) *iam.UpdateAccessKeyInput {
	fake.updateAccessKeyRequestMutex.RLock()
	defer fake.updateAccessKeyRequestMutex.RUnlock()
	argsForCall := fake.updateAccessKeyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateAccessKeyRequestReturns(result1 *request.Request, result2 *iam.UpdateAccessKeyOutput) {
	fake.updateAccessKeyRequestMutex.Lock()
	defer fake.updateAccessKeyRequestMutex.Unlock()
	fake.UpdateAccessKeyRequestStub = nil
	fake.updateAccessKeyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UpdateAccessKeyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAccessKeyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UpdateAccessKeyOutput) {
	fake.updateAccessKeyRequestMutex.Lock()
	defer fake.updateAccessKeyRequestMutex.Unlock()
	fake.UpdateAccessKeyRequestStub = nil
	if fake.updateAccessKeyRequestReturnsOnCall == nil {
		fake.updateAccessKeyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UpdateAccessKeyOutput
		})
	}
	fake.updateAccessKeyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UpdateAccessKeyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAccessKeyWithContext(arg1 context.Context, arg2 *iam.UpdateAccessKeyInput, arg3 ...request.Option) (*iam.UpdateAccessKeyOutput, error) {
	fake.updateAccessKeyWithContextMutex.Lock()
	ret, specificReturn := fake.updateAccessKeyWithContextReturnsOnCall[len(fake.updateAccessKeyWithContextArgsForCall)]
	fake.updateAccessKeyWithContextArgsForCall = append(fake.updateAccessKeyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UpdateAccessKeyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateAccessKeyWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateAccessKeyWithContextMutex.Unlock()
	if fake.UpdateAccessKeyWithContextStub != nil {
		return fake.UpdateAccessKeyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateAccessKeyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateAccessKeyWithContextCallCount() int {
	fake.updateAccessKeyWithContextMutex.RLock()
	defer fake.updateAccessKeyWithContextMutex.RUnlock()
	return len(fake.updateAccessKeyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UpdateAccessKeyWithContextCalls(stub func(context.Context, *iam.UpdateAccessKeyInput, ...request.Option) (*iam.UpdateAccessKeyOutput, error)) {
	fake.updateAccessKeyWithContextMutex.Lock()
	defer fake.updateAccessKeyWithContextMutex.Unlock()
	fake.UpdateAccessKeyWithContextStub = stub
}

func (fake *FakeIAMAPI) UpdateAccessKeyWithContextArgsForCall(i int) (context.Context, *iam.UpdateAccessKeyInput, []request.Option) {
	fake.updateAccessKeyWithContextMutex.RLock()
	defer fake.updateAccessKeyWithContextMutex.RUnlock()
	argsForCall := fake.updateAccessKeyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UpdateAccessKeyWithContextReturns(result1 *iam.UpdateAccessKeyOutput, result2 error) {
	fake.updateAccessKeyWithContextMutex.Lock()
	defer fake.updateAccessKeyWithContextMutex.Unlock()
	fake.UpdateAccessKeyWithContextStub = nil
	fake.updateAccessKeyWithContextReturns = struct {
		result1 *iam.UpdateAccessKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAccessKeyWithContextReturnsOnCall(i int, result1 *iam.UpdateAccessKeyOutput, result2 error) {
	fake.updateAccessKeyWithContextMutex.Lock()
	defer fake.updateAccessKeyWithContextMutex.Unlock()
	fake.UpdateAccessKeyWithContextStub = nil
	if fake.updateAccessKeyWithContextReturnsOnCall == nil {
		fake.updateAccessKeyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateAccessKeyOutput
			result2 error
		})
	}
	fake.updateAccessKeyWithContextReturnsOnCall[i] = struct {
		result1 *iam.UpdateAccessKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicy(arg1 *iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	fake.updateAccountPasswordPolicyMutex.Lock()
	ret, specificReturn := fake.updateAccountPasswordPolicyReturnsOnCall[len(fake.updateAccountPasswordPolicyArgsForCall)]
	fake.updateAccountPasswordPolicyArgsForCall = append(fake.updateAccountPasswordPolicyArgsForCall, struct {
		arg1 *iam.UpdateAccountPasswordPolicyInput
	}{arg1})
	fake.recordInvocation("UpdateAccountPasswordPolicy", []interface{}{arg1})
	fake.updateAccountPasswordPolicyMutex.Unlock()
	if fake.UpdateAccountPasswordPolicyStub != nil {
		return fake.UpdateAccountPasswordPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateAccountPasswordPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicyCallCount() int {
	fake.updateAccountPasswordPolicyMutex.RLock()
	defer fake.updateAccountPasswordPolicyMutex.RUnlock()
	return len(fake.updateAccountPasswordPolicyArgsForCall)
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicyCalls(stub func(*iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error)) {
	fake.updateAccountPasswordPolicyMutex.Lock()
	defer fake.updateAccountPasswordPolicyMutex.Unlock()
	fake.UpdateAccountPasswordPolicyStub = stub
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicyArgsForCall(i int) *iam.UpdateAccountPasswordPolicyInput {
	fake.updateAccountPasswordPolicyMutex.RLock()
	defer fake.updateAccountPasswordPolicyMutex.RUnlock()
	argsForCall := fake.updateAccountPasswordPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicyReturns(result1 *iam.UpdateAccountPasswordPolicyOutput, result2 error) {
	fake.updateAccountPasswordPolicyMutex.Lock()
	defer fake.updateAccountPasswordPolicyMutex.Unlock()
	fake.UpdateAccountPasswordPolicyStub = nil
	fake.updateAccountPasswordPolicyReturns = struct {
		result1 *iam.UpdateAccountPasswordPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicyReturnsOnCall(i int, result1 *iam.UpdateAccountPasswordPolicyOutput, result2 error) {
	fake.updateAccountPasswordPolicyMutex.Lock()
	defer fake.updateAccountPasswordPolicyMutex.Unlock()
	fake.UpdateAccountPasswordPolicyStub = nil
	if fake.updateAccountPasswordPolicyReturnsOnCall == nil {
		fake.updateAccountPasswordPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateAccountPasswordPolicyOutput
			result2 error
		})
	}
	fake.updateAccountPasswordPolicyReturnsOnCall[i] = struct {
		result1 *iam.UpdateAccountPasswordPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicyRequest(arg1 *iam.UpdateAccountPasswordPolicyInput) (*request.Request, *iam.UpdateAccountPasswordPolicyOutput) {
	fake.updateAccountPasswordPolicyRequestMutex.Lock()
	ret, specificReturn := fake.updateAccountPasswordPolicyRequestReturnsOnCall[len(fake.updateAccountPasswordPolicyRequestArgsForCall)]
	fake.updateAccountPasswordPolicyRequestArgsForCall = append(fake.updateAccountPasswordPolicyRequestArgsForCall, struct {
		arg1 *iam.UpdateAccountPasswordPolicyInput
	}{arg1})
	fake.recordInvocation("UpdateAccountPasswordPolicyRequest", []interface{}{arg1})
	fake.updateAccountPasswordPolicyRequestMutex.Unlock()
	if fake.UpdateAccountPasswordPolicyRequestStub != nil {
		return fake.UpdateAccountPasswordPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateAccountPasswordPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicyRequestCallCount() int {
	fake.updateAccountPasswordPolicyRequestMutex.RLock()
	defer fake.updateAccountPasswordPolicyRequestMutex.RUnlock()
	return len(fake.updateAccountPasswordPolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicyRequestCalls(stub func(*iam.UpdateAccountPasswordPolicyInput) (*request.Request, *iam.UpdateAccountPasswordPolicyOutput)) {
	fake.updateAccountPasswordPolicyRequestMutex.Lock()
	defer fake.updateAccountPasswordPolicyRequestMutex.Unlock()
	fake.UpdateAccountPasswordPolicyRequestStub = stub
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicyRequestArgsForCall(i int) *iam.UpdateAccountPasswordPolicyInput {
	fake.updateAccountPasswordPolicyRequestMutex.RLock()
	defer fake.updateAccountPasswordPolicyRequestMutex.RUnlock()
	argsForCall := fake.updateAccountPasswordPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicyRequestReturns(result1 *request.Request, result2 *iam.UpdateAccountPasswordPolicyOutput) {
	fake.updateAccountPasswordPolicyRequestMutex.Lock()
	defer fake.updateAccountPasswordPolicyRequestMutex.Unlock()
	fake.UpdateAccountPasswordPolicyRequestStub = nil
	fake.updateAccountPasswordPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UpdateAccountPasswordPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UpdateAccountPasswordPolicyOutput) {
	fake.updateAccountPasswordPolicyRequestMutex.Lock()
	defer fake.updateAccountPasswordPolicyRequestMutex.Unlock()
	fake.UpdateAccountPasswordPolicyRequestStub = nil
	if fake.updateAccountPasswordPolicyRequestReturnsOnCall == nil {
		fake.updateAccountPasswordPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UpdateAccountPasswordPolicyOutput
		})
	}
	fake.updateAccountPasswordPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UpdateAccountPasswordPolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicyWithContext(arg1 context.Context, arg2 *iam.UpdateAccountPasswordPolicyInput, arg3 ...request.Option) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	fake.updateAccountPasswordPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.updateAccountPasswordPolicyWithContextReturnsOnCall[len(fake.updateAccountPasswordPolicyWithContextArgsForCall)]
	fake.updateAccountPasswordPolicyWithContextArgsForCall = append(fake.updateAccountPasswordPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UpdateAccountPasswordPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateAccountPasswordPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateAccountPasswordPolicyWithContextMutex.Unlock()
	if fake.UpdateAccountPasswordPolicyWithContextStub != nil {
		return fake.UpdateAccountPasswordPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateAccountPasswordPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicyWithContextCallCount() int {
	fake.updateAccountPasswordPolicyWithContextMutex.RLock()
	defer fake.updateAccountPasswordPolicyWithContextMutex.RUnlock()
	return len(fake.updateAccountPasswordPolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicyWithContextCalls(stub func(context.Context, *iam.UpdateAccountPasswordPolicyInput, ...request.Option) (*iam.UpdateAccountPasswordPolicyOutput, error)) {
	fake.updateAccountPasswordPolicyWithContextMutex.Lock()
	defer fake.updateAccountPasswordPolicyWithContextMutex.Unlock()
	fake.UpdateAccountPasswordPolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicyWithContextArgsForCall(i int) (context.Context, *iam.UpdateAccountPasswordPolicyInput, []request.Option) {
	fake.updateAccountPasswordPolicyWithContextMutex.RLock()
	defer fake.updateAccountPasswordPolicyWithContextMutex.RUnlock()
	argsForCall := fake.updateAccountPasswordPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicyWithContextReturns(result1 *iam.UpdateAccountPasswordPolicyOutput, result2 error) {
	fake.updateAccountPasswordPolicyWithContextMutex.Lock()
	defer fake.updateAccountPasswordPolicyWithContextMutex.Unlock()
	fake.UpdateAccountPasswordPolicyWithContextStub = nil
	fake.updateAccountPasswordPolicyWithContextReturns = struct {
		result1 *iam.UpdateAccountPasswordPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAccountPasswordPolicyWithContextReturnsOnCall(i int, result1 *iam.UpdateAccountPasswordPolicyOutput, result2 error) {
	fake.updateAccountPasswordPolicyWithContextMutex.Lock()
	defer fake.updateAccountPasswordPolicyWithContextMutex.Unlock()
	fake.UpdateAccountPasswordPolicyWithContextStub = nil
	if fake.updateAccountPasswordPolicyWithContextReturnsOnCall == nil {
		fake.updateAccountPasswordPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateAccountPasswordPolicyOutput
			result2 error
		})
	}
	fake.updateAccountPasswordPolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.UpdateAccountPasswordPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicy(arg1 *iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error) {
	fake.updateAssumeRolePolicyMutex.Lock()
	ret, specificReturn := fake.updateAssumeRolePolicyReturnsOnCall[len(fake.updateAssumeRolePolicyArgsForCall)]
	fake.updateAssumeRolePolicyArgsForCall = append(fake.updateAssumeRolePolicyArgsForCall, struct {
		arg1 *iam.UpdateAssumeRolePolicyInput
	}{arg1})
	fake.recordInvocation("UpdateAssumeRolePolicy", []interface{}{arg1})
	fake.updateAssumeRolePolicyMutex.Unlock()
	if fake.UpdateAssumeRolePolicyStub != nil {
		return fake.UpdateAssumeRolePolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateAssumeRolePolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicyCallCount() int {
	fake.updateAssumeRolePolicyMutex.RLock()
	defer fake.updateAssumeRolePolicyMutex.RUnlock()
	return len(fake.updateAssumeRolePolicyArgsForCall)
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicyCalls(stub func(*iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error)) {
	fake.updateAssumeRolePolicyMutex.Lock()
	defer fake.updateAssumeRolePolicyMutex.Unlock()
	fake.UpdateAssumeRolePolicyStub = stub
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicyArgsForCall(i int) *iam.UpdateAssumeRolePolicyInput {
	fake.updateAssumeRolePolicyMutex.RLock()
	defer fake.updateAssumeRolePolicyMutex.RUnlock()
	argsForCall := fake.updateAssumeRolePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicyReturns(result1 *iam.UpdateAssumeRolePolicyOutput, result2 error) {
	fake.updateAssumeRolePolicyMutex.Lock()
	defer fake.updateAssumeRolePolicyMutex.Unlock()
	fake.UpdateAssumeRolePolicyStub = nil
	fake.updateAssumeRolePolicyReturns = struct {
		result1 *iam.UpdateAssumeRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicyReturnsOnCall(i int, result1 *iam.UpdateAssumeRolePolicyOutput, result2 error) {
	fake.updateAssumeRolePolicyMutex.Lock()
	defer fake.updateAssumeRolePolicyMutex.Unlock()
	fake.UpdateAssumeRolePolicyStub = nil
	if fake.updateAssumeRolePolicyReturnsOnCall == nil {
		fake.updateAssumeRolePolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateAssumeRolePolicyOutput
			result2 error
		})
	}
	fake.updateAssumeRolePolicyReturnsOnCall[i] = struct {
		result1 *iam.UpdateAssumeRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicyRequest(arg1 *iam.UpdateAssumeRolePolicyInput) (*request.Request, *iam.UpdateAssumeRolePolicyOutput) {
	fake.updateAssumeRolePolicyRequestMutex.Lock()
	ret, specificReturn := fake.updateAssumeRolePolicyRequestReturnsOnCall[len(fake.updateAssumeRolePolicyRequestArgsForCall)]
	fake.updateAssumeRolePolicyRequestArgsForCall = append(fake.updateAssumeRolePolicyRequestArgsForCall, struct {
		arg1 *iam.UpdateAssumeRolePolicyInput
	}{arg1})
	fake.recordInvocation("UpdateAssumeRolePolicyRequest", []interface{}{arg1})
	fake.updateAssumeRolePolicyRequestMutex.Unlock()
	if fake.UpdateAssumeRolePolicyRequestStub != nil {
		return fake.UpdateAssumeRolePolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateAssumeRolePolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicyRequestCallCount() int {
	fake.updateAssumeRolePolicyRequestMutex.RLock()
	defer fake.updateAssumeRolePolicyRequestMutex.RUnlock()
	return len(fake.updateAssumeRolePolicyRequestArgsForCall)
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicyRequestCalls(stub func(*iam.UpdateAssumeRolePolicyInput) (*request.Request, *iam.UpdateAssumeRolePolicyOutput)) {
	fake.updateAssumeRolePolicyRequestMutex.Lock()
	defer fake.updateAssumeRolePolicyRequestMutex.Unlock()
	fake.UpdateAssumeRolePolicyRequestStub = stub
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicyRequestArgsForCall(i int) *iam.UpdateAssumeRolePolicyInput {
	fake.updateAssumeRolePolicyRequestMutex.RLock()
	defer fake.updateAssumeRolePolicyRequestMutex.RUnlock()
	argsForCall := fake.updateAssumeRolePolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicyRequestReturns(result1 *request.Request, result2 *iam.UpdateAssumeRolePolicyOutput) {
	fake.updateAssumeRolePolicyRequestMutex.Lock()
	defer fake.updateAssumeRolePolicyRequestMutex.Unlock()
	fake.UpdateAssumeRolePolicyRequestStub = nil
	fake.updateAssumeRolePolicyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UpdateAssumeRolePolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UpdateAssumeRolePolicyOutput) {
	fake.updateAssumeRolePolicyRequestMutex.Lock()
	defer fake.updateAssumeRolePolicyRequestMutex.Unlock()
	fake.UpdateAssumeRolePolicyRequestStub = nil
	if fake.updateAssumeRolePolicyRequestReturnsOnCall == nil {
		fake.updateAssumeRolePolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UpdateAssumeRolePolicyOutput
		})
	}
	fake.updateAssumeRolePolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UpdateAssumeRolePolicyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicyWithContext(arg1 context.Context, arg2 *iam.UpdateAssumeRolePolicyInput, arg3 ...request.Option) (*iam.UpdateAssumeRolePolicyOutput, error) {
	fake.updateAssumeRolePolicyWithContextMutex.Lock()
	ret, specificReturn := fake.updateAssumeRolePolicyWithContextReturnsOnCall[len(fake.updateAssumeRolePolicyWithContextArgsForCall)]
	fake.updateAssumeRolePolicyWithContextArgsForCall = append(fake.updateAssumeRolePolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UpdateAssumeRolePolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateAssumeRolePolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateAssumeRolePolicyWithContextMutex.Unlock()
	if fake.UpdateAssumeRolePolicyWithContextStub != nil {
		return fake.UpdateAssumeRolePolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateAssumeRolePolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicyWithContextCallCount() int {
	fake.updateAssumeRolePolicyWithContextMutex.RLock()
	defer fake.updateAssumeRolePolicyWithContextMutex.RUnlock()
	return len(fake.updateAssumeRolePolicyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicyWithContextCalls(stub func(context.Context, *iam.UpdateAssumeRolePolicyInput, ...request.Option) (*iam.UpdateAssumeRolePolicyOutput, error)) {
	fake.updateAssumeRolePolicyWithContextMutex.Lock()
	defer fake.updateAssumeRolePolicyWithContextMutex.Unlock()
	fake.UpdateAssumeRolePolicyWithContextStub = stub
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicyWithContextArgsForCall(i int) (context.Context, *iam.UpdateAssumeRolePolicyInput, []request.Option) {
	fake.updateAssumeRolePolicyWithContextMutex.RLock()
	defer fake.updateAssumeRolePolicyWithContextMutex.RUnlock()
	argsForCall := fake.updateAssumeRolePolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicyWithContextReturns(result1 *iam.UpdateAssumeRolePolicyOutput, result2 error) {
	fake.updateAssumeRolePolicyWithContextMutex.Lock()
	defer fake.updateAssumeRolePolicyWithContextMutex.Unlock()
	fake.UpdateAssumeRolePolicyWithContextStub = nil
	fake.updateAssumeRolePolicyWithContextReturns = struct {
		result1 *iam.UpdateAssumeRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateAssumeRolePolicyWithContextReturnsOnCall(i int, result1 *iam.UpdateAssumeRolePolicyOutput, result2 error) {
	fake.updateAssumeRolePolicyWithContextMutex.Lock()
	defer fake.updateAssumeRolePolicyWithContextMutex.Unlock()
	fake.UpdateAssumeRolePolicyWithContextStub = nil
	if fake.updateAssumeRolePolicyWithContextReturnsOnCall == nil {
		fake.updateAssumeRolePolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateAssumeRolePolicyOutput
			result2 error
		})
	}
	fake.updateAssumeRolePolicyWithContextReturnsOnCall[i] = struct {
		result1 *iam.UpdateAssumeRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateGroup(arg1 *iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error) {
	fake.updateGroupMutex.Lock()
	ret, specificReturn := fake.updateGroupReturnsOnCall[len(fake.updateGroupArgsForCall)]
	fake.updateGroupArgsForCall = append(fake.updateGroupArgsForCall, struct {
		arg1 *iam.UpdateGroupInput
	}{arg1})
	fake.recordInvocation("UpdateGroup", []interface{}{arg1})
	fake.updateGroupMutex.Unlock()
	if fake.UpdateGroupStub != nil {
		return fake.UpdateGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateGroupCallCount() int {
	fake.updateGroupMutex.RLock()
	defer fake.updateGroupMutex.RUnlock()
	return len(fake.updateGroupArgsForCall)
}

func (fake *FakeIAMAPI) UpdateGroupCalls(stub func(*iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error)) {
	fake.updateGroupMutex.Lock()
	defer fake.updateGroupMutex.Unlock()
	fake.UpdateGroupStub = stub
}

func (fake *FakeIAMAPI) UpdateGroupArgsForCall(i int) *iam.UpdateGroupInput {
	fake.updateGroupMutex.RLock()
	defer fake.updateGroupMutex.RUnlock()
	argsForCall := fake.updateGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateGroupReturns(result1 *iam.UpdateGroupOutput, result2 error) {
	fake.updateGroupMutex.Lock()
	defer fake.updateGroupMutex.Unlock()
	fake.UpdateGroupStub = nil
	fake.updateGroupReturns = struct {
		result1 *iam.UpdateGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateGroupReturnsOnCall(i int, result1 *iam.UpdateGroupOutput, result2 error) {
	fake.updateGroupMutex.Lock()
	defer fake.updateGroupMutex.Unlock()
	fake.UpdateGroupStub = nil
	if fake.updateGroupReturnsOnCall == nil {
		fake.updateGroupReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateGroupOutput
			result2 error
		})
	}
	fake.updateGroupReturnsOnCall[i] = struct {
		result1 *iam.UpdateGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateGroupRequest(arg1 *iam.UpdateGroupInput) (*request.Request, *iam.UpdateGroupOutput) {
	fake.updateGroupRequestMutex.Lock()
	ret, specificReturn := fake.updateGroupRequestReturnsOnCall[len(fake.updateGroupRequestArgsForCall)]
	fake.updateGroupRequestArgsForCall = append(fake.updateGroupRequestArgsForCall, struct {
		arg1 *iam.UpdateGroupInput
	}{arg1})
	fake.recordInvocation("UpdateGroupRequest", []interface{}{arg1})
	fake.updateGroupRequestMutex.Unlock()
	if fake.UpdateGroupRequestStub != nil {
		return fake.UpdateGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateGroupRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateGroupRequestCallCount() int {
	fake.updateGroupRequestMutex.RLock()
	defer fake.updateGroupRequestMutex.RUnlock()
	return len(fake.updateGroupRequestArgsForCall)
}

func (fake *FakeIAMAPI) UpdateGroupRequestCalls(stub func(*iam.UpdateGroupInput) (*request.Request, *iam.UpdateGroupOutput)) {
	fake.updateGroupRequestMutex.Lock()
	defer fake.updateGroupRequestMutex.Unlock()
	fake.UpdateGroupRequestStub = stub
}

func (fake *FakeIAMAPI) UpdateGroupRequestArgsForCall(i int) *iam.UpdateGroupInput {
	fake.updateGroupRequestMutex.RLock()
	defer fake.updateGroupRequestMutex.RUnlock()
	argsForCall := fake.updateGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateGroupRequestReturns(result1 *request.Request, result2 *iam.UpdateGroupOutput) {
	fake.updateGroupRequestMutex.Lock()
	defer fake.updateGroupRequestMutex.Unlock()
	fake.UpdateGroupRequestStub = nil
	fake.updateGroupRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UpdateGroupOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UpdateGroupOutput) {
	fake.updateGroupRequestMutex.Lock()
	defer fake.updateGroupRequestMutex.Unlock()
	fake.UpdateGroupRequestStub = nil
	if fake.updateGroupRequestReturnsOnCall == nil {
		fake.updateGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UpdateGroupOutput
		})
	}
	fake.updateGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UpdateGroupOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateGroupWithContext(arg1 context.Context, arg2 *iam.UpdateGroupInput, arg3 ...request.Option) (*iam.UpdateGroupOutput, error) {
	fake.updateGroupWithContextMutex.Lock()
	ret, specificReturn := fake.updateGroupWithContextReturnsOnCall[len(fake.updateGroupWithContextArgsForCall)]
	fake.updateGroupWithContextArgsForCall = append(fake.updateGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UpdateGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateGroupWithContextMutex.Unlock()
	if fake.UpdateGroupWithContextStub != nil {
		return fake.UpdateGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateGroupWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateGroupWithContextCallCount() int {
	fake.updateGroupWithContextMutex.RLock()
	defer fake.updateGroupWithContextMutex.RUnlock()
	return len(fake.updateGroupWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UpdateGroupWithContextCalls(stub func(context.Context, *iam.UpdateGroupInput, ...request.Option) (*iam.UpdateGroupOutput, error)) {
	fake.updateGroupWithContextMutex.Lock()
	defer fake.updateGroupWithContextMutex.Unlock()
	fake.UpdateGroupWithContextStub = stub
}

func (fake *FakeIAMAPI) UpdateGroupWithContextArgsForCall(i int) (context.Context, *iam.UpdateGroupInput, []request.Option) {
	fake.updateGroupWithContextMutex.RLock()
	defer fake.updateGroupWithContextMutex.RUnlock()
	argsForCall := fake.updateGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UpdateGroupWithContextReturns(result1 *iam.UpdateGroupOutput, result2 error) {
	fake.updateGroupWithContextMutex.Lock()
	defer fake.updateGroupWithContextMutex.Unlock()
	fake.UpdateGroupWithContextStub = nil
	fake.updateGroupWithContextReturns = struct {
		result1 *iam.UpdateGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateGroupWithContextReturnsOnCall(i int, result1 *iam.UpdateGroupOutput, result2 error) {
	fake.updateGroupWithContextMutex.Lock()
	defer fake.updateGroupWithContextMutex.Unlock()
	fake.UpdateGroupWithContextStub = nil
	if fake.updateGroupWithContextReturnsOnCall == nil {
		fake.updateGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateGroupOutput
			result2 error
		})
	}
	fake.updateGroupWithContextReturnsOnCall[i] = struct {
		result1 *iam.UpdateGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateLoginProfile(arg1 *iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error) {
	fake.updateLoginProfileMutex.Lock()
	ret, specificReturn := fake.updateLoginProfileReturnsOnCall[len(fake.updateLoginProfileArgsForCall)]
	fake.updateLoginProfileArgsForCall = append(fake.updateLoginProfileArgsForCall, struct {
		arg1 *iam.UpdateLoginProfileInput
	}{arg1})
	fake.recordInvocation("UpdateLoginProfile", []interface{}{arg1})
	fake.updateLoginProfileMutex.Unlock()
	if fake.UpdateLoginProfileStub != nil {
		return fake.UpdateLoginProfileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateLoginProfileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateLoginProfileCallCount() int {
	fake.updateLoginProfileMutex.RLock()
	defer fake.updateLoginProfileMutex.RUnlock()
	return len(fake.updateLoginProfileArgsForCall)
}

func (fake *FakeIAMAPI) UpdateLoginProfileCalls(stub func(*iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error)) {
	fake.updateLoginProfileMutex.Lock()
	defer fake.updateLoginProfileMutex.Unlock()
	fake.UpdateLoginProfileStub = stub
}

func (fake *FakeIAMAPI) UpdateLoginProfileArgsForCall(i int) *iam.UpdateLoginProfileInput {
	fake.updateLoginProfileMutex.RLock()
	defer fake.updateLoginProfileMutex.RUnlock()
	argsForCall := fake.updateLoginProfileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateLoginProfileReturns(result1 *iam.UpdateLoginProfileOutput, result2 error) {
	fake.updateLoginProfileMutex.Lock()
	defer fake.updateLoginProfileMutex.Unlock()
	fake.UpdateLoginProfileStub = nil
	fake.updateLoginProfileReturns = struct {
		result1 *iam.UpdateLoginProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateLoginProfileReturnsOnCall(i int, result1 *iam.UpdateLoginProfileOutput, result2 error) {
	fake.updateLoginProfileMutex.Lock()
	defer fake.updateLoginProfileMutex.Unlock()
	fake.UpdateLoginProfileStub = nil
	if fake.updateLoginProfileReturnsOnCall == nil {
		fake.updateLoginProfileReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateLoginProfileOutput
			result2 error
		})
	}
	fake.updateLoginProfileReturnsOnCall[i] = struct {
		result1 *iam.UpdateLoginProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateLoginProfileRequest(arg1 *iam.UpdateLoginProfileInput) (*request.Request, *iam.UpdateLoginProfileOutput) {
	fake.updateLoginProfileRequestMutex.Lock()
	ret, specificReturn := fake.updateLoginProfileRequestReturnsOnCall[len(fake.updateLoginProfileRequestArgsForCall)]
	fake.updateLoginProfileRequestArgsForCall = append(fake.updateLoginProfileRequestArgsForCall, struct {
		arg1 *iam.UpdateLoginProfileInput
	}{arg1})
	fake.recordInvocation("UpdateLoginProfileRequest", []interface{}{arg1})
	fake.updateLoginProfileRequestMutex.Unlock()
	if fake.UpdateLoginProfileRequestStub != nil {
		return fake.UpdateLoginProfileRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateLoginProfileRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateLoginProfileRequestCallCount() int {
	fake.updateLoginProfileRequestMutex.RLock()
	defer fake.updateLoginProfileRequestMutex.RUnlock()
	return len(fake.updateLoginProfileRequestArgsForCall)
}

func (fake *FakeIAMAPI) UpdateLoginProfileRequestCalls(stub func(*iam.UpdateLoginProfileInput) (*request.Request, *iam.UpdateLoginProfileOutput)) {
	fake.updateLoginProfileRequestMutex.Lock()
	defer fake.updateLoginProfileRequestMutex.Unlock()
	fake.UpdateLoginProfileRequestStub = stub
}

func (fake *FakeIAMAPI) UpdateLoginProfileRequestArgsForCall(i int) *iam.UpdateLoginProfileInput {
	fake.updateLoginProfileRequestMutex.RLock()
	defer fake.updateLoginProfileRequestMutex.RUnlock()
	argsForCall := fake.updateLoginProfileRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateLoginProfileRequestReturns(result1 *request.Request, result2 *iam.UpdateLoginProfileOutput) {
	fake.updateLoginProfileRequestMutex.Lock()
	defer fake.updateLoginProfileRequestMutex.Unlock()
	fake.UpdateLoginProfileRequestStub = nil
	fake.updateLoginProfileRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UpdateLoginProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateLoginProfileRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UpdateLoginProfileOutput) {
	fake.updateLoginProfileRequestMutex.Lock()
	defer fake.updateLoginProfileRequestMutex.Unlock()
	fake.UpdateLoginProfileRequestStub = nil
	if fake.updateLoginProfileRequestReturnsOnCall == nil {
		fake.updateLoginProfileRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UpdateLoginProfileOutput
		})
	}
	fake.updateLoginProfileRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UpdateLoginProfileOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateLoginProfileWithContext(arg1 context.Context, arg2 *iam.UpdateLoginProfileInput, arg3 ...request.Option) (*iam.UpdateLoginProfileOutput, error) {
	fake.updateLoginProfileWithContextMutex.Lock()
	ret, specificReturn := fake.updateLoginProfileWithContextReturnsOnCall[len(fake.updateLoginProfileWithContextArgsForCall)]
	fake.updateLoginProfileWithContextArgsForCall = append(fake.updateLoginProfileWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UpdateLoginProfileInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateLoginProfileWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateLoginProfileWithContextMutex.Unlock()
	if fake.UpdateLoginProfileWithContextStub != nil {
		return fake.UpdateLoginProfileWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateLoginProfileWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateLoginProfileWithContextCallCount() int {
	fake.updateLoginProfileWithContextMutex.RLock()
	defer fake.updateLoginProfileWithContextMutex.RUnlock()
	return len(fake.updateLoginProfileWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UpdateLoginProfileWithContextCalls(stub func(context.Context, *iam.UpdateLoginProfileInput, ...request.Option) (*iam.UpdateLoginProfileOutput, error)) {
	fake.updateLoginProfileWithContextMutex.Lock()
	defer fake.updateLoginProfileWithContextMutex.Unlock()
	fake.UpdateLoginProfileWithContextStub = stub
}

func (fake *FakeIAMAPI) UpdateLoginProfileWithContextArgsForCall(i int) (context.Context, *iam.UpdateLoginProfileInput, []request.Option) {
	fake.updateLoginProfileWithContextMutex.RLock()
	defer fake.updateLoginProfileWithContextMutex.RUnlock()
	argsForCall := fake.updateLoginProfileWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UpdateLoginProfileWithContextReturns(result1 *iam.UpdateLoginProfileOutput, result2 error) {
	fake.updateLoginProfileWithContextMutex.Lock()
	defer fake.updateLoginProfileWithContextMutex.Unlock()
	fake.UpdateLoginProfileWithContextStub = nil
	fake.updateLoginProfileWithContextReturns = struct {
		result1 *iam.UpdateLoginProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateLoginProfileWithContextReturnsOnCall(i int, result1 *iam.UpdateLoginProfileOutput, result2 error) {
	fake.updateLoginProfileWithContextMutex.Lock()
	defer fake.updateLoginProfileWithContextMutex.Unlock()
	fake.UpdateLoginProfileWithContextStub = nil
	if fake.updateLoginProfileWithContextReturnsOnCall == nil {
		fake.updateLoginProfileWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateLoginProfileOutput
			result2 error
		})
	}
	fake.updateLoginProfileWithContextReturnsOnCall[i] = struct {
		result1 *iam.UpdateLoginProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprint(arg1 *iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	fake.updateOpenIDConnectProviderThumbprintMutex.Lock()
	ret, specificReturn := fake.updateOpenIDConnectProviderThumbprintReturnsOnCall[len(fake.updateOpenIDConnectProviderThumbprintArgsForCall)]
	fake.updateOpenIDConnectProviderThumbprintArgsForCall = append(fake.updateOpenIDConnectProviderThumbprintArgsForCall, struct {
		arg1 *iam.UpdateOpenIDConnectProviderThumbprintInput
	}{arg1})
	fake.recordInvocation("UpdateOpenIDConnectProviderThumbprint", []interface{}{arg1})
	fake.updateOpenIDConnectProviderThumbprintMutex.Unlock()
	if fake.UpdateOpenIDConnectProviderThumbprintStub != nil {
		return fake.UpdateOpenIDConnectProviderThumbprintStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateOpenIDConnectProviderThumbprintReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprintCallCount() int {
	fake.updateOpenIDConnectProviderThumbprintMutex.RLock()
	defer fake.updateOpenIDConnectProviderThumbprintMutex.RUnlock()
	return len(fake.updateOpenIDConnectProviderThumbprintArgsForCall)
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprintCalls(stub func(*iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error)) {
	fake.updateOpenIDConnectProviderThumbprintMutex.Lock()
	defer fake.updateOpenIDConnectProviderThumbprintMutex.Unlock()
	fake.UpdateOpenIDConnectProviderThumbprintStub = stub
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprintArgsForCall(i int) *iam.UpdateOpenIDConnectProviderThumbprintInput {
	fake.updateOpenIDConnectProviderThumbprintMutex.RLock()
	defer fake.updateOpenIDConnectProviderThumbprintMutex.RUnlock()
	argsForCall := fake.updateOpenIDConnectProviderThumbprintArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprintReturns(result1 *iam.UpdateOpenIDConnectProviderThumbprintOutput, result2 error) {
	fake.updateOpenIDConnectProviderThumbprintMutex.Lock()
	defer fake.updateOpenIDConnectProviderThumbprintMutex.Unlock()
	fake.UpdateOpenIDConnectProviderThumbprintStub = nil
	fake.updateOpenIDConnectProviderThumbprintReturns = struct {
		result1 *iam.UpdateOpenIDConnectProviderThumbprintOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprintReturnsOnCall(i int, result1 *iam.UpdateOpenIDConnectProviderThumbprintOutput, result2 error) {
	fake.updateOpenIDConnectProviderThumbprintMutex.Lock()
	defer fake.updateOpenIDConnectProviderThumbprintMutex.Unlock()
	fake.UpdateOpenIDConnectProviderThumbprintStub = nil
	if fake.updateOpenIDConnectProviderThumbprintReturnsOnCall == nil {
		fake.updateOpenIDConnectProviderThumbprintReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateOpenIDConnectProviderThumbprintOutput
			result2 error
		})
	}
	fake.updateOpenIDConnectProviderThumbprintReturnsOnCall[i] = struct {
		result1 *iam.UpdateOpenIDConnectProviderThumbprintOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprintRequest(arg1 *iam.UpdateOpenIDConnectProviderThumbprintInput) (*request.Request, *iam.UpdateOpenIDConnectProviderThumbprintOutput) {
	fake.updateOpenIDConnectProviderThumbprintRequestMutex.Lock()
	ret, specificReturn := fake.updateOpenIDConnectProviderThumbprintRequestReturnsOnCall[len(fake.updateOpenIDConnectProviderThumbprintRequestArgsForCall)]
	fake.updateOpenIDConnectProviderThumbprintRequestArgsForCall = append(fake.updateOpenIDConnectProviderThumbprintRequestArgsForCall, struct {
		arg1 *iam.UpdateOpenIDConnectProviderThumbprintInput
	}{arg1})
	fake.recordInvocation("UpdateOpenIDConnectProviderThumbprintRequest", []interface{}{arg1})
	fake.updateOpenIDConnectProviderThumbprintRequestMutex.Unlock()
	if fake.UpdateOpenIDConnectProviderThumbprintRequestStub != nil {
		return fake.UpdateOpenIDConnectProviderThumbprintRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateOpenIDConnectProviderThumbprintRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprintRequestCallCount() int {
	fake.updateOpenIDConnectProviderThumbprintRequestMutex.RLock()
	defer fake.updateOpenIDConnectProviderThumbprintRequestMutex.RUnlock()
	return len(fake.updateOpenIDConnectProviderThumbprintRequestArgsForCall)
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprintRequestCalls(stub func(*iam.UpdateOpenIDConnectProviderThumbprintInput) (*request.Request, *iam.UpdateOpenIDConnectProviderThumbprintOutput)) {
	fake.updateOpenIDConnectProviderThumbprintRequestMutex.Lock()
	defer fake.updateOpenIDConnectProviderThumbprintRequestMutex.Unlock()
	fake.UpdateOpenIDConnectProviderThumbprintRequestStub = stub
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprintRequestArgsForCall(i int) *iam.UpdateOpenIDConnectProviderThumbprintInput {
	fake.updateOpenIDConnectProviderThumbprintRequestMutex.RLock()
	defer fake.updateOpenIDConnectProviderThumbprintRequestMutex.RUnlock()
	argsForCall := fake.updateOpenIDConnectProviderThumbprintRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprintRequestReturns(result1 *request.Request, result2 *iam.UpdateOpenIDConnectProviderThumbprintOutput) {
	fake.updateOpenIDConnectProviderThumbprintRequestMutex.Lock()
	defer fake.updateOpenIDConnectProviderThumbprintRequestMutex.Unlock()
	fake.UpdateOpenIDConnectProviderThumbprintRequestStub = nil
	fake.updateOpenIDConnectProviderThumbprintRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UpdateOpenIDConnectProviderThumbprintOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprintRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UpdateOpenIDConnectProviderThumbprintOutput) {
	fake.updateOpenIDConnectProviderThumbprintRequestMutex.Lock()
	defer fake.updateOpenIDConnectProviderThumbprintRequestMutex.Unlock()
	fake.UpdateOpenIDConnectProviderThumbprintRequestStub = nil
	if fake.updateOpenIDConnectProviderThumbprintRequestReturnsOnCall == nil {
		fake.updateOpenIDConnectProviderThumbprintRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UpdateOpenIDConnectProviderThumbprintOutput
		})
	}
	fake.updateOpenIDConnectProviderThumbprintRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UpdateOpenIDConnectProviderThumbprintOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprintWithContext(arg1 context.Context, arg2 *iam.UpdateOpenIDConnectProviderThumbprintInput, arg3 ...request.Option) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	fake.updateOpenIDConnectProviderThumbprintWithContextMutex.Lock()
	ret, specificReturn := fake.updateOpenIDConnectProviderThumbprintWithContextReturnsOnCall[len(fake.updateOpenIDConnectProviderThumbprintWithContextArgsForCall)]
	fake.updateOpenIDConnectProviderThumbprintWithContextArgsForCall = append(fake.updateOpenIDConnectProviderThumbprintWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UpdateOpenIDConnectProviderThumbprintInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateOpenIDConnectProviderThumbprintWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateOpenIDConnectProviderThumbprintWithContextMutex.Unlock()
	if fake.UpdateOpenIDConnectProviderThumbprintWithContextStub != nil {
		return fake.UpdateOpenIDConnectProviderThumbprintWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateOpenIDConnectProviderThumbprintWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprintWithContextCallCount() int {
	fake.updateOpenIDConnectProviderThumbprintWithContextMutex.RLock()
	defer fake.updateOpenIDConnectProviderThumbprintWithContextMutex.RUnlock()
	return len(fake.updateOpenIDConnectProviderThumbprintWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprintWithContextCalls(stub func(context.Context, *iam.UpdateOpenIDConnectProviderThumbprintInput, ...request.Option) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error)) {
	fake.updateOpenIDConnectProviderThumbprintWithContextMutex.Lock()
	defer fake.updateOpenIDConnectProviderThumbprintWithContextMutex.Unlock()
	fake.UpdateOpenIDConnectProviderThumbprintWithContextStub = stub
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprintWithContextArgsForCall(i int) (context.Context, *iam.UpdateOpenIDConnectProviderThumbprintInput, []request.Option) {
	fake.updateOpenIDConnectProviderThumbprintWithContextMutex.RLock()
	defer fake.updateOpenIDConnectProviderThumbprintWithContextMutex.RUnlock()
	argsForCall := fake.updateOpenIDConnectProviderThumbprintWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprintWithContextReturns(result1 *iam.UpdateOpenIDConnectProviderThumbprintOutput, result2 error) {
	fake.updateOpenIDConnectProviderThumbprintWithContextMutex.Lock()
	defer fake.updateOpenIDConnectProviderThumbprintWithContextMutex.Unlock()
	fake.UpdateOpenIDConnectProviderThumbprintWithContextStub = nil
	fake.updateOpenIDConnectProviderThumbprintWithContextReturns = struct {
		result1 *iam.UpdateOpenIDConnectProviderThumbprintOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateOpenIDConnectProviderThumbprintWithContextReturnsOnCall(i int, result1 *iam.UpdateOpenIDConnectProviderThumbprintOutput, result2 error) {
	fake.updateOpenIDConnectProviderThumbprintWithContextMutex.Lock()
	defer fake.updateOpenIDConnectProviderThumbprintWithContextMutex.Unlock()
	fake.UpdateOpenIDConnectProviderThumbprintWithContextStub = nil
	if fake.updateOpenIDConnectProviderThumbprintWithContextReturnsOnCall == nil {
		fake.updateOpenIDConnectProviderThumbprintWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateOpenIDConnectProviderThumbprintOutput
			result2 error
		})
	}
	fake.updateOpenIDConnectProviderThumbprintWithContextReturnsOnCall[i] = struct {
		result1 *iam.UpdateOpenIDConnectProviderThumbprintOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateRole(arg1 *iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error) {
	fake.updateRoleMutex.Lock()
	ret, specificReturn := fake.updateRoleReturnsOnCall[len(fake.updateRoleArgsForCall)]
	fake.updateRoleArgsForCall = append(fake.updateRoleArgsForCall, struct {
		arg1 *iam.UpdateRoleInput
	}{arg1})
	fake.recordInvocation("UpdateRole", []interface{}{arg1})
	fake.updateRoleMutex.Unlock()
	if fake.UpdateRoleStub != nil {
		return fake.UpdateRoleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateRoleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateRoleCallCount() int {
	fake.updateRoleMutex.RLock()
	defer fake.updateRoleMutex.RUnlock()
	return len(fake.updateRoleArgsForCall)
}

func (fake *FakeIAMAPI) UpdateRoleCalls(stub func(*iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error)) {
	fake.updateRoleMutex.Lock()
	defer fake.updateRoleMutex.Unlock()
	fake.UpdateRoleStub = stub
}

func (fake *FakeIAMAPI) UpdateRoleArgsForCall(i int) *iam.UpdateRoleInput {
	fake.updateRoleMutex.RLock()
	defer fake.updateRoleMutex.RUnlock()
	argsForCall := fake.updateRoleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateRoleReturns(result1 *iam.UpdateRoleOutput, result2 error) {
	fake.updateRoleMutex.Lock()
	defer fake.updateRoleMutex.Unlock()
	fake.UpdateRoleStub = nil
	fake.updateRoleReturns = struct {
		result1 *iam.UpdateRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateRoleReturnsOnCall(i int, result1 *iam.UpdateRoleOutput, result2 error) {
	fake.updateRoleMutex.Lock()
	defer fake.updateRoleMutex.Unlock()
	fake.UpdateRoleStub = nil
	if fake.updateRoleReturnsOnCall == nil {
		fake.updateRoleReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateRoleOutput
			result2 error
		})
	}
	fake.updateRoleReturnsOnCall[i] = struct {
		result1 *iam.UpdateRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateRoleDescription(arg1 *iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error) {
	fake.updateRoleDescriptionMutex.Lock()
	ret, specificReturn := fake.updateRoleDescriptionReturnsOnCall[len(fake.updateRoleDescriptionArgsForCall)]
	fake.updateRoleDescriptionArgsForCall = append(fake.updateRoleDescriptionArgsForCall, struct {
		arg1 *iam.UpdateRoleDescriptionInput
	}{arg1})
	fake.recordInvocation("UpdateRoleDescription", []interface{}{arg1})
	fake.updateRoleDescriptionMutex.Unlock()
	if fake.UpdateRoleDescriptionStub != nil {
		return fake.UpdateRoleDescriptionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateRoleDescriptionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateRoleDescriptionCallCount() int {
	fake.updateRoleDescriptionMutex.RLock()
	defer fake.updateRoleDescriptionMutex.RUnlock()
	return len(fake.updateRoleDescriptionArgsForCall)
}

func (fake *FakeIAMAPI) UpdateRoleDescriptionCalls(stub func(*iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error)) {
	fake.updateRoleDescriptionMutex.Lock()
	defer fake.updateRoleDescriptionMutex.Unlock()
	fake.UpdateRoleDescriptionStub = stub
}

func (fake *FakeIAMAPI) UpdateRoleDescriptionArgsForCall(i int) *iam.UpdateRoleDescriptionInput {
	fake.updateRoleDescriptionMutex.RLock()
	defer fake.updateRoleDescriptionMutex.RUnlock()
	argsForCall := fake.updateRoleDescriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateRoleDescriptionReturns(result1 *iam.UpdateRoleDescriptionOutput, result2 error) {
	fake.updateRoleDescriptionMutex.Lock()
	defer fake.updateRoleDescriptionMutex.Unlock()
	fake.UpdateRoleDescriptionStub = nil
	fake.updateRoleDescriptionReturns = struct {
		result1 *iam.UpdateRoleDescriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateRoleDescriptionReturnsOnCall(i int, result1 *iam.UpdateRoleDescriptionOutput, result2 error) {
	fake.updateRoleDescriptionMutex.Lock()
	defer fake.updateRoleDescriptionMutex.Unlock()
	fake.UpdateRoleDescriptionStub = nil
	if fake.updateRoleDescriptionReturnsOnCall == nil {
		fake.updateRoleDescriptionReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateRoleDescriptionOutput
			result2 error
		})
	}
	fake.updateRoleDescriptionReturnsOnCall[i] = struct {
		result1 *iam.UpdateRoleDescriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateRoleDescriptionRequest(arg1 *iam.UpdateRoleDescriptionInput) (*request.Request, *iam.UpdateRoleDescriptionOutput) {
	fake.updateRoleDescriptionRequestMutex.Lock()
	ret, specificReturn := fake.updateRoleDescriptionRequestReturnsOnCall[len(fake.updateRoleDescriptionRequestArgsForCall)]
	fake.updateRoleDescriptionRequestArgsForCall = append(fake.updateRoleDescriptionRequestArgsForCall, struct {
		arg1 *iam.UpdateRoleDescriptionInput
	}{arg1})
	fake.recordInvocation("UpdateRoleDescriptionRequest", []interface{}{arg1})
	fake.updateRoleDescriptionRequestMutex.Unlock()
	if fake.UpdateRoleDescriptionRequestStub != nil {
		return fake.UpdateRoleDescriptionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateRoleDescriptionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateRoleDescriptionRequestCallCount() int {
	fake.updateRoleDescriptionRequestMutex.RLock()
	defer fake.updateRoleDescriptionRequestMutex.RUnlock()
	return len(fake.updateRoleDescriptionRequestArgsForCall)
}

func (fake *FakeIAMAPI) UpdateRoleDescriptionRequestCalls(stub func(*iam.UpdateRoleDescriptionInput) (*request.Request, *iam.UpdateRoleDescriptionOutput)) {
	fake.updateRoleDescriptionRequestMutex.Lock()
	defer fake.updateRoleDescriptionRequestMutex.Unlock()
	fake.UpdateRoleDescriptionRequestStub = stub
}

func (fake *FakeIAMAPI) UpdateRoleDescriptionRequestArgsForCall(i int) *iam.UpdateRoleDescriptionInput {
	fake.updateRoleDescriptionRequestMutex.RLock()
	defer fake.updateRoleDescriptionRequestMutex.RUnlock()
	argsForCall := fake.updateRoleDescriptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateRoleDescriptionRequestReturns(result1 *request.Request, result2 *iam.UpdateRoleDescriptionOutput) {
	fake.updateRoleDescriptionRequestMutex.Lock()
	defer fake.updateRoleDescriptionRequestMutex.Unlock()
	fake.UpdateRoleDescriptionRequestStub = nil
	fake.updateRoleDescriptionRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UpdateRoleDescriptionOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateRoleDescriptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UpdateRoleDescriptionOutput) {
	fake.updateRoleDescriptionRequestMutex.Lock()
	defer fake.updateRoleDescriptionRequestMutex.Unlock()
	fake.UpdateRoleDescriptionRequestStub = nil
	if fake.updateRoleDescriptionRequestReturnsOnCall == nil {
		fake.updateRoleDescriptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UpdateRoleDescriptionOutput
		})
	}
	fake.updateRoleDescriptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UpdateRoleDescriptionOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateRoleDescriptionWithContext(arg1 context.Context, arg2 *iam.UpdateRoleDescriptionInput, arg3 ...request.Option) (*iam.UpdateRoleDescriptionOutput, error) {
	fake.updateRoleDescriptionWithContextMutex.Lock()
	ret, specificReturn := fake.updateRoleDescriptionWithContextReturnsOnCall[len(fake.updateRoleDescriptionWithContextArgsForCall)]
	fake.updateRoleDescriptionWithContextArgsForCall = append(fake.updateRoleDescriptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UpdateRoleDescriptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateRoleDescriptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateRoleDescriptionWithContextMutex.Unlock()
	if fake.UpdateRoleDescriptionWithContextStub != nil {
		return fake.UpdateRoleDescriptionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateRoleDescriptionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateRoleDescriptionWithContextCallCount() int {
	fake.updateRoleDescriptionWithContextMutex.RLock()
	defer fake.updateRoleDescriptionWithContextMutex.RUnlock()
	return len(fake.updateRoleDescriptionWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UpdateRoleDescriptionWithContextCalls(stub func(context.Context, *iam.UpdateRoleDescriptionInput, ...request.Option) (*iam.UpdateRoleDescriptionOutput, error)) {
	fake.updateRoleDescriptionWithContextMutex.Lock()
	defer fake.updateRoleDescriptionWithContextMutex.Unlock()
	fake.UpdateRoleDescriptionWithContextStub = stub
}

func (fake *FakeIAMAPI) UpdateRoleDescriptionWithContextArgsForCall(i int) (context.Context, *iam.UpdateRoleDescriptionInput, []request.Option) {
	fake.updateRoleDescriptionWithContextMutex.RLock()
	defer fake.updateRoleDescriptionWithContextMutex.RUnlock()
	argsForCall := fake.updateRoleDescriptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UpdateRoleDescriptionWithContextReturns(result1 *iam.UpdateRoleDescriptionOutput, result2 error) {
	fake.updateRoleDescriptionWithContextMutex.Lock()
	defer fake.updateRoleDescriptionWithContextMutex.Unlock()
	fake.UpdateRoleDescriptionWithContextStub = nil
	fake.updateRoleDescriptionWithContextReturns = struct {
		result1 *iam.UpdateRoleDescriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateRoleDescriptionWithContextReturnsOnCall(i int, result1 *iam.UpdateRoleDescriptionOutput, result2 error) {
	fake.updateRoleDescriptionWithContextMutex.Lock()
	defer fake.updateRoleDescriptionWithContextMutex.Unlock()
	fake.UpdateRoleDescriptionWithContextStub = nil
	if fake.updateRoleDescriptionWithContextReturnsOnCall == nil {
		fake.updateRoleDescriptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateRoleDescriptionOutput
			result2 error
		})
	}
	fake.updateRoleDescriptionWithContextReturnsOnCall[i] = struct {
		result1 *iam.UpdateRoleDescriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateRoleRequest(arg1 *iam.UpdateRoleInput) (*request.Request, *iam.UpdateRoleOutput) {
	fake.updateRoleRequestMutex.Lock()
	ret, specificReturn := fake.updateRoleRequestReturnsOnCall[len(fake.updateRoleRequestArgsForCall)]
	fake.updateRoleRequestArgsForCall = append(fake.updateRoleRequestArgsForCall, struct {
		arg1 *iam.UpdateRoleInput
	}{arg1})
	fake.recordInvocation("UpdateRoleRequest", []interface{}{arg1})
	fake.updateRoleRequestMutex.Unlock()
	if fake.UpdateRoleRequestStub != nil {
		return fake.UpdateRoleRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateRoleRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateRoleRequestCallCount() int {
	fake.updateRoleRequestMutex.RLock()
	defer fake.updateRoleRequestMutex.RUnlock()
	return len(fake.updateRoleRequestArgsForCall)
}

func (fake *FakeIAMAPI) UpdateRoleRequestCalls(stub func(*iam.UpdateRoleInput) (*request.Request, *iam.UpdateRoleOutput)) {
	fake.updateRoleRequestMutex.Lock()
	defer fake.updateRoleRequestMutex.Unlock()
	fake.UpdateRoleRequestStub = stub
}

func (fake *FakeIAMAPI) UpdateRoleRequestArgsForCall(i int) *iam.UpdateRoleInput {
	fake.updateRoleRequestMutex.RLock()
	defer fake.updateRoleRequestMutex.RUnlock()
	argsForCall := fake.updateRoleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateRoleRequestReturns(result1 *request.Request, result2 *iam.UpdateRoleOutput) {
	fake.updateRoleRequestMutex.Lock()
	defer fake.updateRoleRequestMutex.Unlock()
	fake.UpdateRoleRequestStub = nil
	fake.updateRoleRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UpdateRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateRoleRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UpdateRoleOutput) {
	fake.updateRoleRequestMutex.Lock()
	defer fake.updateRoleRequestMutex.Unlock()
	fake.UpdateRoleRequestStub = nil
	if fake.updateRoleRequestReturnsOnCall == nil {
		fake.updateRoleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UpdateRoleOutput
		})
	}
	fake.updateRoleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UpdateRoleOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateRoleWithContext(arg1 context.Context, arg2 *iam.UpdateRoleInput, arg3 ...request.Option) (*iam.UpdateRoleOutput, error) {
	fake.updateRoleWithContextMutex.Lock()
	ret, specificReturn := fake.updateRoleWithContextReturnsOnCall[len(fake.updateRoleWithContextArgsForCall)]
	fake.updateRoleWithContextArgsForCall = append(fake.updateRoleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UpdateRoleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateRoleWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateRoleWithContextMutex.Unlock()
	if fake.UpdateRoleWithContextStub != nil {
		return fake.UpdateRoleWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateRoleWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateRoleWithContextCallCount() int {
	fake.updateRoleWithContextMutex.RLock()
	defer fake.updateRoleWithContextMutex.RUnlock()
	return len(fake.updateRoleWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UpdateRoleWithContextCalls(stub func(context.Context, *iam.UpdateRoleInput, ...request.Option) (*iam.UpdateRoleOutput, error)) {
	fake.updateRoleWithContextMutex.Lock()
	defer fake.updateRoleWithContextMutex.Unlock()
	fake.UpdateRoleWithContextStub = stub
}

func (fake *FakeIAMAPI) UpdateRoleWithContextArgsForCall(i int) (context.Context, *iam.UpdateRoleInput, []request.Option) {
	fake.updateRoleWithContextMutex.RLock()
	defer fake.updateRoleWithContextMutex.RUnlock()
	argsForCall := fake.updateRoleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UpdateRoleWithContextReturns(result1 *iam.UpdateRoleOutput, result2 error) {
	fake.updateRoleWithContextMutex.Lock()
	defer fake.updateRoleWithContextMutex.Unlock()
	fake.UpdateRoleWithContextStub = nil
	fake.updateRoleWithContextReturns = struct {
		result1 *iam.UpdateRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateRoleWithContextReturnsOnCall(i int, result1 *iam.UpdateRoleOutput, result2 error) {
	fake.updateRoleWithContextMutex.Lock()
	defer fake.updateRoleWithContextMutex.Unlock()
	fake.UpdateRoleWithContextStub = nil
	if fake.updateRoleWithContextReturnsOnCall == nil {
		fake.updateRoleWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateRoleOutput
			result2 error
		})
	}
	fake.updateRoleWithContextReturnsOnCall[i] = struct {
		result1 *iam.UpdateRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSAMLProvider(arg1 *iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error) {
	fake.updateSAMLProviderMutex.Lock()
	ret, specificReturn := fake.updateSAMLProviderReturnsOnCall[len(fake.updateSAMLProviderArgsForCall)]
	fake.updateSAMLProviderArgsForCall = append(fake.updateSAMLProviderArgsForCall, struct {
		arg1 *iam.UpdateSAMLProviderInput
	}{arg1})
	fake.recordInvocation("UpdateSAMLProvider", []interface{}{arg1})
	fake.updateSAMLProviderMutex.Unlock()
	if fake.UpdateSAMLProviderStub != nil {
		return fake.UpdateSAMLProviderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSAMLProviderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateSAMLProviderCallCount() int {
	fake.updateSAMLProviderMutex.RLock()
	defer fake.updateSAMLProviderMutex.RUnlock()
	return len(fake.updateSAMLProviderArgsForCall)
}

func (fake *FakeIAMAPI) UpdateSAMLProviderCalls(stub func(*iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error)) {
	fake.updateSAMLProviderMutex.Lock()
	defer fake.updateSAMLProviderMutex.Unlock()
	fake.UpdateSAMLProviderStub = stub
}

func (fake *FakeIAMAPI) UpdateSAMLProviderArgsForCall(i int) *iam.UpdateSAMLProviderInput {
	fake.updateSAMLProviderMutex.RLock()
	defer fake.updateSAMLProviderMutex.RUnlock()
	argsForCall := fake.updateSAMLProviderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateSAMLProviderReturns(result1 *iam.UpdateSAMLProviderOutput, result2 error) {
	fake.updateSAMLProviderMutex.Lock()
	defer fake.updateSAMLProviderMutex.Unlock()
	fake.UpdateSAMLProviderStub = nil
	fake.updateSAMLProviderReturns = struct {
		result1 *iam.UpdateSAMLProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSAMLProviderReturnsOnCall(i int, result1 *iam.UpdateSAMLProviderOutput, result2 error) {
	fake.updateSAMLProviderMutex.Lock()
	defer fake.updateSAMLProviderMutex.Unlock()
	fake.UpdateSAMLProviderStub = nil
	if fake.updateSAMLProviderReturnsOnCall == nil {
		fake.updateSAMLProviderReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateSAMLProviderOutput
			result2 error
		})
	}
	fake.updateSAMLProviderReturnsOnCall[i] = struct {
		result1 *iam.UpdateSAMLProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSAMLProviderRequest(arg1 *iam.UpdateSAMLProviderInput) (*request.Request, *iam.UpdateSAMLProviderOutput) {
	fake.updateSAMLProviderRequestMutex.Lock()
	ret, specificReturn := fake.updateSAMLProviderRequestReturnsOnCall[len(fake.updateSAMLProviderRequestArgsForCall)]
	fake.updateSAMLProviderRequestArgsForCall = append(fake.updateSAMLProviderRequestArgsForCall, struct {
		arg1 *iam.UpdateSAMLProviderInput
	}{arg1})
	fake.recordInvocation("UpdateSAMLProviderRequest", []interface{}{arg1})
	fake.updateSAMLProviderRequestMutex.Unlock()
	if fake.UpdateSAMLProviderRequestStub != nil {
		return fake.UpdateSAMLProviderRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSAMLProviderRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateSAMLProviderRequestCallCount() int {
	fake.updateSAMLProviderRequestMutex.RLock()
	defer fake.updateSAMLProviderRequestMutex.RUnlock()
	return len(fake.updateSAMLProviderRequestArgsForCall)
}

func (fake *FakeIAMAPI) UpdateSAMLProviderRequestCalls(stub func(*iam.UpdateSAMLProviderInput) (*request.Request, *iam.UpdateSAMLProviderOutput)) {
	fake.updateSAMLProviderRequestMutex.Lock()
	defer fake.updateSAMLProviderRequestMutex.Unlock()
	fake.UpdateSAMLProviderRequestStub = stub
}

func (fake *FakeIAMAPI) UpdateSAMLProviderRequestArgsForCall(i int) *iam.UpdateSAMLProviderInput {
	fake.updateSAMLProviderRequestMutex.RLock()
	defer fake.updateSAMLProviderRequestMutex.RUnlock()
	argsForCall := fake.updateSAMLProviderRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateSAMLProviderRequestReturns(result1 *request.Request, result2 *iam.UpdateSAMLProviderOutput) {
	fake.updateSAMLProviderRequestMutex.Lock()
	defer fake.updateSAMLProviderRequestMutex.Unlock()
	fake.UpdateSAMLProviderRequestStub = nil
	fake.updateSAMLProviderRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UpdateSAMLProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSAMLProviderRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UpdateSAMLProviderOutput) {
	fake.updateSAMLProviderRequestMutex.Lock()
	defer fake.updateSAMLProviderRequestMutex.Unlock()
	fake.UpdateSAMLProviderRequestStub = nil
	if fake.updateSAMLProviderRequestReturnsOnCall == nil {
		fake.updateSAMLProviderRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UpdateSAMLProviderOutput
		})
	}
	fake.updateSAMLProviderRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UpdateSAMLProviderOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSAMLProviderWithContext(arg1 context.Context, arg2 *iam.UpdateSAMLProviderInput, arg3 ...request.Option) (*iam.UpdateSAMLProviderOutput, error) {
	fake.updateSAMLProviderWithContextMutex.Lock()
	ret, specificReturn := fake.updateSAMLProviderWithContextReturnsOnCall[len(fake.updateSAMLProviderWithContextArgsForCall)]
	fake.updateSAMLProviderWithContextArgsForCall = append(fake.updateSAMLProviderWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UpdateSAMLProviderInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateSAMLProviderWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateSAMLProviderWithContextMutex.Unlock()
	if fake.UpdateSAMLProviderWithContextStub != nil {
		return fake.UpdateSAMLProviderWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSAMLProviderWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateSAMLProviderWithContextCallCount() int {
	fake.updateSAMLProviderWithContextMutex.RLock()
	defer fake.updateSAMLProviderWithContextMutex.RUnlock()
	return len(fake.updateSAMLProviderWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UpdateSAMLProviderWithContextCalls(stub func(context.Context, *iam.UpdateSAMLProviderInput, ...request.Option) (*iam.UpdateSAMLProviderOutput, error)) {
	fake.updateSAMLProviderWithContextMutex.Lock()
	defer fake.updateSAMLProviderWithContextMutex.Unlock()
	fake.UpdateSAMLProviderWithContextStub = stub
}

func (fake *FakeIAMAPI) UpdateSAMLProviderWithContextArgsForCall(i int) (context.Context, *iam.UpdateSAMLProviderInput, []request.Option) {
	fake.updateSAMLProviderWithContextMutex.RLock()
	defer fake.updateSAMLProviderWithContextMutex.RUnlock()
	argsForCall := fake.updateSAMLProviderWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UpdateSAMLProviderWithContextReturns(result1 *iam.UpdateSAMLProviderOutput, result2 error) {
	fake.updateSAMLProviderWithContextMutex.Lock()
	defer fake.updateSAMLProviderWithContextMutex.Unlock()
	fake.UpdateSAMLProviderWithContextStub = nil
	fake.updateSAMLProviderWithContextReturns = struct {
		result1 *iam.UpdateSAMLProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSAMLProviderWithContextReturnsOnCall(i int, result1 *iam.UpdateSAMLProviderOutput, result2 error) {
	fake.updateSAMLProviderWithContextMutex.Lock()
	defer fake.updateSAMLProviderWithContextMutex.Unlock()
	fake.UpdateSAMLProviderWithContextStub = nil
	if fake.updateSAMLProviderWithContextReturnsOnCall == nil {
		fake.updateSAMLProviderWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateSAMLProviderOutput
			result2 error
		})
	}
	fake.updateSAMLProviderWithContextReturnsOnCall[i] = struct {
		result1 *iam.UpdateSAMLProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSSHPublicKey(arg1 *iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error) {
	fake.updateSSHPublicKeyMutex.Lock()
	ret, specificReturn := fake.updateSSHPublicKeyReturnsOnCall[len(fake.updateSSHPublicKeyArgsForCall)]
	fake.updateSSHPublicKeyArgsForCall = append(fake.updateSSHPublicKeyArgsForCall, struct {
		arg1 *iam.UpdateSSHPublicKeyInput
	}{arg1})
	fake.recordInvocation("UpdateSSHPublicKey", []interface{}{arg1})
	fake.updateSSHPublicKeyMutex.Unlock()
	if fake.UpdateSSHPublicKeyStub != nil {
		return fake.UpdateSSHPublicKeyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSSHPublicKeyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateSSHPublicKeyCallCount() int {
	fake.updateSSHPublicKeyMutex.RLock()
	defer fake.updateSSHPublicKeyMutex.RUnlock()
	return len(fake.updateSSHPublicKeyArgsForCall)
}

func (fake *FakeIAMAPI) UpdateSSHPublicKeyCalls(stub func(*iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error)) {
	fake.updateSSHPublicKeyMutex.Lock()
	defer fake.updateSSHPublicKeyMutex.Unlock()
	fake.UpdateSSHPublicKeyStub = stub
}

func (fake *FakeIAMAPI) UpdateSSHPublicKeyArgsForCall(i int) *iam.UpdateSSHPublicKeyInput {
	fake.updateSSHPublicKeyMutex.RLock()
	defer fake.updateSSHPublicKeyMutex.RUnlock()
	argsForCall := fake.updateSSHPublicKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateSSHPublicKeyReturns(result1 *iam.UpdateSSHPublicKeyOutput, result2 error) {
	fake.updateSSHPublicKeyMutex.Lock()
	defer fake.updateSSHPublicKeyMutex.Unlock()
	fake.UpdateSSHPublicKeyStub = nil
	fake.updateSSHPublicKeyReturns = struct {
		result1 *iam.UpdateSSHPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSSHPublicKeyReturnsOnCall(i int, result1 *iam.UpdateSSHPublicKeyOutput, result2 error) {
	fake.updateSSHPublicKeyMutex.Lock()
	defer fake.updateSSHPublicKeyMutex.Unlock()
	fake.UpdateSSHPublicKeyStub = nil
	if fake.updateSSHPublicKeyReturnsOnCall == nil {
		fake.updateSSHPublicKeyReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateSSHPublicKeyOutput
			result2 error
		})
	}
	fake.updateSSHPublicKeyReturnsOnCall[i] = struct {
		result1 *iam.UpdateSSHPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSSHPublicKeyRequest(arg1 *iam.UpdateSSHPublicKeyInput) (*request.Request, *iam.UpdateSSHPublicKeyOutput) {
	fake.updateSSHPublicKeyRequestMutex.Lock()
	ret, specificReturn := fake.updateSSHPublicKeyRequestReturnsOnCall[len(fake.updateSSHPublicKeyRequestArgsForCall)]
	fake.updateSSHPublicKeyRequestArgsForCall = append(fake.updateSSHPublicKeyRequestArgsForCall, struct {
		arg1 *iam.UpdateSSHPublicKeyInput
	}{arg1})
	fake.recordInvocation("UpdateSSHPublicKeyRequest", []interface{}{arg1})
	fake.updateSSHPublicKeyRequestMutex.Unlock()
	if fake.UpdateSSHPublicKeyRequestStub != nil {
		return fake.UpdateSSHPublicKeyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSSHPublicKeyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateSSHPublicKeyRequestCallCount() int {
	fake.updateSSHPublicKeyRequestMutex.RLock()
	defer fake.updateSSHPublicKeyRequestMutex.RUnlock()
	return len(fake.updateSSHPublicKeyRequestArgsForCall)
}

func (fake *FakeIAMAPI) UpdateSSHPublicKeyRequestCalls(stub func(*iam.UpdateSSHPublicKeyInput) (*request.Request, *iam.UpdateSSHPublicKeyOutput)) {
	fake.updateSSHPublicKeyRequestMutex.Lock()
	defer fake.updateSSHPublicKeyRequestMutex.Unlock()
	fake.UpdateSSHPublicKeyRequestStub = stub
}

func (fake *FakeIAMAPI) UpdateSSHPublicKeyRequestArgsForCall(i int) *iam.UpdateSSHPublicKeyInput {
	fake.updateSSHPublicKeyRequestMutex.RLock()
	defer fake.updateSSHPublicKeyRequestMutex.RUnlock()
	argsForCall := fake.updateSSHPublicKeyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateSSHPublicKeyRequestReturns(result1 *request.Request, result2 *iam.UpdateSSHPublicKeyOutput) {
	fake.updateSSHPublicKeyRequestMutex.Lock()
	defer fake.updateSSHPublicKeyRequestMutex.Unlock()
	fake.UpdateSSHPublicKeyRequestStub = nil
	fake.updateSSHPublicKeyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UpdateSSHPublicKeyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSSHPublicKeyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UpdateSSHPublicKeyOutput) {
	fake.updateSSHPublicKeyRequestMutex.Lock()
	defer fake.updateSSHPublicKeyRequestMutex.Unlock()
	fake.UpdateSSHPublicKeyRequestStub = nil
	if fake.updateSSHPublicKeyRequestReturnsOnCall == nil {
		fake.updateSSHPublicKeyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UpdateSSHPublicKeyOutput
		})
	}
	fake.updateSSHPublicKeyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UpdateSSHPublicKeyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSSHPublicKeyWithContext(arg1 context.Context, arg2 *iam.UpdateSSHPublicKeyInput, arg3 ...request.Option) (*iam.UpdateSSHPublicKeyOutput, error) {
	fake.updateSSHPublicKeyWithContextMutex.Lock()
	ret, specificReturn := fake.updateSSHPublicKeyWithContextReturnsOnCall[len(fake.updateSSHPublicKeyWithContextArgsForCall)]
	fake.updateSSHPublicKeyWithContextArgsForCall = append(fake.updateSSHPublicKeyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UpdateSSHPublicKeyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateSSHPublicKeyWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateSSHPublicKeyWithContextMutex.Unlock()
	if fake.UpdateSSHPublicKeyWithContextStub != nil {
		return fake.UpdateSSHPublicKeyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSSHPublicKeyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateSSHPublicKeyWithContextCallCount() int {
	fake.updateSSHPublicKeyWithContextMutex.RLock()
	defer fake.updateSSHPublicKeyWithContextMutex.RUnlock()
	return len(fake.updateSSHPublicKeyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UpdateSSHPublicKeyWithContextCalls(stub func(context.Context, *iam.UpdateSSHPublicKeyInput, ...request.Option) (*iam.UpdateSSHPublicKeyOutput, error)) {
	fake.updateSSHPublicKeyWithContextMutex.Lock()
	defer fake.updateSSHPublicKeyWithContextMutex.Unlock()
	fake.UpdateSSHPublicKeyWithContextStub = stub
}

func (fake *FakeIAMAPI) UpdateSSHPublicKeyWithContextArgsForCall(i int) (context.Context, *iam.UpdateSSHPublicKeyInput, []request.Option) {
	fake.updateSSHPublicKeyWithContextMutex.RLock()
	defer fake.updateSSHPublicKeyWithContextMutex.RUnlock()
	argsForCall := fake.updateSSHPublicKeyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UpdateSSHPublicKeyWithContextReturns(result1 *iam.UpdateSSHPublicKeyOutput, result2 error) {
	fake.updateSSHPublicKeyWithContextMutex.Lock()
	defer fake.updateSSHPublicKeyWithContextMutex.Unlock()
	fake.UpdateSSHPublicKeyWithContextStub = nil
	fake.updateSSHPublicKeyWithContextReturns = struct {
		result1 *iam.UpdateSSHPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSSHPublicKeyWithContextReturnsOnCall(i int, result1 *iam.UpdateSSHPublicKeyOutput, result2 error) {
	fake.updateSSHPublicKeyWithContextMutex.Lock()
	defer fake.updateSSHPublicKeyWithContextMutex.Unlock()
	fake.UpdateSSHPublicKeyWithContextStub = nil
	if fake.updateSSHPublicKeyWithContextReturnsOnCall == nil {
		fake.updateSSHPublicKeyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateSSHPublicKeyOutput
			result2 error
		})
	}
	fake.updateSSHPublicKeyWithContextReturnsOnCall[i] = struct {
		result1 *iam.UpdateSSHPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateServerCertificate(arg1 *iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error) {
	fake.updateServerCertificateMutex.Lock()
	ret, specificReturn := fake.updateServerCertificateReturnsOnCall[len(fake.updateServerCertificateArgsForCall)]
	fake.updateServerCertificateArgsForCall = append(fake.updateServerCertificateArgsForCall, struct {
		arg1 *iam.UpdateServerCertificateInput
	}{arg1})
	fake.recordInvocation("UpdateServerCertificate", []interface{}{arg1})
	fake.updateServerCertificateMutex.Unlock()
	if fake.UpdateServerCertificateStub != nil {
		return fake.UpdateServerCertificateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateServerCertificateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateServerCertificateCallCount() int {
	fake.updateServerCertificateMutex.RLock()
	defer fake.updateServerCertificateMutex.RUnlock()
	return len(fake.updateServerCertificateArgsForCall)
}

func (fake *FakeIAMAPI) UpdateServerCertificateCalls(stub func(*iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error)) {
	fake.updateServerCertificateMutex.Lock()
	defer fake.updateServerCertificateMutex.Unlock()
	fake.UpdateServerCertificateStub = stub
}

func (fake *FakeIAMAPI) UpdateServerCertificateArgsForCall(i int) *iam.UpdateServerCertificateInput {
	fake.updateServerCertificateMutex.RLock()
	defer fake.updateServerCertificateMutex.RUnlock()
	argsForCall := fake.updateServerCertificateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateServerCertificateReturns(result1 *iam.UpdateServerCertificateOutput, result2 error) {
	fake.updateServerCertificateMutex.Lock()
	defer fake.updateServerCertificateMutex.Unlock()
	fake.UpdateServerCertificateStub = nil
	fake.updateServerCertificateReturns = struct {
		result1 *iam.UpdateServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateServerCertificateReturnsOnCall(i int, result1 *iam.UpdateServerCertificateOutput, result2 error) {
	fake.updateServerCertificateMutex.Lock()
	defer fake.updateServerCertificateMutex.Unlock()
	fake.UpdateServerCertificateStub = nil
	if fake.updateServerCertificateReturnsOnCall == nil {
		fake.updateServerCertificateReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateServerCertificateOutput
			result2 error
		})
	}
	fake.updateServerCertificateReturnsOnCall[i] = struct {
		result1 *iam.UpdateServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateServerCertificateRequest(arg1 *iam.UpdateServerCertificateInput) (*request.Request, *iam.UpdateServerCertificateOutput) {
	fake.updateServerCertificateRequestMutex.Lock()
	ret, specificReturn := fake.updateServerCertificateRequestReturnsOnCall[len(fake.updateServerCertificateRequestArgsForCall)]
	fake.updateServerCertificateRequestArgsForCall = append(fake.updateServerCertificateRequestArgsForCall, struct {
		arg1 *iam.UpdateServerCertificateInput
	}{arg1})
	fake.recordInvocation("UpdateServerCertificateRequest", []interface{}{arg1})
	fake.updateServerCertificateRequestMutex.Unlock()
	if fake.UpdateServerCertificateRequestStub != nil {
		return fake.UpdateServerCertificateRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateServerCertificateRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateServerCertificateRequestCallCount() int {
	fake.updateServerCertificateRequestMutex.RLock()
	defer fake.updateServerCertificateRequestMutex.RUnlock()
	return len(fake.updateServerCertificateRequestArgsForCall)
}

func (fake *FakeIAMAPI) UpdateServerCertificateRequestCalls(stub func(*iam.UpdateServerCertificateInput) (*request.Request, *iam.UpdateServerCertificateOutput)) {
	fake.updateServerCertificateRequestMutex.Lock()
	defer fake.updateServerCertificateRequestMutex.Unlock()
	fake.UpdateServerCertificateRequestStub = stub
}

func (fake *FakeIAMAPI) UpdateServerCertificateRequestArgsForCall(i int) *iam.UpdateServerCertificateInput {
	fake.updateServerCertificateRequestMutex.RLock()
	defer fake.updateServerCertificateRequestMutex.RUnlock()
	argsForCall := fake.updateServerCertificateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateServerCertificateRequestReturns(result1 *request.Request, result2 *iam.UpdateServerCertificateOutput) {
	fake.updateServerCertificateRequestMutex.Lock()
	defer fake.updateServerCertificateRequestMutex.Unlock()
	fake.UpdateServerCertificateRequestStub = nil
	fake.updateServerCertificateRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UpdateServerCertificateOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateServerCertificateRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UpdateServerCertificateOutput) {
	fake.updateServerCertificateRequestMutex.Lock()
	defer fake.updateServerCertificateRequestMutex.Unlock()
	fake.UpdateServerCertificateRequestStub = nil
	if fake.updateServerCertificateRequestReturnsOnCall == nil {
		fake.updateServerCertificateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UpdateServerCertificateOutput
		})
	}
	fake.updateServerCertificateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UpdateServerCertificateOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateServerCertificateWithContext(arg1 context.Context, arg2 *iam.UpdateServerCertificateInput, arg3 ...request.Option) (*iam.UpdateServerCertificateOutput, error) {
	fake.updateServerCertificateWithContextMutex.Lock()
	ret, specificReturn := fake.updateServerCertificateWithContextReturnsOnCall[len(fake.updateServerCertificateWithContextArgsForCall)]
	fake.updateServerCertificateWithContextArgsForCall = append(fake.updateServerCertificateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UpdateServerCertificateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateServerCertificateWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateServerCertificateWithContextMutex.Unlock()
	if fake.UpdateServerCertificateWithContextStub != nil {
		return fake.UpdateServerCertificateWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateServerCertificateWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateServerCertificateWithContextCallCount() int {
	fake.updateServerCertificateWithContextMutex.RLock()
	defer fake.updateServerCertificateWithContextMutex.RUnlock()
	return len(fake.updateServerCertificateWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UpdateServerCertificateWithContextCalls(stub func(context.Context, *iam.UpdateServerCertificateInput, ...request.Option) (*iam.UpdateServerCertificateOutput, error)) {
	fake.updateServerCertificateWithContextMutex.Lock()
	defer fake.updateServerCertificateWithContextMutex.Unlock()
	fake.UpdateServerCertificateWithContextStub = stub
}

func (fake *FakeIAMAPI) UpdateServerCertificateWithContextArgsForCall(i int) (context.Context, *iam.UpdateServerCertificateInput, []request.Option) {
	fake.updateServerCertificateWithContextMutex.RLock()
	defer fake.updateServerCertificateWithContextMutex.RUnlock()
	argsForCall := fake.updateServerCertificateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UpdateServerCertificateWithContextReturns(result1 *iam.UpdateServerCertificateOutput, result2 error) {
	fake.updateServerCertificateWithContextMutex.Lock()
	defer fake.updateServerCertificateWithContextMutex.Unlock()
	fake.UpdateServerCertificateWithContextStub = nil
	fake.updateServerCertificateWithContextReturns = struct {
		result1 *iam.UpdateServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateServerCertificateWithContextReturnsOnCall(i int, result1 *iam.UpdateServerCertificateOutput, result2 error) {
	fake.updateServerCertificateWithContextMutex.Lock()
	defer fake.updateServerCertificateWithContextMutex.Unlock()
	fake.UpdateServerCertificateWithContextStub = nil
	if fake.updateServerCertificateWithContextReturnsOnCall == nil {
		fake.updateServerCertificateWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateServerCertificateOutput
			result2 error
		})
	}
	fake.updateServerCertificateWithContextReturnsOnCall[i] = struct {
		result1 *iam.UpdateServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredential(arg1 *iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error) {
	fake.updateServiceSpecificCredentialMutex.Lock()
	ret, specificReturn := fake.updateServiceSpecificCredentialReturnsOnCall[len(fake.updateServiceSpecificCredentialArgsForCall)]
	fake.updateServiceSpecificCredentialArgsForCall = append(fake.updateServiceSpecificCredentialArgsForCall, struct {
		arg1 *iam.UpdateServiceSpecificCredentialInput
	}{arg1})
	fake.recordInvocation("UpdateServiceSpecificCredential", []interface{}{arg1})
	fake.updateServiceSpecificCredentialMutex.Unlock()
	if fake.UpdateServiceSpecificCredentialStub != nil {
		return fake.UpdateServiceSpecificCredentialStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateServiceSpecificCredentialReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredentialCallCount() int {
	fake.updateServiceSpecificCredentialMutex.RLock()
	defer fake.updateServiceSpecificCredentialMutex.RUnlock()
	return len(fake.updateServiceSpecificCredentialArgsForCall)
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredentialCalls(stub func(*iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error)) {
	fake.updateServiceSpecificCredentialMutex.Lock()
	defer fake.updateServiceSpecificCredentialMutex.Unlock()
	fake.UpdateServiceSpecificCredentialStub = stub
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredentialArgsForCall(i int) *iam.UpdateServiceSpecificCredentialInput {
	fake.updateServiceSpecificCredentialMutex.RLock()
	defer fake.updateServiceSpecificCredentialMutex.RUnlock()
	argsForCall := fake.updateServiceSpecificCredentialArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredentialReturns(result1 *iam.UpdateServiceSpecificCredentialOutput, result2 error) {
	fake.updateServiceSpecificCredentialMutex.Lock()
	defer fake.updateServiceSpecificCredentialMutex.Unlock()
	fake.UpdateServiceSpecificCredentialStub = nil
	fake.updateServiceSpecificCredentialReturns = struct {
		result1 *iam.UpdateServiceSpecificCredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredentialReturnsOnCall(i int, result1 *iam.UpdateServiceSpecificCredentialOutput, result2 error) {
	fake.updateServiceSpecificCredentialMutex.Lock()
	defer fake.updateServiceSpecificCredentialMutex.Unlock()
	fake.UpdateServiceSpecificCredentialStub = nil
	if fake.updateServiceSpecificCredentialReturnsOnCall == nil {
		fake.updateServiceSpecificCredentialReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateServiceSpecificCredentialOutput
			result2 error
		})
	}
	fake.updateServiceSpecificCredentialReturnsOnCall[i] = struct {
		result1 *iam.UpdateServiceSpecificCredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredentialRequest(arg1 *iam.UpdateServiceSpecificCredentialInput) (*request.Request, *iam.UpdateServiceSpecificCredentialOutput) {
	fake.updateServiceSpecificCredentialRequestMutex.Lock()
	ret, specificReturn := fake.updateServiceSpecificCredentialRequestReturnsOnCall[len(fake.updateServiceSpecificCredentialRequestArgsForCall)]
	fake.updateServiceSpecificCredentialRequestArgsForCall = append(fake.updateServiceSpecificCredentialRequestArgsForCall, struct {
		arg1 *iam.UpdateServiceSpecificCredentialInput
	}{arg1})
	fake.recordInvocation("UpdateServiceSpecificCredentialRequest", []interface{}{arg1})
	fake.updateServiceSpecificCredentialRequestMutex.Unlock()
	if fake.UpdateServiceSpecificCredentialRequestStub != nil {
		return fake.UpdateServiceSpecificCredentialRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateServiceSpecificCredentialRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredentialRequestCallCount() int {
	fake.updateServiceSpecificCredentialRequestMutex.RLock()
	defer fake.updateServiceSpecificCredentialRequestMutex.RUnlock()
	return len(fake.updateServiceSpecificCredentialRequestArgsForCall)
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredentialRequestCalls(stub func(*iam.UpdateServiceSpecificCredentialInput) (*request.Request, *iam.UpdateServiceSpecificCredentialOutput)) {
	fake.updateServiceSpecificCredentialRequestMutex.Lock()
	defer fake.updateServiceSpecificCredentialRequestMutex.Unlock()
	fake.UpdateServiceSpecificCredentialRequestStub = stub
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredentialRequestArgsForCall(i int) *iam.UpdateServiceSpecificCredentialInput {
	fake.updateServiceSpecificCredentialRequestMutex.RLock()
	defer fake.updateServiceSpecificCredentialRequestMutex.RUnlock()
	argsForCall := fake.updateServiceSpecificCredentialRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredentialRequestReturns(result1 *request.Request, result2 *iam.UpdateServiceSpecificCredentialOutput) {
	fake.updateServiceSpecificCredentialRequestMutex.Lock()
	defer fake.updateServiceSpecificCredentialRequestMutex.Unlock()
	fake.UpdateServiceSpecificCredentialRequestStub = nil
	fake.updateServiceSpecificCredentialRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UpdateServiceSpecificCredentialOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredentialRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UpdateServiceSpecificCredentialOutput) {
	fake.updateServiceSpecificCredentialRequestMutex.Lock()
	defer fake.updateServiceSpecificCredentialRequestMutex.Unlock()
	fake.UpdateServiceSpecificCredentialRequestStub = nil
	if fake.updateServiceSpecificCredentialRequestReturnsOnCall == nil {
		fake.updateServiceSpecificCredentialRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UpdateServiceSpecificCredentialOutput
		})
	}
	fake.updateServiceSpecificCredentialRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UpdateServiceSpecificCredentialOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredentialWithContext(arg1 context.Context, arg2 *iam.UpdateServiceSpecificCredentialInput, arg3 ...request.Option) (*iam.UpdateServiceSpecificCredentialOutput, error) {
	fake.updateServiceSpecificCredentialWithContextMutex.Lock()
	ret, specificReturn := fake.updateServiceSpecificCredentialWithContextReturnsOnCall[len(fake.updateServiceSpecificCredentialWithContextArgsForCall)]
	fake.updateServiceSpecificCredentialWithContextArgsForCall = append(fake.updateServiceSpecificCredentialWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UpdateServiceSpecificCredentialInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateServiceSpecificCredentialWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateServiceSpecificCredentialWithContextMutex.Unlock()
	if fake.UpdateServiceSpecificCredentialWithContextStub != nil {
		return fake.UpdateServiceSpecificCredentialWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateServiceSpecificCredentialWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredentialWithContextCallCount() int {
	fake.updateServiceSpecificCredentialWithContextMutex.RLock()
	defer fake.updateServiceSpecificCredentialWithContextMutex.RUnlock()
	return len(fake.updateServiceSpecificCredentialWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredentialWithContextCalls(stub func(context.Context, *iam.UpdateServiceSpecificCredentialInput, ...request.Option) (*iam.UpdateServiceSpecificCredentialOutput, error)) {
	fake.updateServiceSpecificCredentialWithContextMutex.Lock()
	defer fake.updateServiceSpecificCredentialWithContextMutex.Unlock()
	fake.UpdateServiceSpecificCredentialWithContextStub = stub
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredentialWithContextArgsForCall(i int) (context.Context, *iam.UpdateServiceSpecificCredentialInput, []request.Option) {
	fake.updateServiceSpecificCredentialWithContextMutex.RLock()
	defer fake.updateServiceSpecificCredentialWithContextMutex.RUnlock()
	argsForCall := fake.updateServiceSpecificCredentialWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredentialWithContextReturns(result1 *iam.UpdateServiceSpecificCredentialOutput, result2 error) {
	fake.updateServiceSpecificCredentialWithContextMutex.Lock()
	defer fake.updateServiceSpecificCredentialWithContextMutex.Unlock()
	fake.UpdateServiceSpecificCredentialWithContextStub = nil
	fake.updateServiceSpecificCredentialWithContextReturns = struct {
		result1 *iam.UpdateServiceSpecificCredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateServiceSpecificCredentialWithContextReturnsOnCall(i int, result1 *iam.UpdateServiceSpecificCredentialOutput, result2 error) {
	fake.updateServiceSpecificCredentialWithContextMutex.Lock()
	defer fake.updateServiceSpecificCredentialWithContextMutex.Unlock()
	fake.UpdateServiceSpecificCredentialWithContextStub = nil
	if fake.updateServiceSpecificCredentialWithContextReturnsOnCall == nil {
		fake.updateServiceSpecificCredentialWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateServiceSpecificCredentialOutput
			result2 error
		})
	}
	fake.updateServiceSpecificCredentialWithContextReturnsOnCall[i] = struct {
		result1 *iam.UpdateServiceSpecificCredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSigningCertificate(arg1 *iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error) {
	fake.updateSigningCertificateMutex.Lock()
	ret, specificReturn := fake.updateSigningCertificateReturnsOnCall[len(fake.updateSigningCertificateArgsForCall)]
	fake.updateSigningCertificateArgsForCall = append(fake.updateSigningCertificateArgsForCall, struct {
		arg1 *iam.UpdateSigningCertificateInput
	}{arg1})
	fake.recordInvocation("UpdateSigningCertificate", []interface{}{arg1})
	fake.updateSigningCertificateMutex.Unlock()
	if fake.UpdateSigningCertificateStub != nil {
		return fake.UpdateSigningCertificateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSigningCertificateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateSigningCertificateCallCount() int {
	fake.updateSigningCertificateMutex.RLock()
	defer fake.updateSigningCertificateMutex.RUnlock()
	return len(fake.updateSigningCertificateArgsForCall)
}

func (fake *FakeIAMAPI) UpdateSigningCertificateCalls(stub func(*iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error)) {
	fake.updateSigningCertificateMutex.Lock()
	defer fake.updateSigningCertificateMutex.Unlock()
	fake.UpdateSigningCertificateStub = stub
}

func (fake *FakeIAMAPI) UpdateSigningCertificateArgsForCall(i int) *iam.UpdateSigningCertificateInput {
	fake.updateSigningCertificateMutex.RLock()
	defer fake.updateSigningCertificateMutex.RUnlock()
	argsForCall := fake.updateSigningCertificateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateSigningCertificateReturns(result1 *iam.UpdateSigningCertificateOutput, result2 error) {
	fake.updateSigningCertificateMutex.Lock()
	defer fake.updateSigningCertificateMutex.Unlock()
	fake.UpdateSigningCertificateStub = nil
	fake.updateSigningCertificateReturns = struct {
		result1 *iam.UpdateSigningCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSigningCertificateReturnsOnCall(i int, result1 *iam.UpdateSigningCertificateOutput, result2 error) {
	fake.updateSigningCertificateMutex.Lock()
	defer fake.updateSigningCertificateMutex.Unlock()
	fake.UpdateSigningCertificateStub = nil
	if fake.updateSigningCertificateReturnsOnCall == nil {
		fake.updateSigningCertificateReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateSigningCertificateOutput
			result2 error
		})
	}
	fake.updateSigningCertificateReturnsOnCall[i] = struct {
		result1 *iam.UpdateSigningCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSigningCertificateRequest(arg1 *iam.UpdateSigningCertificateInput) (*request.Request, *iam.UpdateSigningCertificateOutput) {
	fake.updateSigningCertificateRequestMutex.Lock()
	ret, specificReturn := fake.updateSigningCertificateRequestReturnsOnCall[len(fake.updateSigningCertificateRequestArgsForCall)]
	fake.updateSigningCertificateRequestArgsForCall = append(fake.updateSigningCertificateRequestArgsForCall, struct {
		arg1 *iam.UpdateSigningCertificateInput
	}{arg1})
	fake.recordInvocation("UpdateSigningCertificateRequest", []interface{}{arg1})
	fake.updateSigningCertificateRequestMutex.Unlock()
	if fake.UpdateSigningCertificateRequestStub != nil {
		return fake.UpdateSigningCertificateRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSigningCertificateRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateSigningCertificateRequestCallCount() int {
	fake.updateSigningCertificateRequestMutex.RLock()
	defer fake.updateSigningCertificateRequestMutex.RUnlock()
	return len(fake.updateSigningCertificateRequestArgsForCall)
}

func (fake *FakeIAMAPI) UpdateSigningCertificateRequestCalls(stub func(*iam.UpdateSigningCertificateInput) (*request.Request, *iam.UpdateSigningCertificateOutput)) {
	fake.updateSigningCertificateRequestMutex.Lock()
	defer fake.updateSigningCertificateRequestMutex.Unlock()
	fake.UpdateSigningCertificateRequestStub = stub
}

func (fake *FakeIAMAPI) UpdateSigningCertificateRequestArgsForCall(i int) *iam.UpdateSigningCertificateInput {
	fake.updateSigningCertificateRequestMutex.RLock()
	defer fake.updateSigningCertificateRequestMutex.RUnlock()
	argsForCall := fake.updateSigningCertificateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateSigningCertificateRequestReturns(result1 *request.Request, result2 *iam.UpdateSigningCertificateOutput) {
	fake.updateSigningCertificateRequestMutex.Lock()
	defer fake.updateSigningCertificateRequestMutex.Unlock()
	fake.UpdateSigningCertificateRequestStub = nil
	fake.updateSigningCertificateRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UpdateSigningCertificateOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSigningCertificateRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UpdateSigningCertificateOutput) {
	fake.updateSigningCertificateRequestMutex.Lock()
	defer fake.updateSigningCertificateRequestMutex.Unlock()
	fake.UpdateSigningCertificateRequestStub = nil
	if fake.updateSigningCertificateRequestReturnsOnCall == nil {
		fake.updateSigningCertificateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UpdateSigningCertificateOutput
		})
	}
	fake.updateSigningCertificateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UpdateSigningCertificateOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSigningCertificateWithContext(arg1 context.Context, arg2 *iam.UpdateSigningCertificateInput, arg3 ...request.Option) (*iam.UpdateSigningCertificateOutput, error) {
	fake.updateSigningCertificateWithContextMutex.Lock()
	ret, specificReturn := fake.updateSigningCertificateWithContextReturnsOnCall[len(fake.updateSigningCertificateWithContextArgsForCall)]
	fake.updateSigningCertificateWithContextArgsForCall = append(fake.updateSigningCertificateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UpdateSigningCertificateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateSigningCertificateWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateSigningCertificateWithContextMutex.Unlock()
	if fake.UpdateSigningCertificateWithContextStub != nil {
		return fake.UpdateSigningCertificateWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSigningCertificateWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateSigningCertificateWithContextCallCount() int {
	fake.updateSigningCertificateWithContextMutex.RLock()
	defer fake.updateSigningCertificateWithContextMutex.RUnlock()
	return len(fake.updateSigningCertificateWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UpdateSigningCertificateWithContextCalls(stub func(context.Context, *iam.UpdateSigningCertificateInput, ...request.Option) (*iam.UpdateSigningCertificateOutput, error)) {
	fake.updateSigningCertificateWithContextMutex.Lock()
	defer fake.updateSigningCertificateWithContextMutex.Unlock()
	fake.UpdateSigningCertificateWithContextStub = stub
}

func (fake *FakeIAMAPI) UpdateSigningCertificateWithContextArgsForCall(i int) (context.Context, *iam.UpdateSigningCertificateInput, []request.Option) {
	fake.updateSigningCertificateWithContextMutex.RLock()
	defer fake.updateSigningCertificateWithContextMutex.RUnlock()
	argsForCall := fake.updateSigningCertificateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UpdateSigningCertificateWithContextReturns(result1 *iam.UpdateSigningCertificateOutput, result2 error) {
	fake.updateSigningCertificateWithContextMutex.Lock()
	defer fake.updateSigningCertificateWithContextMutex.Unlock()
	fake.UpdateSigningCertificateWithContextStub = nil
	fake.updateSigningCertificateWithContextReturns = struct {
		result1 *iam.UpdateSigningCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateSigningCertificateWithContextReturnsOnCall(i int, result1 *iam.UpdateSigningCertificateOutput, result2 error) {
	fake.updateSigningCertificateWithContextMutex.Lock()
	defer fake.updateSigningCertificateWithContextMutex.Unlock()
	fake.UpdateSigningCertificateWithContextStub = nil
	if fake.updateSigningCertificateWithContextReturnsOnCall == nil {
		fake.updateSigningCertificateWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateSigningCertificateOutput
			result2 error
		})
	}
	fake.updateSigningCertificateWithContextReturnsOnCall[i] = struct {
		result1 *iam.UpdateSigningCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateUser(arg1 *iam.UpdateUserInput) (*iam.UpdateUserOutput, error) {
	fake.updateUserMutex.Lock()
	ret, specificReturn := fake.updateUserReturnsOnCall[len(fake.updateUserArgsForCall)]
	fake.updateUserArgsForCall = append(fake.updateUserArgsForCall, struct {
		arg1 *iam.UpdateUserInput
	}{arg1})
	fake.recordInvocation("UpdateUser", []interface{}{arg1})
	fake.updateUserMutex.Unlock()
	if fake.UpdateUserStub != nil {
		return fake.UpdateUserStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateUserReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateUserCallCount() int {
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	return len(fake.updateUserArgsForCall)
}

func (fake *FakeIAMAPI) UpdateUserCalls(stub func(*iam.UpdateUserInput) (*iam.UpdateUserOutput, error)) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = stub
}

func (fake *FakeIAMAPI) UpdateUserArgsForCall(i int) *iam.UpdateUserInput {
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	argsForCall := fake.updateUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateUserReturns(result1 *iam.UpdateUserOutput, result2 error) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = nil
	fake.updateUserReturns = struct {
		result1 *iam.UpdateUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateUserReturnsOnCall(i int, result1 *iam.UpdateUserOutput, result2 error) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = nil
	if fake.updateUserReturnsOnCall == nil {
		fake.updateUserReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateUserOutput
			result2 error
		})
	}
	fake.updateUserReturnsOnCall[i] = struct {
		result1 *iam.UpdateUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateUserRequest(arg1 *iam.UpdateUserInput) (*request.Request, *iam.UpdateUserOutput) {
	fake.updateUserRequestMutex.Lock()
	ret, specificReturn := fake.updateUserRequestReturnsOnCall[len(fake.updateUserRequestArgsForCall)]
	fake.updateUserRequestArgsForCall = append(fake.updateUserRequestArgsForCall, struct {
		arg1 *iam.UpdateUserInput
	}{arg1})
	fake.recordInvocation("UpdateUserRequest", []interface{}{arg1})
	fake.updateUserRequestMutex.Unlock()
	if fake.UpdateUserRequestStub != nil {
		return fake.UpdateUserRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateUserRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateUserRequestCallCount() int {
	fake.updateUserRequestMutex.RLock()
	defer fake.updateUserRequestMutex.RUnlock()
	return len(fake.updateUserRequestArgsForCall)
}

func (fake *FakeIAMAPI) UpdateUserRequestCalls(stub func(*iam.UpdateUserInput) (*request.Request, *iam.UpdateUserOutput)) {
	fake.updateUserRequestMutex.Lock()
	defer fake.updateUserRequestMutex.Unlock()
	fake.UpdateUserRequestStub = stub
}

func (fake *FakeIAMAPI) UpdateUserRequestArgsForCall(i int) *iam.UpdateUserInput {
	fake.updateUserRequestMutex.RLock()
	defer fake.updateUserRequestMutex.RUnlock()
	argsForCall := fake.updateUserRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UpdateUserRequestReturns(result1 *request.Request, result2 *iam.UpdateUserOutput) {
	fake.updateUserRequestMutex.Lock()
	defer fake.updateUserRequestMutex.Unlock()
	fake.UpdateUserRequestStub = nil
	fake.updateUserRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UpdateUserOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateUserRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UpdateUserOutput) {
	fake.updateUserRequestMutex.Lock()
	defer fake.updateUserRequestMutex.Unlock()
	fake.UpdateUserRequestStub = nil
	if fake.updateUserRequestReturnsOnCall == nil {
		fake.updateUserRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UpdateUserOutput
		})
	}
	fake.updateUserRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UpdateUserOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateUserWithContext(arg1 context.Context, arg2 *iam.UpdateUserInput, arg3 ...request.Option) (*iam.UpdateUserOutput, error) {
	fake.updateUserWithContextMutex.Lock()
	ret, specificReturn := fake.updateUserWithContextReturnsOnCall[len(fake.updateUserWithContextArgsForCall)]
	fake.updateUserWithContextArgsForCall = append(fake.updateUserWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UpdateUserInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateUserWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateUserWithContextMutex.Unlock()
	if fake.UpdateUserWithContextStub != nil {
		return fake.UpdateUserWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateUserWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UpdateUserWithContextCallCount() int {
	fake.updateUserWithContextMutex.RLock()
	defer fake.updateUserWithContextMutex.RUnlock()
	return len(fake.updateUserWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UpdateUserWithContextCalls(stub func(context.Context, *iam.UpdateUserInput, ...request.Option) (*iam.UpdateUserOutput, error)) {
	fake.updateUserWithContextMutex.Lock()
	defer fake.updateUserWithContextMutex.Unlock()
	fake.UpdateUserWithContextStub = stub
}

func (fake *FakeIAMAPI) UpdateUserWithContextArgsForCall(i int) (context.Context, *iam.UpdateUserInput, []request.Option) {
	fake.updateUserWithContextMutex.RLock()
	defer fake.updateUserWithContextMutex.RUnlock()
	argsForCall := fake.updateUserWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UpdateUserWithContextReturns(result1 *iam.UpdateUserOutput, result2 error) {
	fake.updateUserWithContextMutex.Lock()
	defer fake.updateUserWithContextMutex.Unlock()
	fake.UpdateUserWithContextStub = nil
	fake.updateUserWithContextReturns = struct {
		result1 *iam.UpdateUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UpdateUserWithContextReturnsOnCall(i int, result1 *iam.UpdateUserOutput, result2 error) {
	fake.updateUserWithContextMutex.Lock()
	defer fake.updateUserWithContextMutex.Unlock()
	fake.UpdateUserWithContextStub = nil
	if fake.updateUserWithContextReturnsOnCall == nil {
		fake.updateUserWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UpdateUserOutput
			result2 error
		})
	}
	fake.updateUserWithContextReturnsOnCall[i] = struct {
		result1 *iam.UpdateUserOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadSSHPublicKey(arg1 *iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error) {
	fake.uploadSSHPublicKeyMutex.Lock()
	ret, specificReturn := fake.uploadSSHPublicKeyReturnsOnCall[len(fake.uploadSSHPublicKeyArgsForCall)]
	fake.uploadSSHPublicKeyArgsForCall = append(fake.uploadSSHPublicKeyArgsForCall, struct {
		arg1 *iam.UploadSSHPublicKeyInput
	}{arg1})
	fake.recordInvocation("UploadSSHPublicKey", []interface{}{arg1})
	fake.uploadSSHPublicKeyMutex.Unlock()
	if fake.UploadSSHPublicKeyStub != nil {
		return fake.UploadSSHPublicKeyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadSSHPublicKeyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UploadSSHPublicKeyCallCount() int {
	fake.uploadSSHPublicKeyMutex.RLock()
	defer fake.uploadSSHPublicKeyMutex.RUnlock()
	return len(fake.uploadSSHPublicKeyArgsForCall)
}

func (fake *FakeIAMAPI) UploadSSHPublicKeyCalls(stub func(*iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error)) {
	fake.uploadSSHPublicKeyMutex.Lock()
	defer fake.uploadSSHPublicKeyMutex.Unlock()
	fake.UploadSSHPublicKeyStub = stub
}

func (fake *FakeIAMAPI) UploadSSHPublicKeyArgsForCall(i int) *iam.UploadSSHPublicKeyInput {
	fake.uploadSSHPublicKeyMutex.RLock()
	defer fake.uploadSSHPublicKeyMutex.RUnlock()
	argsForCall := fake.uploadSSHPublicKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UploadSSHPublicKeyReturns(result1 *iam.UploadSSHPublicKeyOutput, result2 error) {
	fake.uploadSSHPublicKeyMutex.Lock()
	defer fake.uploadSSHPublicKeyMutex.Unlock()
	fake.UploadSSHPublicKeyStub = nil
	fake.uploadSSHPublicKeyReturns = struct {
		result1 *iam.UploadSSHPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadSSHPublicKeyReturnsOnCall(i int, result1 *iam.UploadSSHPublicKeyOutput, result2 error) {
	fake.uploadSSHPublicKeyMutex.Lock()
	defer fake.uploadSSHPublicKeyMutex.Unlock()
	fake.UploadSSHPublicKeyStub = nil
	if fake.uploadSSHPublicKeyReturnsOnCall == nil {
		fake.uploadSSHPublicKeyReturnsOnCall = make(map[int]struct {
			result1 *iam.UploadSSHPublicKeyOutput
			result2 error
		})
	}
	fake.uploadSSHPublicKeyReturnsOnCall[i] = struct {
		result1 *iam.UploadSSHPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadSSHPublicKeyRequest(arg1 *iam.UploadSSHPublicKeyInput) (*request.Request, *iam.UploadSSHPublicKeyOutput) {
	fake.uploadSSHPublicKeyRequestMutex.Lock()
	ret, specificReturn := fake.uploadSSHPublicKeyRequestReturnsOnCall[len(fake.uploadSSHPublicKeyRequestArgsForCall)]
	fake.uploadSSHPublicKeyRequestArgsForCall = append(fake.uploadSSHPublicKeyRequestArgsForCall, struct {
		arg1 *iam.UploadSSHPublicKeyInput
	}{arg1})
	fake.recordInvocation("UploadSSHPublicKeyRequest", []interface{}{arg1})
	fake.uploadSSHPublicKeyRequestMutex.Unlock()
	if fake.UploadSSHPublicKeyRequestStub != nil {
		return fake.UploadSSHPublicKeyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadSSHPublicKeyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UploadSSHPublicKeyRequestCallCount() int {
	fake.uploadSSHPublicKeyRequestMutex.RLock()
	defer fake.uploadSSHPublicKeyRequestMutex.RUnlock()
	return len(fake.uploadSSHPublicKeyRequestArgsForCall)
}

func (fake *FakeIAMAPI) UploadSSHPublicKeyRequestCalls(stub func(*iam.UploadSSHPublicKeyInput) (*request.Request, *iam.UploadSSHPublicKeyOutput)) {
	fake.uploadSSHPublicKeyRequestMutex.Lock()
	defer fake.uploadSSHPublicKeyRequestMutex.Unlock()
	fake.UploadSSHPublicKeyRequestStub = stub
}

func (fake *FakeIAMAPI) UploadSSHPublicKeyRequestArgsForCall(i int) *iam.UploadSSHPublicKeyInput {
	fake.uploadSSHPublicKeyRequestMutex.RLock()
	defer fake.uploadSSHPublicKeyRequestMutex.RUnlock()
	argsForCall := fake.uploadSSHPublicKeyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UploadSSHPublicKeyRequestReturns(result1 *request.Request, result2 *iam.UploadSSHPublicKeyOutput) {
	fake.uploadSSHPublicKeyRequestMutex.Lock()
	defer fake.uploadSSHPublicKeyRequestMutex.Unlock()
	fake.UploadSSHPublicKeyRequestStub = nil
	fake.uploadSSHPublicKeyRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UploadSSHPublicKeyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadSSHPublicKeyRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UploadSSHPublicKeyOutput) {
	fake.uploadSSHPublicKeyRequestMutex.Lock()
	defer fake.uploadSSHPublicKeyRequestMutex.Unlock()
	fake.UploadSSHPublicKeyRequestStub = nil
	if fake.uploadSSHPublicKeyRequestReturnsOnCall == nil {
		fake.uploadSSHPublicKeyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UploadSSHPublicKeyOutput
		})
	}
	fake.uploadSSHPublicKeyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UploadSSHPublicKeyOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadSSHPublicKeyWithContext(arg1 context.Context, arg2 *iam.UploadSSHPublicKeyInput, arg3 ...request.Option) (*iam.UploadSSHPublicKeyOutput, error) {
	fake.uploadSSHPublicKeyWithContextMutex.Lock()
	ret, specificReturn := fake.uploadSSHPublicKeyWithContextReturnsOnCall[len(fake.uploadSSHPublicKeyWithContextArgsForCall)]
	fake.uploadSSHPublicKeyWithContextArgsForCall = append(fake.uploadSSHPublicKeyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UploadSSHPublicKeyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UploadSSHPublicKeyWithContext", []interface{}{arg1, arg2, arg3})
	fake.uploadSSHPublicKeyWithContextMutex.Unlock()
	if fake.UploadSSHPublicKeyWithContextStub != nil {
		return fake.UploadSSHPublicKeyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadSSHPublicKeyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UploadSSHPublicKeyWithContextCallCount() int {
	fake.uploadSSHPublicKeyWithContextMutex.RLock()
	defer fake.uploadSSHPublicKeyWithContextMutex.RUnlock()
	return len(fake.uploadSSHPublicKeyWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UploadSSHPublicKeyWithContextCalls(stub func(context.Context, *iam.UploadSSHPublicKeyInput, ...request.Option) (*iam.UploadSSHPublicKeyOutput, error)) {
	fake.uploadSSHPublicKeyWithContextMutex.Lock()
	defer fake.uploadSSHPublicKeyWithContextMutex.Unlock()
	fake.UploadSSHPublicKeyWithContextStub = stub
}

func (fake *FakeIAMAPI) UploadSSHPublicKeyWithContextArgsForCall(i int) (context.Context, *iam.UploadSSHPublicKeyInput, []request.Option) {
	fake.uploadSSHPublicKeyWithContextMutex.RLock()
	defer fake.uploadSSHPublicKeyWithContextMutex.RUnlock()
	argsForCall := fake.uploadSSHPublicKeyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UploadSSHPublicKeyWithContextReturns(result1 *iam.UploadSSHPublicKeyOutput, result2 error) {
	fake.uploadSSHPublicKeyWithContextMutex.Lock()
	defer fake.uploadSSHPublicKeyWithContextMutex.Unlock()
	fake.UploadSSHPublicKeyWithContextStub = nil
	fake.uploadSSHPublicKeyWithContextReturns = struct {
		result1 *iam.UploadSSHPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadSSHPublicKeyWithContextReturnsOnCall(i int, result1 *iam.UploadSSHPublicKeyOutput, result2 error) {
	fake.uploadSSHPublicKeyWithContextMutex.Lock()
	defer fake.uploadSSHPublicKeyWithContextMutex.Unlock()
	fake.UploadSSHPublicKeyWithContextStub = nil
	if fake.uploadSSHPublicKeyWithContextReturnsOnCall == nil {
		fake.uploadSSHPublicKeyWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UploadSSHPublicKeyOutput
			result2 error
		})
	}
	fake.uploadSSHPublicKeyWithContextReturnsOnCall[i] = struct {
		result1 *iam.UploadSSHPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadServerCertificate(arg1 *iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error) {
	fake.uploadServerCertificateMutex.Lock()
	ret, specificReturn := fake.uploadServerCertificateReturnsOnCall[len(fake.uploadServerCertificateArgsForCall)]
	fake.uploadServerCertificateArgsForCall = append(fake.uploadServerCertificateArgsForCall, struct {
		arg1 *iam.UploadServerCertificateInput
	}{arg1})
	fake.recordInvocation("UploadServerCertificate", []interface{}{arg1})
	fake.uploadServerCertificateMutex.Unlock()
	if fake.UploadServerCertificateStub != nil {
		return fake.UploadServerCertificateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadServerCertificateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UploadServerCertificateCallCount() int {
	fake.uploadServerCertificateMutex.RLock()
	defer fake.uploadServerCertificateMutex.RUnlock()
	return len(fake.uploadServerCertificateArgsForCall)
}

func (fake *FakeIAMAPI) UploadServerCertificateCalls(stub func(*iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error)) {
	fake.uploadServerCertificateMutex.Lock()
	defer fake.uploadServerCertificateMutex.Unlock()
	fake.UploadServerCertificateStub = stub
}

func (fake *FakeIAMAPI) UploadServerCertificateArgsForCall(i int) *iam.UploadServerCertificateInput {
	fake.uploadServerCertificateMutex.RLock()
	defer fake.uploadServerCertificateMutex.RUnlock()
	argsForCall := fake.uploadServerCertificateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UploadServerCertificateReturns(result1 *iam.UploadServerCertificateOutput, result2 error) {
	fake.uploadServerCertificateMutex.Lock()
	defer fake.uploadServerCertificateMutex.Unlock()
	fake.UploadServerCertificateStub = nil
	fake.uploadServerCertificateReturns = struct {
		result1 *iam.UploadServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadServerCertificateReturnsOnCall(i int, result1 *iam.UploadServerCertificateOutput, result2 error) {
	fake.uploadServerCertificateMutex.Lock()
	defer fake.uploadServerCertificateMutex.Unlock()
	fake.UploadServerCertificateStub = nil
	if fake.uploadServerCertificateReturnsOnCall == nil {
		fake.uploadServerCertificateReturnsOnCall = make(map[int]struct {
			result1 *iam.UploadServerCertificateOutput
			result2 error
		})
	}
	fake.uploadServerCertificateReturnsOnCall[i] = struct {
		result1 *iam.UploadServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadServerCertificateRequest(arg1 *iam.UploadServerCertificateInput) (*request.Request, *iam.UploadServerCertificateOutput) {
	fake.uploadServerCertificateRequestMutex.Lock()
	ret, specificReturn := fake.uploadServerCertificateRequestReturnsOnCall[len(fake.uploadServerCertificateRequestArgsForCall)]
	fake.uploadServerCertificateRequestArgsForCall = append(fake.uploadServerCertificateRequestArgsForCall, struct {
		arg1 *iam.UploadServerCertificateInput
	}{arg1})
	fake.recordInvocation("UploadServerCertificateRequest", []interface{}{arg1})
	fake.uploadServerCertificateRequestMutex.Unlock()
	if fake.UploadServerCertificateRequestStub != nil {
		return fake.UploadServerCertificateRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadServerCertificateRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UploadServerCertificateRequestCallCount() int {
	fake.uploadServerCertificateRequestMutex.RLock()
	defer fake.uploadServerCertificateRequestMutex.RUnlock()
	return len(fake.uploadServerCertificateRequestArgsForCall)
}

func (fake *FakeIAMAPI) UploadServerCertificateRequestCalls(stub func(*iam.UploadServerCertificateInput) (*request.Request, *iam.UploadServerCertificateOutput)) {
	fake.uploadServerCertificateRequestMutex.Lock()
	defer fake.uploadServerCertificateRequestMutex.Unlock()
	fake.UploadServerCertificateRequestStub = stub
}

func (fake *FakeIAMAPI) UploadServerCertificateRequestArgsForCall(i int) *iam.UploadServerCertificateInput {
	fake.uploadServerCertificateRequestMutex.RLock()
	defer fake.uploadServerCertificateRequestMutex.RUnlock()
	argsForCall := fake.uploadServerCertificateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UploadServerCertificateRequestReturns(result1 *request.Request, result2 *iam.UploadServerCertificateOutput) {
	fake.uploadServerCertificateRequestMutex.Lock()
	defer fake.uploadServerCertificateRequestMutex.Unlock()
	fake.UploadServerCertificateRequestStub = nil
	fake.uploadServerCertificateRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UploadServerCertificateOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadServerCertificateRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UploadServerCertificateOutput) {
	fake.uploadServerCertificateRequestMutex.Lock()
	defer fake.uploadServerCertificateRequestMutex.Unlock()
	fake.UploadServerCertificateRequestStub = nil
	if fake.uploadServerCertificateRequestReturnsOnCall == nil {
		fake.uploadServerCertificateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UploadServerCertificateOutput
		})
	}
	fake.uploadServerCertificateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UploadServerCertificateOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadServerCertificateWithContext(arg1 context.Context, arg2 *iam.UploadServerCertificateInput, arg3 ...request.Option) (*iam.UploadServerCertificateOutput, error) {
	fake.uploadServerCertificateWithContextMutex.Lock()
	ret, specificReturn := fake.uploadServerCertificateWithContextReturnsOnCall[len(fake.uploadServerCertificateWithContextArgsForCall)]
	fake.uploadServerCertificateWithContextArgsForCall = append(fake.uploadServerCertificateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UploadServerCertificateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UploadServerCertificateWithContext", []interface{}{arg1, arg2, arg3})
	fake.uploadServerCertificateWithContextMutex.Unlock()
	if fake.UploadServerCertificateWithContextStub != nil {
		return fake.UploadServerCertificateWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadServerCertificateWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UploadServerCertificateWithContextCallCount() int {
	fake.uploadServerCertificateWithContextMutex.RLock()
	defer fake.uploadServerCertificateWithContextMutex.RUnlock()
	return len(fake.uploadServerCertificateWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UploadServerCertificateWithContextCalls(stub func(context.Context, *iam.UploadServerCertificateInput, ...request.Option) (*iam.UploadServerCertificateOutput, error)) {
	fake.uploadServerCertificateWithContextMutex.Lock()
	defer fake.uploadServerCertificateWithContextMutex.Unlock()
	fake.UploadServerCertificateWithContextStub = stub
}

func (fake *FakeIAMAPI) UploadServerCertificateWithContextArgsForCall(i int) (context.Context, *iam.UploadServerCertificateInput, []request.Option) {
	fake.uploadServerCertificateWithContextMutex.RLock()
	defer fake.uploadServerCertificateWithContextMutex.RUnlock()
	argsForCall := fake.uploadServerCertificateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UploadServerCertificateWithContextReturns(result1 *iam.UploadServerCertificateOutput, result2 error) {
	fake.uploadServerCertificateWithContextMutex.Lock()
	defer fake.uploadServerCertificateWithContextMutex.Unlock()
	fake.UploadServerCertificateWithContextStub = nil
	fake.uploadServerCertificateWithContextReturns = struct {
		result1 *iam.UploadServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadServerCertificateWithContextReturnsOnCall(i int, result1 *iam.UploadServerCertificateOutput, result2 error) {
	fake.uploadServerCertificateWithContextMutex.Lock()
	defer fake.uploadServerCertificateWithContextMutex.Unlock()
	fake.UploadServerCertificateWithContextStub = nil
	if fake.uploadServerCertificateWithContextReturnsOnCall == nil {
		fake.uploadServerCertificateWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UploadServerCertificateOutput
			result2 error
		})
	}
	fake.uploadServerCertificateWithContextReturnsOnCall[i] = struct {
		result1 *iam.UploadServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadSigningCertificate(arg1 *iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error) {
	fake.uploadSigningCertificateMutex.Lock()
	ret, specificReturn := fake.uploadSigningCertificateReturnsOnCall[len(fake.uploadSigningCertificateArgsForCall)]
	fake.uploadSigningCertificateArgsForCall = append(fake.uploadSigningCertificateArgsForCall, struct {
		arg1 *iam.UploadSigningCertificateInput
	}{arg1})
	fake.recordInvocation("UploadSigningCertificate", []interface{}{arg1})
	fake.uploadSigningCertificateMutex.Unlock()
	if fake.UploadSigningCertificateStub != nil {
		return fake.UploadSigningCertificateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadSigningCertificateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UploadSigningCertificateCallCount() int {
	fake.uploadSigningCertificateMutex.RLock()
	defer fake.uploadSigningCertificateMutex.RUnlock()
	return len(fake.uploadSigningCertificateArgsForCall)
}

func (fake *FakeIAMAPI) UploadSigningCertificateCalls(stub func(*iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error)) {
	fake.uploadSigningCertificateMutex.Lock()
	defer fake.uploadSigningCertificateMutex.Unlock()
	fake.UploadSigningCertificateStub = stub
}

func (fake *FakeIAMAPI) UploadSigningCertificateArgsForCall(i int) *iam.UploadSigningCertificateInput {
	fake.uploadSigningCertificateMutex.RLock()
	defer fake.uploadSigningCertificateMutex.RUnlock()
	argsForCall := fake.uploadSigningCertificateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UploadSigningCertificateReturns(result1 *iam.UploadSigningCertificateOutput, result2 error) {
	fake.uploadSigningCertificateMutex.Lock()
	defer fake.uploadSigningCertificateMutex.Unlock()
	fake.UploadSigningCertificateStub = nil
	fake.uploadSigningCertificateReturns = struct {
		result1 *iam.UploadSigningCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadSigningCertificateReturnsOnCall(i int, result1 *iam.UploadSigningCertificateOutput, result2 error) {
	fake.uploadSigningCertificateMutex.Lock()
	defer fake.uploadSigningCertificateMutex.Unlock()
	fake.UploadSigningCertificateStub = nil
	if fake.uploadSigningCertificateReturnsOnCall == nil {
		fake.uploadSigningCertificateReturnsOnCall = make(map[int]struct {
			result1 *iam.UploadSigningCertificateOutput
			result2 error
		})
	}
	fake.uploadSigningCertificateReturnsOnCall[i] = struct {
		result1 *iam.UploadSigningCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadSigningCertificateRequest(arg1 *iam.UploadSigningCertificateInput) (*request.Request, *iam.UploadSigningCertificateOutput) {
	fake.uploadSigningCertificateRequestMutex.Lock()
	ret, specificReturn := fake.uploadSigningCertificateRequestReturnsOnCall[len(fake.uploadSigningCertificateRequestArgsForCall)]
	fake.uploadSigningCertificateRequestArgsForCall = append(fake.uploadSigningCertificateRequestArgsForCall, struct {
		arg1 *iam.UploadSigningCertificateInput
	}{arg1})
	fake.recordInvocation("UploadSigningCertificateRequest", []interface{}{arg1})
	fake.uploadSigningCertificateRequestMutex.Unlock()
	if fake.UploadSigningCertificateRequestStub != nil {
		return fake.UploadSigningCertificateRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadSigningCertificateRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UploadSigningCertificateRequestCallCount() int {
	fake.uploadSigningCertificateRequestMutex.RLock()
	defer fake.uploadSigningCertificateRequestMutex.RUnlock()
	return len(fake.uploadSigningCertificateRequestArgsForCall)
}

func (fake *FakeIAMAPI) UploadSigningCertificateRequestCalls(stub func(*iam.UploadSigningCertificateInput) (*request.Request, *iam.UploadSigningCertificateOutput)) {
	fake.uploadSigningCertificateRequestMutex.Lock()
	defer fake.uploadSigningCertificateRequestMutex.Unlock()
	fake.UploadSigningCertificateRequestStub = stub
}

func (fake *FakeIAMAPI) UploadSigningCertificateRequestArgsForCall(i int) *iam.UploadSigningCertificateInput {
	fake.uploadSigningCertificateRequestMutex.RLock()
	defer fake.uploadSigningCertificateRequestMutex.RUnlock()
	argsForCall := fake.uploadSigningCertificateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) UploadSigningCertificateRequestReturns(result1 *request.Request, result2 *iam.UploadSigningCertificateOutput) {
	fake.uploadSigningCertificateRequestMutex.Lock()
	defer fake.uploadSigningCertificateRequestMutex.Unlock()
	fake.UploadSigningCertificateRequestStub = nil
	fake.uploadSigningCertificateRequestReturns = struct {
		result1 *request.Request
		result2 *iam.UploadSigningCertificateOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadSigningCertificateRequestReturnsOnCall(i int, result1 *request.Request, result2 *iam.UploadSigningCertificateOutput) {
	fake.uploadSigningCertificateRequestMutex.Lock()
	defer fake.uploadSigningCertificateRequestMutex.Unlock()
	fake.UploadSigningCertificateRequestStub = nil
	if fake.uploadSigningCertificateRequestReturnsOnCall == nil {
		fake.uploadSigningCertificateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *iam.UploadSigningCertificateOutput
		})
	}
	fake.uploadSigningCertificateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *iam.UploadSigningCertificateOutput
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadSigningCertificateWithContext(arg1 context.Context, arg2 *iam.UploadSigningCertificateInput, arg3 ...request.Option) (*iam.UploadSigningCertificateOutput, error) {
	fake.uploadSigningCertificateWithContextMutex.Lock()
	ret, specificReturn := fake.uploadSigningCertificateWithContextReturnsOnCall[len(fake.uploadSigningCertificateWithContextArgsForCall)]
	fake.uploadSigningCertificateWithContextArgsForCall = append(fake.uploadSigningCertificateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.UploadSigningCertificateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UploadSigningCertificateWithContext", []interface{}{arg1, arg2, arg3})
	fake.uploadSigningCertificateWithContextMutex.Unlock()
	if fake.UploadSigningCertificateWithContextStub != nil {
		return fake.UploadSigningCertificateWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadSigningCertificateWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAMAPI) UploadSigningCertificateWithContextCallCount() int {
	fake.uploadSigningCertificateWithContextMutex.RLock()
	defer fake.uploadSigningCertificateWithContextMutex.RUnlock()
	return len(fake.uploadSigningCertificateWithContextArgsForCall)
}

func (fake *FakeIAMAPI) UploadSigningCertificateWithContextCalls(stub func(context.Context, *iam.UploadSigningCertificateInput, ...request.Option) (*iam.UploadSigningCertificateOutput, error)) {
	fake.uploadSigningCertificateWithContextMutex.Lock()
	defer fake.uploadSigningCertificateWithContextMutex.Unlock()
	fake.UploadSigningCertificateWithContextStub = stub
}

func (fake *FakeIAMAPI) UploadSigningCertificateWithContextArgsForCall(i int) (context.Context, *iam.UploadSigningCertificateInput, []request.Option) {
	fake.uploadSigningCertificateWithContextMutex.RLock()
	defer fake.uploadSigningCertificateWithContextMutex.RUnlock()
	argsForCall := fake.uploadSigningCertificateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) UploadSigningCertificateWithContextReturns(result1 *iam.UploadSigningCertificateOutput, result2 error) {
	fake.uploadSigningCertificateWithContextMutex.Lock()
	defer fake.uploadSigningCertificateWithContextMutex.Unlock()
	fake.UploadSigningCertificateWithContextStub = nil
	fake.uploadSigningCertificateWithContextReturns = struct {
		result1 *iam.UploadSigningCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) UploadSigningCertificateWithContextReturnsOnCall(i int, result1 *iam.UploadSigningCertificateOutput, result2 error) {
	fake.uploadSigningCertificateWithContextMutex.Lock()
	defer fake.uploadSigningCertificateWithContextMutex.Unlock()
	fake.UploadSigningCertificateWithContextStub = nil
	if fake.uploadSigningCertificateWithContextReturnsOnCall == nil {
		fake.uploadSigningCertificateWithContextReturnsOnCall = make(map[int]struct {
			result1 *iam.UploadSigningCertificateOutput
			result2 error
		})
	}
	fake.uploadSigningCertificateWithContextReturnsOnCall[i] = struct {
		result1 *iam.UploadSigningCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAPI) WaitUntilInstanceProfileExists(arg1 *iam.GetInstanceProfileInput) error {
	fake.waitUntilInstanceProfileExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilInstanceProfileExistsReturnsOnCall[len(fake.waitUntilInstanceProfileExistsArgsForCall)]
	fake.waitUntilInstanceProfileExistsArgsForCall = append(fake.waitUntilInstanceProfileExistsArgsForCall, struct {
		arg1 *iam.GetInstanceProfileInput
	}{arg1})
	fake.recordInvocation("WaitUntilInstanceProfileExists", []interface{}{arg1})
	fake.waitUntilInstanceProfileExistsMutex.Unlock()
	if fake.WaitUntilInstanceProfileExistsStub != nil {
		return fake.WaitUntilInstanceProfileExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilInstanceProfileExistsReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) WaitUntilInstanceProfileExistsCallCount() int {
	fake.waitUntilInstanceProfileExistsMutex.RLock()
	defer fake.waitUntilInstanceProfileExistsMutex.RUnlock()
	return len(fake.waitUntilInstanceProfileExistsArgsForCall)
}

func (fake *FakeIAMAPI) WaitUntilInstanceProfileExistsCalls(stub func(*iam.GetInstanceProfileInput) error) {
	fake.waitUntilInstanceProfileExistsMutex.Lock()
	defer fake.waitUntilInstanceProfileExistsMutex.Unlock()
	fake.WaitUntilInstanceProfileExistsStub = stub
}

func (fake *FakeIAMAPI) WaitUntilInstanceProfileExistsArgsForCall(i int) *iam.GetInstanceProfileInput {
	fake.waitUntilInstanceProfileExistsMutex.RLock()
	defer fake.waitUntilInstanceProfileExistsMutex.RUnlock()
	argsForCall := fake.waitUntilInstanceProfileExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) WaitUntilInstanceProfileExistsReturns(result1 error) {
	fake.waitUntilInstanceProfileExistsMutex.Lock()
	defer fake.waitUntilInstanceProfileExistsMutex.Unlock()
	fake.WaitUntilInstanceProfileExistsStub = nil
	fake.waitUntilInstanceProfileExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) WaitUntilInstanceProfileExistsReturnsOnCall(i int, result1 error) {
	fake.waitUntilInstanceProfileExistsMutex.Lock()
	defer fake.waitUntilInstanceProfileExistsMutex.Unlock()
	fake.WaitUntilInstanceProfileExistsStub = nil
	if fake.waitUntilInstanceProfileExistsReturnsOnCall == nil {
		fake.waitUntilInstanceProfileExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilInstanceProfileExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) WaitUntilInstanceProfileExistsWithContext(arg1 context.Context, arg2 *iam.GetInstanceProfileInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilInstanceProfileExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilInstanceProfileExistsWithContextReturnsOnCall[len(fake.waitUntilInstanceProfileExistsWithContextArgsForCall)]
	fake.waitUntilInstanceProfileExistsWithContextArgsForCall = append(fake.waitUntilInstanceProfileExistsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetInstanceProfileInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilInstanceProfileExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilInstanceProfileExistsWithContextMutex.Unlock()
	if fake.WaitUntilInstanceProfileExistsWithContextStub != nil {
		return fake.WaitUntilInstanceProfileExistsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilInstanceProfileExistsWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) WaitUntilInstanceProfileExistsWithContextCallCount() int {
	fake.waitUntilInstanceProfileExistsWithContextMutex.RLock()
	defer fake.waitUntilInstanceProfileExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilInstanceProfileExistsWithContextArgsForCall)
}

func (fake *FakeIAMAPI) WaitUntilInstanceProfileExistsWithContextCalls(stub func(context.Context, *iam.GetInstanceProfileInput, ...request.WaiterOption) error) {
	fake.waitUntilInstanceProfileExistsWithContextMutex.Lock()
	defer fake.waitUntilInstanceProfileExistsWithContextMutex.Unlock()
	fake.WaitUntilInstanceProfileExistsWithContextStub = stub
}

func (fake *FakeIAMAPI) WaitUntilInstanceProfileExistsWithContextArgsForCall(i int) (context.Context, *iam.GetInstanceProfileInput, []request.WaiterOption) {
	fake.waitUntilInstanceProfileExistsWithContextMutex.RLock()
	defer fake.waitUntilInstanceProfileExistsWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilInstanceProfileExistsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) WaitUntilInstanceProfileExistsWithContextReturns(result1 error) {
	fake.waitUntilInstanceProfileExistsWithContextMutex.Lock()
	defer fake.waitUntilInstanceProfileExistsWithContextMutex.Unlock()
	fake.WaitUntilInstanceProfileExistsWithContextStub = nil
	fake.waitUntilInstanceProfileExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) WaitUntilInstanceProfileExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilInstanceProfileExistsWithContextMutex.Lock()
	defer fake.waitUntilInstanceProfileExistsWithContextMutex.Unlock()
	fake.WaitUntilInstanceProfileExistsWithContextStub = nil
	if fake.waitUntilInstanceProfileExistsWithContextReturnsOnCall == nil {
		fake.waitUntilInstanceProfileExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilInstanceProfileExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) WaitUntilPolicyExists(arg1 *iam.GetPolicyInput) error {
	fake.waitUntilPolicyExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilPolicyExistsReturnsOnCall[len(fake.waitUntilPolicyExistsArgsForCall)]
	fake.waitUntilPolicyExistsArgsForCall = append(fake.waitUntilPolicyExistsArgsForCall, struct {
		arg1 *iam.GetPolicyInput
	}{arg1})
	fake.recordInvocation("WaitUntilPolicyExists", []interface{}{arg1})
	fake.waitUntilPolicyExistsMutex.Unlock()
	if fake.WaitUntilPolicyExistsStub != nil {
		return fake.WaitUntilPolicyExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilPolicyExistsReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) WaitUntilPolicyExistsCallCount() int {
	fake.waitUntilPolicyExistsMutex.RLock()
	defer fake.waitUntilPolicyExistsMutex.RUnlock()
	return len(fake.waitUntilPolicyExistsArgsForCall)
}

func (fake *FakeIAMAPI) WaitUntilPolicyExistsCalls(stub func(*iam.GetPolicyInput) error) {
	fake.waitUntilPolicyExistsMutex.Lock()
	defer fake.waitUntilPolicyExistsMutex.Unlock()
	fake.WaitUntilPolicyExistsStub = stub
}

func (fake *FakeIAMAPI) WaitUntilPolicyExistsArgsForCall(i int) *iam.GetPolicyInput {
	fake.waitUntilPolicyExistsMutex.RLock()
	defer fake.waitUntilPolicyExistsMutex.RUnlock()
	argsForCall := fake.waitUntilPolicyExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) WaitUntilPolicyExistsReturns(result1 error) {
	fake.waitUntilPolicyExistsMutex.Lock()
	defer fake.waitUntilPolicyExistsMutex.Unlock()
	fake.WaitUntilPolicyExistsStub = nil
	fake.waitUntilPolicyExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) WaitUntilPolicyExistsReturnsOnCall(i int, result1 error) {
	fake.waitUntilPolicyExistsMutex.Lock()
	defer fake.waitUntilPolicyExistsMutex.Unlock()
	fake.WaitUntilPolicyExistsStub = nil
	if fake.waitUntilPolicyExistsReturnsOnCall == nil {
		fake.waitUntilPolicyExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilPolicyExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) WaitUntilPolicyExistsWithContext(arg1 context.Context, arg2 *iam.GetPolicyInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilPolicyExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilPolicyExistsWithContextReturnsOnCall[len(fake.waitUntilPolicyExistsWithContextArgsForCall)]
	fake.waitUntilPolicyExistsWithContextArgsForCall = append(fake.waitUntilPolicyExistsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetPolicyInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilPolicyExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilPolicyExistsWithContextMutex.Unlock()
	if fake.WaitUntilPolicyExistsWithContextStub != nil {
		return fake.WaitUntilPolicyExistsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilPolicyExistsWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) WaitUntilPolicyExistsWithContextCallCount() int {
	fake.waitUntilPolicyExistsWithContextMutex.RLock()
	defer fake.waitUntilPolicyExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilPolicyExistsWithContextArgsForCall)
}

func (fake *FakeIAMAPI) WaitUntilPolicyExistsWithContextCalls(stub func(context.Context, *iam.GetPolicyInput, ...request.WaiterOption) error) {
	fake.waitUntilPolicyExistsWithContextMutex.Lock()
	defer fake.waitUntilPolicyExistsWithContextMutex.Unlock()
	fake.WaitUntilPolicyExistsWithContextStub = stub
}

func (fake *FakeIAMAPI) WaitUntilPolicyExistsWithContextArgsForCall(i int) (context.Context, *iam.GetPolicyInput, []request.WaiterOption) {
	fake.waitUntilPolicyExistsWithContextMutex.RLock()
	defer fake.waitUntilPolicyExistsWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilPolicyExistsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) WaitUntilPolicyExistsWithContextReturns(result1 error) {
	fake.waitUntilPolicyExistsWithContextMutex.Lock()
	defer fake.waitUntilPolicyExistsWithContextMutex.Unlock()
	fake.WaitUntilPolicyExistsWithContextStub = nil
	fake.waitUntilPolicyExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) WaitUntilPolicyExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilPolicyExistsWithContextMutex.Lock()
	defer fake.waitUntilPolicyExistsWithContextMutex.Unlock()
	fake.WaitUntilPolicyExistsWithContextStub = nil
	if fake.waitUntilPolicyExistsWithContextReturnsOnCall == nil {
		fake.waitUntilPolicyExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilPolicyExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) WaitUntilRoleExists(arg1 *iam.GetRoleInput) error {
	fake.waitUntilRoleExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilRoleExistsReturnsOnCall[len(fake.waitUntilRoleExistsArgsForCall)]
	fake.waitUntilRoleExistsArgsForCall = append(fake.waitUntilRoleExistsArgsForCall, struct {
		arg1 *iam.GetRoleInput
	}{arg1})
	fake.recordInvocation("WaitUntilRoleExists", []interface{}{arg1})
	fake.waitUntilRoleExistsMutex.Unlock()
	if fake.WaitUntilRoleExistsStub != nil {
		return fake.WaitUntilRoleExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilRoleExistsReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) WaitUntilRoleExistsCallCount() int {
	fake.waitUntilRoleExistsMutex.RLock()
	defer fake.waitUntilRoleExistsMutex.RUnlock()
	return len(fake.waitUntilRoleExistsArgsForCall)
}

func (fake *FakeIAMAPI) WaitUntilRoleExistsCalls(stub func(*iam.GetRoleInput) error) {
	fake.waitUntilRoleExistsMutex.Lock()
	defer fake.waitUntilRoleExistsMutex.Unlock()
	fake.WaitUntilRoleExistsStub = stub
}

func (fake *FakeIAMAPI) WaitUntilRoleExistsArgsForCall(i int) *iam.GetRoleInput {
	fake.waitUntilRoleExistsMutex.RLock()
	defer fake.waitUntilRoleExistsMutex.RUnlock()
	argsForCall := fake.waitUntilRoleExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) WaitUntilRoleExistsReturns(result1 error) {
	fake.waitUntilRoleExistsMutex.Lock()
	defer fake.waitUntilRoleExistsMutex.Unlock()
	fake.WaitUntilRoleExistsStub = nil
	fake.waitUntilRoleExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) WaitUntilRoleExistsReturnsOnCall(i int, result1 error) {
	fake.waitUntilRoleExistsMutex.Lock()
	defer fake.waitUntilRoleExistsMutex.Unlock()
	fake.WaitUntilRoleExistsStub = nil
	if fake.waitUntilRoleExistsReturnsOnCall == nil {
		fake.waitUntilRoleExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilRoleExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) WaitUntilRoleExistsWithContext(arg1 context.Context, arg2 *iam.GetRoleInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilRoleExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilRoleExistsWithContextReturnsOnCall[len(fake.waitUntilRoleExistsWithContextArgsForCall)]
	fake.waitUntilRoleExistsWithContextArgsForCall = append(fake.waitUntilRoleExistsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetRoleInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilRoleExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilRoleExistsWithContextMutex.Unlock()
	if fake.WaitUntilRoleExistsWithContextStub != nil {
		return fake.WaitUntilRoleExistsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilRoleExistsWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) WaitUntilRoleExistsWithContextCallCount() int {
	fake.waitUntilRoleExistsWithContextMutex.RLock()
	defer fake.waitUntilRoleExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilRoleExistsWithContextArgsForCall)
}

func (fake *FakeIAMAPI) WaitUntilRoleExistsWithContextCalls(stub func(context.Context, *iam.GetRoleInput, ...request.WaiterOption) error) {
	fake.waitUntilRoleExistsWithContextMutex.Lock()
	defer fake.waitUntilRoleExistsWithContextMutex.Unlock()
	fake.WaitUntilRoleExistsWithContextStub = stub
}

func (fake *FakeIAMAPI) WaitUntilRoleExistsWithContextArgsForCall(i int) (context.Context, *iam.GetRoleInput, []request.WaiterOption) {
	fake.waitUntilRoleExistsWithContextMutex.RLock()
	defer fake.waitUntilRoleExistsWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilRoleExistsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) WaitUntilRoleExistsWithContextReturns(result1 error) {
	fake.waitUntilRoleExistsWithContextMutex.Lock()
	defer fake.waitUntilRoleExistsWithContextMutex.Unlock()
	fake.WaitUntilRoleExistsWithContextStub = nil
	fake.waitUntilRoleExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) WaitUntilRoleExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilRoleExistsWithContextMutex.Lock()
	defer fake.waitUntilRoleExistsWithContextMutex.Unlock()
	fake.WaitUntilRoleExistsWithContextStub = nil
	if fake.waitUntilRoleExistsWithContextReturnsOnCall == nil {
		fake.waitUntilRoleExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilRoleExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) WaitUntilUserExists(arg1 *iam.GetUserInput) error {
	fake.waitUntilUserExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilUserExistsReturnsOnCall[len(fake.waitUntilUserExistsArgsForCall)]
	fake.waitUntilUserExistsArgsForCall = append(fake.waitUntilUserExistsArgsForCall, struct {
		arg1 *iam.GetUserInput
	}{arg1})
	fake.recordInvocation("WaitUntilUserExists", []interface{}{arg1})
	fake.waitUntilUserExistsMutex.Unlock()
	if fake.WaitUntilUserExistsStub != nil {
		return fake.WaitUntilUserExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilUserExistsReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) WaitUntilUserExistsCallCount() int {
	fake.waitUntilUserExistsMutex.RLock()
	defer fake.waitUntilUserExistsMutex.RUnlock()
	return len(fake.waitUntilUserExistsArgsForCall)
}

func (fake *FakeIAMAPI) WaitUntilUserExistsCalls(stub func(*iam.GetUserInput) error) {
	fake.waitUntilUserExistsMutex.Lock()
	defer fake.waitUntilUserExistsMutex.Unlock()
	fake.WaitUntilUserExistsStub = stub
}

func (fake *FakeIAMAPI) WaitUntilUserExistsArgsForCall(i int) *iam.GetUserInput {
	fake.waitUntilUserExistsMutex.RLock()
	defer fake.waitUntilUserExistsMutex.RUnlock()
	argsForCall := fake.waitUntilUserExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAMAPI) WaitUntilUserExistsReturns(result1 error) {
	fake.waitUntilUserExistsMutex.Lock()
	defer fake.waitUntilUserExistsMutex.Unlock()
	fake.WaitUntilUserExistsStub = nil
	fake.waitUntilUserExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) WaitUntilUserExistsReturnsOnCall(i int, result1 error) {
	fake.waitUntilUserExistsMutex.Lock()
	defer fake.waitUntilUserExistsMutex.Unlock()
	fake.WaitUntilUserExistsStub = nil
	if fake.waitUntilUserExistsReturnsOnCall == nil {
		fake.waitUntilUserExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilUserExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) WaitUntilUserExistsWithContext(arg1 context.Context, arg2 *iam.GetUserInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilUserExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilUserExistsWithContextReturnsOnCall[len(fake.waitUntilUserExistsWithContextArgsForCall)]
	fake.waitUntilUserExistsWithContextArgsForCall = append(fake.waitUntilUserExistsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetUserInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilUserExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilUserExistsWithContextMutex.Unlock()
	if fake.WaitUntilUserExistsWithContextStub != nil {
		return fake.WaitUntilUserExistsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilUserExistsWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeIAMAPI) WaitUntilUserExistsWithContextCallCount() int {
	fake.waitUntilUserExistsWithContextMutex.RLock()
	defer fake.waitUntilUserExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilUserExistsWithContextArgsForCall)
}

func (fake *FakeIAMAPI) WaitUntilUserExistsWithContextCalls(stub func(context.Context, *iam.GetUserInput, ...request.WaiterOption) error) {
	fake.waitUntilUserExistsWithContextMutex.Lock()
	defer fake.waitUntilUserExistsWithContextMutex.Unlock()
	fake.WaitUntilUserExistsWithContextStub = stub
}

func (fake *FakeIAMAPI) WaitUntilUserExistsWithContextArgsForCall(i int) (context.Context, *iam.GetUserInput, []request.WaiterOption) {
	fake.waitUntilUserExistsWithContextMutex.RLock()
	defer fake.waitUntilUserExistsWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilUserExistsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIAMAPI) WaitUntilUserExistsWithContextReturns(result1 error) {
	fake.waitUntilUserExistsWithContextMutex.Lock()
	defer fake.waitUntilUserExistsWithContextMutex.Unlock()
	fake.WaitUntilUserExistsWithContextStub = nil
	fake.waitUntilUserExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) WaitUntilUserExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilUserExistsWithContextMutex.Lock()
	defer fake.waitUntilUserExistsWithContextMutex.Unlock()
	fake.WaitUntilUserExistsWithContextStub = nil
	if fake.waitUntilUserExistsWithContextReturnsOnCall == nil {
		fake.waitUntilUserExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilUserExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addClientIDToOpenIDConnectProviderMutex.RLock()
	defer fake.addClientIDToOpenIDConnectProviderMutex.RUnlock()
	fake.addClientIDToOpenIDConnectProviderRequestMutex.RLock()
	defer fake.addClientIDToOpenIDConnectProviderRequestMutex.RUnlock()
	fake.addClientIDToOpenIDConnectProviderWithContextMutex.RLock()
	defer fake.addClientIDToOpenIDConnectProviderWithContextMutex.RUnlock()
	fake.addRoleToInstanceProfileMutex.RLock()
	defer fake.addRoleToInstanceProfileMutex.RUnlock()
	fake.addRoleToInstanceProfileRequestMutex.RLock()
	defer fake.addRoleToInstanceProfileRequestMutex.RUnlock()
	fake.addRoleToInstanceProfileWithContextMutex.RLock()
	defer fake.addRoleToInstanceProfileWithContextMutex.RUnlock()
	fake.addUserToGroupMutex.RLock()
	defer fake.addUserToGroupMutex.RUnlock()
	fake.addUserToGroupRequestMutex.RLock()
	defer fake.addUserToGroupRequestMutex.RUnlock()
	fake.addUserToGroupWithContextMutex.RLock()
	defer fake.addUserToGroupWithContextMutex.RUnlock()
	fake.attachGroupPolicyMutex.RLock()
	defer fake.attachGroupPolicyMutex.RUnlock()
	fake.attachGroupPolicyRequestMutex.RLock()
	defer fake.attachGroupPolicyRequestMutex.RUnlock()
	fake.attachGroupPolicyWithContextMutex.RLock()
	defer fake.attachGroupPolicyWithContextMutex.RUnlock()
	fake.attachRolePolicyMutex.RLock()
	defer fake.attachRolePolicyMutex.RUnlock()
	fake.attachRolePolicyRequestMutex.RLock()
	defer fake.attachRolePolicyRequestMutex.RUnlock()
	fake.attachRolePolicyWithContextMutex.RLock()
	defer fake.attachRolePolicyWithContextMutex.RUnlock()
	fake.attachUserPolicyMutex.RLock()
	defer fake.attachUserPolicyMutex.RUnlock()
	fake.attachUserPolicyRequestMutex.RLock()
	defer fake.attachUserPolicyRequestMutex.RUnlock()
	fake.attachUserPolicyWithContextMutex.RLock()
	defer fake.attachUserPolicyWithContextMutex.RUnlock()
	fake.changePasswordMutex.RLock()
	defer fake.changePasswordMutex.RUnlock()
	fake.changePasswordRequestMutex.RLock()
	defer fake.changePasswordRequestMutex.RUnlock()
	fake.changePasswordWithContextMutex.RLock()
	defer fake.changePasswordWithContextMutex.RUnlock()
	fake.createAccessKeyMutex.RLock()
	defer fake.createAccessKeyMutex.RUnlock()
	fake.createAccessKeyRequestMutex.RLock()
	defer fake.createAccessKeyRequestMutex.RUnlock()
	fake.createAccessKeyWithContextMutex.RLock()
	defer fake.createAccessKeyWithContextMutex.RUnlock()
	fake.createAccountAliasMutex.RLock()
	defer fake.createAccountAliasMutex.RUnlock()
	fake.createAccountAliasRequestMutex.RLock()
	defer fake.createAccountAliasRequestMutex.RUnlock()
	fake.createAccountAliasWithContextMutex.RLock()
	defer fake.createAccountAliasWithContextMutex.RUnlock()
	fake.createGroupMutex.RLock()
	defer fake.createGroupMutex.RUnlock()
	fake.createGroupRequestMutex.RLock()
	defer fake.createGroupRequestMutex.RUnlock()
	fake.createGroupWithContextMutex.RLock()
	defer fake.createGroupWithContextMutex.RUnlock()
	fake.createInstanceProfileMutex.RLock()
	defer fake.createInstanceProfileMutex.RUnlock()
	fake.createInstanceProfileRequestMutex.RLock()
	defer fake.createInstanceProfileRequestMutex.RUnlock()
	fake.createInstanceProfileWithContextMutex.RLock()
	defer fake.createInstanceProfileWithContextMutex.RUnlock()
	fake.createLoginProfileMutex.RLock()
	defer fake.createLoginProfileMutex.RUnlock()
	fake.createLoginProfileRequestMutex.RLock()
	defer fake.createLoginProfileRequestMutex.RUnlock()
	fake.createLoginProfileWithContextMutex.RLock()
	defer fake.createLoginProfileWithContextMutex.RUnlock()
	fake.createOpenIDConnectProviderMutex.RLock()
	defer fake.createOpenIDConnectProviderMutex.RUnlock()
	fake.createOpenIDConnectProviderRequestMutex.RLock()
	defer fake.createOpenIDConnectProviderRequestMutex.RUnlock()
	fake.createOpenIDConnectProviderWithContextMutex.RLock()
	defer fake.createOpenIDConnectProviderWithContextMutex.RUnlock()
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	fake.createPolicyRequestMutex.RLock()
	defer fake.createPolicyRequestMutex.RUnlock()
	fake.createPolicyVersionMutex.RLock()
	defer fake.createPolicyVersionMutex.RUnlock()
	fake.createPolicyVersionRequestMutex.RLock()
	defer fake.createPolicyVersionRequestMutex.RUnlock()
	fake.createPolicyVersionWithContextMutex.RLock()
	defer fake.createPolicyVersionWithContextMutex.RUnlock()
	fake.createPolicyWithContextMutex.RLock()
	defer fake.createPolicyWithContextMutex.RUnlock()
	fake.createRoleMutex.RLock()
	defer fake.createRoleMutex.RUnlock()
	fake.createRoleRequestMutex.RLock()
	defer fake.createRoleRequestMutex.RUnlock()
	fake.createRoleWithContextMutex.RLock()
	defer fake.createRoleWithContextMutex.RUnlock()
	fake.createSAMLProviderMutex.RLock()
	defer fake.createSAMLProviderMutex.RUnlock()
	fake.createSAMLProviderRequestMutex.RLock()
	defer fake.createSAMLProviderRequestMutex.RUnlock()
	fake.createSAMLProviderWithContextMutex.RLock()
	defer fake.createSAMLProviderWithContextMutex.RUnlock()
	fake.createServiceLinkedRoleMutex.RLock()
	defer fake.createServiceLinkedRoleMutex.RUnlock()
	fake.createServiceLinkedRoleRequestMutex.RLock()
	defer fake.createServiceLinkedRoleRequestMutex.RUnlock()
	fake.createServiceLinkedRoleWithContextMutex.RLock()
	defer fake.createServiceLinkedRoleWithContextMutex.RUnlock()
	fake.createServiceSpecificCredentialMutex.RLock()
	defer fake.createServiceSpecificCredentialMutex.RUnlock()
	fake.createServiceSpecificCredentialRequestMutex.RLock()
	defer fake.createServiceSpecificCredentialRequestMutex.RUnlock()
	fake.createServiceSpecificCredentialWithContextMutex.RLock()
	defer fake.createServiceSpecificCredentialWithContextMutex.RUnlock()
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	fake.createUserRequestMutex.RLock()
	defer fake.createUserRequestMutex.RUnlock()
	fake.createUserWithContextMutex.RLock()
	defer fake.createUserWithContextMutex.RUnlock()
	fake.createVirtualMFADeviceMutex.RLock()
	defer fake.createVirtualMFADeviceMutex.RUnlock()
	fake.createVirtualMFADeviceRequestMutex.RLock()
	defer fake.createVirtualMFADeviceRequestMutex.RUnlock()
	fake.createVirtualMFADeviceWithContextMutex.RLock()
	defer fake.createVirtualMFADeviceWithContextMutex.RUnlock()
	fake.deactivateMFADeviceMutex.RLock()
	defer fake.deactivateMFADeviceMutex.RUnlock()
	fake.deactivateMFADeviceRequestMutex.RLock()
	defer fake.deactivateMFADeviceRequestMutex.RUnlock()
	fake.deactivateMFADeviceWithContextMutex.RLock()
	defer fake.deactivateMFADeviceWithContextMutex.RUnlock()
	fake.deleteAccessKeyMutex.RLock()
	defer fake.deleteAccessKeyMutex.RUnlock()
	fake.deleteAccessKeyRequestMutex.RLock()
	defer fake.deleteAccessKeyRequestMutex.RUnlock()
	fake.deleteAccessKeyWithContextMutex.RLock()
	defer fake.deleteAccessKeyWithContextMutex.RUnlock()
	fake.deleteAccountAliasMutex.RLock()
	defer fake.deleteAccountAliasMutex.RUnlock()
	fake.deleteAccountAliasRequestMutex.RLock()
	defer fake.deleteAccountAliasRequestMutex.RUnlock()
	fake.deleteAccountAliasWithContextMutex.RLock()
	defer fake.deleteAccountAliasWithContextMutex.RUnlock()
	fake.deleteAccountPasswordPolicyMutex.RLock()
	defer fake.deleteAccountPasswordPolicyMutex.RUnlock()
	fake.deleteAccountPasswordPolicyRequestMutex.RLock()
	defer fake.deleteAccountPasswordPolicyRequestMutex.RUnlock()
	fake.deleteAccountPasswordPolicyWithContextMutex.RLock()
	defer fake.deleteAccountPasswordPolicyWithContextMutex.RUnlock()
	fake.deleteGroupMutex.RLock()
	defer fake.deleteGroupMutex.RUnlock()
	fake.deleteGroupPolicyMutex.RLock()
	defer fake.deleteGroupPolicyMutex.RUnlock()
	fake.deleteGroupPolicyRequestMutex.RLock()
	defer fake.deleteGroupPolicyRequestMutex.RUnlock()
	fake.deleteGroupPolicyWithContextMutex.RLock()
	defer fake.deleteGroupPolicyWithContextMutex.RUnlock()
	fake.deleteGroupRequestMutex.RLock()
	defer fake.deleteGroupRequestMutex.RUnlock()
	fake.deleteGroupWithContextMutex.RLock()
	defer fake.deleteGroupWithContextMutex.RUnlock()
	fake.deleteInstanceProfileMutex.RLock()
	defer fake.deleteInstanceProfileMutex.RUnlock()
	fake.deleteInstanceProfileRequestMutex.RLock()
	defer fake.deleteInstanceProfileRequestMutex.RUnlock()
	fake.deleteInstanceProfileWithContextMutex.RLock()
	defer fake.deleteInstanceProfileWithContextMutex.RUnlock()
	fake.deleteLoginProfileMutex.RLock()
	defer fake.deleteLoginProfileMutex.RUnlock()
	fake.deleteLoginProfileRequestMutex.RLock()
	defer fake.deleteLoginProfileRequestMutex.RUnlock()
	fake.deleteLoginProfileWithContextMutex.RLock()
	defer fake.deleteLoginProfileWithContextMutex.RUnlock()
	fake.deleteOpenIDConnectProviderMutex.RLock()
	defer fake.deleteOpenIDConnectProviderMutex.RUnlock()
	fake.deleteOpenIDConnectProviderRequestMutex.RLock()
	defer fake.deleteOpenIDConnectProviderRequestMutex.RUnlock()
	fake.deleteOpenIDConnectProviderWithContextMutex.RLock()
	defer fake.deleteOpenIDConnectProviderWithContextMutex.RUnlock()
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	fake.deletePolicyRequestMutex.RLock()
	defer fake.deletePolicyRequestMutex.RUnlock()
	fake.deletePolicyVersionMutex.RLock()
	defer fake.deletePolicyVersionMutex.RUnlock()
	fake.deletePolicyVersionRequestMutex.RLock()
	defer fake.deletePolicyVersionRequestMutex.RUnlock()
	fake.deletePolicyVersionWithContextMutex.RLock()
	defer fake.deletePolicyVersionWithContextMutex.RUnlock()
	fake.deletePolicyWithContextMutex.RLock()
	defer fake.deletePolicyWithContextMutex.RUnlock()
	fake.deleteRoleMutex.RLock()
	defer fake.deleteRoleMutex.RUnlock()
	fake.deleteRolePermissionsBoundaryMutex.RLock()
	defer fake.deleteRolePermissionsBoundaryMutex.RUnlock()
	fake.deleteRolePermissionsBoundaryRequestMutex.RLock()
	defer fake.deleteRolePermissionsBoundaryRequestMutex.RUnlock()
	fake.deleteRolePermissionsBoundaryWithContextMutex.RLock()
	defer fake.deleteRolePermissionsBoundaryWithContextMutex.RUnlock()
	fake.deleteRolePolicyMutex.RLock()
	defer fake.deleteRolePolicyMutex.RUnlock()
	fake.deleteRolePolicyRequestMutex.RLock()
	defer fake.deleteRolePolicyRequestMutex.RUnlock()
	fake.deleteRolePolicyWithContextMutex.RLock()
	defer fake.deleteRolePolicyWithContextMutex.RUnlock()
	fake.deleteRoleRequestMutex.RLock()
	defer fake.deleteRoleRequestMutex.RUnlock()
	fake.deleteRoleWithContextMutex.RLock()
	defer fake.deleteRoleWithContextMutex.RUnlock()
	fake.deleteSAMLProviderMutex.RLock()
	defer fake.deleteSAMLProviderMutex.RUnlock()
	fake.deleteSAMLProviderRequestMutex.RLock()
	defer fake.deleteSAMLProviderRequestMutex.RUnlock()
	fake.deleteSAMLProviderWithContextMutex.RLock()
	defer fake.deleteSAMLProviderWithContextMutex.RUnlock()
	fake.deleteSSHPublicKeyMutex.RLock()
	defer fake.deleteSSHPublicKeyMutex.RUnlock()
	fake.deleteSSHPublicKeyRequestMutex.RLock()
	defer fake.deleteSSHPublicKeyRequestMutex.RUnlock()
	fake.deleteSSHPublicKeyWithContextMutex.RLock()
	defer fake.deleteSSHPublicKeyWithContextMutex.RUnlock()
	fake.deleteServerCertificateMutex.RLock()
	defer fake.deleteServerCertificateMutex.RUnlock()
	fake.deleteServerCertificateRequestMutex.RLock()
	defer fake.deleteServerCertificateRequestMutex.RUnlock()
	fake.deleteServerCertificateWithContextMutex.RLock()
	defer fake.deleteServerCertificateWithContextMutex.RUnlock()
	fake.deleteServiceLinkedRoleMutex.RLock()
	defer fake.deleteServiceLinkedRoleMutex.RUnlock()
	fake.deleteServiceLinkedRoleRequestMutex.RLock()
	defer fake.deleteServiceLinkedRoleRequestMutex.RUnlock()
	fake.deleteServiceLinkedRoleWithContextMutex.RLock()
	defer fake.deleteServiceLinkedRoleWithContextMutex.RUnlock()
	fake.deleteServiceSpecificCredentialMutex.RLock()
	defer fake.deleteServiceSpecificCredentialMutex.RUnlock()
	fake.deleteServiceSpecificCredentialRequestMutex.RLock()
	defer fake.deleteServiceSpecificCredentialRequestMutex.RUnlock()
	fake.deleteServiceSpecificCredentialWithContextMutex.RLock()
	defer fake.deleteServiceSpecificCredentialWithContextMutex.RUnlock()
	fake.deleteSigningCertificateMutex.RLock()
	defer fake.deleteSigningCertificateMutex.RUnlock()
	fake.deleteSigningCertificateRequestMutex.RLock()
	defer fake.deleteSigningCertificateRequestMutex.RUnlock()
	fake.deleteSigningCertificateWithContextMutex.RLock()
	defer fake.deleteSigningCertificateWithContextMutex.RUnlock()
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	fake.deleteUserPermissionsBoundaryMutex.RLock()
	defer fake.deleteUserPermissionsBoundaryMutex.RUnlock()
	fake.deleteUserPermissionsBoundaryRequestMutex.RLock()
	defer fake.deleteUserPermissionsBoundaryRequestMutex.RUnlock()
	fake.deleteUserPermissionsBoundaryWithContextMutex.RLock()
	defer fake.deleteUserPermissionsBoundaryWithContextMutex.RUnlock()
	fake.deleteUserPolicyMutex.RLock()
	defer fake.deleteUserPolicyMutex.RUnlock()
	fake.deleteUserPolicyRequestMutex.RLock()
	defer fake.deleteUserPolicyRequestMutex.RUnlock()
	fake.deleteUserPolicyWithContextMutex.RLock()
	defer fake.deleteUserPolicyWithContextMutex.RUnlock()
	fake.deleteUserRequestMutex.RLock()
	defer fake.deleteUserRequestMutex.RUnlock()
	fake.deleteUserWithContextMutex.RLock()
	defer fake.deleteUserWithContextMutex.RUnlock()
	fake.deleteVirtualMFADeviceMutex.RLock()
	defer fake.deleteVirtualMFADeviceMutex.RUnlock()
	fake.deleteVirtualMFADeviceRequestMutex.RLock()
	defer fake.deleteVirtualMFADeviceRequestMutex.RUnlock()
	fake.deleteVirtualMFADeviceWithContextMutex.RLock()
	defer fake.deleteVirtualMFADeviceWithContextMutex.RUnlock()
	fake.detachGroupPolicyMutex.RLock()
	defer fake.detachGroupPolicyMutex.RUnlock()
	fake.detachGroupPolicyRequestMutex.RLock()
	defer fake.detachGroupPolicyRequestMutex.RUnlock()
	fake.detachGroupPolicyWithContextMutex.RLock()
	defer fake.detachGroupPolicyWithContextMutex.RUnlock()
	fake.detachRolePolicyMutex.RLock()
	defer fake.detachRolePolicyMutex.RUnlock()
	fake.detachRolePolicyRequestMutex.RLock()
	defer fake.detachRolePolicyRequestMutex.RUnlock()
	fake.detachRolePolicyWithContextMutex.RLock()
	defer fake.detachRolePolicyWithContextMutex.RUnlock()
	fake.detachUserPolicyMutex.RLock()
	defer fake.detachUserPolicyMutex.RUnlock()
	fake.detachUserPolicyRequestMutex.RLock()
	defer fake.detachUserPolicyRequestMutex.RUnlock()
	fake.detachUserPolicyWithContextMutex.RLock()
	defer fake.detachUserPolicyWithContextMutex.RUnlock()
	fake.enableMFADeviceMutex.RLock()
	defer fake.enableMFADeviceMutex.RUnlock()
	fake.enableMFADeviceRequestMutex.RLock()
	defer fake.enableMFADeviceRequestMutex.RUnlock()
	fake.enableMFADeviceWithContextMutex.RLock()
	defer fake.enableMFADeviceWithContextMutex.RUnlock()
	fake.generateCredentialReportMutex.RLock()
	defer fake.generateCredentialReportMutex.RUnlock()
	fake.generateCredentialReportRequestMutex.RLock()
	defer fake.generateCredentialReportRequestMutex.RUnlock()
	fake.generateCredentialReportWithContextMutex.RLock()
	defer fake.generateCredentialReportWithContextMutex.RUnlock()
	fake.generateOrganizationsAccessReportMutex.RLock()
	defer fake.generateOrganizationsAccessReportMutex.RUnlock()
	fake.generateOrganizationsAccessReportRequestMutex.RLock()
	defer fake.generateOrganizationsAccessReportRequestMutex.RUnlock()
	fake.generateOrganizationsAccessReportWithContextMutex.RLock()
	defer fake.generateOrganizationsAccessReportWithContextMutex.RUnlock()
	fake.generateServiceLastAccessedDetailsMutex.RLock()
	defer fake.generateServiceLastAccessedDetailsMutex.RUnlock()
	fake.generateServiceLastAccessedDetailsRequestMutex.RLock()
	defer fake.generateServiceLastAccessedDetailsRequestMutex.RUnlock()
	fake.generateServiceLastAccessedDetailsWithContextMutex.RLock()
	defer fake.generateServiceLastAccessedDetailsWithContextMutex.RUnlock()
	fake.getAccessKeyLastUsedMutex.RLock()
	defer fake.getAccessKeyLastUsedMutex.RUnlock()
	fake.getAccessKeyLastUsedRequestMutex.RLock()
	defer fake.getAccessKeyLastUsedRequestMutex.RUnlock()
	fake.getAccessKeyLastUsedWithContextMutex.RLock()
	defer fake.getAccessKeyLastUsedWithContextMutex.RUnlock()
	fake.getAccountAuthorizationDetailsMutex.RLock()
	defer fake.getAccountAuthorizationDetailsMutex.RUnlock()
	fake.getAccountAuthorizationDetailsPagesMutex.RLock()
	defer fake.getAccountAuthorizationDetailsPagesMutex.RUnlock()
	fake.getAccountAuthorizationDetailsPagesWithContextMutex.RLock()
	defer fake.getAccountAuthorizationDetailsPagesWithContextMutex.RUnlock()
	fake.getAccountAuthorizationDetailsRequestMutex.RLock()
	defer fake.getAccountAuthorizationDetailsRequestMutex.RUnlock()
	fake.getAccountAuthorizationDetailsWithContextMutex.RLock()
	defer fake.getAccountAuthorizationDetailsWithContextMutex.RUnlock()
	fake.getAccountPasswordPolicyMutex.RLock()
	defer fake.getAccountPasswordPolicyMutex.RUnlock()
	fake.getAccountPasswordPolicyRequestMutex.RLock()
	defer fake.getAccountPasswordPolicyRequestMutex.RUnlock()
	fake.getAccountPasswordPolicyWithContextMutex.RLock()
	defer fake.getAccountPasswordPolicyWithContextMutex.RUnlock()
	fake.getAccountSummaryMutex.RLock()
	defer fake.getAccountSummaryMutex.RUnlock()
	fake.getAccountSummaryRequestMutex.RLock()
	defer fake.getAccountSummaryRequestMutex.RUnlock()
	fake.getAccountSummaryWithContextMutex.RLock()
	defer fake.getAccountSummaryWithContextMutex.RUnlock()
	fake.getContextKeysForCustomPolicyMutex.RLock()
	defer fake.getContextKeysForCustomPolicyMutex.RUnlock()
	fake.getContextKeysForCustomPolicyRequestMutex.RLock()
	defer fake.getContextKeysForCustomPolicyRequestMutex.RUnlock()
	fake.getContextKeysForCustomPolicyWithContextMutex.RLock()
	defer fake.getContextKeysForCustomPolicyWithContextMutex.RUnlock()
	fake.getContextKeysForPrincipalPolicyMutex.RLock()
	defer fake.getContextKeysForPrincipalPolicyMutex.RUnlock()
	fake.getContextKeysForPrincipalPolicyRequestMutex.RLock()
	defer fake.getContextKeysForPrincipalPolicyRequestMutex.RUnlock()
	fake.getContextKeysForPrincipalPolicyWithContextMutex.RLock()
	defer fake.getContextKeysForPrincipalPolicyWithContextMutex.RUnlock()
	fake.getCredentialReportMutex.RLock()
	defer fake.getCredentialReportMutex.RUnlock()
	fake.getCredentialReportRequestMutex.RLock()
	defer fake.getCredentialReportRequestMutex.RUnlock()
	fake.getCredentialReportWithContextMutex.RLock()
	defer fake.getCredentialReportWithContextMutex.RUnlock()
	fake.getGroupMutex.RLock()
	defer fake.getGroupMutex.RUnlock()
	fake.getGroupPagesMutex.RLock()
	defer fake.getGroupPagesMutex.RUnlock()
	fake.getGroupPagesWithContextMutex.RLock()
	defer fake.getGroupPagesWithContextMutex.RUnlock()
	fake.getGroupPolicyMutex.RLock()
	defer fake.getGroupPolicyMutex.RUnlock()
	fake.getGroupPolicyRequestMutex.RLock()
	defer fake.getGroupPolicyRequestMutex.RUnlock()
	fake.getGroupPolicyWithContextMutex.RLock()
	defer fake.getGroupPolicyWithContextMutex.RUnlock()
	fake.getGroupRequestMutex.RLock()
	defer fake.getGroupRequestMutex.RUnlock()
	fake.getGroupWithContextMutex.RLock()
	defer fake.getGroupWithContextMutex.RUnlock()
	fake.getInstanceProfileMutex.RLock()
	defer fake.getInstanceProfileMutex.RUnlock()
	fake.getInstanceProfileRequestMutex.RLock()
	defer fake.getInstanceProfileRequestMutex.RUnlock()
	fake.getInstanceProfileWithContextMutex.RLock()
	defer fake.getInstanceProfileWithContextMutex.RUnlock()
	fake.getLoginProfileMutex.RLock()
	defer fake.getLoginProfileMutex.RUnlock()
	fake.getLoginProfileRequestMutex.RLock()
	defer fake.getLoginProfileRequestMutex.RUnlock()
	fake.getLoginProfileWithContextMutex.RLock()
	defer fake.getLoginProfileWithContextMutex.RUnlock()
	fake.getOpenIDConnectProviderMutex.RLock()
	defer fake.getOpenIDConnectProviderMutex.RUnlock()
	fake.getOpenIDConnectProviderRequestMutex.RLock()
	defer fake.getOpenIDConnectProviderRequestMutex.RUnlock()
	fake.getOpenIDConnectProviderWithContextMutex.RLock()
	defer fake.getOpenIDConnectProviderWithContextMutex.RUnlock()
	fake.getOrganizationsAccessReportMutex.RLock()
	defer fake.getOrganizationsAccessReportMutex.RUnlock()
	fake.getOrganizationsAccessReportRequestMutex.RLock()
	defer fake.getOrganizationsAccessReportRequestMutex.RUnlock()
	fake.getOrganizationsAccessReportWithContextMutex.RLock()
	defer fake.getOrganizationsAccessReportWithContextMutex.RUnlock()
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	fake.getPolicyRequestMutex.RLock()
	defer fake.getPolicyRequestMutex.RUnlock()
	fake.getPolicyVersionMutex.RLock()
	defer fake.getPolicyVersionMutex.RUnlock()
	fake.getPolicyVersionRequestMutex.RLock()
	defer fake.getPolicyVersionRequestMutex.RUnlock()
	fake.getPolicyVersionWithContextMutex.RLock()
	defer fake.getPolicyVersionWithContextMutex.RUnlock()
	fake.getPolicyWithContextMutex.RLock()
	defer fake.getPolicyWithContextMutex.RUnlock()
	fake.getRoleMutex.RLock()
	defer fake.getRoleMutex.RUnlock()
	fake.getRolePolicyMutex.RLock()
	defer fake.getRolePolicyMutex.RUnlock()
	fake.getRolePolicyRequestMutex.RLock()
	defer fake.getRolePolicyRequestMutex.RUnlock()
	fake.getRolePolicyWithContextMutex.RLock()
	defer fake.getRolePolicyWithContextMutex.RUnlock()
	fake.getRoleRequestMutex.RLock()
	defer fake.getRoleRequestMutex.RUnlock()
	fake.getRoleWithContextMutex.RLock()
	defer fake.getRoleWithContextMutex.RUnlock()
	fake.getSAMLProviderMutex.RLock()
	defer fake.getSAMLProviderMutex.RUnlock()
	fake.getSAMLProviderRequestMutex.RLock()
	defer fake.getSAMLProviderRequestMutex.RUnlock()
	fake.getSAMLProviderWithContextMutex.RLock()
	defer fake.getSAMLProviderWithContextMutex.RUnlock()
	fake.getSSHPublicKeyMutex.RLock()
	defer fake.getSSHPublicKeyMutex.RUnlock()
	fake.getSSHPublicKeyRequestMutex.RLock()
	defer fake.getSSHPublicKeyRequestMutex.RUnlock()
	fake.getSSHPublicKeyWithContextMutex.RLock()
	defer fake.getSSHPublicKeyWithContextMutex.RUnlock()
	fake.getServerCertificateMutex.RLock()
	defer fake.getServerCertificateMutex.RUnlock()
	fake.getServerCertificateRequestMutex.RLock()
	defer fake.getServerCertificateRequestMutex.RUnlock()
	fake.getServerCertificateWithContextMutex.RLock()
	defer fake.getServerCertificateWithContextMutex.RUnlock()
	fake.getServiceLastAccessedDetailsMutex.RLock()
	defer fake.getServiceLastAccessedDetailsMutex.RUnlock()
	fake.getServiceLastAccessedDetailsRequestMutex.RLock()
	defer fake.getServiceLastAccessedDetailsRequestMutex.RUnlock()
	fake.getServiceLastAccessedDetailsWithContextMutex.RLock()
	defer fake.getServiceLastAccessedDetailsWithContextMutex.RUnlock()
	fake.getServiceLastAccessedDetailsWithEntitiesMutex.RLock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesMutex.RUnlock()
	fake.getServiceLastAccessedDetailsWithEntitiesRequestMutex.RLock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesRequestMutex.RUnlock()
	fake.getServiceLastAccessedDetailsWithEntitiesWithContextMutex.RLock()
	defer fake.getServiceLastAccessedDetailsWithEntitiesWithContextMutex.RUnlock()
	fake.getServiceLinkedRoleDeletionStatusMutex.RLock()
	defer fake.getServiceLinkedRoleDeletionStatusMutex.RUnlock()
	fake.getServiceLinkedRoleDeletionStatusRequestMutex.RLock()
	defer fake.getServiceLinkedRoleDeletionStatusRequestMutex.RUnlock()
	fake.getServiceLinkedRoleDeletionStatusWithContextMutex.RLock()
	defer fake.getServiceLinkedRoleDeletionStatusWithContextMutex.RUnlock()
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	fake.getUserPolicyMutex.RLock()
	defer fake.getUserPolicyMutex.RUnlock()
	fake.getUserPolicyRequestMutex.RLock()
	defer fake.getUserPolicyRequestMutex.RUnlock()
	fake.getUserPolicyWithContextMutex.RLock()
	defer fake.getUserPolicyWithContextMutex.RUnlock()
	fake.getUserRequestMutex.RLock()
	defer fake.getUserRequestMutex.RUnlock()
	fake.getUserWithContextMutex.RLock()
	defer fake.getUserWithContextMutex.RUnlock()
	fake.listAccessKeysMutex.RLock()
	defer fake.listAccessKeysMutex.RUnlock()
	fake.listAccessKeysPagesMutex.RLock()
	defer fake.listAccessKeysPagesMutex.RUnlock()
	fake.listAccessKeysPagesWithContextMutex.RLock()
	defer fake.listAccessKeysPagesWithContextMutex.RUnlock()
	fake.listAccessKeysRequestMutex.RLock()
	defer fake.listAccessKeysRequestMutex.RUnlock()
	fake.listAccessKeysWithContextMutex.RLock()
	defer fake.listAccessKeysWithContextMutex.RUnlock()
	fake.listAccountAliasesMutex.RLock()
	defer fake.listAccountAliasesMutex.RUnlock()
	fake.listAccountAliasesPagesMutex.RLock()
	defer fake.listAccountAliasesPagesMutex.RUnlock()
	fake.listAccountAliasesPagesWithContextMutex.RLock()
	defer fake.listAccountAliasesPagesWithContextMutex.RUnlock()
	fake.listAccountAliasesRequestMutex.RLock()
	defer fake.listAccountAliasesRequestMutex.RUnlock()
	fake.listAccountAliasesWithContextMutex.RLock()
	defer fake.listAccountAliasesWithContextMutex.RUnlock()
	fake.listAttachedGroupPoliciesMutex.RLock()
	defer fake.listAttachedGroupPoliciesMutex.RUnlock()
	fake.listAttachedGroupPoliciesPagesMutex.RLock()
	defer fake.listAttachedGroupPoliciesPagesMutex.RUnlock()
	fake.listAttachedGroupPoliciesPagesWithContextMutex.RLock()
	defer fake.listAttachedGroupPoliciesPagesWithContextMutex.RUnlock()
	fake.listAttachedGroupPoliciesRequestMutex.RLock()
	defer fake.listAttachedGroupPoliciesRequestMutex.RUnlock()
	fake.listAttachedGroupPoliciesWithContextMutex.RLock()
	defer fake.listAttachedGroupPoliciesWithContextMutex.RUnlock()
	fake.listAttachedRolePoliciesMutex.RLock()
	defer fake.listAttachedRolePoliciesMutex.RUnlock()
	fake.listAttachedRolePoliciesPagesMutex.RLock()
	defer fake.listAttachedRolePoliciesPagesMutex.RUnlock()
	fake.listAttachedRolePoliciesPagesWithContextMutex.RLock()
	defer fake.listAttachedRolePoliciesPagesWithContextMutex.RUnlock()
	fake.listAttachedRolePoliciesRequestMutex.RLock()
	defer fake.listAttachedRolePoliciesRequestMutex.RUnlock()
	fake.listAttachedRolePoliciesWithContextMutex.RLock()
	defer fake.listAttachedRolePoliciesWithContextMutex.RUnlock()
	fake.listAttachedUserPoliciesMutex.RLock()
	defer fake.listAttachedUserPoliciesMutex.RUnlock()
	fake.listAttachedUserPoliciesPagesMutex.RLock()
	defer fake.listAttachedUserPoliciesPagesMutex.RUnlock()
	fake.listAttachedUserPoliciesPagesWithContextMutex.RLock()
	defer fake.listAttachedUserPoliciesPagesWithContextMutex.RUnlock()
	fake.listAttachedUserPoliciesRequestMutex.RLock()
	defer fake.listAttachedUserPoliciesRequestMutex.RUnlock()
	fake.listAttachedUserPoliciesWithContextMutex.RLock()
	defer fake.listAttachedUserPoliciesWithContextMutex.RUnlock()
	fake.listEntitiesForPolicyMutex.RLock()
	defer fake.listEntitiesForPolicyMutex.RUnlock()
	fake.listEntitiesForPolicyPagesMutex.RLock()
	defer fake.listEntitiesForPolicyPagesMutex.RUnlock()
	fake.listEntitiesForPolicyPagesWithContextMutex.RLock()
	defer fake.listEntitiesForPolicyPagesWithContextMutex.RUnlock()
	fake.listEntitiesForPolicyRequestMutex.RLock()
	defer fake.listEntitiesForPolicyRequestMutex.RUnlock()
	fake.listEntitiesForPolicyWithContextMutex.RLock()
	defer fake.listEntitiesForPolicyWithContextMutex.RUnlock()
	fake.listGroupPoliciesMutex.RLock()
	defer fake.listGroupPoliciesMutex.RUnlock()
	fake.listGroupPoliciesPagesMutex.RLock()
	defer fake.listGroupPoliciesPagesMutex.RUnlock()
	fake.listGroupPoliciesPagesWithContextMutex.RLock()
	defer fake.listGroupPoliciesPagesWithContextMutex.RUnlock()
	fake.listGroupPoliciesRequestMutex.RLock()
	defer fake.listGroupPoliciesRequestMutex.RUnlock()
	fake.listGroupPoliciesWithContextMutex.RLock()
	defer fake.listGroupPoliciesWithContextMutex.RUnlock()
	fake.listGroupsMutex.RLock()
	defer fake.listGroupsMutex.RUnlock()
	fake.listGroupsForUserMutex.RLock()
	defer fake.listGroupsForUserMutex.RUnlock()
	fake.listGroupsForUserPagesMutex.RLock()
	defer fake.listGroupsForUserPagesMutex.RUnlock()
	fake.listGroupsForUserPagesWithContextMutex.RLock()
	defer fake.listGroupsForUserPagesWithContextMutex.RUnlock()
	fake.listGroupsForUserRequestMutex.RLock()
	defer fake.listGroupsForUserRequestMutex.RUnlock()
	fake.listGroupsForUserWithContextMutex.RLock()
	defer fake.listGroupsForUserWithContextMutex.RUnlock()
	fake.listGroupsPagesMutex.RLock()
	defer fake.listGroupsPagesMutex.RUnlock()
	fake.listGroupsPagesWithContextMutex.RLock()
	defer fake.listGroupsPagesWithContextMutex.RUnlock()
	fake.listGroupsRequestMutex.RLock()
	defer fake.listGroupsRequestMutex.RUnlock()
	fake.listGroupsWithContextMutex.RLock()
	defer fake.listGroupsWithContextMutex.RUnlock()
	fake.listInstanceProfilesMutex.RLock()
	defer fake.listInstanceProfilesMutex.RUnlock()
	fake.listInstanceProfilesForRoleMutex.RLock()
	defer fake.listInstanceProfilesForRoleMutex.RUnlock()
	fake.listInstanceProfilesForRolePagesMutex.RLock()
	defer fake.listInstanceProfilesForRolePagesMutex.RUnlock()
	fake.listInstanceProfilesForRolePagesWithContextMutex.RLock()
	defer fake.listInstanceProfilesForRolePagesWithContextMutex.RUnlock()
	fake.listInstanceProfilesForRoleRequestMutex.RLock()
	defer fake.listInstanceProfilesForRoleRequestMutex.RUnlock()
	fake.listInstanceProfilesForRoleWithContextMutex.RLock()
	defer fake.listInstanceProfilesForRoleWithContextMutex.RUnlock()
	fake.listInstanceProfilesPagesMutex.RLock()
	defer fake.listInstanceProfilesPagesMutex.RUnlock()
	fake.listInstanceProfilesPagesWithContextMutex.RLock()
	defer fake.listInstanceProfilesPagesWithContextMutex.RUnlock()
	fake.listInstanceProfilesRequestMutex.RLock()
	defer fake.listInstanceProfilesRequestMutex.RUnlock()
	fake.listInstanceProfilesWithContextMutex.RLock()
	defer fake.listInstanceProfilesWithContextMutex.RUnlock()
	fake.listMFADevicesMutex.RLock()
	defer fake.listMFADevicesMutex.RUnlock()
	fake.listMFADevicesPagesMutex.RLock()
	defer fake.listMFADevicesPagesMutex.RUnlock()
	fake.listMFADevicesPagesWithContextMutex.RLock()
	defer fake.listMFADevicesPagesWithContextMutex.RUnlock()
	fake.listMFADevicesRequestMutex.RLock()
	defer fake.listMFADevicesRequestMutex.RUnlock()
	fake.listMFADevicesWithContextMutex.RLock()
	defer fake.listMFADevicesWithContextMutex.RUnlock()
	fake.listOpenIDConnectProvidersMutex.RLock()
	defer fake.listOpenIDConnectProvidersMutex.RUnlock()
	fake.listOpenIDConnectProvidersRequestMutex.RLock()
	defer fake.listOpenIDConnectProvidersRequestMutex.RUnlock()
	fake.listOpenIDConnectProvidersWithContextMutex.RLock()
	defer fake.listOpenIDConnectProvidersWithContextMutex.RUnlock()
	fake.listPoliciesMutex.RLock()
	defer fake.listPoliciesMutex.RUnlock()
	fake.listPoliciesGrantingServiceAccessMutex.RLock()
	defer fake.listPoliciesGrantingServiceAccessMutex.RUnlock()
	fake.listPoliciesGrantingServiceAccessRequestMutex.RLock()
	defer fake.listPoliciesGrantingServiceAccessRequestMutex.RUnlock()
	fake.listPoliciesGrantingServiceAccessWithContextMutex.RLock()
	defer fake.listPoliciesGrantingServiceAccessWithContextMutex.RUnlock()
	fake.listPoliciesPagesMutex.RLock()
	defer fake.listPoliciesPagesMutex.RUnlock()
	fake.listPoliciesPagesWithContextMutex.RLock()
	defer fake.listPoliciesPagesWithContextMutex.RUnlock()
	fake.listPoliciesRequestMutex.RLock()
	defer fake.listPoliciesRequestMutex.RUnlock()
	fake.listPoliciesWithContextMutex.RLock()
	defer fake.listPoliciesWithContextMutex.RUnlock()
	fake.listPolicyVersionsMutex.RLock()
	defer fake.listPolicyVersionsMutex.RUnlock()
	fake.listPolicyVersionsPagesMutex.RLock()
	defer fake.listPolicyVersionsPagesMutex.RUnlock()
	fake.listPolicyVersionsPagesWithContextMutex.RLock()
	defer fake.listPolicyVersionsPagesWithContextMutex.RUnlock()
	fake.listPolicyVersionsRequestMutex.RLock()
	defer fake.listPolicyVersionsRequestMutex.RUnlock()
	fake.listPolicyVersionsWithContextMutex.RLock()
	defer fake.listPolicyVersionsWithContextMutex.RUnlock()
	fake.listRolePoliciesMutex.RLock()
	defer fake.listRolePoliciesMutex.RUnlock()
	fake.listRolePoliciesPagesMutex.RLock()
	defer fake.listRolePoliciesPagesMutex.RUnlock()
	fake.listRolePoliciesPagesWithContextMutex.RLock()
	defer fake.listRolePoliciesPagesWithContextMutex.RUnlock()
	fake.listRolePoliciesRequestMutex.RLock()
	defer fake.listRolePoliciesRequestMutex.RUnlock()
	fake.listRolePoliciesWithContextMutex.RLock()
	defer fake.listRolePoliciesWithContextMutex.RUnlock()
	fake.listRoleTagsMutex.RLock()
	defer fake.listRoleTagsMutex.RUnlock()
	fake.listRoleTagsRequestMutex.RLock()
	defer fake.listRoleTagsRequestMutex.RUnlock()
	fake.listRoleTagsWithContextMutex.RLock()
	defer fake.listRoleTagsWithContextMutex.RUnlock()
	fake.listRolesMutex.RLock()
	defer fake.listRolesMutex.RUnlock()
	fake.listRolesPagesMutex.RLock()
	defer fake.listRolesPagesMutex.RUnlock()
	fake.listRolesPagesWithContextMutex.RLock()
	defer fake.listRolesPagesWithContextMutex.RUnlock()
	fake.listRolesRequestMutex.RLock()
	defer fake.listRolesRequestMutex.RUnlock()
	fake.listRolesWithContextMutex.RLock()
	defer fake.listRolesWithContextMutex.RUnlock()
	fake.listSAMLProvidersMutex.RLock()
	defer fake.listSAMLProvidersMutex.RUnlock()
	fake.listSAMLProvidersRequestMutex.RLock()
	defer fake.listSAMLProvidersRequestMutex.RUnlock()
	fake.listSAMLProvidersWithContextMutex.RLock()
	defer fake.listSAMLProvidersWithContextMutex.RUnlock()
	fake.listSSHPublicKeysMutex.RLock()
	defer fake.listSSHPublicKeysMutex.RUnlock()
	fake.listSSHPublicKeysPagesMutex.RLock()
	defer fake.listSSHPublicKeysPagesMutex.RUnlock()
	fake.listSSHPublicKeysPagesWithContextMutex.RLock()
	defer fake.listSSHPublicKeysPagesWithContextMutex.RUnlock()
	fake.listSSHPublicKeysRequestMutex.RLock()
	defer fake.listSSHPublicKeysRequestMutex.RUnlock()
	fake.listSSHPublicKeysWithContextMutex.RLock()
	defer fake.listSSHPublicKeysWithContextMutex.RUnlock()
	fake.listServerCertificatesMutex.RLock()
	defer fake.listServerCertificatesMutex.RUnlock()
	fake.listServerCertificatesPagesMutex.RLock()
	defer fake.listServerCertificatesPagesMutex.RUnlock()
	fake.listServerCertificatesPagesWithContextMutex.RLock()
	defer fake.listServerCertificatesPagesWithContextMutex.RUnlock()
	fake.listServerCertificatesRequestMutex.RLock()
	defer fake.listServerCertificatesRequestMutex.RUnlock()
	fake.listServerCertificatesWithContextMutex.RLock()
	defer fake.listServerCertificatesWithContextMutex.RUnlock()
	fake.listServiceSpecificCredentialsMutex.RLock()
	defer fake.listServiceSpecificCredentialsMutex.RUnlock()
	fake.listServiceSpecificCredentialsRequestMutex.RLock()
	defer fake.listServiceSpecificCredentialsRequestMutex.RUnlock()
	fake.listServiceSpecificCredentialsWithContextMutex.RLock()
	defer fake.listServiceSpecificCredentialsWithContextMutex.RUnlock()
	fake.listSigningCertificatesMutex.RLock()
	defer fake.listSigningCertificatesMutex.RUnlock()
	fake.listSigningCertificatesPagesMutex.RLock()
	defer fake.listSigningCertificatesPagesMutex.RUnlock()
	fake.listSigningCertificatesPagesWithContextMutex.RLock()
	defer fake.listSigningCertificatesPagesWithContextMutex.RUnlock()
	fake.listSigningCertificatesRequestMutex.RLock()
	defer fake.listSigningCertificatesRequestMutex.RUnlock()
	fake.listSigningCertificatesWithContextMutex.RLock()
	defer fake.listSigningCertificatesWithContextMutex.RUnlock()
	fake.listUserPoliciesMutex.RLock()
	defer fake.listUserPoliciesMutex.RUnlock()
	fake.listUserPoliciesPagesMutex.RLock()
	defer fake.listUserPoliciesPagesMutex.RUnlock()
	fake.listUserPoliciesPagesWithContextMutex.RLock()
	defer fake.listUserPoliciesPagesWithContextMutex.RUnlock()
	fake.listUserPoliciesRequestMutex.RLock()
	defer fake.listUserPoliciesRequestMutex.RUnlock()
	fake.listUserPoliciesWithContextMutex.RLock()
	defer fake.listUserPoliciesWithContextMutex.RUnlock()
	fake.listUserTagsMutex.RLock()
	defer fake.listUserTagsMutex.RUnlock()
	fake.listUserTagsRequestMutex.RLock()
	defer fake.listUserTagsRequestMutex.RUnlock()
	fake.listUserTagsWithContextMutex.RLock()
	defer fake.listUserTagsWithContextMutex.RUnlock()
	fake.listUsersMutex.RLock()
	defer fake.listUsersMutex.RUnlock()
	fake.listUsersPagesMutex.RLock()
	defer fake.listUsersPagesMutex.RUnlock()
	fake.listUsersPagesWithContextMutex.RLock()
	defer fake.listUsersPagesWithContextMutex.RUnlock()
	fake.listUsersRequestMutex.RLock()
	defer fake.listUsersRequestMutex.RUnlock()
	fake.listUsersWithContextMutex.RLock()
	defer fake.listUsersWithContextMutex.RUnlock()
	fake.listVirtualMFADevicesMutex.RLock()
	defer fake.listVirtualMFADevicesMutex.RUnlock()
	fake.listVirtualMFADevicesPagesMutex.RLock()
	defer fake.listVirtualMFADevicesPagesMutex.RUnlock()
	fake.listVirtualMFADevicesPagesWithContextMutex.RLock()
	defer fake.listVirtualMFADevicesPagesWithContextMutex.RUnlock()
	fake.listVirtualMFADevicesRequestMutex.RLock()
	defer fake.listVirtualMFADevicesRequestMutex.RUnlock()
	fake.listVirtualMFADevicesWithContextMutex.RLock()
	defer fake.listVirtualMFADevicesWithContextMutex.RUnlock()
	fake.putGroupPolicyMutex.RLock()
	defer fake.putGroupPolicyMutex.RUnlock()
	fake.putGroupPolicyRequestMutex.RLock()
	defer fake.putGroupPolicyRequestMutex.RUnlock()
	fake.putGroupPolicyWithContextMutex.RLock()
	defer fake.putGroupPolicyWithContextMutex.RUnlock()
	fake.putRolePermissionsBoundaryMutex.RLock()
	defer fake.putRolePermissionsBoundaryMutex.RUnlock()
	fake.putRolePermissionsBoundaryRequestMutex.RLock()
	defer fake.putRolePermissionsBoundaryRequestMutex.RUnlock()
	fake.putRolePermissionsBoundaryWithContextMutex.RLock()
	defer fake.putRolePermissionsBoundaryWithContextMutex.RUnlock()
	fake.putRolePolicyMutex.RLock()
	defer fake.putRolePolicyMutex.RUnlock()
	fake.putRolePolicyRequestMutex.RLock()
	defer fake.putRolePolicyRequestMutex.RUnlock()
	fake.putRolePolicyWithContextMutex.RLock()
	defer fake.putRolePolicyWithContextMutex.RUnlock()
	fake.putUserPermissionsBoundaryMutex.RLock()
	defer fake.putUserPermissionsBoundaryMutex.RUnlock()
	fake.putUserPermissionsBoundaryRequestMutex.RLock()
	defer fake.putUserPermissionsBoundaryRequestMutex.RUnlock()
	fake.putUserPermissionsBoundaryWithContextMutex.RLock()
	defer fake.putUserPermissionsBoundaryWithContextMutex.RUnlock()
	fake.putUserPolicyMutex.RLock()
	defer fake.putUserPolicyMutex.RUnlock()
	fake.putUserPolicyRequestMutex.RLock()
	defer fake.putUserPolicyRequestMutex.RUnlock()
	fake.putUserPolicyWithContextMutex.RLock()
	defer fake.putUserPolicyWithContextMutex.RUnlock()
	fake.removeClientIDFromOpenIDConnectProviderMutex.RLock()
	defer fake.removeClientIDFromOpenIDConnectProviderMutex.RUnlock()
	fake.removeClientIDFromOpenIDConnectProviderRequestMutex.RLock()
	defer fake.removeClientIDFromOpenIDConnectProviderRequestMutex.RUnlock()
	fake.removeClientIDFromOpenIDConnectProviderWithContextMutex.RLock()
	defer fake.removeClientIDFromOpenIDConnectProviderWithContextMutex.RUnlock()
	fake.removeRoleFromInstanceProfileMutex.RLock()
	defer fake.removeRoleFromInstanceProfileMutex.RUnlock()
	fake.removeRoleFromInstanceProfileRequestMutex.RLock()
	defer fake.removeRoleFromInstanceProfileRequestMutex.RUnlock()
	fake.removeRoleFromInstanceProfileWithContextMutex.RLock()
	defer fake.removeRoleFromInstanceProfileWithContextMutex.RUnlock()
	fake.removeUserFromGroupMutex.RLock()
	defer fake.removeUserFromGroupMutex.RUnlock()
	fake.removeUserFromGroupRequestMutex.RLock()
	defer fake.removeUserFromGroupRequestMutex.RUnlock()
	fake.removeUserFromGroupWithContextMutex.RLock()
	defer fake.removeUserFromGroupWithContextMutex.RUnlock()
	fake.resetServiceSpecificCredentialMutex.RLock()
	defer fake.resetServiceSpecificCredentialMutex.RUnlock()
	fake.resetServiceSpecificCredentialRequestMutex.RLock()
	defer fake.resetServiceSpecificCredentialRequestMutex.RUnlock()
	fake.resetServiceSpecificCredentialWithContextMutex.RLock()
	defer fake.resetServiceSpecificCredentialWithContextMutex.RUnlock()
	fake.resyncMFADeviceMutex.RLock()
	defer fake.resyncMFADeviceMutex.RUnlock()
	fake.resyncMFADeviceRequestMutex.RLock()
	defer fake.resyncMFADeviceRequestMutex.RUnlock()
	fake.resyncMFADeviceWithContextMutex.RLock()
	defer fake.resyncMFADeviceWithContextMutex.RUnlock()
	fake.setDefaultPolicyVersionMutex.RLock()
	defer fake.setDefaultPolicyVersionMutex.RUnlock()
	fake.setDefaultPolicyVersionRequestMutex.RLock()
	defer fake.setDefaultPolicyVersionRequestMutex.RUnlock()
	fake.setDefaultPolicyVersionWithContextMutex.RLock()
	defer fake.setDefaultPolicyVersionWithContextMutex.RUnlock()
	fake.setSecurityTokenServicePreferencesMutex.RLock()
	defer fake.setSecurityTokenServicePreferencesMutex.RUnlock()
	fake.setSecurityTokenServicePreferencesRequestMutex.RLock()
	defer fake.setSecurityTokenServicePreferencesRequestMutex.RUnlock()
	fake.setSecurityTokenServicePreferencesWithContextMutex.RLock()
	defer fake.setSecurityTokenServicePreferencesWithContextMutex.RUnlock()
	fake.simulateCustomPolicyMutex.RLock()
	defer fake.simulateCustomPolicyMutex.RUnlock()
	fake.simulateCustomPolicyPagesMutex.RLock()
	defer fake.simulateCustomPolicyPagesMutex.RUnlock()
	fake.simulateCustomPolicyPagesWithContextMutex.RLock()
	defer fake.simulateCustomPolicyPagesWithContextMutex.RUnlock()
	fake.simulateCustomPolicyRequestMutex.RLock()
	defer fake.simulateCustomPolicyRequestMutex.RUnlock()
	fake.simulateCustomPolicyWithContextMutex.RLock()
	defer fake.simulateCustomPolicyWithContextMutex.RUnlock()
	fake.simulatePrincipalPolicyMutex.RLock()
	defer fake.simulatePrincipalPolicyMutex.RUnlock()
	fake.simulatePrincipalPolicyPagesMutex.RLock()
	defer fake.simulatePrincipalPolicyPagesMutex.RUnlock()
	fake.simulatePrincipalPolicyPagesWithContextMutex.RLock()
	defer fake.simulatePrincipalPolicyPagesWithContextMutex.RUnlock()
	fake.simulatePrincipalPolicyRequestMutex.RLock()
	defer fake.simulatePrincipalPolicyRequestMutex.RUnlock()
	fake.simulatePrincipalPolicyWithContextMutex.RLock()
	defer fake.simulatePrincipalPolicyWithContextMutex.RUnlock()
	fake.tagRoleMutex.RLock()
	defer fake.tagRoleMutex.RUnlock()
	fake.tagRoleRequestMutex.RLock()
	defer fake.tagRoleRequestMutex.RUnlock()
	fake.tagRoleWithContextMutex.RLock()
	defer fake.tagRoleWithContextMutex.RUnlock()
	fake.tagUserMutex.RLock()
	defer fake.tagUserMutex.RUnlock()
	fake.tagUserRequestMutex.RLock()
	defer fake.tagUserRequestMutex.RUnlock()
	fake.tagUserWithContextMutex.RLock()
	defer fake.tagUserWithContextMutex.RUnlock()
	fake.untagRoleMutex.RLock()
	defer fake.untagRoleMutex.RUnlock()
	fake.untagRoleRequestMutex.RLock()
	defer fake.untagRoleRequestMutex.RUnlock()
	fake.untagRoleWithContextMutex.RLock()
	defer fake.untagRoleWithContextMutex.RUnlock()
	fake.untagUserMutex.RLock()
	defer fake.untagUserMutex.RUnlock()
	fake.untagUserRequestMutex.RLock()
	defer fake.untagUserRequestMutex.RUnlock()
	fake.untagUserWithContextMutex.RLock()
	defer fake.untagUserWithContextMutex.RUnlock()
	fake.updateAccessKeyMutex.RLock()
	defer fake.updateAccessKeyMutex.RUnlock()
	fake.updateAccessKeyRequestMutex.RLock()
	defer fake.updateAccessKeyRequestMutex.RUnlock()
	fake.updateAccessKeyWithContextMutex.RLock()
	defer fake.updateAccessKeyWithContextMutex.RUnlock()
	fake.updateAccountPasswordPolicyMutex.RLock()
	defer fake.updateAccountPasswordPolicyMutex.RUnlock()
	fake.updateAccountPasswordPolicyRequestMutex.RLock()
	defer fake.updateAccountPasswordPolicyRequestMutex.RUnlock()
	fake.updateAccountPasswordPolicyWithContextMutex.RLock()
	defer fake.updateAccountPasswordPolicyWithContextMutex.RUnlock()
	fake.updateAssumeRolePolicyMutex.RLock()
	defer fake.updateAssumeRolePolicyMutex.RUnlock()
	fake.updateAssumeRolePolicyRequestMutex.RLock()
	defer fake.updateAssumeRolePolicyRequestMutex.RUnlock()
	fake.updateAssumeRolePolicyWithContextMutex.RLock()
	defer fake.updateAssumeRolePolicyWithContextMutex.RUnlock()
	fake.updateGroupMutex.RLock()
	defer fake.updateGroupMutex.RUnlock()
	fake.updateGroupRequestMutex.RLock()
	defer fake.updateGroupRequestMutex.RUnlock()
	fake.updateGroupWithContextMutex.RLock()
	defer fake.updateGroupWithContextMutex.RUnlock()
	fake.updateLoginProfileMutex.RLock()
	defer fake.updateLoginProfileMutex.RUnlock()
	fake.updateLoginProfileRequestMutex.RLock()
	defer fake.updateLoginProfileRequestMutex.RUnlock()
	fake.updateLoginProfileWithContextMutex.RLock()
	defer fake.updateLoginProfileWithContextMutex.RUnlock()
	fake.updateOpenIDConnectProviderThumbprintMutex.RLock()
	defer fake.updateOpenIDConnectProviderThumbprintMutex.RUnlock()
	fake.updateOpenIDConnectProviderThumbprintRequestMutex.RLock()
	defer fake.updateOpenIDConnectProviderThumbprintRequestMutex.RUnlock()
	fake.updateOpenIDConnectProviderThumbprintWithContextMutex.RLock()
	defer fake.updateOpenIDConnectProviderThumbprintWithContextMutex.RUnlock()
	fake.updateRoleMutex.RLock()
	defer fake.updateRoleMutex.RUnlock()
	fake.updateRoleDescriptionMutex.RLock()
	defer fake.updateRoleDescriptionMutex.RUnlock()
	fake.updateRoleDescriptionRequestMutex.RLock()
	defer fake.updateRoleDescriptionRequestMutex.RUnlock()
	fake.updateRoleDescriptionWithContextMutex.RLock()
	defer fake.updateRoleDescriptionWithContextMutex.RUnlock()
	fake.updateRoleRequestMutex.RLock()
	defer fake.updateRoleRequestMutex.RUnlock()
	fake.updateRoleWithContextMutex.RLock()
	defer fake.updateRoleWithContextMutex.RUnlock()
	fake.updateSAMLProviderMutex.RLock()
	defer fake.updateSAMLProviderMutex.RUnlock()
	fake.updateSAMLProviderRequestMutex.RLock()
	defer fake.updateSAMLProviderRequestMutex.RUnlock()
	fake.updateSAMLProviderWithContextMutex.RLock()
	defer fake.updateSAMLProviderWithContextMutex.RUnlock()
	fake.updateSSHPublicKeyMutex.RLock()
	defer fake.updateSSHPublicKeyMutex.RUnlock()
	fake.updateSSHPublicKeyRequestMutex.RLock()
	defer fake.updateSSHPublicKeyRequestMutex.RUnlock()
	fake.updateSSHPublicKeyWithContextMutex.RLock()
	defer fake.updateSSHPublicKeyWithContextMutex.RUnlock()
	fake.updateServerCertificateMutex.RLock()
	defer fake.updateServerCertificateMutex.RUnlock()
	fake.updateServerCertificateRequestMutex.RLock()
	defer fake.updateServerCertificateRequestMutex.RUnlock()
	fake.updateServerCertificateWithContextMutex.RLock()
	defer fake.updateServerCertificateWithContextMutex.RUnlock()
	fake.updateServiceSpecificCredentialMutex.RLock()
	defer fake.updateServiceSpecificCredentialMutex.RUnlock()
	fake.updateServiceSpecificCredentialRequestMutex.RLock()
	defer fake.updateServiceSpecificCredentialRequestMutex.RUnlock()
	fake.updateServiceSpecificCredentialWithContextMutex.RLock()
	defer fake.updateServiceSpecificCredentialWithContextMutex.RUnlock()
	fake.updateSigningCertificateMutex.RLock()
	defer fake.updateSigningCertificateMutex.RUnlock()
	fake.updateSigningCertificateRequestMutex.RLock()
	defer fake.updateSigningCertificateRequestMutex.RUnlock()
	fake.updateSigningCertificateWithContextMutex.RLock()
	defer fake.updateSigningCertificateWithContextMutex.RUnlock()
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	fake.updateUserRequestMutex.RLock()
	defer fake.updateUserRequestMutex.RUnlock()
	fake.updateUserWithContextMutex.RLock()
	defer fake.updateUserWithContextMutex.RUnlock()
	fake.uploadSSHPublicKeyMutex.RLock()
	defer fake.uploadSSHPublicKeyMutex.RUnlock()
	fake.uploadSSHPublicKeyRequestMutex.RLock()
	defer fake.uploadSSHPublicKeyRequestMutex.RUnlock()
	fake.uploadSSHPublicKeyWithContextMutex.RLock()
	defer fake.uploadSSHPublicKeyWithContextMutex.RUnlock()
	fake.uploadServerCertificateMutex.RLock()
	defer fake.uploadServerCertificateMutex.RUnlock()
	fake.uploadServerCertificateRequestMutex.RLock()
	defer fake.uploadServerCertificateRequestMutex.RUnlock()
	fake.uploadServerCertificateWithContextMutex.RLock()
	defer fake.uploadServerCertificateWithContextMutex.RUnlock()
	fake.uploadSigningCertificateMutex.RLock()
	defer fake.uploadSigningCertificateMutex.RUnlock()
	fake.uploadSigningCertificateRequestMutex.RLock()
	defer fake.uploadSigningCertificateRequestMutex.RUnlock()
	fake.uploadSigningCertificateWithContextMutex.RLock()
	defer fake.uploadSigningCertificateWithContextMutex.RUnlock()
	fake.waitUntilInstanceProfileExistsMutex.RLock()
	defer fake.waitUntilInstanceProfileExistsMutex.RUnlock()
	fake.waitUntilInstanceProfileExistsWithContextMutex.RLock()
	defer fake.waitUntilInstanceProfileExistsWithContextMutex.RUnlock()
	fake.waitUntilPolicyExistsMutex.RLock()
	defer fake.waitUntilPolicyExistsMutex.RUnlock()
	fake.waitUntilPolicyExistsWithContextMutex.RLock()
	defer fake.waitUntilPolicyExistsWithContextMutex.RUnlock()
	fake.waitUntilRoleExistsMutex.RLock()
	defer fake.waitUntilRoleExistsMutex.RUnlock()
	fake.waitUntilRoleExistsWithContextMutex.RLock()
	defer fake.waitUntilRoleExistsWithContextMutex.RUnlock()
	fake.waitUntilUserExistsMutex.RLock()
	defer fake.waitUntilUserExistsMutex.RUnlock()
	fake.waitUntilUserExistsWithContextMutex.RLock()
	defer fake.waitUntilUserExistsWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIAMAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ iamiface.IAMAPI = new(FakeIAMAPI)
