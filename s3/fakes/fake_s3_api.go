// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/aws/aws-sdk-go/service/s3/s3iface"
)

type FakeS3API struct {
	AbortMultipartUploadStub        func(*s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)
	abortMultipartUploadMutex       sync.RWMutex
	abortMultipartUploadArgsForCall []struct {
		arg1 *s3.AbortMultipartUploadInput
	}
	abortMultipartUploadReturns struct {
		result1 *s3.AbortMultipartUploadOutput
		result2 error
	}
	abortMultipartUploadReturnsOnCall map[int]struct {
		result1 *s3.AbortMultipartUploadOutput
		result2 error
	}
	AbortMultipartUploadRequestStub        func(*s3.AbortMultipartUploadInput) (*request.Request, *s3.AbortMultipartUploadOutput)
	abortMultipartUploadRequestMutex       sync.RWMutex
	abortMultipartUploadRequestArgsForCall []struct {
		arg1 *s3.AbortMultipartUploadInput
	}
	abortMultipartUploadRequestReturns struct {
		result1 *request.Request
		result2 *s3.AbortMultipartUploadOutput
	}
	abortMultipartUploadRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.AbortMultipartUploadOutput
	}
	AbortMultipartUploadWithContextStub        func(context.Context, *s3.AbortMultipartUploadInput, ...request.Option) (*s3.AbortMultipartUploadOutput, error)
	abortMultipartUploadWithContextMutex       sync.RWMutex
	abortMultipartUploadWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.AbortMultipartUploadInput
		arg3 []request.Option
	}
	abortMultipartUploadWithContextReturns struct {
		result1 *s3.AbortMultipartUploadOutput
		result2 error
	}
	abortMultipartUploadWithContextReturnsOnCall map[int]struct {
		result1 *s3.AbortMultipartUploadOutput
		result2 error
	}
	CompleteMultipartUploadStub        func(*s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)
	completeMultipartUploadMutex       sync.RWMutex
	completeMultipartUploadArgsForCall []struct {
		arg1 *s3.CompleteMultipartUploadInput
	}
	completeMultipartUploadReturns struct {
		result1 *s3.CompleteMultipartUploadOutput
		result2 error
	}
	completeMultipartUploadReturnsOnCall map[int]struct {
		result1 *s3.CompleteMultipartUploadOutput
		result2 error
	}
	CompleteMultipartUploadRequestStub        func(*s3.CompleteMultipartUploadInput) (*request.Request, *s3.CompleteMultipartUploadOutput)
	completeMultipartUploadRequestMutex       sync.RWMutex
	completeMultipartUploadRequestArgsForCall []struct {
		arg1 *s3.CompleteMultipartUploadInput
	}
	completeMultipartUploadRequestReturns struct {
		result1 *request.Request
		result2 *s3.CompleteMultipartUploadOutput
	}
	completeMultipartUploadRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.CompleteMultipartUploadOutput
	}
	CompleteMultipartUploadWithContextStub        func(context.Context, *s3.CompleteMultipartUploadInput, ...request.Option) (*s3.CompleteMultipartUploadOutput, error)
	completeMultipartUploadWithContextMutex       sync.RWMutex
	completeMultipartUploadWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.CompleteMultipartUploadInput
		arg3 []request.Option
	}
	completeMultipartUploadWithContextReturns struct {
		result1 *s3.CompleteMultipartUploadOutput
		result2 error
	}
	completeMultipartUploadWithContextReturnsOnCall map[int]struct {
		result1 *s3.CompleteMultipartUploadOutput
		result2 error
	}
	CopyObjectStub        func(*s3.CopyObjectInput) (*s3.CopyObjectOutput, error)
	copyObjectMutex       sync.RWMutex
	copyObjectArgsForCall []struct {
		arg1 *s3.CopyObjectInput
	}
	copyObjectReturns struct {
		result1 *s3.CopyObjectOutput
		result2 error
	}
	copyObjectReturnsOnCall map[int]struct {
		result1 *s3.CopyObjectOutput
		result2 error
	}
	CopyObjectRequestStub        func(*s3.CopyObjectInput) (*request.Request, *s3.CopyObjectOutput)
	copyObjectRequestMutex       sync.RWMutex
	copyObjectRequestArgsForCall []struct {
		arg1 *s3.CopyObjectInput
	}
	copyObjectRequestReturns struct {
		result1 *request.Request
		result2 *s3.CopyObjectOutput
	}
	copyObjectRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.CopyObjectOutput
	}
	CopyObjectWithContextStub        func(context.Context, *s3.CopyObjectInput, ...request.Option) (*s3.CopyObjectOutput, error)
	copyObjectWithContextMutex       sync.RWMutex
	copyObjectWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.CopyObjectInput
		arg3 []request.Option
	}
	copyObjectWithContextReturns struct {
		result1 *s3.CopyObjectOutput
		result2 error
	}
	copyObjectWithContextReturnsOnCall map[int]struct {
		result1 *s3.CopyObjectOutput
		result2 error
	}
	CreateBucketStub        func(*s3.CreateBucketInput) (*s3.CreateBucketOutput, error)
	createBucketMutex       sync.RWMutex
	createBucketArgsForCall []struct {
		arg1 *s3.CreateBucketInput
	}
	createBucketReturns struct {
		result1 *s3.CreateBucketOutput
		result2 error
	}
	createBucketReturnsOnCall map[int]struct {
		result1 *s3.CreateBucketOutput
		result2 error
	}
	CreateBucketRequestStub        func(*s3.CreateBucketInput) (*request.Request, *s3.CreateBucketOutput)
	createBucketRequestMutex       sync.RWMutex
	createBucketRequestArgsForCall []struct {
		arg1 *s3.CreateBucketInput
	}
	createBucketRequestReturns struct {
		result1 *request.Request
		result2 *s3.CreateBucketOutput
	}
	createBucketRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.CreateBucketOutput
	}
	CreateBucketWithContextStub        func(context.Context, *s3.CreateBucketInput, ...request.Option) (*s3.CreateBucketOutput, error)
	createBucketWithContextMutex       sync.RWMutex
	createBucketWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.CreateBucketInput
		arg3 []request.Option
	}
	createBucketWithContextReturns struct {
		result1 *s3.CreateBucketOutput
		result2 error
	}
	createBucketWithContextReturnsOnCall map[int]struct {
		result1 *s3.CreateBucketOutput
		result2 error
	}
	CreateMultipartUploadStub        func(*s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)
	createMultipartUploadMutex       sync.RWMutex
	createMultipartUploadArgsForCall []struct {
		arg1 *s3.CreateMultipartUploadInput
	}
	createMultipartUploadReturns struct {
		result1 *s3.CreateMultipartUploadOutput
		result2 error
	}
	createMultipartUploadReturnsOnCall map[int]struct {
		result1 *s3.CreateMultipartUploadOutput
		result2 error
	}
	CreateMultipartUploadRequestStub        func(*s3.CreateMultipartUploadInput) (*request.Request, *s3.CreateMultipartUploadOutput)
	createMultipartUploadRequestMutex       sync.RWMutex
	createMultipartUploadRequestArgsForCall []struct {
		arg1 *s3.CreateMultipartUploadInput
	}
	createMultipartUploadRequestReturns struct {
		result1 *request.Request
		result2 *s3.CreateMultipartUploadOutput
	}
	createMultipartUploadRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.CreateMultipartUploadOutput
	}
	CreateMultipartUploadWithContextStub        func(context.Context, *s3.CreateMultipartUploadInput, ...request.Option) (*s3.CreateMultipartUploadOutput, error)
	createMultipartUploadWithContextMutex       sync.RWMutex
	createMultipartUploadWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.CreateMultipartUploadInput
		arg3 []request.Option
	}
	createMultipartUploadWithContextReturns struct {
		result1 *s3.CreateMultipartUploadOutput
		result2 error
	}
	createMultipartUploadWithContextReturnsOnCall map[int]struct {
		result1 *s3.CreateMultipartUploadOutput
		result2 error
	}
	DeleteBucketStub        func(*s3.DeleteBucketInput) (*s3.DeleteBucketOutput, error)
	deleteBucketMutex       sync.RWMutex
	deleteBucketArgsForCall []struct {
		arg1 *s3.DeleteBucketInput
	}
	deleteBucketReturns struct {
		result1 *s3.DeleteBucketOutput
		result2 error
	}
	deleteBucketReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketOutput
		result2 error
	}
	DeleteBucketAnalyticsConfigurationStub        func(*s3.DeleteBucketAnalyticsConfigurationInput) (*s3.DeleteBucketAnalyticsConfigurationOutput, error)
	deleteBucketAnalyticsConfigurationMutex       sync.RWMutex
	deleteBucketAnalyticsConfigurationArgsForCall []struct {
		arg1 *s3.DeleteBucketAnalyticsConfigurationInput
	}
	deleteBucketAnalyticsConfigurationReturns struct {
		result1 *s3.DeleteBucketAnalyticsConfigurationOutput
		result2 error
	}
	deleteBucketAnalyticsConfigurationReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketAnalyticsConfigurationOutput
		result2 error
	}
	DeleteBucketAnalyticsConfigurationRequestStub        func(*s3.DeleteBucketAnalyticsConfigurationInput) (*request.Request, *s3.DeleteBucketAnalyticsConfigurationOutput)
	deleteBucketAnalyticsConfigurationRequestMutex       sync.RWMutex
	deleteBucketAnalyticsConfigurationRequestArgsForCall []struct {
		arg1 *s3.DeleteBucketAnalyticsConfigurationInput
	}
	deleteBucketAnalyticsConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *s3.DeleteBucketAnalyticsConfigurationOutput
	}
	deleteBucketAnalyticsConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.DeleteBucketAnalyticsConfigurationOutput
	}
	DeleteBucketAnalyticsConfigurationWithContextStub        func(context.Context, *s3.DeleteBucketAnalyticsConfigurationInput, ...request.Option) (*s3.DeleteBucketAnalyticsConfigurationOutput, error)
	deleteBucketAnalyticsConfigurationWithContextMutex       sync.RWMutex
	deleteBucketAnalyticsConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketAnalyticsConfigurationInput
		arg3 []request.Option
	}
	deleteBucketAnalyticsConfigurationWithContextReturns struct {
		result1 *s3.DeleteBucketAnalyticsConfigurationOutput
		result2 error
	}
	deleteBucketAnalyticsConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketAnalyticsConfigurationOutput
		result2 error
	}
	DeleteBucketCorsStub        func(*s3.DeleteBucketCorsInput) (*s3.DeleteBucketCorsOutput, error)
	deleteBucketCorsMutex       sync.RWMutex
	deleteBucketCorsArgsForCall []struct {
		arg1 *s3.DeleteBucketCorsInput
	}
	deleteBucketCorsReturns struct {
		result1 *s3.DeleteBucketCorsOutput
		result2 error
	}
	deleteBucketCorsReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketCorsOutput
		result2 error
	}
	DeleteBucketCorsRequestStub        func(*s3.DeleteBucketCorsInput) (*request.Request, *s3.DeleteBucketCorsOutput)
	deleteBucketCorsRequestMutex       sync.RWMutex
	deleteBucketCorsRequestArgsForCall []struct {
		arg1 *s3.DeleteBucketCorsInput
	}
	deleteBucketCorsRequestReturns struct {
		result1 *request.Request
		result2 *s3.DeleteBucketCorsOutput
	}
	deleteBucketCorsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.DeleteBucketCorsOutput
	}
	DeleteBucketCorsWithContextStub        func(context.Context, *s3.DeleteBucketCorsInput, ...request.Option) (*s3.DeleteBucketCorsOutput, error)
	deleteBucketCorsWithContextMutex       sync.RWMutex
	deleteBucketCorsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketCorsInput
		arg3 []request.Option
	}
	deleteBucketCorsWithContextReturns struct {
		result1 *s3.DeleteBucketCorsOutput
		result2 error
	}
	deleteBucketCorsWithContextReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketCorsOutput
		result2 error
	}
	DeleteBucketEncryptionStub        func(*s3.DeleteBucketEncryptionInput) (*s3.DeleteBucketEncryptionOutput, error)
	deleteBucketEncryptionMutex       sync.RWMutex
	deleteBucketEncryptionArgsForCall []struct {
		arg1 *s3.DeleteBucketEncryptionInput
	}
	deleteBucketEncryptionReturns struct {
		result1 *s3.DeleteBucketEncryptionOutput
		result2 error
	}
	deleteBucketEncryptionReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketEncryptionOutput
		result2 error
	}
	DeleteBucketEncryptionRequestStub        func(*s3.DeleteBucketEncryptionInput) (*request.Request, *s3.DeleteBucketEncryptionOutput)
	deleteBucketEncryptionRequestMutex       sync.RWMutex
	deleteBucketEncryptionRequestArgsForCall []struct {
		arg1 *s3.DeleteBucketEncryptionInput
	}
	deleteBucketEncryptionRequestReturns struct {
		result1 *request.Request
		result2 *s3.DeleteBucketEncryptionOutput
	}
	deleteBucketEncryptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.DeleteBucketEncryptionOutput
	}
	DeleteBucketEncryptionWithContextStub        func(context.Context, *s3.DeleteBucketEncryptionInput, ...request.Option) (*s3.DeleteBucketEncryptionOutput, error)
	deleteBucketEncryptionWithContextMutex       sync.RWMutex
	deleteBucketEncryptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketEncryptionInput
		arg3 []request.Option
	}
	deleteBucketEncryptionWithContextReturns struct {
		result1 *s3.DeleteBucketEncryptionOutput
		result2 error
	}
	deleteBucketEncryptionWithContextReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketEncryptionOutput
		result2 error
	}
	DeleteBucketInventoryConfigurationStub        func(*s3.DeleteBucketInventoryConfigurationInput) (*s3.DeleteBucketInventoryConfigurationOutput, error)
	deleteBucketInventoryConfigurationMutex       sync.RWMutex
	deleteBucketInventoryConfigurationArgsForCall []struct {
		arg1 *s3.DeleteBucketInventoryConfigurationInput
	}
	deleteBucketInventoryConfigurationReturns struct {
		result1 *s3.DeleteBucketInventoryConfigurationOutput
		result2 error
	}
	deleteBucketInventoryConfigurationReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketInventoryConfigurationOutput
		result2 error
	}
	DeleteBucketInventoryConfigurationRequestStub        func(*s3.DeleteBucketInventoryConfigurationInput) (*request.Request, *s3.DeleteBucketInventoryConfigurationOutput)
	deleteBucketInventoryConfigurationRequestMutex       sync.RWMutex
	deleteBucketInventoryConfigurationRequestArgsForCall []struct {
		arg1 *s3.DeleteBucketInventoryConfigurationInput
	}
	deleteBucketInventoryConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *s3.DeleteBucketInventoryConfigurationOutput
	}
	deleteBucketInventoryConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.DeleteBucketInventoryConfigurationOutput
	}
	DeleteBucketInventoryConfigurationWithContextStub        func(context.Context, *s3.DeleteBucketInventoryConfigurationInput, ...request.Option) (*s3.DeleteBucketInventoryConfigurationOutput, error)
	deleteBucketInventoryConfigurationWithContextMutex       sync.RWMutex
	deleteBucketInventoryConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketInventoryConfigurationInput
		arg3 []request.Option
	}
	deleteBucketInventoryConfigurationWithContextReturns struct {
		result1 *s3.DeleteBucketInventoryConfigurationOutput
		result2 error
	}
	deleteBucketInventoryConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketInventoryConfigurationOutput
		result2 error
	}
	DeleteBucketLifecycleStub        func(*s3.DeleteBucketLifecycleInput) (*s3.DeleteBucketLifecycleOutput, error)
	deleteBucketLifecycleMutex       sync.RWMutex
	deleteBucketLifecycleArgsForCall []struct {
		arg1 *s3.DeleteBucketLifecycleInput
	}
	deleteBucketLifecycleReturns struct {
		result1 *s3.DeleteBucketLifecycleOutput
		result2 error
	}
	deleteBucketLifecycleReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketLifecycleOutput
		result2 error
	}
	DeleteBucketLifecycleRequestStub        func(*s3.DeleteBucketLifecycleInput) (*request.Request, *s3.DeleteBucketLifecycleOutput)
	deleteBucketLifecycleRequestMutex       sync.RWMutex
	deleteBucketLifecycleRequestArgsForCall []struct {
		arg1 *s3.DeleteBucketLifecycleInput
	}
	deleteBucketLifecycleRequestReturns struct {
		result1 *request.Request
		result2 *s3.DeleteBucketLifecycleOutput
	}
	deleteBucketLifecycleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.DeleteBucketLifecycleOutput
	}
	DeleteBucketLifecycleWithContextStub        func(context.Context, *s3.DeleteBucketLifecycleInput, ...request.Option) (*s3.DeleteBucketLifecycleOutput, error)
	deleteBucketLifecycleWithContextMutex       sync.RWMutex
	deleteBucketLifecycleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketLifecycleInput
		arg3 []request.Option
	}
	deleteBucketLifecycleWithContextReturns struct {
		result1 *s3.DeleteBucketLifecycleOutput
		result2 error
	}
	deleteBucketLifecycleWithContextReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketLifecycleOutput
		result2 error
	}
	DeleteBucketMetricsConfigurationStub        func(*s3.DeleteBucketMetricsConfigurationInput) (*s3.DeleteBucketMetricsConfigurationOutput, error)
	deleteBucketMetricsConfigurationMutex       sync.RWMutex
	deleteBucketMetricsConfigurationArgsForCall []struct {
		arg1 *s3.DeleteBucketMetricsConfigurationInput
	}
	deleteBucketMetricsConfigurationReturns struct {
		result1 *s3.DeleteBucketMetricsConfigurationOutput
		result2 error
	}
	deleteBucketMetricsConfigurationReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketMetricsConfigurationOutput
		result2 error
	}
	DeleteBucketMetricsConfigurationRequestStub        func(*s3.DeleteBucketMetricsConfigurationInput) (*request.Request, *s3.DeleteBucketMetricsConfigurationOutput)
	deleteBucketMetricsConfigurationRequestMutex       sync.RWMutex
	deleteBucketMetricsConfigurationRequestArgsForCall []struct {
		arg1 *s3.DeleteBucketMetricsConfigurationInput
	}
	deleteBucketMetricsConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *s3.DeleteBucketMetricsConfigurationOutput
	}
	deleteBucketMetricsConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.DeleteBucketMetricsConfigurationOutput
	}
	DeleteBucketMetricsConfigurationWithContextStub        func(context.Context, *s3.DeleteBucketMetricsConfigurationInput, ...request.Option) (*s3.DeleteBucketMetricsConfigurationOutput, error)
	deleteBucketMetricsConfigurationWithContextMutex       sync.RWMutex
	deleteBucketMetricsConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketMetricsConfigurationInput
		arg3 []request.Option
	}
	deleteBucketMetricsConfigurationWithContextReturns struct {
		result1 *s3.DeleteBucketMetricsConfigurationOutput
		result2 error
	}
	deleteBucketMetricsConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketMetricsConfigurationOutput
		result2 error
	}
	DeleteBucketPolicyStub        func(*s3.DeleteBucketPolicyInput) (*s3.DeleteBucketPolicyOutput, error)
	deleteBucketPolicyMutex       sync.RWMutex
	deleteBucketPolicyArgsForCall []struct {
		arg1 *s3.DeleteBucketPolicyInput
	}
	deleteBucketPolicyReturns struct {
		result1 *s3.DeleteBucketPolicyOutput
		result2 error
	}
	deleteBucketPolicyReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketPolicyOutput
		result2 error
	}
	DeleteBucketPolicyRequestStub        func(*s3.DeleteBucketPolicyInput) (*request.Request, *s3.DeleteBucketPolicyOutput)
	deleteBucketPolicyRequestMutex       sync.RWMutex
	deleteBucketPolicyRequestArgsForCall []struct {
		arg1 *s3.DeleteBucketPolicyInput
	}
	deleteBucketPolicyRequestReturns struct {
		result1 *request.Request
		result2 *s3.DeleteBucketPolicyOutput
	}
	deleteBucketPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.DeleteBucketPolicyOutput
	}
	DeleteBucketPolicyWithContextStub        func(context.Context, *s3.DeleteBucketPolicyInput, ...request.Option) (*s3.DeleteBucketPolicyOutput, error)
	deleteBucketPolicyWithContextMutex       sync.RWMutex
	deleteBucketPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketPolicyInput
		arg3 []request.Option
	}
	deleteBucketPolicyWithContextReturns struct {
		result1 *s3.DeleteBucketPolicyOutput
		result2 error
	}
	deleteBucketPolicyWithContextReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketPolicyOutput
		result2 error
	}
	DeleteBucketReplicationStub        func(*s3.DeleteBucketReplicationInput) (*s3.DeleteBucketReplicationOutput, error)
	deleteBucketReplicationMutex       sync.RWMutex
	deleteBucketReplicationArgsForCall []struct {
		arg1 *s3.DeleteBucketReplicationInput
	}
	deleteBucketReplicationReturns struct {
		result1 *s3.DeleteBucketReplicationOutput
		result2 error
	}
	deleteBucketReplicationReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketReplicationOutput
		result2 error
	}
	DeleteBucketReplicationRequestStub        func(*s3.DeleteBucketReplicationInput) (*request.Request, *s3.DeleteBucketReplicationOutput)
	deleteBucketReplicationRequestMutex       sync.RWMutex
	deleteBucketReplicationRequestArgsForCall []struct {
		arg1 *s3.DeleteBucketReplicationInput
	}
	deleteBucketReplicationRequestReturns struct {
		result1 *request.Request
		result2 *s3.DeleteBucketReplicationOutput
	}
	deleteBucketReplicationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.DeleteBucketReplicationOutput
	}
	DeleteBucketReplicationWithContextStub        func(context.Context, *s3.DeleteBucketReplicationInput, ...request.Option) (*s3.DeleteBucketReplicationOutput, error)
	deleteBucketReplicationWithContextMutex       sync.RWMutex
	deleteBucketReplicationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketReplicationInput
		arg3 []request.Option
	}
	deleteBucketReplicationWithContextReturns struct {
		result1 *s3.DeleteBucketReplicationOutput
		result2 error
	}
	deleteBucketReplicationWithContextReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketReplicationOutput
		result2 error
	}
	DeleteBucketRequestStub        func(*s3.DeleteBucketInput) (*request.Request, *s3.DeleteBucketOutput)
	deleteBucketRequestMutex       sync.RWMutex
	deleteBucketRequestArgsForCall []struct {
		arg1 *s3.DeleteBucketInput
	}
	deleteBucketRequestReturns struct {
		result1 *request.Request
		result2 *s3.DeleteBucketOutput
	}
	deleteBucketRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.DeleteBucketOutput
	}
	DeleteBucketTaggingStub        func(*s3.DeleteBucketTaggingInput) (*s3.DeleteBucketTaggingOutput, error)
	deleteBucketTaggingMutex       sync.RWMutex
	deleteBucketTaggingArgsForCall []struct {
		arg1 *s3.DeleteBucketTaggingInput
	}
	deleteBucketTaggingReturns struct {
		result1 *s3.DeleteBucketTaggingOutput
		result2 error
	}
	deleteBucketTaggingReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketTaggingOutput
		result2 error
	}
	DeleteBucketTaggingRequestStub        func(*s3.DeleteBucketTaggingInput) (*request.Request, *s3.DeleteBucketTaggingOutput)
	deleteBucketTaggingRequestMutex       sync.RWMutex
	deleteBucketTaggingRequestArgsForCall []struct {
		arg1 *s3.DeleteBucketTaggingInput
	}
	deleteBucketTaggingRequestReturns struct {
		result1 *request.Request
		result2 *s3.DeleteBucketTaggingOutput
	}
	deleteBucketTaggingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.DeleteBucketTaggingOutput
	}
	DeleteBucketTaggingWithContextStub        func(context.Context, *s3.DeleteBucketTaggingInput, ...request.Option) (*s3.DeleteBucketTaggingOutput, error)
	deleteBucketTaggingWithContextMutex       sync.RWMutex
	deleteBucketTaggingWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketTaggingInput
		arg3 []request.Option
	}
	deleteBucketTaggingWithContextReturns struct {
		result1 *s3.DeleteBucketTaggingOutput
		result2 error
	}
	deleteBucketTaggingWithContextReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketTaggingOutput
		result2 error
	}
	DeleteBucketWebsiteStub        func(*s3.DeleteBucketWebsiteInput) (*s3.DeleteBucketWebsiteOutput, error)
	deleteBucketWebsiteMutex       sync.RWMutex
	deleteBucketWebsiteArgsForCall []struct {
		arg1 *s3.DeleteBucketWebsiteInput
	}
	deleteBucketWebsiteReturns struct {
		result1 *s3.DeleteBucketWebsiteOutput
		result2 error
	}
	deleteBucketWebsiteReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketWebsiteOutput
		result2 error
	}
	DeleteBucketWebsiteRequestStub        func(*s3.DeleteBucketWebsiteInput) (*request.Request, *s3.DeleteBucketWebsiteOutput)
	deleteBucketWebsiteRequestMutex       sync.RWMutex
	deleteBucketWebsiteRequestArgsForCall []struct {
		arg1 *s3.DeleteBucketWebsiteInput
	}
	deleteBucketWebsiteRequestReturns struct {
		result1 *request.Request
		result2 *s3.DeleteBucketWebsiteOutput
	}
	deleteBucketWebsiteRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.DeleteBucketWebsiteOutput
	}
	DeleteBucketWebsiteWithContextStub        func(context.Context, *s3.DeleteBucketWebsiteInput, ...request.Option) (*s3.DeleteBucketWebsiteOutput, error)
	deleteBucketWebsiteWithContextMutex       sync.RWMutex
	deleteBucketWebsiteWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketWebsiteInput
		arg3 []request.Option
	}
	deleteBucketWebsiteWithContextReturns struct {
		result1 *s3.DeleteBucketWebsiteOutput
		result2 error
	}
	deleteBucketWebsiteWithContextReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketWebsiteOutput
		result2 error
	}
	DeleteBucketWithContextStub        func(context.Context, *s3.DeleteBucketInput, ...request.Option) (*s3.DeleteBucketOutput, error)
	deleteBucketWithContextMutex       sync.RWMutex
	deleteBucketWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketInput
		arg3 []request.Option
	}
	deleteBucketWithContextReturns struct {
		result1 *s3.DeleteBucketOutput
		result2 error
	}
	deleteBucketWithContextReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketOutput
		result2 error
	}
	DeleteObjectStub        func(*s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)
	deleteObjectMutex       sync.RWMutex
	deleteObjectArgsForCall []struct {
		arg1 *s3.DeleteObjectInput
	}
	deleteObjectReturns struct {
		result1 *s3.DeleteObjectOutput
		result2 error
	}
	deleteObjectReturnsOnCall map[int]struct {
		result1 *s3.DeleteObjectOutput
		result2 error
	}
	DeleteObjectRequestStub        func(*s3.DeleteObjectInput) (*request.Request, *s3.DeleteObjectOutput)
	deleteObjectRequestMutex       sync.RWMutex
	deleteObjectRequestArgsForCall []struct {
		arg1 *s3.DeleteObjectInput
	}
	deleteObjectRequestReturns struct {
		result1 *request.Request
		result2 *s3.DeleteObjectOutput
	}
	deleteObjectRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.DeleteObjectOutput
	}
	DeleteObjectTaggingStub        func(*s3.DeleteObjectTaggingInput) (*s3.DeleteObjectTaggingOutput, error)
	deleteObjectTaggingMutex       sync.RWMutex
	deleteObjectTaggingArgsForCall []struct {
		arg1 *s3.DeleteObjectTaggingInput
	}
	deleteObjectTaggingReturns struct {
		result1 *s3.DeleteObjectTaggingOutput
		result2 error
	}
	deleteObjectTaggingReturnsOnCall map[int]struct {
		result1 *s3.DeleteObjectTaggingOutput
		result2 error
	}
	DeleteObjectTaggingRequestStub        func(*s3.DeleteObjectTaggingInput) (*request.Request, *s3.DeleteObjectTaggingOutput)
	deleteObjectTaggingRequestMutex       sync.RWMutex
	deleteObjectTaggingRequestArgsForCall []struct {
		arg1 *s3.DeleteObjectTaggingInput
	}
	deleteObjectTaggingRequestReturns struct {
		result1 *request.Request
		result2 *s3.DeleteObjectTaggingOutput
	}
	deleteObjectTaggingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.DeleteObjectTaggingOutput
	}
	DeleteObjectTaggingWithContextStub        func(context.Context, *s3.DeleteObjectTaggingInput, ...request.Option) (*s3.DeleteObjectTaggingOutput, error)
	deleteObjectTaggingWithContextMutex       sync.RWMutex
	deleteObjectTaggingWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteObjectTaggingInput
		arg3 []request.Option
	}
	deleteObjectTaggingWithContextReturns struct {
		result1 *s3.DeleteObjectTaggingOutput
		result2 error
	}
	deleteObjectTaggingWithContextReturnsOnCall map[int]struct {
		result1 *s3.DeleteObjectTaggingOutput
		result2 error
	}
	DeleteObjectWithContextStub        func(context.Context, *s3.DeleteObjectInput, ...request.Option) (*s3.DeleteObjectOutput, error)
	deleteObjectWithContextMutex       sync.RWMutex
	deleteObjectWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteObjectInput
		arg3 []request.Option
	}
	deleteObjectWithContextReturns struct {
		result1 *s3.DeleteObjectOutput
		result2 error
	}
	deleteObjectWithContextReturnsOnCall map[int]struct {
		result1 *s3.DeleteObjectOutput
		result2 error
	}
	DeleteObjectsStub        func(*s3.DeleteObjectsInput) (*s3.DeleteObjectsOutput, error)
	deleteObjectsMutex       sync.RWMutex
	deleteObjectsArgsForCall []struct {
		arg1 *s3.DeleteObjectsInput
	}
	deleteObjectsReturns struct {
		result1 *s3.DeleteObjectsOutput
		result2 error
	}
	deleteObjectsReturnsOnCall map[int]struct {
		result1 *s3.DeleteObjectsOutput
		result2 error
	}
	DeleteObjectsRequestStub        func(*s3.DeleteObjectsInput) (*request.Request, *s3.DeleteObjectsOutput)
	deleteObjectsRequestMutex       sync.RWMutex
	deleteObjectsRequestArgsForCall []struct {
		arg1 *s3.DeleteObjectsInput
	}
	deleteObjectsRequestReturns struct {
		result1 *request.Request
		result2 *s3.DeleteObjectsOutput
	}
	deleteObjectsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.DeleteObjectsOutput
	}
	DeleteObjectsWithContextStub        func(context.Context, *s3.DeleteObjectsInput, ...request.Option) (*s3.DeleteObjectsOutput, error)
	deleteObjectsWithContextMutex       sync.RWMutex
	deleteObjectsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteObjectsInput
		arg3 []request.Option
	}
	deleteObjectsWithContextReturns struct {
		result1 *s3.DeleteObjectsOutput
		result2 error
	}
	deleteObjectsWithContextReturnsOnCall map[int]struct {
		result1 *s3.DeleteObjectsOutput
		result2 error
	}
	DeletePublicAccessBlockStub        func(*s3.DeletePublicAccessBlockInput) (*s3.DeletePublicAccessBlockOutput, error)
	deletePublicAccessBlockMutex       sync.RWMutex
	deletePublicAccessBlockArgsForCall []struct {
		arg1 *s3.DeletePublicAccessBlockInput
	}
	deletePublicAccessBlockReturns struct {
		result1 *s3.DeletePublicAccessBlockOutput
		result2 error
	}
	deletePublicAccessBlockReturnsOnCall map[int]struct {
		result1 *s3.DeletePublicAccessBlockOutput
		result2 error
	}
	DeletePublicAccessBlockRequestStub        func(*s3.DeletePublicAccessBlockInput) (*request.Request, *s3.DeletePublicAccessBlockOutput)
	deletePublicAccessBlockRequestMutex       sync.RWMutex
	deletePublicAccessBlockRequestArgsForCall []struct {
		arg1 *s3.DeletePublicAccessBlockInput
	}
	deletePublicAccessBlockRequestReturns struct {
		result1 *request.Request
		result2 *s3.DeletePublicAccessBlockOutput
	}
	deletePublicAccessBlockRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.DeletePublicAccessBlockOutput
	}
	DeletePublicAccessBlockWithContextStub        func(context.Context, *s3.DeletePublicAccessBlockInput, ...request.Option) (*s3.DeletePublicAccessBlockOutput, error)
	deletePublicAccessBlockWithContextMutex       sync.RWMutex
	deletePublicAccessBlockWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeletePublicAccessBlockInput
		arg3 []request.Option
	}
	deletePublicAccessBlockWithContextReturns struct {
		result1 *s3.DeletePublicAccessBlockOutput
		result2 error
	}
	deletePublicAccessBlockWithContextReturnsOnCall map[int]struct {
		result1 *s3.DeletePublicAccessBlockOutput
		result2 error
	}
	GetBucketAccelerateConfigurationStub        func(*s3.GetBucketAccelerateConfigurationInput) (*s3.GetBucketAccelerateConfigurationOutput, error)
	getBucketAccelerateConfigurationMutex       sync.RWMutex
	getBucketAccelerateConfigurationArgsForCall []struct {
		arg1 *s3.GetBucketAccelerateConfigurationInput
	}
	getBucketAccelerateConfigurationReturns struct {
		result1 *s3.GetBucketAccelerateConfigurationOutput
		result2 error
	}
	getBucketAccelerateConfigurationReturnsOnCall map[int]struct {
		result1 *s3.GetBucketAccelerateConfigurationOutput
		result2 error
	}
	GetBucketAccelerateConfigurationRequestStub        func(*s3.GetBucketAccelerateConfigurationInput) (*request.Request, *s3.GetBucketAccelerateConfigurationOutput)
	getBucketAccelerateConfigurationRequestMutex       sync.RWMutex
	getBucketAccelerateConfigurationRequestArgsForCall []struct {
		arg1 *s3.GetBucketAccelerateConfigurationInput
	}
	getBucketAccelerateConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketAccelerateConfigurationOutput
	}
	getBucketAccelerateConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketAccelerateConfigurationOutput
	}
	GetBucketAccelerateConfigurationWithContextStub        func(context.Context, *s3.GetBucketAccelerateConfigurationInput, ...request.Option) (*s3.GetBucketAccelerateConfigurationOutput, error)
	getBucketAccelerateConfigurationWithContextMutex       sync.RWMutex
	getBucketAccelerateConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketAccelerateConfigurationInput
		arg3 []request.Option
	}
	getBucketAccelerateConfigurationWithContextReturns struct {
		result1 *s3.GetBucketAccelerateConfigurationOutput
		result2 error
	}
	getBucketAccelerateConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketAccelerateConfigurationOutput
		result2 error
	}
	GetBucketAclStub        func(*s3.GetBucketAclInput) (*s3.GetBucketAclOutput, error)
	getBucketAclMutex       sync.RWMutex
	getBucketAclArgsForCall []struct {
		arg1 *s3.GetBucketAclInput
	}
	getBucketAclReturns struct {
		result1 *s3.GetBucketAclOutput
		result2 error
	}
	getBucketAclReturnsOnCall map[int]struct {
		result1 *s3.GetBucketAclOutput
		result2 error
	}
	GetBucketAclRequestStub        func(*s3.GetBucketAclInput) (*request.Request, *s3.GetBucketAclOutput)
	getBucketAclRequestMutex       sync.RWMutex
	getBucketAclRequestArgsForCall []struct {
		arg1 *s3.GetBucketAclInput
	}
	getBucketAclRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketAclOutput
	}
	getBucketAclRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketAclOutput
	}
	GetBucketAclWithContextStub        func(context.Context, *s3.GetBucketAclInput, ...request.Option) (*s3.GetBucketAclOutput, error)
	getBucketAclWithContextMutex       sync.RWMutex
	getBucketAclWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketAclInput
		arg3 []request.Option
	}
	getBucketAclWithContextReturns struct {
		result1 *s3.GetBucketAclOutput
		result2 error
	}
	getBucketAclWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketAclOutput
		result2 error
	}
	GetBucketAnalyticsConfigurationStub        func(*s3.GetBucketAnalyticsConfigurationInput) (*s3.GetBucketAnalyticsConfigurationOutput, error)
	getBucketAnalyticsConfigurationMutex       sync.RWMutex
	getBucketAnalyticsConfigurationArgsForCall []struct {
		arg1 *s3.GetBucketAnalyticsConfigurationInput
	}
	getBucketAnalyticsConfigurationReturns struct {
		result1 *s3.GetBucketAnalyticsConfigurationOutput
		result2 error
	}
	getBucketAnalyticsConfigurationReturnsOnCall map[int]struct {
		result1 *s3.GetBucketAnalyticsConfigurationOutput
		result2 error
	}
	GetBucketAnalyticsConfigurationRequestStub        func(*s3.GetBucketAnalyticsConfigurationInput) (*request.Request, *s3.GetBucketAnalyticsConfigurationOutput)
	getBucketAnalyticsConfigurationRequestMutex       sync.RWMutex
	getBucketAnalyticsConfigurationRequestArgsForCall []struct {
		arg1 *s3.GetBucketAnalyticsConfigurationInput
	}
	getBucketAnalyticsConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketAnalyticsConfigurationOutput
	}
	getBucketAnalyticsConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketAnalyticsConfigurationOutput
	}
	GetBucketAnalyticsConfigurationWithContextStub        func(context.Context, *s3.GetBucketAnalyticsConfigurationInput, ...request.Option) (*s3.GetBucketAnalyticsConfigurationOutput, error)
	getBucketAnalyticsConfigurationWithContextMutex       sync.RWMutex
	getBucketAnalyticsConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketAnalyticsConfigurationInput
		arg3 []request.Option
	}
	getBucketAnalyticsConfigurationWithContextReturns struct {
		result1 *s3.GetBucketAnalyticsConfigurationOutput
		result2 error
	}
	getBucketAnalyticsConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketAnalyticsConfigurationOutput
		result2 error
	}
	GetBucketCorsStub        func(*s3.GetBucketCorsInput) (*s3.GetBucketCorsOutput, error)
	getBucketCorsMutex       sync.RWMutex
	getBucketCorsArgsForCall []struct {
		arg1 *s3.GetBucketCorsInput
	}
	getBucketCorsReturns struct {
		result1 *s3.GetBucketCorsOutput
		result2 error
	}
	getBucketCorsReturnsOnCall map[int]struct {
		result1 *s3.GetBucketCorsOutput
		result2 error
	}
	GetBucketCorsRequestStub        func(*s3.GetBucketCorsInput) (*request.Request, *s3.GetBucketCorsOutput)
	getBucketCorsRequestMutex       sync.RWMutex
	getBucketCorsRequestArgsForCall []struct {
		arg1 *s3.GetBucketCorsInput
	}
	getBucketCorsRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketCorsOutput
	}
	getBucketCorsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketCorsOutput
	}
	GetBucketCorsWithContextStub        func(context.Context, *s3.GetBucketCorsInput, ...request.Option) (*s3.GetBucketCorsOutput, error)
	getBucketCorsWithContextMutex       sync.RWMutex
	getBucketCorsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketCorsInput
		arg3 []request.Option
	}
	getBucketCorsWithContextReturns struct {
		result1 *s3.GetBucketCorsOutput
		result2 error
	}
	getBucketCorsWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketCorsOutput
		result2 error
	}
	GetBucketEncryptionStub        func(*s3.GetBucketEncryptionInput) (*s3.GetBucketEncryptionOutput, error)
	getBucketEncryptionMutex       sync.RWMutex
	getBucketEncryptionArgsForCall []struct {
		arg1 *s3.GetBucketEncryptionInput
	}
	getBucketEncryptionReturns struct {
		result1 *s3.GetBucketEncryptionOutput
		result2 error
	}
	getBucketEncryptionReturnsOnCall map[int]struct {
		result1 *s3.GetBucketEncryptionOutput
		result2 error
	}
	GetBucketEncryptionRequestStub        func(*s3.GetBucketEncryptionInput) (*request.Request, *s3.GetBucketEncryptionOutput)
	getBucketEncryptionRequestMutex       sync.RWMutex
	getBucketEncryptionRequestArgsForCall []struct {
		arg1 *s3.GetBucketEncryptionInput
	}
	getBucketEncryptionRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketEncryptionOutput
	}
	getBucketEncryptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketEncryptionOutput
	}
	GetBucketEncryptionWithContextStub        func(context.Context, *s3.GetBucketEncryptionInput, ...request.Option) (*s3.GetBucketEncryptionOutput, error)
	getBucketEncryptionWithContextMutex       sync.RWMutex
	getBucketEncryptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketEncryptionInput
		arg3 []request.Option
	}
	getBucketEncryptionWithContextReturns struct {
		result1 *s3.GetBucketEncryptionOutput
		result2 error
	}
	getBucketEncryptionWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketEncryptionOutput
		result2 error
	}
	GetBucketInventoryConfigurationStub        func(*s3.GetBucketInventoryConfigurationInput) (*s3.GetBucketInventoryConfigurationOutput, error)
	getBucketInventoryConfigurationMutex       sync.RWMutex
	getBucketInventoryConfigurationArgsForCall []struct {
		arg1 *s3.GetBucketInventoryConfigurationInput
	}
	getBucketInventoryConfigurationReturns struct {
		result1 *s3.GetBucketInventoryConfigurationOutput
		result2 error
	}
	getBucketInventoryConfigurationReturnsOnCall map[int]struct {
		result1 *s3.GetBucketInventoryConfigurationOutput
		result2 error
	}
	GetBucketInventoryConfigurationRequestStub        func(*s3.GetBucketInventoryConfigurationInput) (*request.Request, *s3.GetBucketInventoryConfigurationOutput)
	getBucketInventoryConfigurationRequestMutex       sync.RWMutex
	getBucketInventoryConfigurationRequestArgsForCall []struct {
		arg1 *s3.GetBucketInventoryConfigurationInput
	}
	getBucketInventoryConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketInventoryConfigurationOutput
	}
	getBucketInventoryConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketInventoryConfigurationOutput
	}
	GetBucketInventoryConfigurationWithContextStub        func(context.Context, *s3.GetBucketInventoryConfigurationInput, ...request.Option) (*s3.GetBucketInventoryConfigurationOutput, error)
	getBucketInventoryConfigurationWithContextMutex       sync.RWMutex
	getBucketInventoryConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketInventoryConfigurationInput
		arg3 []request.Option
	}
	getBucketInventoryConfigurationWithContextReturns struct {
		result1 *s3.GetBucketInventoryConfigurationOutput
		result2 error
	}
	getBucketInventoryConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketInventoryConfigurationOutput
		result2 error
	}
	GetBucketLifecycleStub        func(*s3.GetBucketLifecycleInput) (*s3.GetBucketLifecycleOutput, error)
	getBucketLifecycleMutex       sync.RWMutex
	getBucketLifecycleArgsForCall []struct {
		arg1 *s3.GetBucketLifecycleInput
	}
	getBucketLifecycleReturns struct {
		result1 *s3.GetBucketLifecycleOutput
		result2 error
	}
	getBucketLifecycleReturnsOnCall map[int]struct {
		result1 *s3.GetBucketLifecycleOutput
		result2 error
	}
	GetBucketLifecycleConfigurationStub        func(*s3.GetBucketLifecycleConfigurationInput) (*s3.GetBucketLifecycleConfigurationOutput, error)
	getBucketLifecycleConfigurationMutex       sync.RWMutex
	getBucketLifecycleConfigurationArgsForCall []struct {
		arg1 *s3.GetBucketLifecycleConfigurationInput
	}
	getBucketLifecycleConfigurationReturns struct {
		result1 *s3.GetBucketLifecycleConfigurationOutput
		result2 error
	}
	getBucketLifecycleConfigurationReturnsOnCall map[int]struct {
		result1 *s3.GetBucketLifecycleConfigurationOutput
		result2 error
	}
	GetBucketLifecycleConfigurationRequestStub        func(*s3.GetBucketLifecycleConfigurationInput) (*request.Request, *s3.GetBucketLifecycleConfigurationOutput)
	getBucketLifecycleConfigurationRequestMutex       sync.RWMutex
	getBucketLifecycleConfigurationRequestArgsForCall []struct {
		arg1 *s3.GetBucketLifecycleConfigurationInput
	}
	getBucketLifecycleConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketLifecycleConfigurationOutput
	}
	getBucketLifecycleConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketLifecycleConfigurationOutput
	}
	GetBucketLifecycleConfigurationWithContextStub        func(context.Context, *s3.GetBucketLifecycleConfigurationInput, ...request.Option) (*s3.GetBucketLifecycleConfigurationOutput, error)
	getBucketLifecycleConfigurationWithContextMutex       sync.RWMutex
	getBucketLifecycleConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketLifecycleConfigurationInput
		arg3 []request.Option
	}
	getBucketLifecycleConfigurationWithContextReturns struct {
		result1 *s3.GetBucketLifecycleConfigurationOutput
		result2 error
	}
	getBucketLifecycleConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketLifecycleConfigurationOutput
		result2 error
	}
	GetBucketLifecycleRequestStub        func(*s3.GetBucketLifecycleInput) (*request.Request, *s3.GetBucketLifecycleOutput)
	getBucketLifecycleRequestMutex       sync.RWMutex
	getBucketLifecycleRequestArgsForCall []struct {
		arg1 *s3.GetBucketLifecycleInput
	}
	getBucketLifecycleRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketLifecycleOutput
	}
	getBucketLifecycleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketLifecycleOutput
	}
	GetBucketLifecycleWithContextStub        func(context.Context, *s3.GetBucketLifecycleInput, ...request.Option) (*s3.GetBucketLifecycleOutput, error)
	getBucketLifecycleWithContextMutex       sync.RWMutex
	getBucketLifecycleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketLifecycleInput
		arg3 []request.Option
	}
	getBucketLifecycleWithContextReturns struct {
		result1 *s3.GetBucketLifecycleOutput
		result2 error
	}
	getBucketLifecycleWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketLifecycleOutput
		result2 error
	}
	GetBucketLocationStub        func(*s3.GetBucketLocationInput) (*s3.GetBucketLocationOutput, error)
	getBucketLocationMutex       sync.RWMutex
	getBucketLocationArgsForCall []struct {
		arg1 *s3.GetBucketLocationInput
	}
	getBucketLocationReturns struct {
		result1 *s3.GetBucketLocationOutput
		result2 error
	}
	getBucketLocationReturnsOnCall map[int]struct {
		result1 *s3.GetBucketLocationOutput
		result2 error
	}
	GetBucketLocationRequestStub        func(*s3.GetBucketLocationInput) (*request.Request, *s3.GetBucketLocationOutput)
	getBucketLocationRequestMutex       sync.RWMutex
	getBucketLocationRequestArgsForCall []struct {
		arg1 *s3.GetBucketLocationInput
	}
	getBucketLocationRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketLocationOutput
	}
	getBucketLocationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketLocationOutput
	}
	GetBucketLocationWithContextStub        func(context.Context, *s3.GetBucketLocationInput, ...request.Option) (*s3.GetBucketLocationOutput, error)
	getBucketLocationWithContextMutex       sync.RWMutex
	getBucketLocationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketLocationInput
		arg3 []request.Option
	}
	getBucketLocationWithContextReturns struct {
		result1 *s3.GetBucketLocationOutput
		result2 error
	}
	getBucketLocationWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketLocationOutput
		result2 error
	}
	GetBucketLoggingStub        func(*s3.GetBucketLoggingInput) (*s3.GetBucketLoggingOutput, error)
	getBucketLoggingMutex       sync.RWMutex
	getBucketLoggingArgsForCall []struct {
		arg1 *s3.GetBucketLoggingInput
	}
	getBucketLoggingReturns struct {
		result1 *s3.GetBucketLoggingOutput
		result2 error
	}
	getBucketLoggingReturnsOnCall map[int]struct {
		result1 *s3.GetBucketLoggingOutput
		result2 error
	}
	GetBucketLoggingRequestStub        func(*s3.GetBucketLoggingInput) (*request.Request, *s3.GetBucketLoggingOutput)
	getBucketLoggingRequestMutex       sync.RWMutex
	getBucketLoggingRequestArgsForCall []struct {
		arg1 *s3.GetBucketLoggingInput
	}
	getBucketLoggingRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketLoggingOutput
	}
	getBucketLoggingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketLoggingOutput
	}
	GetBucketLoggingWithContextStub        func(context.Context, *s3.GetBucketLoggingInput, ...request.Option) (*s3.GetBucketLoggingOutput, error)
	getBucketLoggingWithContextMutex       sync.RWMutex
	getBucketLoggingWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketLoggingInput
		arg3 []request.Option
	}
	getBucketLoggingWithContextReturns struct {
		result1 *s3.GetBucketLoggingOutput
		result2 error
	}
	getBucketLoggingWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketLoggingOutput
		result2 error
	}
	GetBucketMetricsConfigurationStub        func(*s3.GetBucketMetricsConfigurationInput) (*s3.GetBucketMetricsConfigurationOutput, error)
	getBucketMetricsConfigurationMutex       sync.RWMutex
	getBucketMetricsConfigurationArgsForCall []struct {
		arg1 *s3.GetBucketMetricsConfigurationInput
	}
	getBucketMetricsConfigurationReturns struct {
		result1 *s3.GetBucketMetricsConfigurationOutput
		result2 error
	}
	getBucketMetricsConfigurationReturnsOnCall map[int]struct {
		result1 *s3.GetBucketMetricsConfigurationOutput
		result2 error
	}
	GetBucketMetricsConfigurationRequestStub        func(*s3.GetBucketMetricsConfigurationInput) (*request.Request, *s3.GetBucketMetricsConfigurationOutput)
	getBucketMetricsConfigurationRequestMutex       sync.RWMutex
	getBucketMetricsConfigurationRequestArgsForCall []struct {
		arg1 *s3.GetBucketMetricsConfigurationInput
	}
	getBucketMetricsConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketMetricsConfigurationOutput
	}
	getBucketMetricsConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketMetricsConfigurationOutput
	}
	GetBucketMetricsConfigurationWithContextStub        func(context.Context, *s3.GetBucketMetricsConfigurationInput, ...request.Option) (*s3.GetBucketMetricsConfigurationOutput, error)
	getBucketMetricsConfigurationWithContextMutex       sync.RWMutex
	getBucketMetricsConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketMetricsConfigurationInput
		arg3 []request.Option
	}
	getBucketMetricsConfigurationWithContextReturns struct {
		result1 *s3.GetBucketMetricsConfigurationOutput
		result2 error
	}
	getBucketMetricsConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketMetricsConfigurationOutput
		result2 error
	}
	GetBucketNotificationStub        func(*s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfigurationDeprecated, error)
	getBucketNotificationMutex       sync.RWMutex
	getBucketNotificationArgsForCall []struct {
		arg1 *s3.GetBucketNotificationConfigurationRequest
	}
	getBucketNotificationReturns struct {
		result1 *s3.NotificationConfigurationDeprecated
		result2 error
	}
	getBucketNotificationReturnsOnCall map[int]struct {
		result1 *s3.NotificationConfigurationDeprecated
		result2 error
	}
	GetBucketNotificationConfigurationStub        func(*s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfiguration, error)
	getBucketNotificationConfigurationMutex       sync.RWMutex
	getBucketNotificationConfigurationArgsForCall []struct {
		arg1 *s3.GetBucketNotificationConfigurationRequest
	}
	getBucketNotificationConfigurationReturns struct {
		result1 *s3.NotificationConfiguration
		result2 error
	}
	getBucketNotificationConfigurationReturnsOnCall map[int]struct {
		result1 *s3.NotificationConfiguration
		result2 error
	}
	GetBucketNotificationConfigurationRequestStub        func(*s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfiguration)
	getBucketNotificationConfigurationRequestMutex       sync.RWMutex
	getBucketNotificationConfigurationRequestArgsForCall []struct {
		arg1 *s3.GetBucketNotificationConfigurationRequest
	}
	getBucketNotificationConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *s3.NotificationConfiguration
	}
	getBucketNotificationConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.NotificationConfiguration
	}
	GetBucketNotificationConfigurationWithContextStub        func(context.Context, *s3.GetBucketNotificationConfigurationRequest, ...request.Option) (*s3.NotificationConfiguration, error)
	getBucketNotificationConfigurationWithContextMutex       sync.RWMutex
	getBucketNotificationConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketNotificationConfigurationRequest
		arg3 []request.Option
	}
	getBucketNotificationConfigurationWithContextReturns struct {
		result1 *s3.NotificationConfiguration
		result2 error
	}
	getBucketNotificationConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *s3.NotificationConfiguration
		result2 error
	}
	GetBucketNotificationRequestStub        func(*s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfigurationDeprecated)
	getBucketNotificationRequestMutex       sync.RWMutex
	getBucketNotificationRequestArgsForCall []struct {
		arg1 *s3.GetBucketNotificationConfigurationRequest
	}
	getBucketNotificationRequestReturns struct {
		result1 *request.Request
		result2 *s3.NotificationConfigurationDeprecated
	}
	getBucketNotificationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.NotificationConfigurationDeprecated
	}
	GetBucketNotificationWithContextStub        func(context.Context, *s3.GetBucketNotificationConfigurationRequest, ...request.Option) (*s3.NotificationConfigurationDeprecated, error)
	getBucketNotificationWithContextMutex       sync.RWMutex
	getBucketNotificationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketNotificationConfigurationRequest
		arg3 []request.Option
	}
	getBucketNotificationWithContextReturns struct {
		result1 *s3.NotificationConfigurationDeprecated
		result2 error
	}
	getBucketNotificationWithContextReturnsOnCall map[int]struct {
		result1 *s3.NotificationConfigurationDeprecated
		result2 error
	}
	GetBucketPolicyStub        func(*s3.GetBucketPolicyInput) (*s3.GetBucketPolicyOutput, error)
	getBucketPolicyMutex       sync.RWMutex
	getBucketPolicyArgsForCall []struct {
		arg1 *s3.GetBucketPolicyInput
	}
	getBucketPolicyReturns struct {
		result1 *s3.GetBucketPolicyOutput
		result2 error
	}
	getBucketPolicyReturnsOnCall map[int]struct {
		result1 *s3.GetBucketPolicyOutput
		result2 error
	}
	GetBucketPolicyRequestStub        func(*s3.GetBucketPolicyInput) (*request.Request, *s3.GetBucketPolicyOutput)
	getBucketPolicyRequestMutex       sync.RWMutex
	getBucketPolicyRequestArgsForCall []struct {
		arg1 *s3.GetBucketPolicyInput
	}
	getBucketPolicyRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketPolicyOutput
	}
	getBucketPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketPolicyOutput
	}
	GetBucketPolicyStatusStub        func(*s3.GetBucketPolicyStatusInput) (*s3.GetBucketPolicyStatusOutput, error)
	getBucketPolicyStatusMutex       sync.RWMutex
	getBucketPolicyStatusArgsForCall []struct {
		arg1 *s3.GetBucketPolicyStatusInput
	}
	getBucketPolicyStatusReturns struct {
		result1 *s3.GetBucketPolicyStatusOutput
		result2 error
	}
	getBucketPolicyStatusReturnsOnCall map[int]struct {
		result1 *s3.GetBucketPolicyStatusOutput
		result2 error
	}
	GetBucketPolicyStatusRequestStub        func(*s3.GetBucketPolicyStatusInput) (*request.Request, *s3.GetBucketPolicyStatusOutput)
	getBucketPolicyStatusRequestMutex       sync.RWMutex
	getBucketPolicyStatusRequestArgsForCall []struct {
		arg1 *s3.GetBucketPolicyStatusInput
	}
	getBucketPolicyStatusRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketPolicyStatusOutput
	}
	getBucketPolicyStatusRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketPolicyStatusOutput
	}
	GetBucketPolicyStatusWithContextStub        func(context.Context, *s3.GetBucketPolicyStatusInput, ...request.Option) (*s3.GetBucketPolicyStatusOutput, error)
	getBucketPolicyStatusWithContextMutex       sync.RWMutex
	getBucketPolicyStatusWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketPolicyStatusInput
		arg3 []request.Option
	}
	getBucketPolicyStatusWithContextReturns struct {
		result1 *s3.GetBucketPolicyStatusOutput
		result2 error
	}
	getBucketPolicyStatusWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketPolicyStatusOutput
		result2 error
	}
	GetBucketPolicyWithContextStub        func(context.Context, *s3.GetBucketPolicyInput, ...request.Option) (*s3.GetBucketPolicyOutput, error)
	getBucketPolicyWithContextMutex       sync.RWMutex
	getBucketPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketPolicyInput
		arg3 []request.Option
	}
	getBucketPolicyWithContextReturns struct {
		result1 *s3.GetBucketPolicyOutput
		result2 error
	}
	getBucketPolicyWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketPolicyOutput
		result2 error
	}
	GetBucketReplicationStub        func(*s3.GetBucketReplicationInput) (*s3.GetBucketReplicationOutput, error)
	getBucketReplicationMutex       sync.RWMutex
	getBucketReplicationArgsForCall []struct {
		arg1 *s3.GetBucketReplicationInput
	}
	getBucketReplicationReturns struct {
		result1 *s3.GetBucketReplicationOutput
		result2 error
	}
	getBucketReplicationReturnsOnCall map[int]struct {
		result1 *s3.GetBucketReplicationOutput
		result2 error
	}
	GetBucketReplicationRequestStub        func(*s3.GetBucketReplicationInput) (*request.Request, *s3.GetBucketReplicationOutput)
	getBucketReplicationRequestMutex       sync.RWMutex
	getBucketReplicationRequestArgsForCall []struct {
		arg1 *s3.GetBucketReplicationInput
	}
	getBucketReplicationRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketReplicationOutput
	}
	getBucketReplicationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketReplicationOutput
	}
	GetBucketReplicationWithContextStub        func(context.Context, *s3.GetBucketReplicationInput, ...request.Option) (*s3.GetBucketReplicationOutput, error)
	getBucketReplicationWithContextMutex       sync.RWMutex
	getBucketReplicationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketReplicationInput
		arg3 []request.Option
	}
	getBucketReplicationWithContextReturns struct {
		result1 *s3.GetBucketReplicationOutput
		result2 error
	}
	getBucketReplicationWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketReplicationOutput
		result2 error
	}
	GetBucketRequestPaymentStub        func(*s3.GetBucketRequestPaymentInput) (*s3.GetBucketRequestPaymentOutput, error)
	getBucketRequestPaymentMutex       sync.RWMutex
	getBucketRequestPaymentArgsForCall []struct {
		arg1 *s3.GetBucketRequestPaymentInput
	}
	getBucketRequestPaymentReturns struct {
		result1 *s3.GetBucketRequestPaymentOutput
		result2 error
	}
	getBucketRequestPaymentReturnsOnCall map[int]struct {
		result1 *s3.GetBucketRequestPaymentOutput
		result2 error
	}
	GetBucketRequestPaymentRequestStub        func(*s3.GetBucketRequestPaymentInput) (*request.Request, *s3.GetBucketRequestPaymentOutput)
	getBucketRequestPaymentRequestMutex       sync.RWMutex
	getBucketRequestPaymentRequestArgsForCall []struct {
		arg1 *s3.GetBucketRequestPaymentInput
	}
	getBucketRequestPaymentRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketRequestPaymentOutput
	}
	getBucketRequestPaymentRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketRequestPaymentOutput
	}
	GetBucketRequestPaymentWithContextStub        func(context.Context, *s3.GetBucketRequestPaymentInput, ...request.Option) (*s3.GetBucketRequestPaymentOutput, error)
	getBucketRequestPaymentWithContextMutex       sync.RWMutex
	getBucketRequestPaymentWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketRequestPaymentInput
		arg3 []request.Option
	}
	getBucketRequestPaymentWithContextReturns struct {
		result1 *s3.GetBucketRequestPaymentOutput
		result2 error
	}
	getBucketRequestPaymentWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketRequestPaymentOutput
		result2 error
	}
	GetBucketTaggingStub        func(*s3.GetBucketTaggingInput) (*s3.GetBucketTaggingOutput, error)
	getBucketTaggingMutex       sync.RWMutex
	getBucketTaggingArgsForCall []struct {
		arg1 *s3.GetBucketTaggingInput
	}
	getBucketTaggingReturns struct {
		result1 *s3.GetBucketTaggingOutput
		result2 error
	}
	getBucketTaggingReturnsOnCall map[int]struct {
		result1 *s3.GetBucketTaggingOutput
		result2 error
	}
	GetBucketTaggingRequestStub        func(*s3.GetBucketTaggingInput) (*request.Request, *s3.GetBucketTaggingOutput)
	getBucketTaggingRequestMutex       sync.RWMutex
	getBucketTaggingRequestArgsForCall []struct {
		arg1 *s3.GetBucketTaggingInput
	}
	getBucketTaggingRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketTaggingOutput
	}
	getBucketTaggingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketTaggingOutput
	}
	GetBucketTaggingWithContextStub        func(context.Context, *s3.GetBucketTaggingInput, ...request.Option) (*s3.GetBucketTaggingOutput, error)
	getBucketTaggingWithContextMutex       sync.RWMutex
	getBucketTaggingWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketTaggingInput
		arg3 []request.Option
	}
	getBucketTaggingWithContextReturns struct {
		result1 *s3.GetBucketTaggingOutput
		result2 error
	}
	getBucketTaggingWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketTaggingOutput
		result2 error
	}
	GetBucketVersioningStub        func(*s3.GetBucketVersioningInput) (*s3.GetBucketVersioningOutput, error)
	getBucketVersioningMutex       sync.RWMutex
	getBucketVersioningArgsForCall []struct {
		arg1 *s3.GetBucketVersioningInput
	}
	getBucketVersioningReturns struct {
		result1 *s3.GetBucketVersioningOutput
		result2 error
	}
	getBucketVersioningReturnsOnCall map[int]struct {
		result1 *s3.GetBucketVersioningOutput
		result2 error
	}
	GetBucketVersioningRequestStub        func(*s3.GetBucketVersioningInput) (*request.Request, *s3.GetBucketVersioningOutput)
	getBucketVersioningRequestMutex       sync.RWMutex
	getBucketVersioningRequestArgsForCall []struct {
		arg1 *s3.GetBucketVersioningInput
	}
	getBucketVersioningRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketVersioningOutput
	}
	getBucketVersioningRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketVersioningOutput
	}
	GetBucketVersioningWithContextStub        func(context.Context, *s3.GetBucketVersioningInput, ...request.Option) (*s3.GetBucketVersioningOutput, error)
	getBucketVersioningWithContextMutex       sync.RWMutex
	getBucketVersioningWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketVersioningInput
		arg3 []request.Option
	}
	getBucketVersioningWithContextReturns struct {
		result1 *s3.GetBucketVersioningOutput
		result2 error
	}
	getBucketVersioningWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketVersioningOutput
		result2 error
	}
	GetBucketWebsiteStub        func(*s3.GetBucketWebsiteInput) (*s3.GetBucketWebsiteOutput, error)
	getBucketWebsiteMutex       sync.RWMutex
	getBucketWebsiteArgsForCall []struct {
		arg1 *s3.GetBucketWebsiteInput
	}
	getBucketWebsiteReturns struct {
		result1 *s3.GetBucketWebsiteOutput
		result2 error
	}
	getBucketWebsiteReturnsOnCall map[int]struct {
		result1 *s3.GetBucketWebsiteOutput
		result2 error
	}
	GetBucketWebsiteRequestStub        func(*s3.GetBucketWebsiteInput) (*request.Request, *s3.GetBucketWebsiteOutput)
	getBucketWebsiteRequestMutex       sync.RWMutex
	getBucketWebsiteRequestArgsForCall []struct {
		arg1 *s3.GetBucketWebsiteInput
	}
	getBucketWebsiteRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetBucketWebsiteOutput
	}
	getBucketWebsiteRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetBucketWebsiteOutput
	}
	GetBucketWebsiteWithContextStub        func(context.Context, *s3.GetBucketWebsiteInput, ...request.Option) (*s3.GetBucketWebsiteOutput, error)
	getBucketWebsiteWithContextMutex       sync.RWMutex
	getBucketWebsiteWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketWebsiteInput
		arg3 []request.Option
	}
	getBucketWebsiteWithContextReturns struct {
		result1 *s3.GetBucketWebsiteOutput
		result2 error
	}
	getBucketWebsiteWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetBucketWebsiteOutput
		result2 error
	}
	GetObjectStub        func(*s3.GetObjectInput) (*s3.GetObjectOutput, error)
	getObjectMutex       sync.RWMutex
	getObjectArgsForCall []struct {
		arg1 *s3.GetObjectInput
	}
	getObjectReturns struct {
		result1 *s3.GetObjectOutput
		result2 error
	}
	getObjectReturnsOnCall map[int]struct {
		result1 *s3.GetObjectOutput
		result2 error
	}
	GetObjectAclStub        func(*s3.GetObjectAclInput) (*s3.GetObjectAclOutput, error)
	getObjectAclMutex       sync.RWMutex
	getObjectAclArgsForCall []struct {
		arg1 *s3.GetObjectAclInput
	}
	getObjectAclReturns struct {
		result1 *s3.GetObjectAclOutput
		result2 error
	}
	getObjectAclReturnsOnCall map[int]struct {
		result1 *s3.GetObjectAclOutput
		result2 error
	}
	GetObjectAclRequestStub        func(*s3.GetObjectAclInput) (*request.Request, *s3.GetObjectAclOutput)
	getObjectAclRequestMutex       sync.RWMutex
	getObjectAclRequestArgsForCall []struct {
		arg1 *s3.GetObjectAclInput
	}
	getObjectAclRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetObjectAclOutput
	}
	getObjectAclRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetObjectAclOutput
	}
	GetObjectAclWithContextStub        func(context.Context, *s3.GetObjectAclInput, ...request.Option) (*s3.GetObjectAclOutput, error)
	getObjectAclWithContextMutex       sync.RWMutex
	getObjectAclWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetObjectAclInput
		arg3 []request.Option
	}
	getObjectAclWithContextReturns struct {
		result1 *s3.GetObjectAclOutput
		result2 error
	}
	getObjectAclWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetObjectAclOutput
		result2 error
	}
	GetObjectLegalHoldStub        func(*s3.GetObjectLegalHoldInput) (*s3.GetObjectLegalHoldOutput, error)
	getObjectLegalHoldMutex       sync.RWMutex
	getObjectLegalHoldArgsForCall []struct {
		arg1 *s3.GetObjectLegalHoldInput
	}
	getObjectLegalHoldReturns struct {
		result1 *s3.GetObjectLegalHoldOutput
		result2 error
	}
	getObjectLegalHoldReturnsOnCall map[int]struct {
		result1 *s3.GetObjectLegalHoldOutput
		result2 error
	}
	GetObjectLegalHoldRequestStub        func(*s3.GetObjectLegalHoldInput) (*request.Request, *s3.GetObjectLegalHoldOutput)
	getObjectLegalHoldRequestMutex       sync.RWMutex
	getObjectLegalHoldRequestArgsForCall []struct {
		arg1 *s3.GetObjectLegalHoldInput
	}
	getObjectLegalHoldRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetObjectLegalHoldOutput
	}
	getObjectLegalHoldRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetObjectLegalHoldOutput
	}
	GetObjectLegalHoldWithContextStub        func(context.Context, *s3.GetObjectLegalHoldInput, ...request.Option) (*s3.GetObjectLegalHoldOutput, error)
	getObjectLegalHoldWithContextMutex       sync.RWMutex
	getObjectLegalHoldWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetObjectLegalHoldInput
		arg3 []request.Option
	}
	getObjectLegalHoldWithContextReturns struct {
		result1 *s3.GetObjectLegalHoldOutput
		result2 error
	}
	getObjectLegalHoldWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetObjectLegalHoldOutput
		result2 error
	}
	GetObjectLockConfigurationStub        func(*s3.GetObjectLockConfigurationInput) (*s3.GetObjectLockConfigurationOutput, error)
	getObjectLockConfigurationMutex       sync.RWMutex
	getObjectLockConfigurationArgsForCall []struct {
		arg1 *s3.GetObjectLockConfigurationInput
	}
	getObjectLockConfigurationReturns struct {
		result1 *s3.GetObjectLockConfigurationOutput
		result2 error
	}
	getObjectLockConfigurationReturnsOnCall map[int]struct {
		result1 *s3.GetObjectLockConfigurationOutput
		result2 error
	}
	GetObjectLockConfigurationRequestStub        func(*s3.GetObjectLockConfigurationInput) (*request.Request, *s3.GetObjectLockConfigurationOutput)
	getObjectLockConfigurationRequestMutex       sync.RWMutex
	getObjectLockConfigurationRequestArgsForCall []struct {
		arg1 *s3.GetObjectLockConfigurationInput
	}
	getObjectLockConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetObjectLockConfigurationOutput
	}
	getObjectLockConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetObjectLockConfigurationOutput
	}
	GetObjectLockConfigurationWithContextStub        func(context.Context, *s3.GetObjectLockConfigurationInput, ...request.Option) (*s3.GetObjectLockConfigurationOutput, error)
	getObjectLockConfigurationWithContextMutex       sync.RWMutex
	getObjectLockConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetObjectLockConfigurationInput
		arg3 []request.Option
	}
	getObjectLockConfigurationWithContextReturns struct {
		result1 *s3.GetObjectLockConfigurationOutput
		result2 error
	}
	getObjectLockConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetObjectLockConfigurationOutput
		result2 error
	}
	GetObjectRequestStub        func(*s3.GetObjectInput) (*request.Request, *s3.GetObjectOutput)
	getObjectRequestMutex       sync.RWMutex
	getObjectRequestArgsForCall []struct {
		arg1 *s3.GetObjectInput
	}
	getObjectRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetObjectOutput
	}
	getObjectRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetObjectOutput
	}
	GetObjectRetentionStub        func(*s3.GetObjectRetentionInput) (*s3.GetObjectRetentionOutput, error)
	getObjectRetentionMutex       sync.RWMutex
	getObjectRetentionArgsForCall []struct {
		arg1 *s3.GetObjectRetentionInput
	}
	getObjectRetentionReturns struct {
		result1 *s3.GetObjectRetentionOutput
		result2 error
	}
	getObjectRetentionReturnsOnCall map[int]struct {
		result1 *s3.GetObjectRetentionOutput
		result2 error
	}
	GetObjectRetentionRequestStub        func(*s3.GetObjectRetentionInput) (*request.Request, *s3.GetObjectRetentionOutput)
	getObjectRetentionRequestMutex       sync.RWMutex
	getObjectRetentionRequestArgsForCall []struct {
		arg1 *s3.GetObjectRetentionInput
	}
	getObjectRetentionRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetObjectRetentionOutput
	}
	getObjectRetentionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetObjectRetentionOutput
	}
	GetObjectRetentionWithContextStub        func(context.Context, *s3.GetObjectRetentionInput, ...request.Option) (*s3.GetObjectRetentionOutput, error)
	getObjectRetentionWithContextMutex       sync.RWMutex
	getObjectRetentionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetObjectRetentionInput
		arg3 []request.Option
	}
	getObjectRetentionWithContextReturns struct {
		result1 *s3.GetObjectRetentionOutput
		result2 error
	}
	getObjectRetentionWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetObjectRetentionOutput
		result2 error
	}
	GetObjectTaggingStub        func(*s3.GetObjectTaggingInput) (*s3.GetObjectTaggingOutput, error)
	getObjectTaggingMutex       sync.RWMutex
	getObjectTaggingArgsForCall []struct {
		arg1 *s3.GetObjectTaggingInput
	}
	getObjectTaggingReturns struct {
		result1 *s3.GetObjectTaggingOutput
		result2 error
	}
	getObjectTaggingReturnsOnCall map[int]struct {
		result1 *s3.GetObjectTaggingOutput
		result2 error
	}
	GetObjectTaggingRequestStub        func(*s3.GetObjectTaggingInput) (*request.Request, *s3.GetObjectTaggingOutput)
	getObjectTaggingRequestMutex       sync.RWMutex
	getObjectTaggingRequestArgsForCall []struct {
		arg1 *s3.GetObjectTaggingInput
	}
	getObjectTaggingRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetObjectTaggingOutput
	}
	getObjectTaggingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetObjectTaggingOutput
	}
	GetObjectTaggingWithContextStub        func(context.Context, *s3.GetObjectTaggingInput, ...request.Option) (*s3.GetObjectTaggingOutput, error)
	getObjectTaggingWithContextMutex       sync.RWMutex
	getObjectTaggingWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetObjectTaggingInput
		arg3 []request.Option
	}
	getObjectTaggingWithContextReturns struct {
		result1 *s3.GetObjectTaggingOutput
		result2 error
	}
	getObjectTaggingWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetObjectTaggingOutput
		result2 error
	}
	GetObjectTorrentStub        func(*s3.GetObjectTorrentInput) (*s3.GetObjectTorrentOutput, error)
	getObjectTorrentMutex       sync.RWMutex
	getObjectTorrentArgsForCall []struct {
		arg1 *s3.GetObjectTorrentInput
	}
	getObjectTorrentReturns struct {
		result1 *s3.GetObjectTorrentOutput
		result2 error
	}
	getObjectTorrentReturnsOnCall map[int]struct {
		result1 *s3.GetObjectTorrentOutput
		result2 error
	}
	GetObjectTorrentRequestStub        func(*s3.GetObjectTorrentInput) (*request.Request, *s3.GetObjectTorrentOutput)
	getObjectTorrentRequestMutex       sync.RWMutex
	getObjectTorrentRequestArgsForCall []struct {
		arg1 *s3.GetObjectTorrentInput
	}
	getObjectTorrentRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetObjectTorrentOutput
	}
	getObjectTorrentRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetObjectTorrentOutput
	}
	GetObjectTorrentWithContextStub        func(context.Context, *s3.GetObjectTorrentInput, ...request.Option) (*s3.GetObjectTorrentOutput, error)
	getObjectTorrentWithContextMutex       sync.RWMutex
	getObjectTorrentWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetObjectTorrentInput
		arg3 []request.Option
	}
	getObjectTorrentWithContextReturns struct {
		result1 *s3.GetObjectTorrentOutput
		result2 error
	}
	getObjectTorrentWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetObjectTorrentOutput
		result2 error
	}
	GetObjectWithContextStub        func(context.Context, *s3.GetObjectInput, ...request.Option) (*s3.GetObjectOutput, error)
	getObjectWithContextMutex       sync.RWMutex
	getObjectWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetObjectInput
		arg3 []request.Option
	}
	getObjectWithContextReturns struct {
		result1 *s3.GetObjectOutput
		result2 error
	}
	getObjectWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetObjectOutput
		result2 error
	}
	GetPublicAccessBlockStub        func(*s3.GetPublicAccessBlockInput) (*s3.GetPublicAccessBlockOutput, error)
	getPublicAccessBlockMutex       sync.RWMutex
	getPublicAccessBlockArgsForCall []struct {
		arg1 *s3.GetPublicAccessBlockInput
	}
	getPublicAccessBlockReturns struct {
		result1 *s3.GetPublicAccessBlockOutput
		result2 error
	}
	getPublicAccessBlockReturnsOnCall map[int]struct {
		result1 *s3.GetPublicAccessBlockOutput
		result2 error
	}
	GetPublicAccessBlockRequestStub        func(*s3.GetPublicAccessBlockInput) (*request.Request, *s3.GetPublicAccessBlockOutput)
	getPublicAccessBlockRequestMutex       sync.RWMutex
	getPublicAccessBlockRequestArgsForCall []struct {
		arg1 *s3.GetPublicAccessBlockInput
	}
	getPublicAccessBlockRequestReturns struct {
		result1 *request.Request
		result2 *s3.GetPublicAccessBlockOutput
	}
	getPublicAccessBlockRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.GetPublicAccessBlockOutput
	}
	GetPublicAccessBlockWithContextStub        func(context.Context, *s3.GetPublicAccessBlockInput, ...request.Option) (*s3.GetPublicAccessBlockOutput, error)
	getPublicAccessBlockWithContextMutex       sync.RWMutex
	getPublicAccessBlockWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetPublicAccessBlockInput
		arg3 []request.Option
	}
	getPublicAccessBlockWithContextReturns struct {
		result1 *s3.GetPublicAccessBlockOutput
		result2 error
	}
	getPublicAccessBlockWithContextReturnsOnCall map[int]struct {
		result1 *s3.GetPublicAccessBlockOutput
		result2 error
	}
	HeadBucketStub        func(*s3.HeadBucketInput) (*s3.HeadBucketOutput, error)
	headBucketMutex       sync.RWMutex
	headBucketArgsForCall []struct {
		arg1 *s3.HeadBucketInput
	}
	headBucketReturns struct {
		result1 *s3.HeadBucketOutput
		result2 error
	}
	headBucketReturnsOnCall map[int]struct {
		result1 *s3.HeadBucketOutput
		result2 error
	}
	HeadBucketRequestStub        func(*s3.HeadBucketInput) (*request.Request, *s3.HeadBucketOutput)
	headBucketRequestMutex       sync.RWMutex
	headBucketRequestArgsForCall []struct {
		arg1 *s3.HeadBucketInput
	}
	headBucketRequestReturns struct {
		result1 *request.Request
		result2 *s3.HeadBucketOutput
	}
	headBucketRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.HeadBucketOutput
	}
	HeadBucketWithContextStub        func(context.Context, *s3.HeadBucketInput, ...request.Option) (*s3.HeadBucketOutput, error)
	headBucketWithContextMutex       sync.RWMutex
	headBucketWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.HeadBucketInput
		arg3 []request.Option
	}
	headBucketWithContextReturns struct {
		result1 *s3.HeadBucketOutput
		result2 error
	}
	headBucketWithContextReturnsOnCall map[int]struct {
		result1 *s3.HeadBucketOutput
		result2 error
	}
	HeadObjectStub        func(*s3.HeadObjectInput) (*s3.HeadObjectOutput, error)
	headObjectMutex       sync.RWMutex
	headObjectArgsForCall []struct {
		arg1 *s3.HeadObjectInput
	}
	headObjectReturns struct {
		result1 *s3.HeadObjectOutput
		result2 error
	}
	headObjectReturnsOnCall map[int]struct {
		result1 *s3.HeadObjectOutput
		result2 error
	}
	HeadObjectRequestStub        func(*s3.HeadObjectInput) (*request.Request, *s3.HeadObjectOutput)
	headObjectRequestMutex       sync.RWMutex
	headObjectRequestArgsForCall []struct {
		arg1 *s3.HeadObjectInput
	}
	headObjectRequestReturns struct {
		result1 *request.Request
		result2 *s3.HeadObjectOutput
	}
	headObjectRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.HeadObjectOutput
	}
	HeadObjectWithContextStub        func(context.Context, *s3.HeadObjectInput, ...request.Option) (*s3.HeadObjectOutput, error)
	headObjectWithContextMutex       sync.RWMutex
	headObjectWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.HeadObjectInput
		arg3 []request.Option
	}
	headObjectWithContextReturns struct {
		result1 *s3.HeadObjectOutput
		result2 error
	}
	headObjectWithContextReturnsOnCall map[int]struct {
		result1 *s3.HeadObjectOutput
		result2 error
	}
	ListBucketAnalyticsConfigurationsStub        func(*s3.ListBucketAnalyticsConfigurationsInput) (*s3.ListBucketAnalyticsConfigurationsOutput, error)
	listBucketAnalyticsConfigurationsMutex       sync.RWMutex
	listBucketAnalyticsConfigurationsArgsForCall []struct {
		arg1 *s3.ListBucketAnalyticsConfigurationsInput
	}
	listBucketAnalyticsConfigurationsReturns struct {
		result1 *s3.ListBucketAnalyticsConfigurationsOutput
		result2 error
	}
	listBucketAnalyticsConfigurationsReturnsOnCall map[int]struct {
		result1 *s3.ListBucketAnalyticsConfigurationsOutput
		result2 error
	}
	ListBucketAnalyticsConfigurationsRequestStub        func(*s3.ListBucketAnalyticsConfigurationsInput) (*request.Request, *s3.ListBucketAnalyticsConfigurationsOutput)
	listBucketAnalyticsConfigurationsRequestMutex       sync.RWMutex
	listBucketAnalyticsConfigurationsRequestArgsForCall []struct {
		arg1 *s3.ListBucketAnalyticsConfigurationsInput
	}
	listBucketAnalyticsConfigurationsRequestReturns struct {
		result1 *request.Request
		result2 *s3.ListBucketAnalyticsConfigurationsOutput
	}
	listBucketAnalyticsConfigurationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.ListBucketAnalyticsConfigurationsOutput
	}
	ListBucketAnalyticsConfigurationsWithContextStub        func(context.Context, *s3.ListBucketAnalyticsConfigurationsInput, ...request.Option) (*s3.ListBucketAnalyticsConfigurationsOutput, error)
	listBucketAnalyticsConfigurationsWithContextMutex       sync.RWMutex
	listBucketAnalyticsConfigurationsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListBucketAnalyticsConfigurationsInput
		arg3 []request.Option
	}
	listBucketAnalyticsConfigurationsWithContextReturns struct {
		result1 *s3.ListBucketAnalyticsConfigurationsOutput
		result2 error
	}
	listBucketAnalyticsConfigurationsWithContextReturnsOnCall map[int]struct {
		result1 *s3.ListBucketAnalyticsConfigurationsOutput
		result2 error
	}
	ListBucketInventoryConfigurationsStub        func(*s3.ListBucketInventoryConfigurationsInput) (*s3.ListBucketInventoryConfigurationsOutput, error)
	listBucketInventoryConfigurationsMutex       sync.RWMutex
	listBucketInventoryConfigurationsArgsForCall []struct {
		arg1 *s3.ListBucketInventoryConfigurationsInput
	}
	listBucketInventoryConfigurationsReturns struct {
		result1 *s3.ListBucketInventoryConfigurationsOutput
		result2 error
	}
	listBucketInventoryConfigurationsReturnsOnCall map[int]struct {
		result1 *s3.ListBucketInventoryConfigurationsOutput
		result2 error
	}
	ListBucketInventoryConfigurationsRequestStub        func(*s3.ListBucketInventoryConfigurationsInput) (*request.Request, *s3.ListBucketInventoryConfigurationsOutput)
	listBucketInventoryConfigurationsRequestMutex       sync.RWMutex
	listBucketInventoryConfigurationsRequestArgsForCall []struct {
		arg1 *s3.ListBucketInventoryConfigurationsInput
	}
	listBucketInventoryConfigurationsRequestReturns struct {
		result1 *request.Request
		result2 *s3.ListBucketInventoryConfigurationsOutput
	}
	listBucketInventoryConfigurationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.ListBucketInventoryConfigurationsOutput
	}
	ListBucketInventoryConfigurationsWithContextStub        func(context.Context, *s3.ListBucketInventoryConfigurationsInput, ...request.Option) (*s3.ListBucketInventoryConfigurationsOutput, error)
	listBucketInventoryConfigurationsWithContextMutex       sync.RWMutex
	listBucketInventoryConfigurationsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListBucketInventoryConfigurationsInput
		arg3 []request.Option
	}
	listBucketInventoryConfigurationsWithContextReturns struct {
		result1 *s3.ListBucketInventoryConfigurationsOutput
		result2 error
	}
	listBucketInventoryConfigurationsWithContextReturnsOnCall map[int]struct {
		result1 *s3.ListBucketInventoryConfigurationsOutput
		result2 error
	}
	ListBucketMetricsConfigurationsStub        func(*s3.ListBucketMetricsConfigurationsInput) (*s3.ListBucketMetricsConfigurationsOutput, error)
	listBucketMetricsConfigurationsMutex       sync.RWMutex
	listBucketMetricsConfigurationsArgsForCall []struct {
		arg1 *s3.ListBucketMetricsConfigurationsInput
	}
	listBucketMetricsConfigurationsReturns struct {
		result1 *s3.ListBucketMetricsConfigurationsOutput
		result2 error
	}
	listBucketMetricsConfigurationsReturnsOnCall map[int]struct {
		result1 *s3.ListBucketMetricsConfigurationsOutput
		result2 error
	}
	ListBucketMetricsConfigurationsRequestStub        func(*s3.ListBucketMetricsConfigurationsInput) (*request.Request, *s3.ListBucketMetricsConfigurationsOutput)
	listBucketMetricsConfigurationsRequestMutex       sync.RWMutex
	listBucketMetricsConfigurationsRequestArgsForCall []struct {
		arg1 *s3.ListBucketMetricsConfigurationsInput
	}
	listBucketMetricsConfigurationsRequestReturns struct {
		result1 *request.Request
		result2 *s3.ListBucketMetricsConfigurationsOutput
	}
	listBucketMetricsConfigurationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.ListBucketMetricsConfigurationsOutput
	}
	ListBucketMetricsConfigurationsWithContextStub        func(context.Context, *s3.ListBucketMetricsConfigurationsInput, ...request.Option) (*s3.ListBucketMetricsConfigurationsOutput, error)
	listBucketMetricsConfigurationsWithContextMutex       sync.RWMutex
	listBucketMetricsConfigurationsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListBucketMetricsConfigurationsInput
		arg3 []request.Option
	}
	listBucketMetricsConfigurationsWithContextReturns struct {
		result1 *s3.ListBucketMetricsConfigurationsOutput
		result2 error
	}
	listBucketMetricsConfigurationsWithContextReturnsOnCall map[int]struct {
		result1 *s3.ListBucketMetricsConfigurationsOutput
		result2 error
	}
	ListBucketsStub        func(*s3.ListBucketsInput) (*s3.ListBucketsOutput, error)
	listBucketsMutex       sync.RWMutex
	listBucketsArgsForCall []struct {
		arg1 *s3.ListBucketsInput
	}
	listBucketsReturns struct {
		result1 *s3.ListBucketsOutput
		result2 error
	}
	listBucketsReturnsOnCall map[int]struct {
		result1 *s3.ListBucketsOutput
		result2 error
	}
	ListBucketsRequestStub        func(*s3.ListBucketsInput) (*request.Request, *s3.ListBucketsOutput)
	listBucketsRequestMutex       sync.RWMutex
	listBucketsRequestArgsForCall []struct {
		arg1 *s3.ListBucketsInput
	}
	listBucketsRequestReturns struct {
		result1 *request.Request
		result2 *s3.ListBucketsOutput
	}
	listBucketsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.ListBucketsOutput
	}
	ListBucketsWithContextStub        func(context.Context, *s3.ListBucketsInput, ...request.Option) (*s3.ListBucketsOutput, error)
	listBucketsWithContextMutex       sync.RWMutex
	listBucketsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListBucketsInput
		arg3 []request.Option
	}
	listBucketsWithContextReturns struct {
		result1 *s3.ListBucketsOutput
		result2 error
	}
	listBucketsWithContextReturnsOnCall map[int]struct {
		result1 *s3.ListBucketsOutput
		result2 error
	}
	ListMultipartUploadsStub        func(*s3.ListMultipartUploadsInput) (*s3.ListMultipartUploadsOutput, error)
	listMultipartUploadsMutex       sync.RWMutex
	listMultipartUploadsArgsForCall []struct {
		arg1 *s3.ListMultipartUploadsInput
	}
	listMultipartUploadsReturns struct {
		result1 *s3.ListMultipartUploadsOutput
		result2 error
	}
	listMultipartUploadsReturnsOnCall map[int]struct {
		result1 *s3.ListMultipartUploadsOutput
		result2 error
	}
	ListMultipartUploadsPagesStub        func(*s3.ListMultipartUploadsInput, func(*s3.ListMultipartUploadsOutput, bool) bool) error
	listMultipartUploadsPagesMutex       sync.RWMutex
	listMultipartUploadsPagesArgsForCall []struct {
		arg1 *s3.ListMultipartUploadsInput
		arg2 func(*s3.ListMultipartUploadsOutput, bool) bool
	}
	listMultipartUploadsPagesReturns struct {
		result1 error
	}
	listMultipartUploadsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListMultipartUploadsPagesWithContextStub        func(context.Context, *s3.ListMultipartUploadsInput, func(*s3.ListMultipartUploadsOutput, bool) bool, ...request.Option) error
	listMultipartUploadsPagesWithContextMutex       sync.RWMutex
	listMultipartUploadsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListMultipartUploadsInput
		arg3 func(*s3.ListMultipartUploadsOutput, bool) bool
		arg4 []request.Option
	}
	listMultipartUploadsPagesWithContextReturns struct {
		result1 error
	}
	listMultipartUploadsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListMultipartUploadsRequestStub        func(*s3.ListMultipartUploadsInput) (*request.Request, *s3.ListMultipartUploadsOutput)
	listMultipartUploadsRequestMutex       sync.RWMutex
	listMultipartUploadsRequestArgsForCall []struct {
		arg1 *s3.ListMultipartUploadsInput
	}
	listMultipartUploadsRequestReturns struct {
		result1 *request.Request
		result2 *s3.ListMultipartUploadsOutput
	}
	listMultipartUploadsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.ListMultipartUploadsOutput
	}
	ListMultipartUploadsWithContextStub        func(context.Context, *s3.ListMultipartUploadsInput, ...request.Option) (*s3.ListMultipartUploadsOutput, error)
	listMultipartUploadsWithContextMutex       sync.RWMutex
	listMultipartUploadsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListMultipartUploadsInput
		arg3 []request.Option
	}
	listMultipartUploadsWithContextReturns struct {
		result1 *s3.ListMultipartUploadsOutput
		result2 error
	}
	listMultipartUploadsWithContextReturnsOnCall map[int]struct {
		result1 *s3.ListMultipartUploadsOutput
		result2 error
	}
	ListObjectVersionsStub        func(*s3.ListObjectVersionsInput) (*s3.ListObjectVersionsOutput, error)
	listObjectVersionsMutex       sync.RWMutex
	listObjectVersionsArgsForCall []struct {
		arg1 *s3.ListObjectVersionsInput
	}
	listObjectVersionsReturns struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}
	listObjectVersionsReturnsOnCall map[int]struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}
	ListObjectVersionsPagesStub        func(*s3.ListObjectVersionsInput, func(*s3.ListObjectVersionsOutput, bool) bool) error
	listObjectVersionsPagesMutex       sync.RWMutex
	listObjectVersionsPagesArgsForCall []struct {
		arg1 *s3.ListObjectVersionsInput
		arg2 func(*s3.ListObjectVersionsOutput, bool) bool
	}
	listObjectVersionsPagesReturns struct {
		result1 error
	}
	listObjectVersionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListObjectVersionsPagesWithContextStub        func(context.Context, *s3.ListObjectVersionsInput, func(*s3.ListObjectVersionsOutput, bool) bool, ...request.Option) error
	listObjectVersionsPagesWithContextMutex       sync.RWMutex
	listObjectVersionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListObjectVersionsInput
		arg3 func(*s3.ListObjectVersionsOutput, bool) bool
		arg4 []request.Option
	}
	listObjectVersionsPagesWithContextReturns struct {
		result1 error
	}
	listObjectVersionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListObjectVersionsRequestStub        func(*s3.ListObjectVersionsInput) (*request.Request, *s3.ListObjectVersionsOutput)
	listObjectVersionsRequestMutex       sync.RWMutex
	listObjectVersionsRequestArgsForCall []struct {
		arg1 *s3.ListObjectVersionsInput
	}
	listObjectVersionsRequestReturns struct {
		result1 *request.Request
		result2 *s3.ListObjectVersionsOutput
	}
	listObjectVersionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.ListObjectVersionsOutput
	}
	ListObjectVersionsWithContextStub        func(context.Context, *s3.ListObjectVersionsInput, ...request.Option) (*s3.ListObjectVersionsOutput, error)
	listObjectVersionsWithContextMutex       sync.RWMutex
	listObjectVersionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListObjectVersionsInput
		arg3 []request.Option
	}
	listObjectVersionsWithContextReturns struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}
	listObjectVersionsWithContextReturnsOnCall map[int]struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}
	ListObjectsStub        func(*s3.ListObjectsInput) (*s3.ListObjectsOutput, error)
	listObjectsMutex       sync.RWMutex
	listObjectsArgsForCall []struct {
		arg1 *s3.ListObjectsInput
	}
	listObjectsReturns struct {
		result1 *s3.ListObjectsOutput
		result2 error
	}
	listObjectsReturnsOnCall map[int]struct {
		result1 *s3.ListObjectsOutput
		result2 error
	}
	ListObjectsPagesStub        func(*s3.ListObjectsInput, func(*s3.ListObjectsOutput, bool) bool) error
	listObjectsPagesMutex       sync.RWMutex
	listObjectsPagesArgsForCall []struct {
		arg1 *s3.ListObjectsInput
		arg2 func(*s3.ListObjectsOutput, bool) bool
	}
	listObjectsPagesReturns struct {
		result1 error
	}
	listObjectsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListObjectsPagesWithContextStub        func(context.Context, *s3.ListObjectsInput, func(*s3.ListObjectsOutput, bool) bool, ...request.Option) error
	listObjectsPagesWithContextMutex       sync.RWMutex
	listObjectsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListObjectsInput
		arg3 func(*s3.ListObjectsOutput, bool) bool
		arg4 []request.Option
	}
	listObjectsPagesWithContextReturns struct {
		result1 error
	}
	listObjectsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListObjectsRequestStub        func(*s3.ListObjectsInput) (*request.Request, *s3.ListObjectsOutput)
	listObjectsRequestMutex       sync.RWMutex
	listObjectsRequestArgsForCall []struct {
		arg1 *s3.ListObjectsInput
	}
	listObjectsRequestReturns struct {
		result1 *request.Request
		result2 *s3.ListObjectsOutput
	}
	listObjectsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.ListObjectsOutput
	}
	ListObjectsV2Stub        func(*s3.ListObjectsV2Input) (*s3.ListObjectsV2Output, error)
	listObjectsV2Mutex       sync.RWMutex
	listObjectsV2ArgsForCall []struct {
		arg1 *s3.ListObjectsV2Input
	}
	listObjectsV2Returns struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}
	listObjectsV2ReturnsOnCall map[int]struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}
	ListObjectsV2PagesStub        func(*s3.ListObjectsV2Input, func(*s3.ListObjectsV2Output, bool) bool) error
	listObjectsV2PagesMutex       sync.RWMutex
	listObjectsV2PagesArgsForCall []struct {
		arg1 *s3.ListObjectsV2Input
		arg2 func(*s3.ListObjectsV2Output, bool) bool
	}
	listObjectsV2PagesReturns struct {
		result1 error
	}
	listObjectsV2PagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListObjectsV2PagesWithContextStub        func(context.Context, *s3.ListObjectsV2Input, func(*s3.ListObjectsV2Output, bool) bool, ...request.Option) error
	listObjectsV2PagesWithContextMutex       sync.RWMutex
	listObjectsV2PagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListObjectsV2Input
		arg3 func(*s3.ListObjectsV2Output, bool) bool
		arg4 []request.Option
	}
	listObjectsV2PagesWithContextReturns struct {
		result1 error
	}
	listObjectsV2PagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListObjectsV2RequestStub        func(*s3.ListObjectsV2Input) (*request.Request, *s3.ListObjectsV2Output)
	listObjectsV2RequestMutex       sync.RWMutex
	listObjectsV2RequestArgsForCall []struct {
		arg1 *s3.ListObjectsV2Input
	}
	listObjectsV2RequestReturns struct {
		result1 *request.Request
		result2 *s3.ListObjectsV2Output
	}
	listObjectsV2RequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.ListObjectsV2Output
	}
	ListObjectsV2WithContextStub        func(context.Context, *s3.ListObjectsV2Input, ...request.Option) (*s3.ListObjectsV2Output, error)
	listObjectsV2WithContextMutex       sync.RWMutex
	listObjectsV2WithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListObjectsV2Input
		arg3 []request.Option
	}
	listObjectsV2WithContextReturns struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}
	listObjectsV2WithContextReturnsOnCall map[int]struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}
	ListObjectsWithContextStub        func(context.Context, *s3.ListObjectsInput, ...request.Option) (*s3.ListObjectsOutput, error)
	listObjectsWithContextMutex       sync.RWMutex
	listObjectsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListObjectsInput
		arg3 []request.Option
	}
	listObjectsWithContextReturns struct {
		result1 *s3.ListObjectsOutput
		result2 error
	}
	listObjectsWithContextReturnsOnCall map[int]struct {
		result1 *s3.ListObjectsOutput
		result2 error
	}
	ListPartsStub        func(*s3.ListPartsInput) (*s3.ListPartsOutput, error)
	listPartsMutex       sync.RWMutex
	listPartsArgsForCall []struct {
		arg1 *s3.ListPartsInput
	}
	listPartsReturns struct {
		result1 *s3.ListPartsOutput
		result2 error
	}
	listPartsReturnsOnCall map[int]struct {
		result1 *s3.ListPartsOutput
		result2 error
	}
	ListPartsPagesStub        func(*s3.ListPartsInput, func(*s3.ListPartsOutput, bool) bool) error
	listPartsPagesMutex       sync.RWMutex
	listPartsPagesArgsForCall []struct {
		arg1 *s3.ListPartsInput
		arg2 func(*s3.ListPartsOutput, bool) bool
	}
	listPartsPagesReturns struct {
		result1 error
	}
	listPartsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListPartsPagesWithContextStub        func(context.Context, *s3.ListPartsInput, func(*s3.ListPartsOutput, bool) bool, ...request.Option) error
	listPartsPagesWithContextMutex       sync.RWMutex
	listPartsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListPartsInput
		arg3 func(*s3.ListPartsOutput, bool) bool
		arg4 []request.Option
	}
	listPartsPagesWithContextReturns struct {
		result1 error
	}
	listPartsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListPartsRequestStub        func(*s3.ListPartsInput) (*request.Request, *s3.ListPartsOutput)
	listPartsRequestMutex       sync.RWMutex
	listPartsRequestArgsForCall []struct {
		arg1 *s3.ListPartsInput
	}
	listPartsRequestReturns struct {
		result1 *request.Request
		result2 *s3.ListPartsOutput
	}
	listPartsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.ListPartsOutput
	}
	ListPartsWithContextStub        func(context.Context, *s3.ListPartsInput, ...request.Option) (*s3.ListPartsOutput, error)
	listPartsWithContextMutex       sync.RWMutex
	listPartsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListPartsInput
		arg3 []request.Option
	}
	listPartsWithContextReturns struct {
		result1 *s3.ListPartsOutput
		result2 error
	}
	listPartsWithContextReturnsOnCall map[int]struct {
		result1 *s3.ListPartsOutput
		result2 error
	}
	PutBucketAccelerateConfigurationStub        func(*s3.PutBucketAccelerateConfigurationInput) (*s3.PutBucketAccelerateConfigurationOutput, error)
	putBucketAccelerateConfigurationMutex       sync.RWMutex
	putBucketAccelerateConfigurationArgsForCall []struct {
		arg1 *s3.PutBucketAccelerateConfigurationInput
	}
	putBucketAccelerateConfigurationReturns struct {
		result1 *s3.PutBucketAccelerateConfigurationOutput
		result2 error
	}
	putBucketAccelerateConfigurationReturnsOnCall map[int]struct {
		result1 *s3.PutBucketAccelerateConfigurationOutput
		result2 error
	}
	PutBucketAccelerateConfigurationRequestStub        func(*s3.PutBucketAccelerateConfigurationInput) (*request.Request, *s3.PutBucketAccelerateConfigurationOutput)
	putBucketAccelerateConfigurationRequestMutex       sync.RWMutex
	putBucketAccelerateConfigurationRequestArgsForCall []struct {
		arg1 *s3.PutBucketAccelerateConfigurationInput
	}
	putBucketAccelerateConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketAccelerateConfigurationOutput
	}
	putBucketAccelerateConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketAccelerateConfigurationOutput
	}
	PutBucketAccelerateConfigurationWithContextStub        func(context.Context, *s3.PutBucketAccelerateConfigurationInput, ...request.Option) (*s3.PutBucketAccelerateConfigurationOutput, error)
	putBucketAccelerateConfigurationWithContextMutex       sync.RWMutex
	putBucketAccelerateConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketAccelerateConfigurationInput
		arg3 []request.Option
	}
	putBucketAccelerateConfigurationWithContextReturns struct {
		result1 *s3.PutBucketAccelerateConfigurationOutput
		result2 error
	}
	putBucketAccelerateConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketAccelerateConfigurationOutput
		result2 error
	}
	PutBucketAclStub        func(*s3.PutBucketAclInput) (*s3.PutBucketAclOutput, error)
	putBucketAclMutex       sync.RWMutex
	putBucketAclArgsForCall []struct {
		arg1 *s3.PutBucketAclInput
	}
	putBucketAclReturns struct {
		result1 *s3.PutBucketAclOutput
		result2 error
	}
	putBucketAclReturnsOnCall map[int]struct {
		result1 *s3.PutBucketAclOutput
		result2 error
	}
	PutBucketAclRequestStub        func(*s3.PutBucketAclInput) (*request.Request, *s3.PutBucketAclOutput)
	putBucketAclRequestMutex       sync.RWMutex
	putBucketAclRequestArgsForCall []struct {
		arg1 *s3.PutBucketAclInput
	}
	putBucketAclRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketAclOutput
	}
	putBucketAclRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketAclOutput
	}
	PutBucketAclWithContextStub        func(context.Context, *s3.PutBucketAclInput, ...request.Option) (*s3.PutBucketAclOutput, error)
	putBucketAclWithContextMutex       sync.RWMutex
	putBucketAclWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketAclInput
		arg3 []request.Option
	}
	putBucketAclWithContextReturns struct {
		result1 *s3.PutBucketAclOutput
		result2 error
	}
	putBucketAclWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketAclOutput
		result2 error
	}
	PutBucketAnalyticsConfigurationStub        func(*s3.PutBucketAnalyticsConfigurationInput) (*s3.PutBucketAnalyticsConfigurationOutput, error)
	putBucketAnalyticsConfigurationMutex       sync.RWMutex
	putBucketAnalyticsConfigurationArgsForCall []struct {
		arg1 *s3.PutBucketAnalyticsConfigurationInput
	}
	putBucketAnalyticsConfigurationReturns struct {
		result1 *s3.PutBucketAnalyticsConfigurationOutput
		result2 error
	}
	putBucketAnalyticsConfigurationReturnsOnCall map[int]struct {
		result1 *s3.PutBucketAnalyticsConfigurationOutput
		result2 error
	}
	PutBucketAnalyticsConfigurationRequestStub        func(*s3.PutBucketAnalyticsConfigurationInput) (*request.Request, *s3.PutBucketAnalyticsConfigurationOutput)
	putBucketAnalyticsConfigurationRequestMutex       sync.RWMutex
	putBucketAnalyticsConfigurationRequestArgsForCall []struct {
		arg1 *s3.PutBucketAnalyticsConfigurationInput
	}
	putBucketAnalyticsConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketAnalyticsConfigurationOutput
	}
	putBucketAnalyticsConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketAnalyticsConfigurationOutput
	}
	PutBucketAnalyticsConfigurationWithContextStub        func(context.Context, *s3.PutBucketAnalyticsConfigurationInput, ...request.Option) (*s3.PutBucketAnalyticsConfigurationOutput, error)
	putBucketAnalyticsConfigurationWithContextMutex       sync.RWMutex
	putBucketAnalyticsConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketAnalyticsConfigurationInput
		arg3 []request.Option
	}
	putBucketAnalyticsConfigurationWithContextReturns struct {
		result1 *s3.PutBucketAnalyticsConfigurationOutput
		result2 error
	}
	putBucketAnalyticsConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketAnalyticsConfigurationOutput
		result2 error
	}
	PutBucketCorsStub        func(*s3.PutBucketCorsInput) (*s3.PutBucketCorsOutput, error)
	putBucketCorsMutex       sync.RWMutex
	putBucketCorsArgsForCall []struct {
		arg1 *s3.PutBucketCorsInput
	}
	putBucketCorsReturns struct {
		result1 *s3.PutBucketCorsOutput
		result2 error
	}
	putBucketCorsReturnsOnCall map[int]struct {
		result1 *s3.PutBucketCorsOutput
		result2 error
	}
	PutBucketCorsRequestStub        func(*s3.PutBucketCorsInput) (*request.Request, *s3.PutBucketCorsOutput)
	putBucketCorsRequestMutex       sync.RWMutex
	putBucketCorsRequestArgsForCall []struct {
		arg1 *s3.PutBucketCorsInput
	}
	putBucketCorsRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketCorsOutput
	}
	putBucketCorsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketCorsOutput
	}
	PutBucketCorsWithContextStub        func(context.Context, *s3.PutBucketCorsInput, ...request.Option) (*s3.PutBucketCorsOutput, error)
	putBucketCorsWithContextMutex       sync.RWMutex
	putBucketCorsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketCorsInput
		arg3 []request.Option
	}
	putBucketCorsWithContextReturns struct {
		result1 *s3.PutBucketCorsOutput
		result2 error
	}
	putBucketCorsWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketCorsOutput
		result2 error
	}
	PutBucketEncryptionStub        func(*s3.PutBucketEncryptionInput) (*s3.PutBucketEncryptionOutput, error)
	putBucketEncryptionMutex       sync.RWMutex
	putBucketEncryptionArgsForCall []struct {
		arg1 *s3.PutBucketEncryptionInput
	}
	putBucketEncryptionReturns struct {
		result1 *s3.PutBucketEncryptionOutput
		result2 error
	}
	putBucketEncryptionReturnsOnCall map[int]struct {
		result1 *s3.PutBucketEncryptionOutput
		result2 error
	}
	PutBucketEncryptionRequestStub        func(*s3.PutBucketEncryptionInput) (*request.Request, *s3.PutBucketEncryptionOutput)
	putBucketEncryptionRequestMutex       sync.RWMutex
	putBucketEncryptionRequestArgsForCall []struct {
		arg1 *s3.PutBucketEncryptionInput
	}
	putBucketEncryptionRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketEncryptionOutput
	}
	putBucketEncryptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketEncryptionOutput
	}
	PutBucketEncryptionWithContextStub        func(context.Context, *s3.PutBucketEncryptionInput, ...request.Option) (*s3.PutBucketEncryptionOutput, error)
	putBucketEncryptionWithContextMutex       sync.RWMutex
	putBucketEncryptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketEncryptionInput
		arg3 []request.Option
	}
	putBucketEncryptionWithContextReturns struct {
		result1 *s3.PutBucketEncryptionOutput
		result2 error
	}
	putBucketEncryptionWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketEncryptionOutput
		result2 error
	}
	PutBucketInventoryConfigurationStub        func(*s3.PutBucketInventoryConfigurationInput) (*s3.PutBucketInventoryConfigurationOutput, error)
	putBucketInventoryConfigurationMutex       sync.RWMutex
	putBucketInventoryConfigurationArgsForCall []struct {
		arg1 *s3.PutBucketInventoryConfigurationInput
	}
	putBucketInventoryConfigurationReturns struct {
		result1 *s3.PutBucketInventoryConfigurationOutput
		result2 error
	}
	putBucketInventoryConfigurationReturnsOnCall map[int]struct {
		result1 *s3.PutBucketInventoryConfigurationOutput
		result2 error
	}
	PutBucketInventoryConfigurationRequestStub        func(*s3.PutBucketInventoryConfigurationInput) (*request.Request, *s3.PutBucketInventoryConfigurationOutput)
	putBucketInventoryConfigurationRequestMutex       sync.RWMutex
	putBucketInventoryConfigurationRequestArgsForCall []struct {
		arg1 *s3.PutBucketInventoryConfigurationInput
	}
	putBucketInventoryConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketInventoryConfigurationOutput
	}
	putBucketInventoryConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketInventoryConfigurationOutput
	}
	PutBucketInventoryConfigurationWithContextStub        func(context.Context, *s3.PutBucketInventoryConfigurationInput, ...request.Option) (*s3.PutBucketInventoryConfigurationOutput, error)
	putBucketInventoryConfigurationWithContextMutex       sync.RWMutex
	putBucketInventoryConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketInventoryConfigurationInput
		arg3 []request.Option
	}
	putBucketInventoryConfigurationWithContextReturns struct {
		result1 *s3.PutBucketInventoryConfigurationOutput
		result2 error
	}
	putBucketInventoryConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketInventoryConfigurationOutput
		result2 error
	}
	PutBucketLifecycleStub        func(*s3.PutBucketLifecycleInput) (*s3.PutBucketLifecycleOutput, error)
	putBucketLifecycleMutex       sync.RWMutex
	putBucketLifecycleArgsForCall []struct {
		arg1 *s3.PutBucketLifecycleInput
	}
	putBucketLifecycleReturns struct {
		result1 *s3.PutBucketLifecycleOutput
		result2 error
	}
	putBucketLifecycleReturnsOnCall map[int]struct {
		result1 *s3.PutBucketLifecycleOutput
		result2 error
	}
	PutBucketLifecycleConfigurationStub        func(*s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)
	putBucketLifecycleConfigurationMutex       sync.RWMutex
	putBucketLifecycleConfigurationArgsForCall []struct {
		arg1 *s3.PutBucketLifecycleConfigurationInput
	}
	putBucketLifecycleConfigurationReturns struct {
		result1 *s3.PutBucketLifecycleConfigurationOutput
		result2 error
	}
	putBucketLifecycleConfigurationReturnsOnCall map[int]struct {
		result1 *s3.PutBucketLifecycleConfigurationOutput
		result2 error
	}
	PutBucketLifecycleConfigurationRequestStub        func(*s3.PutBucketLifecycleConfigurationInput) (*request.Request, *s3.PutBucketLifecycleConfigurationOutput)
	putBucketLifecycleConfigurationRequestMutex       sync.RWMutex
	putBucketLifecycleConfigurationRequestArgsForCall []struct {
		arg1 *s3.PutBucketLifecycleConfigurationInput
	}
	putBucketLifecycleConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketLifecycleConfigurationOutput
	}
	putBucketLifecycleConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketLifecycleConfigurationOutput
	}
	PutBucketLifecycleConfigurationWithContextStub        func(context.Context, *s3.PutBucketLifecycleConfigurationInput, ...request.Option) (*s3.PutBucketLifecycleConfigurationOutput, error)
	putBucketLifecycleConfigurationWithContextMutex       sync.RWMutex
	putBucketLifecycleConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketLifecycleConfigurationInput
		arg3 []request.Option
	}
	putBucketLifecycleConfigurationWithContextReturns struct {
		result1 *s3.PutBucketLifecycleConfigurationOutput
		result2 error
	}
	putBucketLifecycleConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketLifecycleConfigurationOutput
		result2 error
	}
	PutBucketLifecycleRequestStub        func(*s3.PutBucketLifecycleInput) (*request.Request, *s3.PutBucketLifecycleOutput)
	putBucketLifecycleRequestMutex       sync.RWMutex
	putBucketLifecycleRequestArgsForCall []struct {
		arg1 *s3.PutBucketLifecycleInput
	}
	putBucketLifecycleRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketLifecycleOutput
	}
	putBucketLifecycleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketLifecycleOutput
	}
	PutBucketLifecycleWithContextStub        func(context.Context, *s3.PutBucketLifecycleInput, ...request.Option) (*s3.PutBucketLifecycleOutput, error)
	putBucketLifecycleWithContextMutex       sync.RWMutex
	putBucketLifecycleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketLifecycleInput
		arg3 []request.Option
	}
	putBucketLifecycleWithContextReturns struct {
		result1 *s3.PutBucketLifecycleOutput
		result2 error
	}
	putBucketLifecycleWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketLifecycleOutput
		result2 error
	}
	PutBucketLoggingStub        func(*s3.PutBucketLoggingInput) (*s3.PutBucketLoggingOutput, error)
	putBucketLoggingMutex       sync.RWMutex
	putBucketLoggingArgsForCall []struct {
		arg1 *s3.PutBucketLoggingInput
	}
	putBucketLoggingReturns struct {
		result1 *s3.PutBucketLoggingOutput
		result2 error
	}
	putBucketLoggingReturnsOnCall map[int]struct {
		result1 *s3.PutBucketLoggingOutput
		result2 error
	}
	PutBucketLoggingRequestStub        func(*s3.PutBucketLoggingInput) (*request.Request, *s3.PutBucketLoggingOutput)
	putBucketLoggingRequestMutex       sync.RWMutex
	putBucketLoggingRequestArgsForCall []struct {
		arg1 *s3.PutBucketLoggingInput
	}
	putBucketLoggingRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketLoggingOutput
	}
	putBucketLoggingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketLoggingOutput
	}
	PutBucketLoggingWithContextStub        func(context.Context, *s3.PutBucketLoggingInput, ...request.Option) (*s3.PutBucketLoggingOutput, error)
	putBucketLoggingWithContextMutex       sync.RWMutex
	putBucketLoggingWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketLoggingInput
		arg3 []request.Option
	}
	putBucketLoggingWithContextReturns struct {
		result1 *s3.PutBucketLoggingOutput
		result2 error
	}
	putBucketLoggingWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketLoggingOutput
		result2 error
	}
	PutBucketMetricsConfigurationStub        func(*s3.PutBucketMetricsConfigurationInput) (*s3.PutBucketMetricsConfigurationOutput, error)
	putBucketMetricsConfigurationMutex       sync.RWMutex
	putBucketMetricsConfigurationArgsForCall []struct {
		arg1 *s3.PutBucketMetricsConfigurationInput
	}
	putBucketMetricsConfigurationReturns struct {
		result1 *s3.PutBucketMetricsConfigurationOutput
		result2 error
	}
	putBucketMetricsConfigurationReturnsOnCall map[int]struct {
		result1 *s3.PutBucketMetricsConfigurationOutput
		result2 error
	}
	PutBucketMetricsConfigurationRequestStub        func(*s3.PutBucketMetricsConfigurationInput) (*request.Request, *s3.PutBucketMetricsConfigurationOutput)
	putBucketMetricsConfigurationRequestMutex       sync.RWMutex
	putBucketMetricsConfigurationRequestArgsForCall []struct {
		arg1 *s3.PutBucketMetricsConfigurationInput
	}
	putBucketMetricsConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketMetricsConfigurationOutput
	}
	putBucketMetricsConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketMetricsConfigurationOutput
	}
	PutBucketMetricsConfigurationWithContextStub        func(context.Context, *s3.PutBucketMetricsConfigurationInput, ...request.Option) (*s3.PutBucketMetricsConfigurationOutput, error)
	putBucketMetricsConfigurationWithContextMutex       sync.RWMutex
	putBucketMetricsConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketMetricsConfigurationInput
		arg3 []request.Option
	}
	putBucketMetricsConfigurationWithContextReturns struct {
		result1 *s3.PutBucketMetricsConfigurationOutput
		result2 error
	}
	putBucketMetricsConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketMetricsConfigurationOutput
		result2 error
	}
	PutBucketNotificationStub        func(*s3.PutBucketNotificationInput) (*s3.PutBucketNotificationOutput, error)
	putBucketNotificationMutex       sync.RWMutex
	putBucketNotificationArgsForCall []struct {
		arg1 *s3.PutBucketNotificationInput
	}
	putBucketNotificationReturns struct {
		result1 *s3.PutBucketNotificationOutput
		result2 error
	}
	putBucketNotificationReturnsOnCall map[int]struct {
		result1 *s3.PutBucketNotificationOutput
		result2 error
	}
	PutBucketNotificationConfigurationStub        func(*s3.PutBucketNotificationConfigurationInput) (*s3.PutBucketNotificationConfigurationOutput, error)
	putBucketNotificationConfigurationMutex       sync.RWMutex
	putBucketNotificationConfigurationArgsForCall []struct {
		arg1 *s3.PutBucketNotificationConfigurationInput
	}
	putBucketNotificationConfigurationReturns struct {
		result1 *s3.PutBucketNotificationConfigurationOutput
		result2 error
	}
	putBucketNotificationConfigurationReturnsOnCall map[int]struct {
		result1 *s3.PutBucketNotificationConfigurationOutput
		result2 error
	}
	PutBucketNotificationConfigurationRequestStub        func(*s3.PutBucketNotificationConfigurationInput) (*request.Request, *s3.PutBucketNotificationConfigurationOutput)
	putBucketNotificationConfigurationRequestMutex       sync.RWMutex
	putBucketNotificationConfigurationRequestArgsForCall []struct {
		arg1 *s3.PutBucketNotificationConfigurationInput
	}
	putBucketNotificationConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketNotificationConfigurationOutput
	}
	putBucketNotificationConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketNotificationConfigurationOutput
	}
	PutBucketNotificationConfigurationWithContextStub        func(context.Context, *s3.PutBucketNotificationConfigurationInput, ...request.Option) (*s3.PutBucketNotificationConfigurationOutput, error)
	putBucketNotificationConfigurationWithContextMutex       sync.RWMutex
	putBucketNotificationConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketNotificationConfigurationInput
		arg3 []request.Option
	}
	putBucketNotificationConfigurationWithContextReturns struct {
		result1 *s3.PutBucketNotificationConfigurationOutput
		result2 error
	}
	putBucketNotificationConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketNotificationConfigurationOutput
		result2 error
	}
	PutBucketNotificationRequestStub        func(*s3.PutBucketNotificationInput) (*request.Request, *s3.PutBucketNotificationOutput)
	putBucketNotificationRequestMutex       sync.RWMutex
	putBucketNotificationRequestArgsForCall []struct {
		arg1 *s3.PutBucketNotificationInput
	}
	putBucketNotificationRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketNotificationOutput
	}
	putBucketNotificationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketNotificationOutput
	}
	PutBucketNotificationWithContextStub        func(context.Context, *s3.PutBucketNotificationInput, ...request.Option) (*s3.PutBucketNotificationOutput, error)
	putBucketNotificationWithContextMutex       sync.RWMutex
	putBucketNotificationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketNotificationInput
		arg3 []request.Option
	}
	putBucketNotificationWithContextReturns struct {
		result1 *s3.PutBucketNotificationOutput
		result2 error
	}
	putBucketNotificationWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketNotificationOutput
		result2 error
	}
	PutBucketPolicyStub        func(*s3.PutBucketPolicyInput) (*s3.PutBucketPolicyOutput, error)
	putBucketPolicyMutex       sync.RWMutex
	putBucketPolicyArgsForCall []struct {
		arg1 *s3.PutBucketPolicyInput
	}
	putBucketPolicyReturns struct {
		result1 *s3.PutBucketPolicyOutput
		result2 error
	}
	putBucketPolicyReturnsOnCall map[int]struct {
		result1 *s3.PutBucketPolicyOutput
		result2 error
	}
	PutBucketPolicyRequestStub        func(*s3.PutBucketPolicyInput) (*request.Request, *s3.PutBucketPolicyOutput)
	putBucketPolicyRequestMutex       sync.RWMutex
	putBucketPolicyRequestArgsForCall []struct {
		arg1 *s3.PutBucketPolicyInput
	}
	putBucketPolicyRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketPolicyOutput
	}
	putBucketPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketPolicyOutput
	}
	PutBucketPolicyWithContextStub        func(context.Context, *s3.PutBucketPolicyInput, ...request.Option) (*s3.PutBucketPolicyOutput, error)
	putBucketPolicyWithContextMutex       sync.RWMutex
	putBucketPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketPolicyInput
		arg3 []request.Option
	}
	putBucketPolicyWithContextReturns struct {
		result1 *s3.PutBucketPolicyOutput
		result2 error
	}
	putBucketPolicyWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketPolicyOutput
		result2 error
	}
	PutBucketReplicationStub        func(*s3.PutBucketReplicationInput) (*s3.PutBucketReplicationOutput, error)
	putBucketReplicationMutex       sync.RWMutex
	putBucketReplicationArgsForCall []struct {
		arg1 *s3.PutBucketReplicationInput
	}
	putBucketReplicationReturns struct {
		result1 *s3.PutBucketReplicationOutput
		result2 error
	}
	putBucketReplicationReturnsOnCall map[int]struct {
		result1 *s3.PutBucketReplicationOutput
		result2 error
	}
	PutBucketReplicationRequestStub        func(*s3.PutBucketReplicationInput) (*request.Request, *s3.PutBucketReplicationOutput)
	putBucketReplicationRequestMutex       sync.RWMutex
	putBucketReplicationRequestArgsForCall []struct {
		arg1 *s3.PutBucketReplicationInput
	}
	putBucketReplicationRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketReplicationOutput
	}
	putBucketReplicationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketReplicationOutput
	}
	PutBucketReplicationWithContextStub        func(context.Context, *s3.PutBucketReplicationInput, ...request.Option) (*s3.PutBucketReplicationOutput, error)
	putBucketReplicationWithContextMutex       sync.RWMutex
	putBucketReplicationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketReplicationInput
		arg3 []request.Option
	}
	putBucketReplicationWithContextReturns struct {
		result1 *s3.PutBucketReplicationOutput
		result2 error
	}
	putBucketReplicationWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketReplicationOutput
		result2 error
	}
	PutBucketRequestPaymentStub        func(*s3.PutBucketRequestPaymentInput) (*s3.PutBucketRequestPaymentOutput, error)
	putBucketRequestPaymentMutex       sync.RWMutex
	putBucketRequestPaymentArgsForCall []struct {
		arg1 *s3.PutBucketRequestPaymentInput
	}
	putBucketRequestPaymentReturns struct {
		result1 *s3.PutBucketRequestPaymentOutput
		result2 error
	}
	putBucketRequestPaymentReturnsOnCall map[int]struct {
		result1 *s3.PutBucketRequestPaymentOutput
		result2 error
	}
	PutBucketRequestPaymentRequestStub        func(*s3.PutBucketRequestPaymentInput) (*request.Request, *s3.PutBucketRequestPaymentOutput)
	putBucketRequestPaymentRequestMutex       sync.RWMutex
	putBucketRequestPaymentRequestArgsForCall []struct {
		arg1 *s3.PutBucketRequestPaymentInput
	}
	putBucketRequestPaymentRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketRequestPaymentOutput
	}
	putBucketRequestPaymentRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketRequestPaymentOutput
	}
	PutBucketRequestPaymentWithContextStub        func(context.Context, *s3.PutBucketRequestPaymentInput, ...request.Option) (*s3.PutBucketRequestPaymentOutput, error)
	putBucketRequestPaymentWithContextMutex       sync.RWMutex
	putBucketRequestPaymentWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketRequestPaymentInput
		arg3 []request.Option
	}
	putBucketRequestPaymentWithContextReturns struct {
		result1 *s3.PutBucketRequestPaymentOutput
		result2 error
	}
	putBucketRequestPaymentWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketRequestPaymentOutput
		result2 error
	}
	PutBucketTaggingStub        func(*s3.PutBucketTaggingInput) (*s3.PutBucketTaggingOutput, error)
	putBucketTaggingMutex       sync.RWMutex
	putBucketTaggingArgsForCall []struct {
		arg1 *s3.PutBucketTaggingInput
	}
	putBucketTaggingReturns struct {
		result1 *s3.PutBucketTaggingOutput
		result2 error
	}
	putBucketTaggingReturnsOnCall map[int]struct {
		result1 *s3.PutBucketTaggingOutput
		result2 error
	}
	PutBucketTaggingRequestStub        func(*s3.PutBucketTaggingInput) (*request.Request, *s3.PutBucketTaggingOutput)
	putBucketTaggingRequestMutex       sync.RWMutex
	putBucketTaggingRequestArgsForCall []struct {
		arg1 *s3.PutBucketTaggingInput
	}
	putBucketTaggingRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketTaggingOutput
	}
	putBucketTaggingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketTaggingOutput
	}
	PutBucketTaggingWithContextStub        func(context.Context, *s3.PutBucketTaggingInput, ...request.Option) (*s3.PutBucketTaggingOutput, error)
	putBucketTaggingWithContextMutex       sync.RWMutex
	putBucketTaggingWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketTaggingInput
		arg3 []request.Option
	}
	putBucketTaggingWithContextReturns struct {
		result1 *s3.PutBucketTaggingOutput
		result2 error
	}
	putBucketTaggingWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketTaggingOutput
		result2 error
	}
	PutBucketVersioningStub        func(*s3.PutBucketVersioningInput) (*s3.PutBucketVersioningOutput, error)
	putBucketVersioningMutex       sync.RWMutex
	putBucketVersioningArgsForCall []struct {
		arg1 *s3.PutBucketVersioningInput
	}
	putBucketVersioningReturns struct {
		result1 *s3.PutBucketVersioningOutput
		result2 error
	}
	putBucketVersioningReturnsOnCall map[int]struct {
		result1 *s3.PutBucketVersioningOutput
		result2 error
	}
	PutBucketVersioningRequestStub        func(*s3.PutBucketVersioningInput) (*request.Request, *s3.PutBucketVersioningOutput)
	putBucketVersioningRequestMutex       sync.RWMutex
	putBucketVersioningRequestArgsForCall []struct {
		arg1 *s3.PutBucketVersioningInput
	}
	putBucketVersioningRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketVersioningOutput
	}
	putBucketVersioningRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketVersioningOutput
	}
	PutBucketVersioningWithContextStub        func(context.Context, *s3.PutBucketVersioningInput, ...request.Option) (*s3.PutBucketVersioningOutput, error)
	putBucketVersioningWithContextMutex       sync.RWMutex
	putBucketVersioningWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketVersioningInput
		arg3 []request.Option
	}
	putBucketVersioningWithContextReturns struct {
		result1 *s3.PutBucketVersioningOutput
		result2 error
	}
	putBucketVersioningWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketVersioningOutput
		result2 error
	}
	PutBucketWebsiteStub        func(*s3.PutBucketWebsiteInput) (*s3.PutBucketWebsiteOutput, error)
	putBucketWebsiteMutex       sync.RWMutex
	putBucketWebsiteArgsForCall []struct {
		arg1 *s3.PutBucketWebsiteInput
	}
	putBucketWebsiteReturns struct {
		result1 *s3.PutBucketWebsiteOutput
		result2 error
	}
	putBucketWebsiteReturnsOnCall map[int]struct {
		result1 *s3.PutBucketWebsiteOutput
		result2 error
	}
	PutBucketWebsiteRequestStub        func(*s3.PutBucketWebsiteInput) (*request.Request, *s3.PutBucketWebsiteOutput)
	putBucketWebsiteRequestMutex       sync.RWMutex
	putBucketWebsiteRequestArgsForCall []struct {
		arg1 *s3.PutBucketWebsiteInput
	}
	putBucketWebsiteRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutBucketWebsiteOutput
	}
	putBucketWebsiteRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutBucketWebsiteOutput
	}
	PutBucketWebsiteWithContextStub        func(context.Context, *s3.PutBucketWebsiteInput, ...request.Option) (*s3.PutBucketWebsiteOutput, error)
	putBucketWebsiteWithContextMutex       sync.RWMutex
	putBucketWebsiteWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketWebsiteInput
		arg3 []request.Option
	}
	putBucketWebsiteWithContextReturns struct {
		result1 *s3.PutBucketWebsiteOutput
		result2 error
	}
	putBucketWebsiteWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutBucketWebsiteOutput
		result2 error
	}
	PutObjectStub        func(*s3.PutObjectInput) (*s3.PutObjectOutput, error)
	putObjectMutex       sync.RWMutex
	putObjectArgsForCall []struct {
		arg1 *s3.PutObjectInput
	}
	putObjectReturns struct {
		result1 *s3.PutObjectOutput
		result2 error
	}
	putObjectReturnsOnCall map[int]struct {
		result1 *s3.PutObjectOutput
		result2 error
	}
	PutObjectAclStub        func(*s3.PutObjectAclInput) (*s3.PutObjectAclOutput, error)
	putObjectAclMutex       sync.RWMutex
	putObjectAclArgsForCall []struct {
		arg1 *s3.PutObjectAclInput
	}
	putObjectAclReturns struct {
		result1 *s3.PutObjectAclOutput
		result2 error
	}
	putObjectAclReturnsOnCall map[int]struct {
		result1 *s3.PutObjectAclOutput
		result2 error
	}
	PutObjectAclRequestStub        func(*s3.PutObjectAclInput) (*request.Request, *s3.PutObjectAclOutput)
	putObjectAclRequestMutex       sync.RWMutex
	putObjectAclRequestArgsForCall []struct {
		arg1 *s3.PutObjectAclInput
	}
	putObjectAclRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutObjectAclOutput
	}
	putObjectAclRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutObjectAclOutput
	}
	PutObjectAclWithContextStub        func(context.Context, *s3.PutObjectAclInput, ...request.Option) (*s3.PutObjectAclOutput, error)
	putObjectAclWithContextMutex       sync.RWMutex
	putObjectAclWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutObjectAclInput
		arg3 []request.Option
	}
	putObjectAclWithContextReturns struct {
		result1 *s3.PutObjectAclOutput
		result2 error
	}
	putObjectAclWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutObjectAclOutput
		result2 error
	}
	PutObjectLegalHoldStub        func(*s3.PutObjectLegalHoldInput) (*s3.PutObjectLegalHoldOutput, error)
	putObjectLegalHoldMutex       sync.RWMutex
	putObjectLegalHoldArgsForCall []struct {
		arg1 *s3.PutObjectLegalHoldInput
	}
	putObjectLegalHoldReturns struct {
		result1 *s3.PutObjectLegalHoldOutput
		result2 error
	}
	putObjectLegalHoldReturnsOnCall map[int]struct {
		result1 *s3.PutObjectLegalHoldOutput
		result2 error
	}
	PutObjectLegalHoldRequestStub        func(*s3.PutObjectLegalHoldInput) (*request.Request, *s3.PutObjectLegalHoldOutput)
	putObjectLegalHoldRequestMutex       sync.RWMutex
	putObjectLegalHoldRequestArgsForCall []struct {
		arg1 *s3.PutObjectLegalHoldInput
	}
	putObjectLegalHoldRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutObjectLegalHoldOutput
	}
	putObjectLegalHoldRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutObjectLegalHoldOutput
	}
	PutObjectLegalHoldWithContextStub        func(context.Context, *s3.PutObjectLegalHoldInput, ...request.Option) (*s3.PutObjectLegalHoldOutput, error)
	putObjectLegalHoldWithContextMutex       sync.RWMutex
	putObjectLegalHoldWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutObjectLegalHoldInput
		arg3 []request.Option
	}
	putObjectLegalHoldWithContextReturns struct {
		result1 *s3.PutObjectLegalHoldOutput
		result2 error
	}
	putObjectLegalHoldWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutObjectLegalHoldOutput
		result2 error
	}
	PutObjectLockConfigurationStub        func(*s3.PutObjectLockConfigurationInput) (*s3.PutObjectLockConfigurationOutput, error)
	putObjectLockConfigurationMutex       sync.RWMutex
	putObjectLockConfigurationArgsForCall []struct {
		arg1 *s3.PutObjectLockConfigurationInput
	}
	putObjectLockConfigurationReturns struct {
		result1 *s3.PutObjectLockConfigurationOutput
		result2 error
	}
	putObjectLockConfigurationReturnsOnCall map[int]struct {
		result1 *s3.PutObjectLockConfigurationOutput
		result2 error
	}
	PutObjectLockConfigurationRequestStub        func(*s3.PutObjectLockConfigurationInput) (*request.Request, *s3.PutObjectLockConfigurationOutput)
	putObjectLockConfigurationRequestMutex       sync.RWMutex
	putObjectLockConfigurationRequestArgsForCall []struct {
		arg1 *s3.PutObjectLockConfigurationInput
	}
	putObjectLockConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutObjectLockConfigurationOutput
	}
	putObjectLockConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutObjectLockConfigurationOutput
	}
	PutObjectLockConfigurationWithContextStub        func(context.Context, *s3.PutObjectLockConfigurationInput, ...request.Option) (*s3.PutObjectLockConfigurationOutput, error)
	putObjectLockConfigurationWithContextMutex       sync.RWMutex
	putObjectLockConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutObjectLockConfigurationInput
		arg3 []request.Option
	}
	putObjectLockConfigurationWithContextReturns struct {
		result1 *s3.PutObjectLockConfigurationOutput
		result2 error
	}
	putObjectLockConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutObjectLockConfigurationOutput
		result2 error
	}
	PutObjectRequestStub        func(*s3.PutObjectInput) (*request.Request, *s3.PutObjectOutput)
	putObjectRequestMutex       sync.RWMutex
	putObjectRequestArgsForCall []struct {
		arg1 *s3.PutObjectInput
	}
	putObjectRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutObjectOutput
	}
	putObjectRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutObjectOutput
	}
	PutObjectRetentionStub        func(*s3.PutObjectRetentionInput) (*s3.PutObjectRetentionOutput, error)
	putObjectRetentionMutex       sync.RWMutex
	putObjectRetentionArgsForCall []struct {
		arg1 *s3.PutObjectRetentionInput
	}
	putObjectRetentionReturns struct {
		result1 *s3.PutObjectRetentionOutput
		result2 error
	}
	putObjectRetentionReturnsOnCall map[int]struct {
		result1 *s3.PutObjectRetentionOutput
		result2 error
	}
	PutObjectRetentionRequestStub        func(*s3.PutObjectRetentionInput) (*request.Request, *s3.PutObjectRetentionOutput)
	putObjectRetentionRequestMutex       sync.RWMutex
	putObjectRetentionRequestArgsForCall []struct {
		arg1 *s3.PutObjectRetentionInput
	}
	putObjectRetentionRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutObjectRetentionOutput
	}
	putObjectRetentionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutObjectRetentionOutput
	}
	PutObjectRetentionWithContextStub        func(context.Context, *s3.PutObjectRetentionInput, ...request.Option) (*s3.PutObjectRetentionOutput, error)
	putObjectRetentionWithContextMutex       sync.RWMutex
	putObjectRetentionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutObjectRetentionInput
		arg3 []request.Option
	}
	putObjectRetentionWithContextReturns struct {
		result1 *s3.PutObjectRetentionOutput
		result2 error
	}
	putObjectRetentionWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutObjectRetentionOutput
		result2 error
	}
	PutObjectTaggingStub        func(*s3.PutObjectTaggingInput) (*s3.PutObjectTaggingOutput, error)
	putObjectTaggingMutex       sync.RWMutex
	putObjectTaggingArgsForCall []struct {
		arg1 *s3.PutObjectTaggingInput
	}
	putObjectTaggingReturns struct {
		result1 *s3.PutObjectTaggingOutput
		result2 error
	}
	putObjectTaggingReturnsOnCall map[int]struct {
		result1 *s3.PutObjectTaggingOutput
		result2 error
	}
	PutObjectTaggingRequestStub        func(*s3.PutObjectTaggingInput) (*request.Request, *s3.PutObjectTaggingOutput)
	putObjectTaggingRequestMutex       sync.RWMutex
	putObjectTaggingRequestArgsForCall []struct {
		arg1 *s3.PutObjectTaggingInput
	}
	putObjectTaggingRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutObjectTaggingOutput
	}
	putObjectTaggingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutObjectTaggingOutput
	}
	PutObjectTaggingWithContextStub        func(context.Context, *s3.PutObjectTaggingInput, ...request.Option) (*s3.PutObjectTaggingOutput, error)
	putObjectTaggingWithContextMutex       sync.RWMutex
	putObjectTaggingWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutObjectTaggingInput
		arg3 []request.Option
	}
	putObjectTaggingWithContextReturns struct {
		result1 *s3.PutObjectTaggingOutput
		result2 error
	}
	putObjectTaggingWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutObjectTaggingOutput
		result2 error
	}
	PutObjectWithContextStub        func(context.Context, *s3.PutObjectInput, ...request.Option) (*s3.PutObjectOutput, error)
	putObjectWithContextMutex       sync.RWMutex
	putObjectWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutObjectInput
		arg3 []request.Option
	}
	putObjectWithContextReturns struct {
		result1 *s3.PutObjectOutput
		result2 error
	}
	putObjectWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutObjectOutput
		result2 error
	}
	PutPublicAccessBlockStub        func(*s3.PutPublicAccessBlockInput) (*s3.PutPublicAccessBlockOutput, error)
	putPublicAccessBlockMutex       sync.RWMutex
	putPublicAccessBlockArgsForCall []struct {
		arg1 *s3.PutPublicAccessBlockInput
	}
	putPublicAccessBlockReturns struct {
		result1 *s3.PutPublicAccessBlockOutput
		result2 error
	}
	putPublicAccessBlockReturnsOnCall map[int]struct {
		result1 *s3.PutPublicAccessBlockOutput
		result2 error
	}
	PutPublicAccessBlockRequestStub        func(*s3.PutPublicAccessBlockInput) (*request.Request, *s3.PutPublicAccessBlockOutput)
	putPublicAccessBlockRequestMutex       sync.RWMutex
	putPublicAccessBlockRequestArgsForCall []struct {
		arg1 *s3.PutPublicAccessBlockInput
	}
	putPublicAccessBlockRequestReturns struct {
		result1 *request.Request
		result2 *s3.PutPublicAccessBlockOutput
	}
	putPublicAccessBlockRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.PutPublicAccessBlockOutput
	}
	PutPublicAccessBlockWithContextStub        func(context.Context, *s3.PutPublicAccessBlockInput, ...request.Option) (*s3.PutPublicAccessBlockOutput, error)
	putPublicAccessBlockWithContextMutex       sync.RWMutex
	putPublicAccessBlockWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutPublicAccessBlockInput
		arg3 []request.Option
	}
	putPublicAccessBlockWithContextReturns struct {
		result1 *s3.PutPublicAccessBlockOutput
		result2 error
	}
	putPublicAccessBlockWithContextReturnsOnCall map[int]struct {
		result1 *s3.PutPublicAccessBlockOutput
		result2 error
	}
	RestoreObjectStub        func(*s3.RestoreObjectInput) (*s3.RestoreObjectOutput, error)
	restoreObjectMutex       sync.RWMutex
	restoreObjectArgsForCall []struct {
		arg1 *s3.RestoreObjectInput
	}
	restoreObjectReturns struct {
		result1 *s3.RestoreObjectOutput
		result2 error
	}
	restoreObjectReturnsOnCall map[int]struct {
		result1 *s3.RestoreObjectOutput
		result2 error
	}
	RestoreObjectRequestStub        func(*s3.RestoreObjectInput) (*request.Request, *s3.RestoreObjectOutput)
	restoreObjectRequestMutex       sync.RWMutex
	restoreObjectRequestArgsForCall []struct {
		arg1 *s3.RestoreObjectInput
	}
	restoreObjectRequestReturns struct {
		result1 *request.Request
		result2 *s3.RestoreObjectOutput
	}
	restoreObjectRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.RestoreObjectOutput
	}
	RestoreObjectWithContextStub        func(context.Context, *s3.RestoreObjectInput, ...request.Option) (*s3.RestoreObjectOutput, error)
	restoreObjectWithContextMutex       sync.RWMutex
	restoreObjectWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.RestoreObjectInput
		arg3 []request.Option
	}
	restoreObjectWithContextReturns struct {
		result1 *s3.RestoreObjectOutput
		result2 error
	}
	restoreObjectWithContextReturnsOnCall map[int]struct {
		result1 *s3.RestoreObjectOutput
		result2 error
	}
	SelectObjectContentStub        func(*s3.SelectObjectContentInput) (*s3.SelectObjectContentOutput, error)
	selectObjectContentMutex       sync.RWMutex
	selectObjectContentArgsForCall []struct {
		arg1 *s3.SelectObjectContentInput
	}
	selectObjectContentReturns struct {
		result1 *s3.SelectObjectContentOutput
		result2 error
	}
	selectObjectContentReturnsOnCall map[int]struct {
		result1 *s3.SelectObjectContentOutput
		result2 error
	}
	SelectObjectContentRequestStub        func(*s3.SelectObjectContentInput) (*request.Request, *s3.SelectObjectContentOutput)
	selectObjectContentRequestMutex       sync.RWMutex
	selectObjectContentRequestArgsForCall []struct {
		arg1 *s3.SelectObjectContentInput
	}
	selectObjectContentRequestReturns struct {
		result1 *request.Request
		result2 *s3.SelectObjectContentOutput
	}
	selectObjectContentRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.SelectObjectContentOutput
	}
	SelectObjectContentWithContextStub        func(context.Context, *s3.SelectObjectContentInput, ...request.Option) (*s3.SelectObjectContentOutput, error)
	selectObjectContentWithContextMutex       sync.RWMutex
	selectObjectContentWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.SelectObjectContentInput
		arg3 []request.Option
	}
	selectObjectContentWithContextReturns struct {
		result1 *s3.SelectObjectContentOutput
		result2 error
	}
	selectObjectContentWithContextReturnsOnCall map[int]struct {
		result1 *s3.SelectObjectContentOutput
		result2 error
	}
	UploadPartStub        func(*s3.UploadPartInput) (*s3.UploadPartOutput, error)
	uploadPartMutex       sync.RWMutex
	uploadPartArgsForCall []struct {
		arg1 *s3.UploadPartInput
	}
	uploadPartReturns struct {
		result1 *s3.UploadPartOutput
		result2 error
	}
	uploadPartReturnsOnCall map[int]struct {
		result1 *s3.UploadPartOutput
		result2 error
	}
	UploadPartCopyStub        func(*s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)
	uploadPartCopyMutex       sync.RWMutex
	uploadPartCopyArgsForCall []struct {
		arg1 *s3.UploadPartCopyInput
	}
	uploadPartCopyReturns struct {
		result1 *s3.UploadPartCopyOutput
		result2 error
	}
	uploadPartCopyReturnsOnCall map[int]struct {
		result1 *s3.UploadPartCopyOutput
		result2 error
	}
	UploadPartCopyRequestStub        func(*s3.UploadPartCopyInput) (*request.Request, *s3.UploadPartCopyOutput)
	uploadPartCopyRequestMutex       sync.RWMutex
	uploadPartCopyRequestArgsForCall []struct {
		arg1 *s3.UploadPartCopyInput
	}
	uploadPartCopyRequestReturns struct {
		result1 *request.Request
		result2 *s3.UploadPartCopyOutput
	}
	uploadPartCopyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.UploadPartCopyOutput
	}
	UploadPartCopyWithContextStub        func(context.Context, *s3.UploadPartCopyInput, ...request.Option) (*s3.UploadPartCopyOutput, error)
	uploadPartCopyWithContextMutex       sync.RWMutex
	uploadPartCopyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.UploadPartCopyInput
		arg3 []request.Option
	}
	uploadPartCopyWithContextReturns struct {
		result1 *s3.UploadPartCopyOutput
		result2 error
	}
	uploadPartCopyWithContextReturnsOnCall map[int]struct {
		result1 *s3.UploadPartCopyOutput
		result2 error
	}
	UploadPartRequestStub        func(*s3.UploadPartInput) (*request.Request, *s3.UploadPartOutput)
	uploadPartRequestMutex       sync.RWMutex
	uploadPartRequestArgsForCall []struct {
		arg1 *s3.UploadPartInput
	}
	uploadPartRequestReturns struct {
		result1 *request.Request
		result2 *s3.UploadPartOutput
	}
	uploadPartRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *s3.UploadPartOutput
	}
	UploadPartWithContextStub        func(context.Context, *s3.UploadPartInput, ...request.Option) (*s3.UploadPartOutput, error)
	uploadPartWithContextMutex       sync.RWMutex
	uploadPartWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.UploadPartInput
		arg3 []request.Option
	}
	uploadPartWithContextReturns struct {
		result1 *s3.UploadPartOutput
		result2 error
	}
	uploadPartWithContextReturnsOnCall map[int]struct {
		result1 *s3.UploadPartOutput
		result2 error
	}
	WaitUntilBucketExistsStub        func(*s3.HeadBucketInput) error
	waitUntilBucketExistsMutex       sync.RWMutex
	waitUntilBucketExistsArgsForCall []struct {
		arg1 *s3.HeadBucketInput
	}
	waitUntilBucketExistsReturns struct {
		result1 error
	}
	waitUntilBucketExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilBucketExistsWithContextStub        func(context.Context, *s3.HeadBucketInput, ...request.WaiterOption) error
	waitUntilBucketExistsWithContextMutex       sync.RWMutex
	waitUntilBucketExistsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.HeadBucketInput
		arg3 []request.WaiterOption
	}
	waitUntilBucketExistsWithContextReturns struct {
		result1 error
	}
	waitUntilBucketExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilBucketNotExistsStub        func(*s3.HeadBucketInput) error
	waitUntilBucketNotExistsMutex       sync.RWMutex
	waitUntilBucketNotExistsArgsForCall []struct {
		arg1 *s3.HeadBucketInput
	}
	waitUntilBucketNotExistsReturns struct {
		result1 error
	}
	waitUntilBucketNotExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilBucketNotExistsWithContextStub        func(context.Context, *s3.HeadBucketInput, ...request.WaiterOption) error
	waitUntilBucketNotExistsWithContextMutex       sync.RWMutex
	waitUntilBucketNotExistsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.HeadBucketInput
		arg3 []request.WaiterOption
	}
	waitUntilBucketNotExistsWithContextReturns struct {
		result1 error
	}
	waitUntilBucketNotExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilObjectExistsStub        func(*s3.HeadObjectInput) error
	waitUntilObjectExistsMutex       sync.RWMutex
	waitUntilObjectExistsArgsForCall []struct {
		arg1 *s3.HeadObjectInput
	}
	waitUntilObjectExistsReturns struct {
		result1 error
	}
	waitUntilObjectExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilObjectExistsWithContextStub        func(context.Context, *s3.HeadObjectInput, ...request.WaiterOption) error
	waitUntilObjectExistsWithContextMutex       sync.RWMutex
	waitUntilObjectExistsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.HeadObjectInput
		arg3 []request.WaiterOption
	}
	waitUntilObjectExistsWithContextReturns struct {
		result1 error
	}
	waitUntilObjectExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilObjectNotExistsStub        func(*s3.HeadObjectInput) error
	waitUntilObjectNotExistsMutex       sync.RWMutex
	waitUntilObjectNotExistsArgsForCall []struct {
		arg1 *s3.HeadObjectInput
	}
	waitUntilObjectNotExistsReturns struct {
		result1 error
	}
	waitUntilObjectNotExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilObjectNotExistsWithContextStub        func(context.Context, *s3.HeadObjectInput, ...request.WaiterOption) error
	waitUntilObjectNotExistsWithContextMutex       sync.RWMutex
	waitUntilObjectNotExistsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.HeadObjectInput
		arg3 []request.WaiterOption
	}
	waitUntilObjectNotExistsWithContextReturns struct {
		result1 error
	}
	waitUntilObjectNotExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeS3API) AbortMultipartUpload(arg1 *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error) {
	fake.abortMultipartUploadMutex.Lock()
	ret, specificReturn := fake.abortMultipartUploadReturnsOnCall[len(fake.abortMultipartUploadArgsForCall)]
	fake.abortMultipartUploadArgsForCall = append(fake.abortMultipartUploadArgsForCall, struct {
		arg1 *s3.AbortMultipartUploadInput
	}{arg1})
	fake.recordInvocation("AbortMultipartUpload", []interface{}{arg1})
	fake.abortMultipartUploadMutex.Unlock()
	if fake.AbortMultipartUploadStub != nil {
		return fake.AbortMultipartUploadStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.abortMultipartUploadReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) AbortMultipartUploadCallCount() int {
	fake.abortMultipartUploadMutex.RLock()
	defer fake.abortMultipartUploadMutex.RUnlock()
	return len(fake.abortMultipartUploadArgsForCall)
}

func (fake *FakeS3API) AbortMultipartUploadCalls(stub func(*s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)) {
	fake.abortMultipartUploadMutex.Lock()
	defer fake.abortMultipartUploadMutex.Unlock()
	fake.AbortMultipartUploadStub = stub
}

func (fake *FakeS3API) AbortMultipartUploadArgsForCall(i int) *s3.AbortMultipartUploadInput {
	fake.abortMultipartUploadMutex.RLock()
	defer fake.abortMultipartUploadMutex.RUnlock()
	argsForCall := fake.abortMultipartUploadArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) AbortMultipartUploadReturns(result1 *s3.AbortMultipartUploadOutput, result2 error) {
	fake.abortMultipartUploadMutex.Lock()
	defer fake.abortMultipartUploadMutex.Unlock()
	fake.AbortMultipartUploadStub = nil
	fake.abortMultipartUploadReturns = struct {
		result1 *s3.AbortMultipartUploadOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) AbortMultipartUploadReturnsOnCall(i int, result1 *s3.AbortMultipartUploadOutput, result2 error) {
	fake.abortMultipartUploadMutex.Lock()
	defer fake.abortMultipartUploadMutex.Unlock()
	fake.AbortMultipartUploadStub = nil
	if fake.abortMultipartUploadReturnsOnCall == nil {
		fake.abortMultipartUploadReturnsOnCall = make(map[int]struct {
			result1 *s3.AbortMultipartUploadOutput
			result2 error
		})
	}
	fake.abortMultipartUploadReturnsOnCall[i] = struct {
		result1 *s3.AbortMultipartUploadOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) AbortMultipartUploadRequest(arg1 *s3.AbortMultipartUploadInput) (*request.Request, *s3.AbortMultipartUploadOutput) {
	fake.abortMultipartUploadRequestMutex.Lock()
	ret, specificReturn := fake.abortMultipartUploadRequestReturnsOnCall[len(fake.abortMultipartUploadRequestArgsForCall)]
	fake.abortMultipartUploadRequestArgsForCall = append(fake.abortMultipartUploadRequestArgsForCall, struct {
		arg1 *s3.AbortMultipartUploadInput
	}{arg1})
	fake.recordInvocation("AbortMultipartUploadRequest", []interface{}{arg1})
	fake.abortMultipartUploadRequestMutex.Unlock()
	if fake.AbortMultipartUploadRequestStub != nil {
		return fake.AbortMultipartUploadRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.abortMultipartUploadRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) AbortMultipartUploadRequestCallCount() int {
	fake.abortMultipartUploadRequestMutex.RLock()
	defer fake.abortMultipartUploadRequestMutex.RUnlock()
	return len(fake.abortMultipartUploadRequestArgsForCall)
}

func (fake *FakeS3API) AbortMultipartUploadRequestCalls(stub func(*s3.AbortMultipartUploadInput) (*request.Request, *s3.AbortMultipartUploadOutput)) {
	fake.abortMultipartUploadRequestMutex.Lock()
	defer fake.abortMultipartUploadRequestMutex.Unlock()
	fake.AbortMultipartUploadRequestStub = stub
}

func (fake *FakeS3API) AbortMultipartUploadRequestArgsForCall(i int) *s3.AbortMultipartUploadInput {
	fake.abortMultipartUploadRequestMutex.RLock()
	defer fake.abortMultipartUploadRequestMutex.RUnlock()
	argsForCall := fake.abortMultipartUploadRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) AbortMultipartUploadRequestReturns(result1 *request.Request, result2 *s3.AbortMultipartUploadOutput) {
	fake.abortMultipartUploadRequestMutex.Lock()
	defer fake.abortMultipartUploadRequestMutex.Unlock()
	fake.AbortMultipartUploadRequestStub = nil
	fake.abortMultipartUploadRequestReturns = struct {
		result1 *request.Request
		result2 *s3.AbortMultipartUploadOutput
	}{result1, result2}
}

func (fake *FakeS3API) AbortMultipartUploadRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.AbortMultipartUploadOutput) {
	fake.abortMultipartUploadRequestMutex.Lock()
	defer fake.abortMultipartUploadRequestMutex.Unlock()
	fake.AbortMultipartUploadRequestStub = nil
	if fake.abortMultipartUploadRequestReturnsOnCall == nil {
		fake.abortMultipartUploadRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.AbortMultipartUploadOutput
		})
	}
	fake.abortMultipartUploadRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.AbortMultipartUploadOutput
	}{result1, result2}
}

func (fake *FakeS3API) AbortMultipartUploadWithContext(arg1 context.Context, arg2 *s3.AbortMultipartUploadInput, arg3 ...request.Option) (*s3.AbortMultipartUploadOutput, error) {
	fake.abortMultipartUploadWithContextMutex.Lock()
	ret, specificReturn := fake.abortMultipartUploadWithContextReturnsOnCall[len(fake.abortMultipartUploadWithContextArgsForCall)]
	fake.abortMultipartUploadWithContextArgsForCall = append(fake.abortMultipartUploadWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.AbortMultipartUploadInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AbortMultipartUploadWithContext", []interface{}{arg1, arg2, arg3})
	fake.abortMultipartUploadWithContextMutex.Unlock()
	if fake.AbortMultipartUploadWithContextStub != nil {
		return fake.AbortMultipartUploadWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.abortMultipartUploadWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) AbortMultipartUploadWithContextCallCount() int {
	fake.abortMultipartUploadWithContextMutex.RLock()
	defer fake.abortMultipartUploadWithContextMutex.RUnlock()
	return len(fake.abortMultipartUploadWithContextArgsForCall)
}

func (fake *FakeS3API) AbortMultipartUploadWithContextCalls(stub func(context.Context, *s3.AbortMultipartUploadInput, ...request.Option) (*s3.AbortMultipartUploadOutput, error)) {
	fake.abortMultipartUploadWithContextMutex.Lock()
	defer fake.abortMultipartUploadWithContextMutex.Unlock()
	fake.AbortMultipartUploadWithContextStub = stub
}

func (fake *FakeS3API) AbortMultipartUploadWithContextArgsForCall(i int) (context.Context, *s3.AbortMultipartUploadInput, []request.Option) {
	fake.abortMultipartUploadWithContextMutex.RLock()
	defer fake.abortMultipartUploadWithContextMutex.RUnlock()
	argsForCall := fake.abortMultipartUploadWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) AbortMultipartUploadWithContextReturns(result1 *s3.AbortMultipartUploadOutput, result2 error) {
	fake.abortMultipartUploadWithContextMutex.Lock()
	defer fake.abortMultipartUploadWithContextMutex.Unlock()
	fake.AbortMultipartUploadWithContextStub = nil
	fake.abortMultipartUploadWithContextReturns = struct {
		result1 *s3.AbortMultipartUploadOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) AbortMultipartUploadWithContextReturnsOnCall(i int, result1 *s3.AbortMultipartUploadOutput, result2 error) {
	fake.abortMultipartUploadWithContextMutex.Lock()
	defer fake.abortMultipartUploadWithContextMutex.Unlock()
	fake.AbortMultipartUploadWithContextStub = nil
	if fake.abortMultipartUploadWithContextReturnsOnCall == nil {
		fake.abortMultipartUploadWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.AbortMultipartUploadOutput
			result2 error
		})
	}
	fake.abortMultipartUploadWithContextReturnsOnCall[i] = struct {
		result1 *s3.AbortMultipartUploadOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) CompleteMultipartUpload(arg1 *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
	fake.completeMultipartUploadMutex.Lock()
	ret, specificReturn := fake.completeMultipartUploadReturnsOnCall[len(fake.completeMultipartUploadArgsForCall)]
	fake.completeMultipartUploadArgsForCall = append(fake.completeMultipartUploadArgsForCall, struct {
		arg1 *s3.CompleteMultipartUploadInput
	}{arg1})
	fake.recordInvocation("CompleteMultipartUpload", []interface{}{arg1})
	fake.completeMultipartUploadMutex.Unlock()
	if fake.CompleteMultipartUploadStub != nil {
		return fake.CompleteMultipartUploadStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.completeMultipartUploadReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) CompleteMultipartUploadCallCount() int {
	fake.completeMultipartUploadMutex.RLock()
	defer fake.completeMultipartUploadMutex.RUnlock()
	return len(fake.completeMultipartUploadArgsForCall)
}

func (fake *FakeS3API) CompleteMultipartUploadCalls(stub func(*s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)) {
	fake.completeMultipartUploadMutex.Lock()
	defer fake.completeMultipartUploadMutex.Unlock()
	fake.CompleteMultipartUploadStub = stub
}

func (fake *FakeS3API) CompleteMultipartUploadArgsForCall(i int) *s3.CompleteMultipartUploadInput {
	fake.completeMultipartUploadMutex.RLock()
	defer fake.completeMultipartUploadMutex.RUnlock()
	argsForCall := fake.completeMultipartUploadArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) CompleteMultipartUploadReturns(result1 *s3.CompleteMultipartUploadOutput, result2 error) {
	fake.completeMultipartUploadMutex.Lock()
	defer fake.completeMultipartUploadMutex.Unlock()
	fake.CompleteMultipartUploadStub = nil
	fake.completeMultipartUploadReturns = struct {
		result1 *s3.CompleteMultipartUploadOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) CompleteMultipartUploadReturnsOnCall(i int, result1 *s3.CompleteMultipartUploadOutput, result2 error) {
	fake.completeMultipartUploadMutex.Lock()
	defer fake.completeMultipartUploadMutex.Unlock()
	fake.CompleteMultipartUploadStub = nil
	if fake.completeMultipartUploadReturnsOnCall == nil {
		fake.completeMultipartUploadReturnsOnCall = make(map[int]struct {
			result1 *s3.CompleteMultipartUploadOutput
			result2 error
		})
	}
	fake.completeMultipartUploadReturnsOnCall[i] = struct {
		result1 *s3.CompleteMultipartUploadOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) CompleteMultipartUploadRequest(arg1 *s3.CompleteMultipartUploadInput) (*request.Request, *s3.CompleteMultipartUploadOutput) {
	fake.completeMultipartUploadRequestMutex.Lock()
	ret, specificReturn := fake.completeMultipartUploadRequestReturnsOnCall[len(fake.completeMultipartUploadRequestArgsForCall)]
	fake.completeMultipartUploadRequestArgsForCall = append(fake.completeMultipartUploadRequestArgsForCall, struct {
		arg1 *s3.CompleteMultipartUploadInput
	}{arg1})
	fake.recordInvocation("CompleteMultipartUploadRequest", []interface{}{arg1})
	fake.completeMultipartUploadRequestMutex.Unlock()
	if fake.CompleteMultipartUploadRequestStub != nil {
		return fake.CompleteMultipartUploadRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.completeMultipartUploadRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) CompleteMultipartUploadRequestCallCount() int {
	fake.completeMultipartUploadRequestMutex.RLock()
	defer fake.completeMultipartUploadRequestMutex.RUnlock()
	return len(fake.completeMultipartUploadRequestArgsForCall)
}

func (fake *FakeS3API) CompleteMultipartUploadRequestCalls(stub func(*s3.CompleteMultipartUploadInput) (*request.Request, *s3.CompleteMultipartUploadOutput)) {
	fake.completeMultipartUploadRequestMutex.Lock()
	defer fake.completeMultipartUploadRequestMutex.Unlock()
	fake.CompleteMultipartUploadRequestStub = stub
}

func (fake *FakeS3API) CompleteMultipartUploadRequestArgsForCall(i int) *s3.CompleteMultipartUploadInput {
	fake.completeMultipartUploadRequestMutex.RLock()
	defer fake.completeMultipartUploadRequestMutex.RUnlock()
	argsForCall := fake.completeMultipartUploadRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) CompleteMultipartUploadRequestReturns(result1 *request.Request, result2 *s3.CompleteMultipartUploadOutput) {
	fake.completeMultipartUploadRequestMutex.Lock()
	defer fake.completeMultipartUploadRequestMutex.Unlock()
	fake.CompleteMultipartUploadRequestStub = nil
	fake.completeMultipartUploadRequestReturns = struct {
		result1 *request.Request
		result2 *s3.CompleteMultipartUploadOutput
	}{result1, result2}
}

func (fake *FakeS3API) CompleteMultipartUploadRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.CompleteMultipartUploadOutput) {
	fake.completeMultipartUploadRequestMutex.Lock()
	defer fake.completeMultipartUploadRequestMutex.Unlock()
	fake.CompleteMultipartUploadRequestStub = nil
	if fake.completeMultipartUploadRequestReturnsOnCall == nil {
		fake.completeMultipartUploadRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.CompleteMultipartUploadOutput
		})
	}
	fake.completeMultipartUploadRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.CompleteMultipartUploadOutput
	}{result1, result2}
}

func (fake *FakeS3API) CompleteMultipartUploadWithContext(arg1 context.Context, arg2 *s3.CompleteMultipartUploadInput, arg3 ...request.Option) (*s3.CompleteMultipartUploadOutput, error) {
	fake.completeMultipartUploadWithContextMutex.Lock()
	ret, specificReturn := fake.completeMultipartUploadWithContextReturnsOnCall[len(fake.completeMultipartUploadWithContextArgsForCall)]
	fake.completeMultipartUploadWithContextArgsForCall = append(fake.completeMultipartUploadWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.CompleteMultipartUploadInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CompleteMultipartUploadWithContext", []interface{}{arg1, arg2, arg3})
	fake.completeMultipartUploadWithContextMutex.Unlock()
	if fake.CompleteMultipartUploadWithContextStub != nil {
		return fake.CompleteMultipartUploadWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.completeMultipartUploadWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) CompleteMultipartUploadWithContextCallCount() int {
	fake.completeMultipartUploadWithContextMutex.RLock()
	defer fake.completeMultipartUploadWithContextMutex.RUnlock()
	return len(fake.completeMultipartUploadWithContextArgsForCall)
}

func (fake *FakeS3API) CompleteMultipartUploadWithContextCalls(stub func(context.Context, *s3.CompleteMultipartUploadInput, ...request.Option) (*s3.CompleteMultipartUploadOutput, error)) {
	fake.completeMultipartUploadWithContextMutex.Lock()
	defer fake.completeMultipartUploadWithContextMutex.Unlock()
	fake.CompleteMultipartUploadWithContextStub = stub
}

func (fake *FakeS3API) CompleteMultipartUploadWithContextArgsForCall(i int) (context.Context, *s3.CompleteMultipartUploadInput, []request.Option) {
	fake.completeMultipartUploadWithContextMutex.RLock()
	defer fake.completeMultipartUploadWithContextMutex.RUnlock()
	argsForCall := fake.completeMultipartUploadWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) CompleteMultipartUploadWithContextReturns(result1 *s3.CompleteMultipartUploadOutput, result2 error) {
	fake.completeMultipartUploadWithContextMutex.Lock()
	defer fake.completeMultipartUploadWithContextMutex.Unlock()
	fake.CompleteMultipartUploadWithContextStub = nil
	fake.completeMultipartUploadWithContextReturns = struct {
		result1 *s3.CompleteMultipartUploadOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) CompleteMultipartUploadWithContextReturnsOnCall(i int, result1 *s3.CompleteMultipartUploadOutput, result2 error) {
	fake.completeMultipartUploadWithContextMutex.Lock()
	defer fake.completeMultipartUploadWithContextMutex.Unlock()
	fake.CompleteMultipartUploadWithContextStub = nil
	if fake.completeMultipartUploadWithContextReturnsOnCall == nil {
		fake.completeMultipartUploadWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.CompleteMultipartUploadOutput
			result2 error
		})
	}
	fake.completeMultipartUploadWithContextReturnsOnCall[i] = struct {
		result1 *s3.CompleteMultipartUploadOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) CopyObject(arg1 *s3.CopyObjectInput) (*s3.CopyObjectOutput, error) {
	fake.copyObjectMutex.Lock()
	ret, specificReturn := fake.copyObjectReturnsOnCall[len(fake.copyObjectArgsForCall)]
	fake.copyObjectArgsForCall = append(fake.copyObjectArgsForCall, struct {
		arg1 *s3.CopyObjectInput
	}{arg1})
	fake.recordInvocation("CopyObject", []interface{}{arg1})
	fake.copyObjectMutex.Unlock()
	if fake.CopyObjectStub != nil {
		return fake.CopyObjectStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.copyObjectReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) CopyObjectCallCount() int {
	fake.copyObjectMutex.RLock()
	defer fake.copyObjectMutex.RUnlock()
	return len(fake.copyObjectArgsForCall)
}

func (fake *FakeS3API) CopyObjectCalls(stub func(*s3.CopyObjectInput) (*s3.CopyObjectOutput, error)) {
	fake.copyObjectMutex.Lock()
	defer fake.copyObjectMutex.Unlock()
	fake.CopyObjectStub = stub
}

func (fake *FakeS3API) CopyObjectArgsForCall(i int) *s3.CopyObjectInput {
	fake.copyObjectMutex.RLock()
	defer fake.copyObjectMutex.RUnlock()
	argsForCall := fake.copyObjectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) CopyObjectReturns(result1 *s3.CopyObjectOutput, result2 error) {
	fake.copyObjectMutex.Lock()
	defer fake.copyObjectMutex.Unlock()
	fake.CopyObjectStub = nil
	fake.copyObjectReturns = struct {
		result1 *s3.CopyObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) CopyObjectReturnsOnCall(i int, result1 *s3.CopyObjectOutput, result2 error) {
	fake.copyObjectMutex.Lock()
	defer fake.copyObjectMutex.Unlock()
	fake.CopyObjectStub = nil
	if fake.copyObjectReturnsOnCall == nil {
		fake.copyObjectReturnsOnCall = make(map[int]struct {
			result1 *s3.CopyObjectOutput
			result2 error
		})
	}
	fake.copyObjectReturnsOnCall[i] = struct {
		result1 *s3.CopyObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) CopyObjectRequest(arg1 *s3.CopyObjectInput) (*request.Request, *s3.CopyObjectOutput) {
	fake.copyObjectRequestMutex.Lock()
	ret, specificReturn := fake.copyObjectRequestReturnsOnCall[len(fake.copyObjectRequestArgsForCall)]
	fake.copyObjectRequestArgsForCall = append(fake.copyObjectRequestArgsForCall, struct {
		arg1 *s3.CopyObjectInput
	}{arg1})
	fake.recordInvocation("CopyObjectRequest", []interface{}{arg1})
	fake.copyObjectRequestMutex.Unlock()
	if fake.CopyObjectRequestStub != nil {
		return fake.CopyObjectRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.copyObjectRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) CopyObjectRequestCallCount() int {
	fake.copyObjectRequestMutex.RLock()
	defer fake.copyObjectRequestMutex.RUnlock()
	return len(fake.copyObjectRequestArgsForCall)
}

func (fake *FakeS3API) CopyObjectRequestCalls(stub func(*s3.CopyObjectInput) (*request.Request, *s3.CopyObjectOutput)) {
	fake.copyObjectRequestMutex.Lock()
	defer fake.copyObjectRequestMutex.Unlock()
	fake.CopyObjectRequestStub = stub
}

func (fake *FakeS3API) CopyObjectRequestArgsForCall(i int) *s3.CopyObjectInput {
	fake.copyObjectRequestMutex.RLock()
	defer fake.copyObjectRequestMutex.RUnlock()
	argsForCall := fake.copyObjectRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) CopyObjectRequestReturns(result1 *request.Request, result2 *s3.CopyObjectOutput) {
	fake.copyObjectRequestMutex.Lock()
	defer fake.copyObjectRequestMutex.Unlock()
	fake.CopyObjectRequestStub = nil
	fake.copyObjectRequestReturns = struct {
		result1 *request.Request
		result2 *s3.CopyObjectOutput
	}{result1, result2}
}

func (fake *FakeS3API) CopyObjectRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.CopyObjectOutput) {
	fake.copyObjectRequestMutex.Lock()
	defer fake.copyObjectRequestMutex.Unlock()
	fake.CopyObjectRequestStub = nil
	if fake.copyObjectRequestReturnsOnCall == nil {
		fake.copyObjectRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.CopyObjectOutput
		})
	}
	fake.copyObjectRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.CopyObjectOutput
	}{result1, result2}
}

func (fake *FakeS3API) CopyObjectWithContext(arg1 context.Context, arg2 *s3.CopyObjectInput, arg3 ...request.Option) (*s3.CopyObjectOutput, error) {
	fake.copyObjectWithContextMutex.Lock()
	ret, specificReturn := fake.copyObjectWithContextReturnsOnCall[len(fake.copyObjectWithContextArgsForCall)]
	fake.copyObjectWithContextArgsForCall = append(fake.copyObjectWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.CopyObjectInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CopyObjectWithContext", []interface{}{arg1, arg2, arg3})
	fake.copyObjectWithContextMutex.Unlock()
	if fake.CopyObjectWithContextStub != nil {
		return fake.CopyObjectWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.copyObjectWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) CopyObjectWithContextCallCount() int {
	fake.copyObjectWithContextMutex.RLock()
	defer fake.copyObjectWithContextMutex.RUnlock()
	return len(fake.copyObjectWithContextArgsForCall)
}

func (fake *FakeS3API) CopyObjectWithContextCalls(stub func(context.Context, *s3.CopyObjectInput, ...request.Option) (*s3.CopyObjectOutput, error)) {
	fake.copyObjectWithContextMutex.Lock()
	defer fake.copyObjectWithContextMutex.Unlock()
	fake.CopyObjectWithContextStub = stub
}

func (fake *FakeS3API) CopyObjectWithContextArgsForCall(i int) (context.Context, *s3.CopyObjectInput, []request.Option) {
	fake.copyObjectWithContextMutex.RLock()
	defer fake.copyObjectWithContextMutex.RUnlock()
	argsForCall := fake.copyObjectWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) CopyObjectWithContextReturns(result1 *s3.CopyObjectOutput, result2 error) {
	fake.copyObjectWithContextMutex.Lock()
	defer fake.copyObjectWithContextMutex.Unlock()
	fake.CopyObjectWithContextStub = nil
	fake.copyObjectWithContextReturns = struct {
		result1 *s3.CopyObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) CopyObjectWithContextReturnsOnCall(i int, result1 *s3.CopyObjectOutput, result2 error) {
	fake.copyObjectWithContextMutex.Lock()
	defer fake.copyObjectWithContextMutex.Unlock()
	fake.CopyObjectWithContextStub = nil
	if fake.copyObjectWithContextReturnsOnCall == nil {
		fake.copyObjectWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.CopyObjectOutput
			result2 error
		})
	}
	fake.copyObjectWithContextReturnsOnCall[i] = struct {
		result1 *s3.CopyObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) CreateBucket(arg1 *s3.CreateBucketInput) (*s3.CreateBucketOutput, error) {
	fake.createBucketMutex.Lock()
	ret, specificReturn := fake.createBucketReturnsOnCall[len(fake.createBucketArgsForCall)]
	fake.createBucketArgsForCall = append(fake.createBucketArgsForCall, struct {
		arg1 *s3.CreateBucketInput
	}{arg1})
	fake.recordInvocation("CreateBucket", []interface{}{arg1})
	fake.createBucketMutex.Unlock()
	if fake.CreateBucketStub != nil {
		return fake.CreateBucketStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createBucketReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) CreateBucketCallCount() int {
	fake.createBucketMutex.RLock()
	defer fake.createBucketMutex.RUnlock()
	return len(fake.createBucketArgsForCall)
}

func (fake *FakeS3API) CreateBucketCalls(stub func(*s3.CreateBucketInput) (*s3.CreateBucketOutput, error)) {
	fake.createBucketMutex.Lock()
	defer fake.createBucketMutex.Unlock()
	fake.CreateBucketStub = stub
}

func (fake *FakeS3API) CreateBucketArgsForCall(i int) *s3.CreateBucketInput {
	fake.createBucketMutex.RLock()
	defer fake.createBucketMutex.RUnlock()
	argsForCall := fake.createBucketArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) CreateBucketReturns(result1 *s3.CreateBucketOutput, result2 error) {
	fake.createBucketMutex.Lock()
	defer fake.createBucketMutex.Unlock()
	fake.CreateBucketStub = nil
	fake.createBucketReturns = struct {
		result1 *s3.CreateBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) CreateBucketReturnsOnCall(i int, result1 *s3.CreateBucketOutput, result2 error) {
	fake.createBucketMutex.Lock()
	defer fake.createBucketMutex.Unlock()
	fake.CreateBucketStub = nil
	if fake.createBucketReturnsOnCall == nil {
		fake.createBucketReturnsOnCall = make(map[int]struct {
			result1 *s3.CreateBucketOutput
			result2 error
		})
	}
	fake.createBucketReturnsOnCall[i] = struct {
		result1 *s3.CreateBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) CreateBucketRequest(arg1 *s3.CreateBucketInput) (*request.Request, *s3.CreateBucketOutput) {
	fake.createBucketRequestMutex.Lock()
	ret, specificReturn := fake.createBucketRequestReturnsOnCall[len(fake.createBucketRequestArgsForCall)]
	fake.createBucketRequestArgsForCall = append(fake.createBucketRequestArgsForCall, struct {
		arg1 *s3.CreateBucketInput
	}{arg1})
	fake.recordInvocation("CreateBucketRequest", []interface{}{arg1})
	fake.createBucketRequestMutex.Unlock()
	if fake.CreateBucketRequestStub != nil {
		return fake.CreateBucketRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createBucketRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) CreateBucketRequestCallCount() int {
	fake.createBucketRequestMutex.RLock()
	defer fake.createBucketRequestMutex.RUnlock()
	return len(fake.createBucketRequestArgsForCall)
}

func (fake *FakeS3API) CreateBucketRequestCalls(stub func(*s3.CreateBucketInput) (*request.Request, *s3.CreateBucketOutput)) {
	fake.createBucketRequestMutex.Lock()
	defer fake.createBucketRequestMutex.Unlock()
	fake.CreateBucketRequestStub = stub
}

func (fake *FakeS3API) CreateBucketRequestArgsForCall(i int) *s3.CreateBucketInput {
	fake.createBucketRequestMutex.RLock()
	defer fake.createBucketRequestMutex.RUnlock()
	argsForCall := fake.createBucketRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) CreateBucketRequestReturns(result1 *request.Request, result2 *s3.CreateBucketOutput) {
	fake.createBucketRequestMutex.Lock()
	defer fake.createBucketRequestMutex.Unlock()
	fake.CreateBucketRequestStub = nil
	fake.createBucketRequestReturns = struct {
		result1 *request.Request
		result2 *s3.CreateBucketOutput
	}{result1, result2}
}

func (fake *FakeS3API) CreateBucketRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.CreateBucketOutput) {
	fake.createBucketRequestMutex.Lock()
	defer fake.createBucketRequestMutex.Unlock()
	fake.CreateBucketRequestStub = nil
	if fake.createBucketRequestReturnsOnCall == nil {
		fake.createBucketRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.CreateBucketOutput
		})
	}
	fake.createBucketRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.CreateBucketOutput
	}{result1, result2}
}

func (fake *FakeS3API) CreateBucketWithContext(arg1 context.Context, arg2 *s3.CreateBucketInput, arg3 ...request.Option) (*s3.CreateBucketOutput, error) {
	fake.createBucketWithContextMutex.Lock()
	ret, specificReturn := fake.createBucketWithContextReturnsOnCall[len(fake.createBucketWithContextArgsForCall)]
	fake.createBucketWithContextArgsForCall = append(fake.createBucketWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.CreateBucketInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateBucketWithContext", []interface{}{arg1, arg2, arg3})
	fake.createBucketWithContextMutex.Unlock()
	if fake.CreateBucketWithContextStub != nil {
		return fake.CreateBucketWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createBucketWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) CreateBucketWithContextCallCount() int {
	fake.createBucketWithContextMutex.RLock()
	defer fake.createBucketWithContextMutex.RUnlock()
	return len(fake.createBucketWithContextArgsForCall)
}

func (fake *FakeS3API) CreateBucketWithContextCalls(stub func(context.Context, *s3.CreateBucketInput, ...request.Option) (*s3.CreateBucketOutput, error)) {
	fake.createBucketWithContextMutex.Lock()
	defer fake.createBucketWithContextMutex.Unlock()
	fake.CreateBucketWithContextStub = stub
}

func (fake *FakeS3API) CreateBucketWithContextArgsForCall(i int) (context.Context, *s3.CreateBucketInput, []request.Option) {
	fake.createBucketWithContextMutex.RLock()
	defer fake.createBucketWithContextMutex.RUnlock()
	argsForCall := fake.createBucketWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) CreateBucketWithContextReturns(result1 *s3.CreateBucketOutput, result2 error) {
	fake.createBucketWithContextMutex.Lock()
	defer fake.createBucketWithContextMutex.Unlock()
	fake.CreateBucketWithContextStub = nil
	fake.createBucketWithContextReturns = struct {
		result1 *s3.CreateBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) CreateBucketWithContextReturnsOnCall(i int, result1 *s3.CreateBucketOutput, result2 error) {
	fake.createBucketWithContextMutex.Lock()
	defer fake.createBucketWithContextMutex.Unlock()
	fake.CreateBucketWithContextStub = nil
	if fake.createBucketWithContextReturnsOnCall == nil {
		fake.createBucketWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.CreateBucketOutput
			result2 error
		})
	}
	fake.createBucketWithContextReturnsOnCall[i] = struct {
		result1 *s3.CreateBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) CreateMultipartUpload(arg1 *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
	fake.createMultipartUploadMutex.Lock()
	ret, specificReturn := fake.createMultipartUploadReturnsOnCall[len(fake.createMultipartUploadArgsForCall)]
	fake.createMultipartUploadArgsForCall = append(fake.createMultipartUploadArgsForCall, struct {
		arg1 *s3.CreateMultipartUploadInput
	}{arg1})
	fake.recordInvocation("CreateMultipartUpload", []interface{}{arg1})
	fake.createMultipartUploadMutex.Unlock()
	if fake.CreateMultipartUploadStub != nil {
		return fake.CreateMultipartUploadStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createMultipartUploadReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) CreateMultipartUploadCallCount() int {
	fake.createMultipartUploadMutex.RLock()
	defer fake.createMultipartUploadMutex.RUnlock()
	return len(fake.createMultipartUploadArgsForCall)
}

func (fake *FakeS3API) CreateMultipartUploadCalls(stub func(*s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)) {
	fake.createMultipartUploadMutex.Lock()
	defer fake.createMultipartUploadMutex.Unlock()
	fake.CreateMultipartUploadStub = stub
}

func (fake *FakeS3API) CreateMultipartUploadArgsForCall(i int) *s3.CreateMultipartUploadInput {
	fake.createMultipartUploadMutex.RLock()
	defer fake.createMultipartUploadMutex.RUnlock()
	argsForCall := fake.createMultipartUploadArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) CreateMultipartUploadReturns(result1 *s3.CreateMultipartUploadOutput, result2 error) {
	fake.createMultipartUploadMutex.Lock()
	defer fake.createMultipartUploadMutex.Unlock()
	fake.CreateMultipartUploadStub = nil
	fake.createMultipartUploadReturns = struct {
		result1 *s3.CreateMultipartUploadOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) CreateMultipartUploadReturnsOnCall(i int, result1 *s3.CreateMultipartUploadOutput, result2 error) {
	fake.createMultipartUploadMutex.Lock()
	defer fake.createMultipartUploadMutex.Unlock()
	fake.CreateMultipartUploadStub = nil
	if fake.createMultipartUploadReturnsOnCall == nil {
		fake.createMultipartUploadReturnsOnCall = make(map[int]struct {
			result1 *s3.CreateMultipartUploadOutput
			result2 error
		})
	}
	fake.createMultipartUploadReturnsOnCall[i] = struct {
		result1 *s3.CreateMultipartUploadOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) CreateMultipartUploadRequest(arg1 *s3.CreateMultipartUploadInput) (*request.Request, *s3.CreateMultipartUploadOutput) {
	fake.createMultipartUploadRequestMutex.Lock()
	ret, specificReturn := fake.createMultipartUploadRequestReturnsOnCall[len(fake.createMultipartUploadRequestArgsForCall)]
	fake.createMultipartUploadRequestArgsForCall = append(fake.createMultipartUploadRequestArgsForCall, struct {
		arg1 *s3.CreateMultipartUploadInput
	}{arg1})
	fake.recordInvocation("CreateMultipartUploadRequest", []interface{}{arg1})
	fake.createMultipartUploadRequestMutex.Unlock()
	if fake.CreateMultipartUploadRequestStub != nil {
		return fake.CreateMultipartUploadRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createMultipartUploadRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) CreateMultipartUploadRequestCallCount() int {
	fake.createMultipartUploadRequestMutex.RLock()
	defer fake.createMultipartUploadRequestMutex.RUnlock()
	return len(fake.createMultipartUploadRequestArgsForCall)
}

func (fake *FakeS3API) CreateMultipartUploadRequestCalls(stub func(*s3.CreateMultipartUploadInput) (*request.Request, *s3.CreateMultipartUploadOutput)) {
	fake.createMultipartUploadRequestMutex.Lock()
	defer fake.createMultipartUploadRequestMutex.Unlock()
	fake.CreateMultipartUploadRequestStub = stub
}

func (fake *FakeS3API) CreateMultipartUploadRequestArgsForCall(i int) *s3.CreateMultipartUploadInput {
	fake.createMultipartUploadRequestMutex.RLock()
	defer fake.createMultipartUploadRequestMutex.RUnlock()
	argsForCall := fake.createMultipartUploadRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) CreateMultipartUploadRequestReturns(result1 *request.Request, result2 *s3.CreateMultipartUploadOutput) {
	fake.createMultipartUploadRequestMutex.Lock()
	defer fake.createMultipartUploadRequestMutex.Unlock()
	fake.CreateMultipartUploadRequestStub = nil
	fake.createMultipartUploadRequestReturns = struct {
		result1 *request.Request
		result2 *s3.CreateMultipartUploadOutput
	}{result1, result2}
}

func (fake *FakeS3API) CreateMultipartUploadRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.CreateMultipartUploadOutput) {
	fake.createMultipartUploadRequestMutex.Lock()
	defer fake.createMultipartUploadRequestMutex.Unlock()
	fake.CreateMultipartUploadRequestStub = nil
	if fake.createMultipartUploadRequestReturnsOnCall == nil {
		fake.createMultipartUploadRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.CreateMultipartUploadOutput
		})
	}
	fake.createMultipartUploadRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.CreateMultipartUploadOutput
	}{result1, result2}
}

func (fake *FakeS3API) CreateMultipartUploadWithContext(arg1 context.Context, arg2 *s3.CreateMultipartUploadInput, arg3 ...request.Option) (*s3.CreateMultipartUploadOutput, error) {
	fake.createMultipartUploadWithContextMutex.Lock()
	ret, specificReturn := fake.createMultipartUploadWithContextReturnsOnCall[len(fake.createMultipartUploadWithContextArgsForCall)]
	fake.createMultipartUploadWithContextArgsForCall = append(fake.createMultipartUploadWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.CreateMultipartUploadInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateMultipartUploadWithContext", []interface{}{arg1, arg2, arg3})
	fake.createMultipartUploadWithContextMutex.Unlock()
	if fake.CreateMultipartUploadWithContextStub != nil {
		return fake.CreateMultipartUploadWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createMultipartUploadWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) CreateMultipartUploadWithContextCallCount() int {
	fake.createMultipartUploadWithContextMutex.RLock()
	defer fake.createMultipartUploadWithContextMutex.RUnlock()
	return len(fake.createMultipartUploadWithContextArgsForCall)
}

func (fake *FakeS3API) CreateMultipartUploadWithContextCalls(stub func(context.Context, *s3.CreateMultipartUploadInput, ...request.Option) (*s3.CreateMultipartUploadOutput, error)) {
	fake.createMultipartUploadWithContextMutex.Lock()
	defer fake.createMultipartUploadWithContextMutex.Unlock()
	fake.CreateMultipartUploadWithContextStub = stub
}

func (fake *FakeS3API) CreateMultipartUploadWithContextArgsForCall(i int) (context.Context, *s3.CreateMultipartUploadInput, []request.Option) {
	fake.createMultipartUploadWithContextMutex.RLock()
	defer fake.createMultipartUploadWithContextMutex.RUnlock()
	argsForCall := fake.createMultipartUploadWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) CreateMultipartUploadWithContextReturns(result1 *s3.CreateMultipartUploadOutput, result2 error) {
	fake.createMultipartUploadWithContextMutex.Lock()
	defer fake.createMultipartUploadWithContextMutex.Unlock()
	fake.CreateMultipartUploadWithContextStub = nil
	fake.createMultipartUploadWithContextReturns = struct {
		result1 *s3.CreateMultipartUploadOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) CreateMultipartUploadWithContextReturnsOnCall(i int, result1 *s3.CreateMultipartUploadOutput, result2 error) {
	fake.createMultipartUploadWithContextMutex.Lock()
	defer fake.createMultipartUploadWithContextMutex.Unlock()
	fake.CreateMultipartUploadWithContextStub = nil
	if fake.createMultipartUploadWithContextReturnsOnCall == nil {
		fake.createMultipartUploadWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.CreateMultipartUploadOutput
			result2 error
		})
	}
	fake.createMultipartUploadWithContextReturnsOnCall[i] = struct {
		result1 *s3.CreateMultipartUploadOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucket(arg1 *s3.DeleteBucketInput) (*s3.DeleteBucketOutput, error) {
	fake.deleteBucketMutex.Lock()
	ret, specificReturn := fake.deleteBucketReturnsOnCall[len(fake.deleteBucketArgsForCall)]
	fake.deleteBucketArgsForCall = append(fake.deleteBucketArgsForCall, struct {
		arg1 *s3.DeleteBucketInput
	}{arg1})
	fake.recordInvocation("DeleteBucket", []interface{}{arg1})
	fake.deleteBucketMutex.Unlock()
	if fake.DeleteBucketStub != nil {
		return fake.DeleteBucketStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketCallCount() int {
	fake.deleteBucketMutex.RLock()
	defer fake.deleteBucketMutex.RUnlock()
	return len(fake.deleteBucketArgsForCall)
}

func (fake *FakeS3API) DeleteBucketCalls(stub func(*s3.DeleteBucketInput) (*s3.DeleteBucketOutput, error)) {
	fake.deleteBucketMutex.Lock()
	defer fake.deleteBucketMutex.Unlock()
	fake.DeleteBucketStub = stub
}

func (fake *FakeS3API) DeleteBucketArgsForCall(i int) *s3.DeleteBucketInput {
	fake.deleteBucketMutex.RLock()
	defer fake.deleteBucketMutex.RUnlock()
	argsForCall := fake.deleteBucketArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketReturns(result1 *s3.DeleteBucketOutput, result2 error) {
	fake.deleteBucketMutex.Lock()
	defer fake.deleteBucketMutex.Unlock()
	fake.DeleteBucketStub = nil
	fake.deleteBucketReturns = struct {
		result1 *s3.DeleteBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketReturnsOnCall(i int, result1 *s3.DeleteBucketOutput, result2 error) {
	fake.deleteBucketMutex.Lock()
	defer fake.deleteBucketMutex.Unlock()
	fake.DeleteBucketStub = nil
	if fake.deleteBucketReturnsOnCall == nil {
		fake.deleteBucketReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketOutput
			result2 error
		})
	}
	fake.deleteBucketReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfiguration(arg1 *s3.DeleteBucketAnalyticsConfigurationInput) (*s3.DeleteBucketAnalyticsConfigurationOutput, error) {
	fake.deleteBucketAnalyticsConfigurationMutex.Lock()
	ret, specificReturn := fake.deleteBucketAnalyticsConfigurationReturnsOnCall[len(fake.deleteBucketAnalyticsConfigurationArgsForCall)]
	fake.deleteBucketAnalyticsConfigurationArgsForCall = append(fake.deleteBucketAnalyticsConfigurationArgsForCall, struct {
		arg1 *s3.DeleteBucketAnalyticsConfigurationInput
	}{arg1})
	fake.recordInvocation("DeleteBucketAnalyticsConfiguration", []interface{}{arg1})
	fake.deleteBucketAnalyticsConfigurationMutex.Unlock()
	if fake.DeleteBucketAnalyticsConfigurationStub != nil {
		return fake.DeleteBucketAnalyticsConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketAnalyticsConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfigurationCallCount() int {
	fake.deleteBucketAnalyticsConfigurationMutex.RLock()
	defer fake.deleteBucketAnalyticsConfigurationMutex.RUnlock()
	return len(fake.deleteBucketAnalyticsConfigurationArgsForCall)
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfigurationCalls(stub func(*s3.DeleteBucketAnalyticsConfigurationInput) (*s3.DeleteBucketAnalyticsConfigurationOutput, error)) {
	fake.deleteBucketAnalyticsConfigurationMutex.Lock()
	defer fake.deleteBucketAnalyticsConfigurationMutex.Unlock()
	fake.DeleteBucketAnalyticsConfigurationStub = stub
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfigurationArgsForCall(i int) *s3.DeleteBucketAnalyticsConfigurationInput {
	fake.deleteBucketAnalyticsConfigurationMutex.RLock()
	defer fake.deleteBucketAnalyticsConfigurationMutex.RUnlock()
	argsForCall := fake.deleteBucketAnalyticsConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfigurationReturns(result1 *s3.DeleteBucketAnalyticsConfigurationOutput, result2 error) {
	fake.deleteBucketAnalyticsConfigurationMutex.Lock()
	defer fake.deleteBucketAnalyticsConfigurationMutex.Unlock()
	fake.DeleteBucketAnalyticsConfigurationStub = nil
	fake.deleteBucketAnalyticsConfigurationReturns = struct {
		result1 *s3.DeleteBucketAnalyticsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfigurationReturnsOnCall(i int, result1 *s3.DeleteBucketAnalyticsConfigurationOutput, result2 error) {
	fake.deleteBucketAnalyticsConfigurationMutex.Lock()
	defer fake.deleteBucketAnalyticsConfigurationMutex.Unlock()
	fake.DeleteBucketAnalyticsConfigurationStub = nil
	if fake.deleteBucketAnalyticsConfigurationReturnsOnCall == nil {
		fake.deleteBucketAnalyticsConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketAnalyticsConfigurationOutput
			result2 error
		})
	}
	fake.deleteBucketAnalyticsConfigurationReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketAnalyticsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfigurationRequest(arg1 *s3.DeleteBucketAnalyticsConfigurationInput) (*request.Request, *s3.DeleteBucketAnalyticsConfigurationOutput) {
	fake.deleteBucketAnalyticsConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.deleteBucketAnalyticsConfigurationRequestReturnsOnCall[len(fake.deleteBucketAnalyticsConfigurationRequestArgsForCall)]
	fake.deleteBucketAnalyticsConfigurationRequestArgsForCall = append(fake.deleteBucketAnalyticsConfigurationRequestArgsForCall, struct {
		arg1 *s3.DeleteBucketAnalyticsConfigurationInput
	}{arg1})
	fake.recordInvocation("DeleteBucketAnalyticsConfigurationRequest", []interface{}{arg1})
	fake.deleteBucketAnalyticsConfigurationRequestMutex.Unlock()
	if fake.DeleteBucketAnalyticsConfigurationRequestStub != nil {
		return fake.DeleteBucketAnalyticsConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketAnalyticsConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfigurationRequestCallCount() int {
	fake.deleteBucketAnalyticsConfigurationRequestMutex.RLock()
	defer fake.deleteBucketAnalyticsConfigurationRequestMutex.RUnlock()
	return len(fake.deleteBucketAnalyticsConfigurationRequestArgsForCall)
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfigurationRequestCalls(stub func(*s3.DeleteBucketAnalyticsConfigurationInput) (*request.Request, *s3.DeleteBucketAnalyticsConfigurationOutput)) {
	fake.deleteBucketAnalyticsConfigurationRequestMutex.Lock()
	defer fake.deleteBucketAnalyticsConfigurationRequestMutex.Unlock()
	fake.DeleteBucketAnalyticsConfigurationRequestStub = stub
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfigurationRequestArgsForCall(i int) *s3.DeleteBucketAnalyticsConfigurationInput {
	fake.deleteBucketAnalyticsConfigurationRequestMutex.RLock()
	defer fake.deleteBucketAnalyticsConfigurationRequestMutex.RUnlock()
	argsForCall := fake.deleteBucketAnalyticsConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfigurationRequestReturns(result1 *request.Request, result2 *s3.DeleteBucketAnalyticsConfigurationOutput) {
	fake.deleteBucketAnalyticsConfigurationRequestMutex.Lock()
	defer fake.deleteBucketAnalyticsConfigurationRequestMutex.Unlock()
	fake.DeleteBucketAnalyticsConfigurationRequestStub = nil
	fake.deleteBucketAnalyticsConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketAnalyticsConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.DeleteBucketAnalyticsConfigurationOutput) {
	fake.deleteBucketAnalyticsConfigurationRequestMutex.Lock()
	defer fake.deleteBucketAnalyticsConfigurationRequestMutex.Unlock()
	fake.DeleteBucketAnalyticsConfigurationRequestStub = nil
	if fake.deleteBucketAnalyticsConfigurationRequestReturnsOnCall == nil {
		fake.deleteBucketAnalyticsConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.DeleteBucketAnalyticsConfigurationOutput
		})
	}
	fake.deleteBucketAnalyticsConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketAnalyticsConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfigurationWithContext(arg1 context.Context, arg2 *s3.DeleteBucketAnalyticsConfigurationInput, arg3 ...request.Option) (*s3.DeleteBucketAnalyticsConfigurationOutput, error) {
	fake.deleteBucketAnalyticsConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.deleteBucketAnalyticsConfigurationWithContextReturnsOnCall[len(fake.deleteBucketAnalyticsConfigurationWithContextArgsForCall)]
	fake.deleteBucketAnalyticsConfigurationWithContextArgsForCall = append(fake.deleteBucketAnalyticsConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketAnalyticsConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteBucketAnalyticsConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteBucketAnalyticsConfigurationWithContextMutex.Unlock()
	if fake.DeleteBucketAnalyticsConfigurationWithContextStub != nil {
		return fake.DeleteBucketAnalyticsConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketAnalyticsConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfigurationWithContextCallCount() int {
	fake.deleteBucketAnalyticsConfigurationWithContextMutex.RLock()
	defer fake.deleteBucketAnalyticsConfigurationWithContextMutex.RUnlock()
	return len(fake.deleteBucketAnalyticsConfigurationWithContextArgsForCall)
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfigurationWithContextCalls(stub func(context.Context, *s3.DeleteBucketAnalyticsConfigurationInput, ...request.Option) (*s3.DeleteBucketAnalyticsConfigurationOutput, error)) {
	fake.deleteBucketAnalyticsConfigurationWithContextMutex.Lock()
	defer fake.deleteBucketAnalyticsConfigurationWithContextMutex.Unlock()
	fake.DeleteBucketAnalyticsConfigurationWithContextStub = stub
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfigurationWithContextArgsForCall(i int) (context.Context, *s3.DeleteBucketAnalyticsConfigurationInput, []request.Option) {
	fake.deleteBucketAnalyticsConfigurationWithContextMutex.RLock()
	defer fake.deleteBucketAnalyticsConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.deleteBucketAnalyticsConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfigurationWithContextReturns(result1 *s3.DeleteBucketAnalyticsConfigurationOutput, result2 error) {
	fake.deleteBucketAnalyticsConfigurationWithContextMutex.Lock()
	defer fake.deleteBucketAnalyticsConfigurationWithContextMutex.Unlock()
	fake.DeleteBucketAnalyticsConfigurationWithContextStub = nil
	fake.deleteBucketAnalyticsConfigurationWithContextReturns = struct {
		result1 *s3.DeleteBucketAnalyticsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketAnalyticsConfigurationWithContextReturnsOnCall(i int, result1 *s3.DeleteBucketAnalyticsConfigurationOutput, result2 error) {
	fake.deleteBucketAnalyticsConfigurationWithContextMutex.Lock()
	defer fake.deleteBucketAnalyticsConfigurationWithContextMutex.Unlock()
	fake.DeleteBucketAnalyticsConfigurationWithContextStub = nil
	if fake.deleteBucketAnalyticsConfigurationWithContextReturnsOnCall == nil {
		fake.deleteBucketAnalyticsConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketAnalyticsConfigurationOutput
			result2 error
		})
	}
	fake.deleteBucketAnalyticsConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketAnalyticsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketCors(arg1 *s3.DeleteBucketCorsInput) (*s3.DeleteBucketCorsOutput, error) {
	fake.deleteBucketCorsMutex.Lock()
	ret, specificReturn := fake.deleteBucketCorsReturnsOnCall[len(fake.deleteBucketCorsArgsForCall)]
	fake.deleteBucketCorsArgsForCall = append(fake.deleteBucketCorsArgsForCall, struct {
		arg1 *s3.DeleteBucketCorsInput
	}{arg1})
	fake.recordInvocation("DeleteBucketCors", []interface{}{arg1})
	fake.deleteBucketCorsMutex.Unlock()
	if fake.DeleteBucketCorsStub != nil {
		return fake.DeleteBucketCorsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketCorsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketCorsCallCount() int {
	fake.deleteBucketCorsMutex.RLock()
	defer fake.deleteBucketCorsMutex.RUnlock()
	return len(fake.deleteBucketCorsArgsForCall)
}

func (fake *FakeS3API) DeleteBucketCorsCalls(stub func(*s3.DeleteBucketCorsInput) (*s3.DeleteBucketCorsOutput, error)) {
	fake.deleteBucketCorsMutex.Lock()
	defer fake.deleteBucketCorsMutex.Unlock()
	fake.DeleteBucketCorsStub = stub
}

func (fake *FakeS3API) DeleteBucketCorsArgsForCall(i int) *s3.DeleteBucketCorsInput {
	fake.deleteBucketCorsMutex.RLock()
	defer fake.deleteBucketCorsMutex.RUnlock()
	argsForCall := fake.deleteBucketCorsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketCorsReturns(result1 *s3.DeleteBucketCorsOutput, result2 error) {
	fake.deleteBucketCorsMutex.Lock()
	defer fake.deleteBucketCorsMutex.Unlock()
	fake.DeleteBucketCorsStub = nil
	fake.deleteBucketCorsReturns = struct {
		result1 *s3.DeleteBucketCorsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketCorsReturnsOnCall(i int, result1 *s3.DeleteBucketCorsOutput, result2 error) {
	fake.deleteBucketCorsMutex.Lock()
	defer fake.deleteBucketCorsMutex.Unlock()
	fake.DeleteBucketCorsStub = nil
	if fake.deleteBucketCorsReturnsOnCall == nil {
		fake.deleteBucketCorsReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketCorsOutput
			result2 error
		})
	}
	fake.deleteBucketCorsReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketCorsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketCorsRequest(arg1 *s3.DeleteBucketCorsInput) (*request.Request, *s3.DeleteBucketCorsOutput) {
	fake.deleteBucketCorsRequestMutex.Lock()
	ret, specificReturn := fake.deleteBucketCorsRequestReturnsOnCall[len(fake.deleteBucketCorsRequestArgsForCall)]
	fake.deleteBucketCorsRequestArgsForCall = append(fake.deleteBucketCorsRequestArgsForCall, struct {
		arg1 *s3.DeleteBucketCorsInput
	}{arg1})
	fake.recordInvocation("DeleteBucketCorsRequest", []interface{}{arg1})
	fake.deleteBucketCorsRequestMutex.Unlock()
	if fake.DeleteBucketCorsRequestStub != nil {
		return fake.DeleteBucketCorsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketCorsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketCorsRequestCallCount() int {
	fake.deleteBucketCorsRequestMutex.RLock()
	defer fake.deleteBucketCorsRequestMutex.RUnlock()
	return len(fake.deleteBucketCorsRequestArgsForCall)
}

func (fake *FakeS3API) DeleteBucketCorsRequestCalls(stub func(*s3.DeleteBucketCorsInput) (*request.Request, *s3.DeleteBucketCorsOutput)) {
	fake.deleteBucketCorsRequestMutex.Lock()
	defer fake.deleteBucketCorsRequestMutex.Unlock()
	fake.DeleteBucketCorsRequestStub = stub
}

func (fake *FakeS3API) DeleteBucketCorsRequestArgsForCall(i int) *s3.DeleteBucketCorsInput {
	fake.deleteBucketCorsRequestMutex.RLock()
	defer fake.deleteBucketCorsRequestMutex.RUnlock()
	argsForCall := fake.deleteBucketCorsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketCorsRequestReturns(result1 *request.Request, result2 *s3.DeleteBucketCorsOutput) {
	fake.deleteBucketCorsRequestMutex.Lock()
	defer fake.deleteBucketCorsRequestMutex.Unlock()
	fake.DeleteBucketCorsRequestStub = nil
	fake.deleteBucketCorsRequestReturns = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketCorsOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketCorsRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.DeleteBucketCorsOutput) {
	fake.deleteBucketCorsRequestMutex.Lock()
	defer fake.deleteBucketCorsRequestMutex.Unlock()
	fake.DeleteBucketCorsRequestStub = nil
	if fake.deleteBucketCorsRequestReturnsOnCall == nil {
		fake.deleteBucketCorsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.DeleteBucketCorsOutput
		})
	}
	fake.deleteBucketCorsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketCorsOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketCorsWithContext(arg1 context.Context, arg2 *s3.DeleteBucketCorsInput, arg3 ...request.Option) (*s3.DeleteBucketCorsOutput, error) {
	fake.deleteBucketCorsWithContextMutex.Lock()
	ret, specificReturn := fake.deleteBucketCorsWithContextReturnsOnCall[len(fake.deleteBucketCorsWithContextArgsForCall)]
	fake.deleteBucketCorsWithContextArgsForCall = append(fake.deleteBucketCorsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketCorsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteBucketCorsWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteBucketCorsWithContextMutex.Unlock()
	if fake.DeleteBucketCorsWithContextStub != nil {
		return fake.DeleteBucketCorsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketCorsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketCorsWithContextCallCount() int {
	fake.deleteBucketCorsWithContextMutex.RLock()
	defer fake.deleteBucketCorsWithContextMutex.RUnlock()
	return len(fake.deleteBucketCorsWithContextArgsForCall)
}

func (fake *FakeS3API) DeleteBucketCorsWithContextCalls(stub func(context.Context, *s3.DeleteBucketCorsInput, ...request.Option) (*s3.DeleteBucketCorsOutput, error)) {
	fake.deleteBucketCorsWithContextMutex.Lock()
	defer fake.deleteBucketCorsWithContextMutex.Unlock()
	fake.DeleteBucketCorsWithContextStub = stub
}

func (fake *FakeS3API) DeleteBucketCorsWithContextArgsForCall(i int) (context.Context, *s3.DeleteBucketCorsInput, []request.Option) {
	fake.deleteBucketCorsWithContextMutex.RLock()
	defer fake.deleteBucketCorsWithContextMutex.RUnlock()
	argsForCall := fake.deleteBucketCorsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) DeleteBucketCorsWithContextReturns(result1 *s3.DeleteBucketCorsOutput, result2 error) {
	fake.deleteBucketCorsWithContextMutex.Lock()
	defer fake.deleteBucketCorsWithContextMutex.Unlock()
	fake.DeleteBucketCorsWithContextStub = nil
	fake.deleteBucketCorsWithContextReturns = struct {
		result1 *s3.DeleteBucketCorsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketCorsWithContextReturnsOnCall(i int, result1 *s3.DeleteBucketCorsOutput, result2 error) {
	fake.deleteBucketCorsWithContextMutex.Lock()
	defer fake.deleteBucketCorsWithContextMutex.Unlock()
	fake.DeleteBucketCorsWithContextStub = nil
	if fake.deleteBucketCorsWithContextReturnsOnCall == nil {
		fake.deleteBucketCorsWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketCorsOutput
			result2 error
		})
	}
	fake.deleteBucketCorsWithContextReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketCorsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketEncryption(arg1 *s3.DeleteBucketEncryptionInput) (*s3.DeleteBucketEncryptionOutput, error) {
	fake.deleteBucketEncryptionMutex.Lock()
	ret, specificReturn := fake.deleteBucketEncryptionReturnsOnCall[len(fake.deleteBucketEncryptionArgsForCall)]
	fake.deleteBucketEncryptionArgsForCall = append(fake.deleteBucketEncryptionArgsForCall, struct {
		arg1 *s3.DeleteBucketEncryptionInput
	}{arg1})
	fake.recordInvocation("DeleteBucketEncryption", []interface{}{arg1})
	fake.deleteBucketEncryptionMutex.Unlock()
	if fake.DeleteBucketEncryptionStub != nil {
		return fake.DeleteBucketEncryptionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketEncryptionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketEncryptionCallCount() int {
	fake.deleteBucketEncryptionMutex.RLock()
	defer fake.deleteBucketEncryptionMutex.RUnlock()
	return len(fake.deleteBucketEncryptionArgsForCall)
}

func (fake *FakeS3API) DeleteBucketEncryptionCalls(stub func(*s3.DeleteBucketEncryptionInput) (*s3.DeleteBucketEncryptionOutput, error)) {
	fake.deleteBucketEncryptionMutex.Lock()
	defer fake.deleteBucketEncryptionMutex.Unlock()
	fake.DeleteBucketEncryptionStub = stub
}

func (fake *FakeS3API) DeleteBucketEncryptionArgsForCall(i int) *s3.DeleteBucketEncryptionInput {
	fake.deleteBucketEncryptionMutex.RLock()
	defer fake.deleteBucketEncryptionMutex.RUnlock()
	argsForCall := fake.deleteBucketEncryptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketEncryptionReturns(result1 *s3.DeleteBucketEncryptionOutput, result2 error) {
	fake.deleteBucketEncryptionMutex.Lock()
	defer fake.deleteBucketEncryptionMutex.Unlock()
	fake.DeleteBucketEncryptionStub = nil
	fake.deleteBucketEncryptionReturns = struct {
		result1 *s3.DeleteBucketEncryptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketEncryptionReturnsOnCall(i int, result1 *s3.DeleteBucketEncryptionOutput, result2 error) {
	fake.deleteBucketEncryptionMutex.Lock()
	defer fake.deleteBucketEncryptionMutex.Unlock()
	fake.DeleteBucketEncryptionStub = nil
	if fake.deleteBucketEncryptionReturnsOnCall == nil {
		fake.deleteBucketEncryptionReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketEncryptionOutput
			result2 error
		})
	}
	fake.deleteBucketEncryptionReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketEncryptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketEncryptionRequest(arg1 *s3.DeleteBucketEncryptionInput) (*request.Request, *s3.DeleteBucketEncryptionOutput) {
	fake.deleteBucketEncryptionRequestMutex.Lock()
	ret, specificReturn := fake.deleteBucketEncryptionRequestReturnsOnCall[len(fake.deleteBucketEncryptionRequestArgsForCall)]
	fake.deleteBucketEncryptionRequestArgsForCall = append(fake.deleteBucketEncryptionRequestArgsForCall, struct {
		arg1 *s3.DeleteBucketEncryptionInput
	}{arg1})
	fake.recordInvocation("DeleteBucketEncryptionRequest", []interface{}{arg1})
	fake.deleteBucketEncryptionRequestMutex.Unlock()
	if fake.DeleteBucketEncryptionRequestStub != nil {
		return fake.DeleteBucketEncryptionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketEncryptionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketEncryptionRequestCallCount() int {
	fake.deleteBucketEncryptionRequestMutex.RLock()
	defer fake.deleteBucketEncryptionRequestMutex.RUnlock()
	return len(fake.deleteBucketEncryptionRequestArgsForCall)
}

func (fake *FakeS3API) DeleteBucketEncryptionRequestCalls(stub func(*s3.DeleteBucketEncryptionInput) (*request.Request, *s3.DeleteBucketEncryptionOutput)) {
	fake.deleteBucketEncryptionRequestMutex.Lock()
	defer fake.deleteBucketEncryptionRequestMutex.Unlock()
	fake.DeleteBucketEncryptionRequestStub = stub
}

func (fake *FakeS3API) DeleteBucketEncryptionRequestArgsForCall(i int) *s3.DeleteBucketEncryptionInput {
	fake.deleteBucketEncryptionRequestMutex.RLock()
	defer fake.deleteBucketEncryptionRequestMutex.RUnlock()
	argsForCall := fake.deleteBucketEncryptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketEncryptionRequestReturns(result1 *request.Request, result2 *s3.DeleteBucketEncryptionOutput) {
	fake.deleteBucketEncryptionRequestMutex.Lock()
	defer fake.deleteBucketEncryptionRequestMutex.Unlock()
	fake.DeleteBucketEncryptionRequestStub = nil
	fake.deleteBucketEncryptionRequestReturns = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketEncryptionOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketEncryptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.DeleteBucketEncryptionOutput) {
	fake.deleteBucketEncryptionRequestMutex.Lock()
	defer fake.deleteBucketEncryptionRequestMutex.Unlock()
	fake.DeleteBucketEncryptionRequestStub = nil
	if fake.deleteBucketEncryptionRequestReturnsOnCall == nil {
		fake.deleteBucketEncryptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.DeleteBucketEncryptionOutput
		})
	}
	fake.deleteBucketEncryptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketEncryptionOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketEncryptionWithContext(arg1 context.Context, arg2 *s3.DeleteBucketEncryptionInput, arg3 ...request.Option) (*s3.DeleteBucketEncryptionOutput, error) {
	fake.deleteBucketEncryptionWithContextMutex.Lock()
	ret, specificReturn := fake.deleteBucketEncryptionWithContextReturnsOnCall[len(fake.deleteBucketEncryptionWithContextArgsForCall)]
	fake.deleteBucketEncryptionWithContextArgsForCall = append(fake.deleteBucketEncryptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketEncryptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteBucketEncryptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteBucketEncryptionWithContextMutex.Unlock()
	if fake.DeleteBucketEncryptionWithContextStub != nil {
		return fake.DeleteBucketEncryptionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketEncryptionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketEncryptionWithContextCallCount() int {
	fake.deleteBucketEncryptionWithContextMutex.RLock()
	defer fake.deleteBucketEncryptionWithContextMutex.RUnlock()
	return len(fake.deleteBucketEncryptionWithContextArgsForCall)
}

func (fake *FakeS3API) DeleteBucketEncryptionWithContextCalls(stub func(context.Context, *s3.DeleteBucketEncryptionInput, ...request.Option) (*s3.DeleteBucketEncryptionOutput, error)) {
	fake.deleteBucketEncryptionWithContextMutex.Lock()
	defer fake.deleteBucketEncryptionWithContextMutex.Unlock()
	fake.DeleteBucketEncryptionWithContextStub = stub
}

func (fake *FakeS3API) DeleteBucketEncryptionWithContextArgsForCall(i int) (context.Context, *s3.DeleteBucketEncryptionInput, []request.Option) {
	fake.deleteBucketEncryptionWithContextMutex.RLock()
	defer fake.deleteBucketEncryptionWithContextMutex.RUnlock()
	argsForCall := fake.deleteBucketEncryptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) DeleteBucketEncryptionWithContextReturns(result1 *s3.DeleteBucketEncryptionOutput, result2 error) {
	fake.deleteBucketEncryptionWithContextMutex.Lock()
	defer fake.deleteBucketEncryptionWithContextMutex.Unlock()
	fake.DeleteBucketEncryptionWithContextStub = nil
	fake.deleteBucketEncryptionWithContextReturns = struct {
		result1 *s3.DeleteBucketEncryptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketEncryptionWithContextReturnsOnCall(i int, result1 *s3.DeleteBucketEncryptionOutput, result2 error) {
	fake.deleteBucketEncryptionWithContextMutex.Lock()
	defer fake.deleteBucketEncryptionWithContextMutex.Unlock()
	fake.DeleteBucketEncryptionWithContextStub = nil
	if fake.deleteBucketEncryptionWithContextReturnsOnCall == nil {
		fake.deleteBucketEncryptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketEncryptionOutput
			result2 error
		})
	}
	fake.deleteBucketEncryptionWithContextReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketEncryptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketInventoryConfiguration(arg1 *s3.DeleteBucketInventoryConfigurationInput) (*s3.DeleteBucketInventoryConfigurationOutput, error) {
	fake.deleteBucketInventoryConfigurationMutex.Lock()
	ret, specificReturn := fake.deleteBucketInventoryConfigurationReturnsOnCall[len(fake.deleteBucketInventoryConfigurationArgsForCall)]
	fake.deleteBucketInventoryConfigurationArgsForCall = append(fake.deleteBucketInventoryConfigurationArgsForCall, struct {
		arg1 *s3.DeleteBucketInventoryConfigurationInput
	}{arg1})
	fake.recordInvocation("DeleteBucketInventoryConfiguration", []interface{}{arg1})
	fake.deleteBucketInventoryConfigurationMutex.Unlock()
	if fake.DeleteBucketInventoryConfigurationStub != nil {
		return fake.DeleteBucketInventoryConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketInventoryConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketInventoryConfigurationCallCount() int {
	fake.deleteBucketInventoryConfigurationMutex.RLock()
	defer fake.deleteBucketInventoryConfigurationMutex.RUnlock()
	return len(fake.deleteBucketInventoryConfigurationArgsForCall)
}

func (fake *FakeS3API) DeleteBucketInventoryConfigurationCalls(stub func(*s3.DeleteBucketInventoryConfigurationInput) (*s3.DeleteBucketInventoryConfigurationOutput, error)) {
	fake.deleteBucketInventoryConfigurationMutex.Lock()
	defer fake.deleteBucketInventoryConfigurationMutex.Unlock()
	fake.DeleteBucketInventoryConfigurationStub = stub
}

func (fake *FakeS3API) DeleteBucketInventoryConfigurationArgsForCall(i int) *s3.DeleteBucketInventoryConfigurationInput {
	fake.deleteBucketInventoryConfigurationMutex.RLock()
	defer fake.deleteBucketInventoryConfigurationMutex.RUnlock()
	argsForCall := fake.deleteBucketInventoryConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketInventoryConfigurationReturns(result1 *s3.DeleteBucketInventoryConfigurationOutput, result2 error) {
	fake.deleteBucketInventoryConfigurationMutex.Lock()
	defer fake.deleteBucketInventoryConfigurationMutex.Unlock()
	fake.DeleteBucketInventoryConfigurationStub = nil
	fake.deleteBucketInventoryConfigurationReturns = struct {
		result1 *s3.DeleteBucketInventoryConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketInventoryConfigurationReturnsOnCall(i int, result1 *s3.DeleteBucketInventoryConfigurationOutput, result2 error) {
	fake.deleteBucketInventoryConfigurationMutex.Lock()
	defer fake.deleteBucketInventoryConfigurationMutex.Unlock()
	fake.DeleteBucketInventoryConfigurationStub = nil
	if fake.deleteBucketInventoryConfigurationReturnsOnCall == nil {
		fake.deleteBucketInventoryConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketInventoryConfigurationOutput
			result2 error
		})
	}
	fake.deleteBucketInventoryConfigurationReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketInventoryConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketInventoryConfigurationRequest(arg1 *s3.DeleteBucketInventoryConfigurationInput) (*request.Request, *s3.DeleteBucketInventoryConfigurationOutput) {
	fake.deleteBucketInventoryConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.deleteBucketInventoryConfigurationRequestReturnsOnCall[len(fake.deleteBucketInventoryConfigurationRequestArgsForCall)]
	fake.deleteBucketInventoryConfigurationRequestArgsForCall = append(fake.deleteBucketInventoryConfigurationRequestArgsForCall, struct {
		arg1 *s3.DeleteBucketInventoryConfigurationInput
	}{arg1})
	fake.recordInvocation("DeleteBucketInventoryConfigurationRequest", []interface{}{arg1})
	fake.deleteBucketInventoryConfigurationRequestMutex.Unlock()
	if fake.DeleteBucketInventoryConfigurationRequestStub != nil {
		return fake.DeleteBucketInventoryConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketInventoryConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketInventoryConfigurationRequestCallCount() int {
	fake.deleteBucketInventoryConfigurationRequestMutex.RLock()
	defer fake.deleteBucketInventoryConfigurationRequestMutex.RUnlock()
	return len(fake.deleteBucketInventoryConfigurationRequestArgsForCall)
}

func (fake *FakeS3API) DeleteBucketInventoryConfigurationRequestCalls(stub func(*s3.DeleteBucketInventoryConfigurationInput) (*request.Request, *s3.DeleteBucketInventoryConfigurationOutput)) {
	fake.deleteBucketInventoryConfigurationRequestMutex.Lock()
	defer fake.deleteBucketInventoryConfigurationRequestMutex.Unlock()
	fake.DeleteBucketInventoryConfigurationRequestStub = stub
}

func (fake *FakeS3API) DeleteBucketInventoryConfigurationRequestArgsForCall(i int) *s3.DeleteBucketInventoryConfigurationInput {
	fake.deleteBucketInventoryConfigurationRequestMutex.RLock()
	defer fake.deleteBucketInventoryConfigurationRequestMutex.RUnlock()
	argsForCall := fake.deleteBucketInventoryConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketInventoryConfigurationRequestReturns(result1 *request.Request, result2 *s3.DeleteBucketInventoryConfigurationOutput) {
	fake.deleteBucketInventoryConfigurationRequestMutex.Lock()
	defer fake.deleteBucketInventoryConfigurationRequestMutex.Unlock()
	fake.DeleteBucketInventoryConfigurationRequestStub = nil
	fake.deleteBucketInventoryConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketInventoryConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketInventoryConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.DeleteBucketInventoryConfigurationOutput) {
	fake.deleteBucketInventoryConfigurationRequestMutex.Lock()
	defer fake.deleteBucketInventoryConfigurationRequestMutex.Unlock()
	fake.DeleteBucketInventoryConfigurationRequestStub = nil
	if fake.deleteBucketInventoryConfigurationRequestReturnsOnCall == nil {
		fake.deleteBucketInventoryConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.DeleteBucketInventoryConfigurationOutput
		})
	}
	fake.deleteBucketInventoryConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketInventoryConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketInventoryConfigurationWithContext(arg1 context.Context, arg2 *s3.DeleteBucketInventoryConfigurationInput, arg3 ...request.Option) (*s3.DeleteBucketInventoryConfigurationOutput, error) {
	fake.deleteBucketInventoryConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.deleteBucketInventoryConfigurationWithContextReturnsOnCall[len(fake.deleteBucketInventoryConfigurationWithContextArgsForCall)]
	fake.deleteBucketInventoryConfigurationWithContextArgsForCall = append(fake.deleteBucketInventoryConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketInventoryConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteBucketInventoryConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteBucketInventoryConfigurationWithContextMutex.Unlock()
	if fake.DeleteBucketInventoryConfigurationWithContextStub != nil {
		return fake.DeleteBucketInventoryConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketInventoryConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketInventoryConfigurationWithContextCallCount() int {
	fake.deleteBucketInventoryConfigurationWithContextMutex.RLock()
	defer fake.deleteBucketInventoryConfigurationWithContextMutex.RUnlock()
	return len(fake.deleteBucketInventoryConfigurationWithContextArgsForCall)
}

func (fake *FakeS3API) DeleteBucketInventoryConfigurationWithContextCalls(stub func(context.Context, *s3.DeleteBucketInventoryConfigurationInput, ...request.Option) (*s3.DeleteBucketInventoryConfigurationOutput, error)) {
	fake.deleteBucketInventoryConfigurationWithContextMutex.Lock()
	defer fake.deleteBucketInventoryConfigurationWithContextMutex.Unlock()
	fake.DeleteBucketInventoryConfigurationWithContextStub = stub
}

func (fake *FakeS3API) DeleteBucketInventoryConfigurationWithContextArgsForCall(i int) (context.Context, *s3.DeleteBucketInventoryConfigurationInput, []request.Option) {
	fake.deleteBucketInventoryConfigurationWithContextMutex.RLock()
	defer fake.deleteBucketInventoryConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.deleteBucketInventoryConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) DeleteBucketInventoryConfigurationWithContextReturns(result1 *s3.DeleteBucketInventoryConfigurationOutput, result2 error) {
	fake.deleteBucketInventoryConfigurationWithContextMutex.Lock()
	defer fake.deleteBucketInventoryConfigurationWithContextMutex.Unlock()
	fake.DeleteBucketInventoryConfigurationWithContextStub = nil
	fake.deleteBucketInventoryConfigurationWithContextReturns = struct {
		result1 *s3.DeleteBucketInventoryConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketInventoryConfigurationWithContextReturnsOnCall(i int, result1 *s3.DeleteBucketInventoryConfigurationOutput, result2 error) {
	fake.deleteBucketInventoryConfigurationWithContextMutex.Lock()
	defer fake.deleteBucketInventoryConfigurationWithContextMutex.Unlock()
	fake.DeleteBucketInventoryConfigurationWithContextStub = nil
	if fake.deleteBucketInventoryConfigurationWithContextReturnsOnCall == nil {
		fake.deleteBucketInventoryConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketInventoryConfigurationOutput
			result2 error
		})
	}
	fake.deleteBucketInventoryConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketInventoryConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketLifecycle(arg1 *s3.DeleteBucketLifecycleInput) (*s3.DeleteBucketLifecycleOutput, error) {
	fake.deleteBucketLifecycleMutex.Lock()
	ret, specificReturn := fake.deleteBucketLifecycleReturnsOnCall[len(fake.deleteBucketLifecycleArgsForCall)]
	fake.deleteBucketLifecycleArgsForCall = append(fake.deleteBucketLifecycleArgsForCall, struct {
		arg1 *s3.DeleteBucketLifecycleInput
	}{arg1})
	fake.recordInvocation("DeleteBucketLifecycle", []interface{}{arg1})
	fake.deleteBucketLifecycleMutex.Unlock()
	if fake.DeleteBucketLifecycleStub != nil {
		return fake.DeleteBucketLifecycleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketLifecycleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketLifecycleCallCount() int {
	fake.deleteBucketLifecycleMutex.RLock()
	defer fake.deleteBucketLifecycleMutex.RUnlock()
	return len(fake.deleteBucketLifecycleArgsForCall)
}

func (fake *FakeS3API) DeleteBucketLifecycleCalls(stub func(*s3.DeleteBucketLifecycleInput) (*s3.DeleteBucketLifecycleOutput, error)) {
	fake.deleteBucketLifecycleMutex.Lock()
	defer fake.deleteBucketLifecycleMutex.Unlock()
	fake.DeleteBucketLifecycleStub = stub
}

func (fake *FakeS3API) DeleteBucketLifecycleArgsForCall(i int) *s3.DeleteBucketLifecycleInput {
	fake.deleteBucketLifecycleMutex.RLock()
	defer fake.deleteBucketLifecycleMutex.RUnlock()
	argsForCall := fake.deleteBucketLifecycleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketLifecycleReturns(result1 *s3.DeleteBucketLifecycleOutput, result2 error) {
	fake.deleteBucketLifecycleMutex.Lock()
	defer fake.deleteBucketLifecycleMutex.Unlock()
	fake.DeleteBucketLifecycleStub = nil
	fake.deleteBucketLifecycleReturns = struct {
		result1 *s3.DeleteBucketLifecycleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketLifecycleReturnsOnCall(i int, result1 *s3.DeleteBucketLifecycleOutput, result2 error) {
	fake.deleteBucketLifecycleMutex.Lock()
	defer fake.deleteBucketLifecycleMutex.Unlock()
	fake.DeleteBucketLifecycleStub = nil
	if fake.deleteBucketLifecycleReturnsOnCall == nil {
		fake.deleteBucketLifecycleReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketLifecycleOutput
			result2 error
		})
	}
	fake.deleteBucketLifecycleReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketLifecycleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketLifecycleRequest(arg1 *s3.DeleteBucketLifecycleInput) (*request.Request, *s3.DeleteBucketLifecycleOutput) {
	fake.deleteBucketLifecycleRequestMutex.Lock()
	ret, specificReturn := fake.deleteBucketLifecycleRequestReturnsOnCall[len(fake.deleteBucketLifecycleRequestArgsForCall)]
	fake.deleteBucketLifecycleRequestArgsForCall = append(fake.deleteBucketLifecycleRequestArgsForCall, struct {
		arg1 *s3.DeleteBucketLifecycleInput
	}{arg1})
	fake.recordInvocation("DeleteBucketLifecycleRequest", []interface{}{arg1})
	fake.deleteBucketLifecycleRequestMutex.Unlock()
	if fake.DeleteBucketLifecycleRequestStub != nil {
		return fake.DeleteBucketLifecycleRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketLifecycleRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketLifecycleRequestCallCount() int {
	fake.deleteBucketLifecycleRequestMutex.RLock()
	defer fake.deleteBucketLifecycleRequestMutex.RUnlock()
	return len(fake.deleteBucketLifecycleRequestArgsForCall)
}

func (fake *FakeS3API) DeleteBucketLifecycleRequestCalls(stub func(*s3.DeleteBucketLifecycleInput) (*request.Request, *s3.DeleteBucketLifecycleOutput)) {
	fake.deleteBucketLifecycleRequestMutex.Lock()
	defer fake.deleteBucketLifecycleRequestMutex.Unlock()
	fake.DeleteBucketLifecycleRequestStub = stub
}

func (fake *FakeS3API) DeleteBucketLifecycleRequestArgsForCall(i int) *s3.DeleteBucketLifecycleInput {
	fake.deleteBucketLifecycleRequestMutex.RLock()
	defer fake.deleteBucketLifecycleRequestMutex.RUnlock()
	argsForCall := fake.deleteBucketLifecycleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketLifecycleRequestReturns(result1 *request.Request, result2 *s3.DeleteBucketLifecycleOutput) {
	fake.deleteBucketLifecycleRequestMutex.Lock()
	defer fake.deleteBucketLifecycleRequestMutex.Unlock()
	fake.DeleteBucketLifecycleRequestStub = nil
	fake.deleteBucketLifecycleRequestReturns = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketLifecycleOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketLifecycleRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.DeleteBucketLifecycleOutput) {
	fake.deleteBucketLifecycleRequestMutex.Lock()
	defer fake.deleteBucketLifecycleRequestMutex.Unlock()
	fake.DeleteBucketLifecycleRequestStub = nil
	if fake.deleteBucketLifecycleRequestReturnsOnCall == nil {
		fake.deleteBucketLifecycleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.DeleteBucketLifecycleOutput
		})
	}
	fake.deleteBucketLifecycleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketLifecycleOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketLifecycleWithContext(arg1 context.Context, arg2 *s3.DeleteBucketLifecycleInput, arg3 ...request.Option) (*s3.DeleteBucketLifecycleOutput, error) {
	fake.deleteBucketLifecycleWithContextMutex.Lock()
	ret, specificReturn := fake.deleteBucketLifecycleWithContextReturnsOnCall[len(fake.deleteBucketLifecycleWithContextArgsForCall)]
	fake.deleteBucketLifecycleWithContextArgsForCall = append(fake.deleteBucketLifecycleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketLifecycleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteBucketLifecycleWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteBucketLifecycleWithContextMutex.Unlock()
	if fake.DeleteBucketLifecycleWithContextStub != nil {
		return fake.DeleteBucketLifecycleWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketLifecycleWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketLifecycleWithContextCallCount() int {
	fake.deleteBucketLifecycleWithContextMutex.RLock()
	defer fake.deleteBucketLifecycleWithContextMutex.RUnlock()
	return len(fake.deleteBucketLifecycleWithContextArgsForCall)
}

func (fake *FakeS3API) DeleteBucketLifecycleWithContextCalls(stub func(context.Context, *s3.DeleteBucketLifecycleInput, ...request.Option) (*s3.DeleteBucketLifecycleOutput, error)) {
	fake.deleteBucketLifecycleWithContextMutex.Lock()
	defer fake.deleteBucketLifecycleWithContextMutex.Unlock()
	fake.DeleteBucketLifecycleWithContextStub = stub
}

func (fake *FakeS3API) DeleteBucketLifecycleWithContextArgsForCall(i int) (context.Context, *s3.DeleteBucketLifecycleInput, []request.Option) {
	fake.deleteBucketLifecycleWithContextMutex.RLock()
	defer fake.deleteBucketLifecycleWithContextMutex.RUnlock()
	argsForCall := fake.deleteBucketLifecycleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) DeleteBucketLifecycleWithContextReturns(result1 *s3.DeleteBucketLifecycleOutput, result2 error) {
	fake.deleteBucketLifecycleWithContextMutex.Lock()
	defer fake.deleteBucketLifecycleWithContextMutex.Unlock()
	fake.DeleteBucketLifecycleWithContextStub = nil
	fake.deleteBucketLifecycleWithContextReturns = struct {
		result1 *s3.DeleteBucketLifecycleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketLifecycleWithContextReturnsOnCall(i int, result1 *s3.DeleteBucketLifecycleOutput, result2 error) {
	fake.deleteBucketLifecycleWithContextMutex.Lock()
	defer fake.deleteBucketLifecycleWithContextMutex.Unlock()
	fake.DeleteBucketLifecycleWithContextStub = nil
	if fake.deleteBucketLifecycleWithContextReturnsOnCall == nil {
		fake.deleteBucketLifecycleWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketLifecycleOutput
			result2 error
		})
	}
	fake.deleteBucketLifecycleWithContextReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketLifecycleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketMetricsConfiguration(arg1 *s3.DeleteBucketMetricsConfigurationInput) (*s3.DeleteBucketMetricsConfigurationOutput, error) {
	fake.deleteBucketMetricsConfigurationMutex.Lock()
	ret, specificReturn := fake.deleteBucketMetricsConfigurationReturnsOnCall[len(fake.deleteBucketMetricsConfigurationArgsForCall)]
	fake.deleteBucketMetricsConfigurationArgsForCall = append(fake.deleteBucketMetricsConfigurationArgsForCall, struct {
		arg1 *s3.DeleteBucketMetricsConfigurationInput
	}{arg1})
	fake.recordInvocation("DeleteBucketMetricsConfiguration", []interface{}{arg1})
	fake.deleteBucketMetricsConfigurationMutex.Unlock()
	if fake.DeleteBucketMetricsConfigurationStub != nil {
		return fake.DeleteBucketMetricsConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketMetricsConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketMetricsConfigurationCallCount() int {
	fake.deleteBucketMetricsConfigurationMutex.RLock()
	defer fake.deleteBucketMetricsConfigurationMutex.RUnlock()
	return len(fake.deleteBucketMetricsConfigurationArgsForCall)
}

func (fake *FakeS3API) DeleteBucketMetricsConfigurationCalls(stub func(*s3.DeleteBucketMetricsConfigurationInput) (*s3.DeleteBucketMetricsConfigurationOutput, error)) {
	fake.deleteBucketMetricsConfigurationMutex.Lock()
	defer fake.deleteBucketMetricsConfigurationMutex.Unlock()
	fake.DeleteBucketMetricsConfigurationStub = stub
}

func (fake *FakeS3API) DeleteBucketMetricsConfigurationArgsForCall(i int) *s3.DeleteBucketMetricsConfigurationInput {
	fake.deleteBucketMetricsConfigurationMutex.RLock()
	defer fake.deleteBucketMetricsConfigurationMutex.RUnlock()
	argsForCall := fake.deleteBucketMetricsConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketMetricsConfigurationReturns(result1 *s3.DeleteBucketMetricsConfigurationOutput, result2 error) {
	fake.deleteBucketMetricsConfigurationMutex.Lock()
	defer fake.deleteBucketMetricsConfigurationMutex.Unlock()
	fake.DeleteBucketMetricsConfigurationStub = nil
	fake.deleteBucketMetricsConfigurationReturns = struct {
		result1 *s3.DeleteBucketMetricsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketMetricsConfigurationReturnsOnCall(i int, result1 *s3.DeleteBucketMetricsConfigurationOutput, result2 error) {
	fake.deleteBucketMetricsConfigurationMutex.Lock()
	defer fake.deleteBucketMetricsConfigurationMutex.Unlock()
	fake.DeleteBucketMetricsConfigurationStub = nil
	if fake.deleteBucketMetricsConfigurationReturnsOnCall == nil {
		fake.deleteBucketMetricsConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketMetricsConfigurationOutput
			result2 error
		})
	}
	fake.deleteBucketMetricsConfigurationReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketMetricsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketMetricsConfigurationRequest(arg1 *s3.DeleteBucketMetricsConfigurationInput) (*request.Request, *s3.DeleteBucketMetricsConfigurationOutput) {
	fake.deleteBucketMetricsConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.deleteBucketMetricsConfigurationRequestReturnsOnCall[len(fake.deleteBucketMetricsConfigurationRequestArgsForCall)]
	fake.deleteBucketMetricsConfigurationRequestArgsForCall = append(fake.deleteBucketMetricsConfigurationRequestArgsForCall, struct {
		arg1 *s3.DeleteBucketMetricsConfigurationInput
	}{arg1})
	fake.recordInvocation("DeleteBucketMetricsConfigurationRequest", []interface{}{arg1})
	fake.deleteBucketMetricsConfigurationRequestMutex.Unlock()
	if fake.DeleteBucketMetricsConfigurationRequestStub != nil {
		return fake.DeleteBucketMetricsConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketMetricsConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketMetricsConfigurationRequestCallCount() int {
	fake.deleteBucketMetricsConfigurationRequestMutex.RLock()
	defer fake.deleteBucketMetricsConfigurationRequestMutex.RUnlock()
	return len(fake.deleteBucketMetricsConfigurationRequestArgsForCall)
}

func (fake *FakeS3API) DeleteBucketMetricsConfigurationRequestCalls(stub func(*s3.DeleteBucketMetricsConfigurationInput) (*request.Request, *s3.DeleteBucketMetricsConfigurationOutput)) {
	fake.deleteBucketMetricsConfigurationRequestMutex.Lock()
	defer fake.deleteBucketMetricsConfigurationRequestMutex.Unlock()
	fake.DeleteBucketMetricsConfigurationRequestStub = stub
}

func (fake *FakeS3API) DeleteBucketMetricsConfigurationRequestArgsForCall(i int) *s3.DeleteBucketMetricsConfigurationInput {
	fake.deleteBucketMetricsConfigurationRequestMutex.RLock()
	defer fake.deleteBucketMetricsConfigurationRequestMutex.RUnlock()
	argsForCall := fake.deleteBucketMetricsConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketMetricsConfigurationRequestReturns(result1 *request.Request, result2 *s3.DeleteBucketMetricsConfigurationOutput) {
	fake.deleteBucketMetricsConfigurationRequestMutex.Lock()
	defer fake.deleteBucketMetricsConfigurationRequestMutex.Unlock()
	fake.DeleteBucketMetricsConfigurationRequestStub = nil
	fake.deleteBucketMetricsConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketMetricsConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketMetricsConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.DeleteBucketMetricsConfigurationOutput) {
	fake.deleteBucketMetricsConfigurationRequestMutex.Lock()
	defer fake.deleteBucketMetricsConfigurationRequestMutex.Unlock()
	fake.DeleteBucketMetricsConfigurationRequestStub = nil
	if fake.deleteBucketMetricsConfigurationRequestReturnsOnCall == nil {
		fake.deleteBucketMetricsConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.DeleteBucketMetricsConfigurationOutput
		})
	}
	fake.deleteBucketMetricsConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketMetricsConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketMetricsConfigurationWithContext(arg1 context.Context, arg2 *s3.DeleteBucketMetricsConfigurationInput, arg3 ...request.Option) (*s3.DeleteBucketMetricsConfigurationOutput, error) {
	fake.deleteBucketMetricsConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.deleteBucketMetricsConfigurationWithContextReturnsOnCall[len(fake.deleteBucketMetricsConfigurationWithContextArgsForCall)]
	fake.deleteBucketMetricsConfigurationWithContextArgsForCall = append(fake.deleteBucketMetricsConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketMetricsConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteBucketMetricsConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteBucketMetricsConfigurationWithContextMutex.Unlock()
	if fake.DeleteBucketMetricsConfigurationWithContextStub != nil {
		return fake.DeleteBucketMetricsConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketMetricsConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketMetricsConfigurationWithContextCallCount() int {
	fake.deleteBucketMetricsConfigurationWithContextMutex.RLock()
	defer fake.deleteBucketMetricsConfigurationWithContextMutex.RUnlock()
	return len(fake.deleteBucketMetricsConfigurationWithContextArgsForCall)
}

func (fake *FakeS3API) DeleteBucketMetricsConfigurationWithContextCalls(stub func(context.Context, *s3.DeleteBucketMetricsConfigurationInput, ...request.Option) (*s3.DeleteBucketMetricsConfigurationOutput, error)) {
	fake.deleteBucketMetricsConfigurationWithContextMutex.Lock()
	defer fake.deleteBucketMetricsConfigurationWithContextMutex.Unlock()
	fake.DeleteBucketMetricsConfigurationWithContextStub = stub
}

func (fake *FakeS3API) DeleteBucketMetricsConfigurationWithContextArgsForCall(i int) (context.Context, *s3.DeleteBucketMetricsConfigurationInput, []request.Option) {
	fake.deleteBucketMetricsConfigurationWithContextMutex.RLock()
	defer fake.deleteBucketMetricsConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.deleteBucketMetricsConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) DeleteBucketMetricsConfigurationWithContextReturns(result1 *s3.DeleteBucketMetricsConfigurationOutput, result2 error) {
	fake.deleteBucketMetricsConfigurationWithContextMutex.Lock()
	defer fake.deleteBucketMetricsConfigurationWithContextMutex.Unlock()
	fake.DeleteBucketMetricsConfigurationWithContextStub = nil
	fake.deleteBucketMetricsConfigurationWithContextReturns = struct {
		result1 *s3.DeleteBucketMetricsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketMetricsConfigurationWithContextReturnsOnCall(i int, result1 *s3.DeleteBucketMetricsConfigurationOutput, result2 error) {
	fake.deleteBucketMetricsConfigurationWithContextMutex.Lock()
	defer fake.deleteBucketMetricsConfigurationWithContextMutex.Unlock()
	fake.DeleteBucketMetricsConfigurationWithContextStub = nil
	if fake.deleteBucketMetricsConfigurationWithContextReturnsOnCall == nil {
		fake.deleteBucketMetricsConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketMetricsConfigurationOutput
			result2 error
		})
	}
	fake.deleteBucketMetricsConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketMetricsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketPolicy(arg1 *s3.DeleteBucketPolicyInput) (*s3.DeleteBucketPolicyOutput, error) {
	fake.deleteBucketPolicyMutex.Lock()
	ret, specificReturn := fake.deleteBucketPolicyReturnsOnCall[len(fake.deleteBucketPolicyArgsForCall)]
	fake.deleteBucketPolicyArgsForCall = append(fake.deleteBucketPolicyArgsForCall, struct {
		arg1 *s3.DeleteBucketPolicyInput
	}{arg1})
	fake.recordInvocation("DeleteBucketPolicy", []interface{}{arg1})
	fake.deleteBucketPolicyMutex.Unlock()
	if fake.DeleteBucketPolicyStub != nil {
		return fake.DeleteBucketPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketPolicyCallCount() int {
	fake.deleteBucketPolicyMutex.RLock()
	defer fake.deleteBucketPolicyMutex.RUnlock()
	return len(fake.deleteBucketPolicyArgsForCall)
}

func (fake *FakeS3API) DeleteBucketPolicyCalls(stub func(*s3.DeleteBucketPolicyInput) (*s3.DeleteBucketPolicyOutput, error)) {
	fake.deleteBucketPolicyMutex.Lock()
	defer fake.deleteBucketPolicyMutex.Unlock()
	fake.DeleteBucketPolicyStub = stub
}

func (fake *FakeS3API) DeleteBucketPolicyArgsForCall(i int) *s3.DeleteBucketPolicyInput {
	fake.deleteBucketPolicyMutex.RLock()
	defer fake.deleteBucketPolicyMutex.RUnlock()
	argsForCall := fake.deleteBucketPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketPolicyReturns(result1 *s3.DeleteBucketPolicyOutput, result2 error) {
	fake.deleteBucketPolicyMutex.Lock()
	defer fake.deleteBucketPolicyMutex.Unlock()
	fake.DeleteBucketPolicyStub = nil
	fake.deleteBucketPolicyReturns = struct {
		result1 *s3.DeleteBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketPolicyReturnsOnCall(i int, result1 *s3.DeleteBucketPolicyOutput, result2 error) {
	fake.deleteBucketPolicyMutex.Lock()
	defer fake.deleteBucketPolicyMutex.Unlock()
	fake.DeleteBucketPolicyStub = nil
	if fake.deleteBucketPolicyReturnsOnCall == nil {
		fake.deleteBucketPolicyReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketPolicyOutput
			result2 error
		})
	}
	fake.deleteBucketPolicyReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketPolicyRequest(arg1 *s3.DeleteBucketPolicyInput) (*request.Request, *s3.DeleteBucketPolicyOutput) {
	fake.deleteBucketPolicyRequestMutex.Lock()
	ret, specificReturn := fake.deleteBucketPolicyRequestReturnsOnCall[len(fake.deleteBucketPolicyRequestArgsForCall)]
	fake.deleteBucketPolicyRequestArgsForCall = append(fake.deleteBucketPolicyRequestArgsForCall, struct {
		arg1 *s3.DeleteBucketPolicyInput
	}{arg1})
	fake.recordInvocation("DeleteBucketPolicyRequest", []interface{}{arg1})
	fake.deleteBucketPolicyRequestMutex.Unlock()
	if fake.DeleteBucketPolicyRequestStub != nil {
		return fake.DeleteBucketPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketPolicyRequestCallCount() int {
	fake.deleteBucketPolicyRequestMutex.RLock()
	defer fake.deleteBucketPolicyRequestMutex.RUnlock()
	return len(fake.deleteBucketPolicyRequestArgsForCall)
}

func (fake *FakeS3API) DeleteBucketPolicyRequestCalls(stub func(*s3.DeleteBucketPolicyInput) (*request.Request, *s3.DeleteBucketPolicyOutput)) {
	fake.deleteBucketPolicyRequestMutex.Lock()
	defer fake.deleteBucketPolicyRequestMutex.Unlock()
	fake.DeleteBucketPolicyRequestStub = stub
}

func (fake *FakeS3API) DeleteBucketPolicyRequestArgsForCall(i int) *s3.DeleteBucketPolicyInput {
	fake.deleteBucketPolicyRequestMutex.RLock()
	defer fake.deleteBucketPolicyRequestMutex.RUnlock()
	argsForCall := fake.deleteBucketPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketPolicyRequestReturns(result1 *request.Request, result2 *s3.DeleteBucketPolicyOutput) {
	fake.deleteBucketPolicyRequestMutex.Lock()
	defer fake.deleteBucketPolicyRequestMutex.Unlock()
	fake.DeleteBucketPolicyRequestStub = nil
	fake.deleteBucketPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketPolicyOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.DeleteBucketPolicyOutput) {
	fake.deleteBucketPolicyRequestMutex.Lock()
	defer fake.deleteBucketPolicyRequestMutex.Unlock()
	fake.DeleteBucketPolicyRequestStub = nil
	if fake.deleteBucketPolicyRequestReturnsOnCall == nil {
		fake.deleteBucketPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.DeleteBucketPolicyOutput
		})
	}
	fake.deleteBucketPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketPolicyOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketPolicyWithContext(arg1 context.Context, arg2 *s3.DeleteBucketPolicyInput, arg3 ...request.Option) (*s3.DeleteBucketPolicyOutput, error) {
	fake.deleteBucketPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.deleteBucketPolicyWithContextReturnsOnCall[len(fake.deleteBucketPolicyWithContextArgsForCall)]
	fake.deleteBucketPolicyWithContextArgsForCall = append(fake.deleteBucketPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteBucketPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteBucketPolicyWithContextMutex.Unlock()
	if fake.DeleteBucketPolicyWithContextStub != nil {
		return fake.DeleteBucketPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketPolicyWithContextCallCount() int {
	fake.deleteBucketPolicyWithContextMutex.RLock()
	defer fake.deleteBucketPolicyWithContextMutex.RUnlock()
	return len(fake.deleteBucketPolicyWithContextArgsForCall)
}

func (fake *FakeS3API) DeleteBucketPolicyWithContextCalls(stub func(context.Context, *s3.DeleteBucketPolicyInput, ...request.Option) (*s3.DeleteBucketPolicyOutput, error)) {
	fake.deleteBucketPolicyWithContextMutex.Lock()
	defer fake.deleteBucketPolicyWithContextMutex.Unlock()
	fake.DeleteBucketPolicyWithContextStub = stub
}

func (fake *FakeS3API) DeleteBucketPolicyWithContextArgsForCall(i int) (context.Context, *s3.DeleteBucketPolicyInput, []request.Option) {
	fake.deleteBucketPolicyWithContextMutex.RLock()
	defer fake.deleteBucketPolicyWithContextMutex.RUnlock()
	argsForCall := fake.deleteBucketPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) DeleteBucketPolicyWithContextReturns(result1 *s3.DeleteBucketPolicyOutput, result2 error) {
	fake.deleteBucketPolicyWithContextMutex.Lock()
	defer fake.deleteBucketPolicyWithContextMutex.Unlock()
	fake.DeleteBucketPolicyWithContextStub = nil
	fake.deleteBucketPolicyWithContextReturns = struct {
		result1 *s3.DeleteBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketPolicyWithContextReturnsOnCall(i int, result1 *s3.DeleteBucketPolicyOutput, result2 error) {
	fake.deleteBucketPolicyWithContextMutex.Lock()
	defer fake.deleteBucketPolicyWithContextMutex.Unlock()
	fake.DeleteBucketPolicyWithContextStub = nil
	if fake.deleteBucketPolicyWithContextReturnsOnCall == nil {
		fake.deleteBucketPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketPolicyOutput
			result2 error
		})
	}
	fake.deleteBucketPolicyWithContextReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketReplication(arg1 *s3.DeleteBucketReplicationInput) (*s3.DeleteBucketReplicationOutput, error) {
	fake.deleteBucketReplicationMutex.Lock()
	ret, specificReturn := fake.deleteBucketReplicationReturnsOnCall[len(fake.deleteBucketReplicationArgsForCall)]
	fake.deleteBucketReplicationArgsForCall = append(fake.deleteBucketReplicationArgsForCall, struct {
		arg1 *s3.DeleteBucketReplicationInput
	}{arg1})
	fake.recordInvocation("DeleteBucketReplication", []interface{}{arg1})
	fake.deleteBucketReplicationMutex.Unlock()
	if fake.DeleteBucketReplicationStub != nil {
		return fake.DeleteBucketReplicationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketReplicationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketReplicationCallCount() int {
	fake.deleteBucketReplicationMutex.RLock()
	defer fake.deleteBucketReplicationMutex.RUnlock()
	return len(fake.deleteBucketReplicationArgsForCall)
}

func (fake *FakeS3API) DeleteBucketReplicationCalls(stub func(*s3.DeleteBucketReplicationInput) (*s3.DeleteBucketReplicationOutput, error)) {
	fake.deleteBucketReplicationMutex.Lock()
	defer fake.deleteBucketReplicationMutex.Unlock()
	fake.DeleteBucketReplicationStub = stub
}

func (fake *FakeS3API) DeleteBucketReplicationArgsForCall(i int) *s3.DeleteBucketReplicationInput {
	fake.deleteBucketReplicationMutex.RLock()
	defer fake.deleteBucketReplicationMutex.RUnlock()
	argsForCall := fake.deleteBucketReplicationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketReplicationReturns(result1 *s3.DeleteBucketReplicationOutput, result2 error) {
	fake.deleteBucketReplicationMutex.Lock()
	defer fake.deleteBucketReplicationMutex.Unlock()
	fake.DeleteBucketReplicationStub = nil
	fake.deleteBucketReplicationReturns = struct {
		result1 *s3.DeleteBucketReplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketReplicationReturnsOnCall(i int, result1 *s3.DeleteBucketReplicationOutput, result2 error) {
	fake.deleteBucketReplicationMutex.Lock()
	defer fake.deleteBucketReplicationMutex.Unlock()
	fake.DeleteBucketReplicationStub = nil
	if fake.deleteBucketReplicationReturnsOnCall == nil {
		fake.deleteBucketReplicationReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketReplicationOutput
			result2 error
		})
	}
	fake.deleteBucketReplicationReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketReplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketReplicationRequest(arg1 *s3.DeleteBucketReplicationInput) (*request.Request, *s3.DeleteBucketReplicationOutput) {
	fake.deleteBucketReplicationRequestMutex.Lock()
	ret, specificReturn := fake.deleteBucketReplicationRequestReturnsOnCall[len(fake.deleteBucketReplicationRequestArgsForCall)]
	fake.deleteBucketReplicationRequestArgsForCall = append(fake.deleteBucketReplicationRequestArgsForCall, struct {
		arg1 *s3.DeleteBucketReplicationInput
	}{arg1})
	fake.recordInvocation("DeleteBucketReplicationRequest", []interface{}{arg1})
	fake.deleteBucketReplicationRequestMutex.Unlock()
	if fake.DeleteBucketReplicationRequestStub != nil {
		return fake.DeleteBucketReplicationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketReplicationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketReplicationRequestCallCount() int {
	fake.deleteBucketReplicationRequestMutex.RLock()
	defer fake.deleteBucketReplicationRequestMutex.RUnlock()
	return len(fake.deleteBucketReplicationRequestArgsForCall)
}

func (fake *FakeS3API) DeleteBucketReplicationRequestCalls(stub func(*s3.DeleteBucketReplicationInput) (*request.Request, *s3.DeleteBucketReplicationOutput)) {
	fake.deleteBucketReplicationRequestMutex.Lock()
	defer fake.deleteBucketReplicationRequestMutex.Unlock()
	fake.DeleteBucketReplicationRequestStub = stub
}

func (fake *FakeS3API) DeleteBucketReplicationRequestArgsForCall(i int) *s3.DeleteBucketReplicationInput {
	fake.deleteBucketReplicationRequestMutex.RLock()
	defer fake.deleteBucketReplicationRequestMutex.RUnlock()
	argsForCall := fake.deleteBucketReplicationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketReplicationRequestReturns(result1 *request.Request, result2 *s3.DeleteBucketReplicationOutput) {
	fake.deleteBucketReplicationRequestMutex.Lock()
	defer fake.deleteBucketReplicationRequestMutex.Unlock()
	fake.DeleteBucketReplicationRequestStub = nil
	fake.deleteBucketReplicationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketReplicationOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketReplicationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.DeleteBucketReplicationOutput) {
	fake.deleteBucketReplicationRequestMutex.Lock()
	defer fake.deleteBucketReplicationRequestMutex.Unlock()
	fake.DeleteBucketReplicationRequestStub = nil
	if fake.deleteBucketReplicationRequestReturnsOnCall == nil {
		fake.deleteBucketReplicationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.DeleteBucketReplicationOutput
		})
	}
	fake.deleteBucketReplicationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketReplicationOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketReplicationWithContext(arg1 context.Context, arg2 *s3.DeleteBucketReplicationInput, arg3 ...request.Option) (*s3.DeleteBucketReplicationOutput, error) {
	fake.deleteBucketReplicationWithContextMutex.Lock()
	ret, specificReturn := fake.deleteBucketReplicationWithContextReturnsOnCall[len(fake.deleteBucketReplicationWithContextArgsForCall)]
	fake.deleteBucketReplicationWithContextArgsForCall = append(fake.deleteBucketReplicationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketReplicationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteBucketReplicationWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteBucketReplicationWithContextMutex.Unlock()
	if fake.DeleteBucketReplicationWithContextStub != nil {
		return fake.DeleteBucketReplicationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketReplicationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketReplicationWithContextCallCount() int {
	fake.deleteBucketReplicationWithContextMutex.RLock()
	defer fake.deleteBucketReplicationWithContextMutex.RUnlock()
	return len(fake.deleteBucketReplicationWithContextArgsForCall)
}

func (fake *FakeS3API) DeleteBucketReplicationWithContextCalls(stub func(context.Context, *s3.DeleteBucketReplicationInput, ...request.Option) (*s3.DeleteBucketReplicationOutput, error)) {
	fake.deleteBucketReplicationWithContextMutex.Lock()
	defer fake.deleteBucketReplicationWithContextMutex.Unlock()
	fake.DeleteBucketReplicationWithContextStub = stub
}

func (fake *FakeS3API) DeleteBucketReplicationWithContextArgsForCall(i int) (context.Context, *s3.DeleteBucketReplicationInput, []request.Option) {
	fake.deleteBucketReplicationWithContextMutex.RLock()
	defer fake.deleteBucketReplicationWithContextMutex.RUnlock()
	argsForCall := fake.deleteBucketReplicationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) DeleteBucketReplicationWithContextReturns(result1 *s3.DeleteBucketReplicationOutput, result2 error) {
	fake.deleteBucketReplicationWithContextMutex.Lock()
	defer fake.deleteBucketReplicationWithContextMutex.Unlock()
	fake.DeleteBucketReplicationWithContextStub = nil
	fake.deleteBucketReplicationWithContextReturns = struct {
		result1 *s3.DeleteBucketReplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketReplicationWithContextReturnsOnCall(i int, result1 *s3.DeleteBucketReplicationOutput, result2 error) {
	fake.deleteBucketReplicationWithContextMutex.Lock()
	defer fake.deleteBucketReplicationWithContextMutex.Unlock()
	fake.DeleteBucketReplicationWithContextStub = nil
	if fake.deleteBucketReplicationWithContextReturnsOnCall == nil {
		fake.deleteBucketReplicationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketReplicationOutput
			result2 error
		})
	}
	fake.deleteBucketReplicationWithContextReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketReplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketRequest(arg1 *s3.DeleteBucketInput) (*request.Request, *s3.DeleteBucketOutput) {
	fake.deleteBucketRequestMutex.Lock()
	ret, specificReturn := fake.deleteBucketRequestReturnsOnCall[len(fake.deleteBucketRequestArgsForCall)]
	fake.deleteBucketRequestArgsForCall = append(fake.deleteBucketRequestArgsForCall, struct {
		arg1 *s3.DeleteBucketInput
	}{arg1})
	fake.recordInvocation("DeleteBucketRequest", []interface{}{arg1})
	fake.deleteBucketRequestMutex.Unlock()
	if fake.DeleteBucketRequestStub != nil {
		return fake.DeleteBucketRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketRequestCallCount() int {
	fake.deleteBucketRequestMutex.RLock()
	defer fake.deleteBucketRequestMutex.RUnlock()
	return len(fake.deleteBucketRequestArgsForCall)
}

func (fake *FakeS3API) DeleteBucketRequestCalls(stub func(*s3.DeleteBucketInput) (*request.Request, *s3.DeleteBucketOutput)) {
	fake.deleteBucketRequestMutex.Lock()
	defer fake.deleteBucketRequestMutex.Unlock()
	fake.DeleteBucketRequestStub = stub
}

func (fake *FakeS3API) DeleteBucketRequestArgsForCall(i int) *s3.DeleteBucketInput {
	fake.deleteBucketRequestMutex.RLock()
	defer fake.deleteBucketRequestMutex.RUnlock()
	argsForCall := fake.deleteBucketRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketRequestReturns(result1 *request.Request, result2 *s3.DeleteBucketOutput) {
	fake.deleteBucketRequestMutex.Lock()
	defer fake.deleteBucketRequestMutex.Unlock()
	fake.DeleteBucketRequestStub = nil
	fake.deleteBucketRequestReturns = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.DeleteBucketOutput) {
	fake.deleteBucketRequestMutex.Lock()
	defer fake.deleteBucketRequestMutex.Unlock()
	fake.DeleteBucketRequestStub = nil
	if fake.deleteBucketRequestReturnsOnCall == nil {
		fake.deleteBucketRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.DeleteBucketOutput
		})
	}
	fake.deleteBucketRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketTagging(arg1 *s3.DeleteBucketTaggingInput) (*s3.DeleteBucketTaggingOutput, error) {
	fake.deleteBucketTaggingMutex.Lock()
	ret, specificReturn := fake.deleteBucketTaggingReturnsOnCall[len(fake.deleteBucketTaggingArgsForCall)]
	fake.deleteBucketTaggingArgsForCall = append(fake.deleteBucketTaggingArgsForCall, struct {
		arg1 *s3.DeleteBucketTaggingInput
	}{arg1})
	fake.recordInvocation("DeleteBucketTagging", []interface{}{arg1})
	fake.deleteBucketTaggingMutex.Unlock()
	if fake.DeleteBucketTaggingStub != nil {
		return fake.DeleteBucketTaggingStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketTaggingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketTaggingCallCount() int {
	fake.deleteBucketTaggingMutex.RLock()
	defer fake.deleteBucketTaggingMutex.RUnlock()
	return len(fake.deleteBucketTaggingArgsForCall)
}

func (fake *FakeS3API) DeleteBucketTaggingCalls(stub func(*s3.DeleteBucketTaggingInput) (*s3.DeleteBucketTaggingOutput, error)) {
	fake.deleteBucketTaggingMutex.Lock()
	defer fake.deleteBucketTaggingMutex.Unlock()
	fake.DeleteBucketTaggingStub = stub
}

func (fake *FakeS3API) DeleteBucketTaggingArgsForCall(i int) *s3.DeleteBucketTaggingInput {
	fake.deleteBucketTaggingMutex.RLock()
	defer fake.deleteBucketTaggingMutex.RUnlock()
	argsForCall := fake.deleteBucketTaggingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketTaggingReturns(result1 *s3.DeleteBucketTaggingOutput, result2 error) {
	fake.deleteBucketTaggingMutex.Lock()
	defer fake.deleteBucketTaggingMutex.Unlock()
	fake.DeleteBucketTaggingStub = nil
	fake.deleteBucketTaggingReturns = struct {
		result1 *s3.DeleteBucketTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketTaggingReturnsOnCall(i int, result1 *s3.DeleteBucketTaggingOutput, result2 error) {
	fake.deleteBucketTaggingMutex.Lock()
	defer fake.deleteBucketTaggingMutex.Unlock()
	fake.DeleteBucketTaggingStub = nil
	if fake.deleteBucketTaggingReturnsOnCall == nil {
		fake.deleteBucketTaggingReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketTaggingOutput
			result2 error
		})
	}
	fake.deleteBucketTaggingReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketTaggingRequest(arg1 *s3.DeleteBucketTaggingInput) (*request.Request, *s3.DeleteBucketTaggingOutput) {
	fake.deleteBucketTaggingRequestMutex.Lock()
	ret, specificReturn := fake.deleteBucketTaggingRequestReturnsOnCall[len(fake.deleteBucketTaggingRequestArgsForCall)]
	fake.deleteBucketTaggingRequestArgsForCall = append(fake.deleteBucketTaggingRequestArgsForCall, struct {
		arg1 *s3.DeleteBucketTaggingInput
	}{arg1})
	fake.recordInvocation("DeleteBucketTaggingRequest", []interface{}{arg1})
	fake.deleteBucketTaggingRequestMutex.Unlock()
	if fake.DeleteBucketTaggingRequestStub != nil {
		return fake.DeleteBucketTaggingRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketTaggingRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketTaggingRequestCallCount() int {
	fake.deleteBucketTaggingRequestMutex.RLock()
	defer fake.deleteBucketTaggingRequestMutex.RUnlock()
	return len(fake.deleteBucketTaggingRequestArgsForCall)
}

func (fake *FakeS3API) DeleteBucketTaggingRequestCalls(stub func(*s3.DeleteBucketTaggingInput) (*request.Request, *s3.DeleteBucketTaggingOutput)) {
	fake.deleteBucketTaggingRequestMutex.Lock()
	defer fake.deleteBucketTaggingRequestMutex.Unlock()
	fake.DeleteBucketTaggingRequestStub = stub
}

func (fake *FakeS3API) DeleteBucketTaggingRequestArgsForCall(i int) *s3.DeleteBucketTaggingInput {
	fake.deleteBucketTaggingRequestMutex.RLock()
	defer fake.deleteBucketTaggingRequestMutex.RUnlock()
	argsForCall := fake.deleteBucketTaggingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketTaggingRequestReturns(result1 *request.Request, result2 *s3.DeleteBucketTaggingOutput) {
	fake.deleteBucketTaggingRequestMutex.Lock()
	defer fake.deleteBucketTaggingRequestMutex.Unlock()
	fake.DeleteBucketTaggingRequestStub = nil
	fake.deleteBucketTaggingRequestReturns = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketTaggingOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketTaggingRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.DeleteBucketTaggingOutput) {
	fake.deleteBucketTaggingRequestMutex.Lock()
	defer fake.deleteBucketTaggingRequestMutex.Unlock()
	fake.DeleteBucketTaggingRequestStub = nil
	if fake.deleteBucketTaggingRequestReturnsOnCall == nil {
		fake.deleteBucketTaggingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.DeleteBucketTaggingOutput
		})
	}
	fake.deleteBucketTaggingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketTaggingOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketTaggingWithContext(arg1 context.Context, arg2 *s3.DeleteBucketTaggingInput, arg3 ...request.Option) (*s3.DeleteBucketTaggingOutput, error) {
	fake.deleteBucketTaggingWithContextMutex.Lock()
	ret, specificReturn := fake.deleteBucketTaggingWithContextReturnsOnCall[len(fake.deleteBucketTaggingWithContextArgsForCall)]
	fake.deleteBucketTaggingWithContextArgsForCall = append(fake.deleteBucketTaggingWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketTaggingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteBucketTaggingWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteBucketTaggingWithContextMutex.Unlock()
	if fake.DeleteBucketTaggingWithContextStub != nil {
		return fake.DeleteBucketTaggingWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketTaggingWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketTaggingWithContextCallCount() int {
	fake.deleteBucketTaggingWithContextMutex.RLock()
	defer fake.deleteBucketTaggingWithContextMutex.RUnlock()
	return len(fake.deleteBucketTaggingWithContextArgsForCall)
}

func (fake *FakeS3API) DeleteBucketTaggingWithContextCalls(stub func(context.Context, *s3.DeleteBucketTaggingInput, ...request.Option) (*s3.DeleteBucketTaggingOutput, error)) {
	fake.deleteBucketTaggingWithContextMutex.Lock()
	defer fake.deleteBucketTaggingWithContextMutex.Unlock()
	fake.DeleteBucketTaggingWithContextStub = stub
}

func (fake *FakeS3API) DeleteBucketTaggingWithContextArgsForCall(i int) (context.Context, *s3.DeleteBucketTaggingInput, []request.Option) {
	fake.deleteBucketTaggingWithContextMutex.RLock()
	defer fake.deleteBucketTaggingWithContextMutex.RUnlock()
	argsForCall := fake.deleteBucketTaggingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) DeleteBucketTaggingWithContextReturns(result1 *s3.DeleteBucketTaggingOutput, result2 error) {
	fake.deleteBucketTaggingWithContextMutex.Lock()
	defer fake.deleteBucketTaggingWithContextMutex.Unlock()
	fake.DeleteBucketTaggingWithContextStub = nil
	fake.deleteBucketTaggingWithContextReturns = struct {
		result1 *s3.DeleteBucketTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketTaggingWithContextReturnsOnCall(i int, result1 *s3.DeleteBucketTaggingOutput, result2 error) {
	fake.deleteBucketTaggingWithContextMutex.Lock()
	defer fake.deleteBucketTaggingWithContextMutex.Unlock()
	fake.DeleteBucketTaggingWithContextStub = nil
	if fake.deleteBucketTaggingWithContextReturnsOnCall == nil {
		fake.deleteBucketTaggingWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketTaggingOutput
			result2 error
		})
	}
	fake.deleteBucketTaggingWithContextReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketWebsite(arg1 *s3.DeleteBucketWebsiteInput) (*s3.DeleteBucketWebsiteOutput, error) {
	fake.deleteBucketWebsiteMutex.Lock()
	ret, specificReturn := fake.deleteBucketWebsiteReturnsOnCall[len(fake.deleteBucketWebsiteArgsForCall)]
	fake.deleteBucketWebsiteArgsForCall = append(fake.deleteBucketWebsiteArgsForCall, struct {
		arg1 *s3.DeleteBucketWebsiteInput
	}{arg1})
	fake.recordInvocation("DeleteBucketWebsite", []interface{}{arg1})
	fake.deleteBucketWebsiteMutex.Unlock()
	if fake.DeleteBucketWebsiteStub != nil {
		return fake.DeleteBucketWebsiteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketWebsiteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketWebsiteCallCount() int {
	fake.deleteBucketWebsiteMutex.RLock()
	defer fake.deleteBucketWebsiteMutex.RUnlock()
	return len(fake.deleteBucketWebsiteArgsForCall)
}

func (fake *FakeS3API) DeleteBucketWebsiteCalls(stub func(*s3.DeleteBucketWebsiteInput) (*s3.DeleteBucketWebsiteOutput, error)) {
	fake.deleteBucketWebsiteMutex.Lock()
	defer fake.deleteBucketWebsiteMutex.Unlock()
	fake.DeleteBucketWebsiteStub = stub
}

func (fake *FakeS3API) DeleteBucketWebsiteArgsForCall(i int) *s3.DeleteBucketWebsiteInput {
	fake.deleteBucketWebsiteMutex.RLock()
	defer fake.deleteBucketWebsiteMutex.RUnlock()
	argsForCall := fake.deleteBucketWebsiteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketWebsiteReturns(result1 *s3.DeleteBucketWebsiteOutput, result2 error) {
	fake.deleteBucketWebsiteMutex.Lock()
	defer fake.deleteBucketWebsiteMutex.Unlock()
	fake.DeleteBucketWebsiteStub = nil
	fake.deleteBucketWebsiteReturns = struct {
		result1 *s3.DeleteBucketWebsiteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketWebsiteReturnsOnCall(i int, result1 *s3.DeleteBucketWebsiteOutput, result2 error) {
	fake.deleteBucketWebsiteMutex.Lock()
	defer fake.deleteBucketWebsiteMutex.Unlock()
	fake.DeleteBucketWebsiteStub = nil
	if fake.deleteBucketWebsiteReturnsOnCall == nil {
		fake.deleteBucketWebsiteReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketWebsiteOutput
			result2 error
		})
	}
	fake.deleteBucketWebsiteReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketWebsiteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketWebsiteRequest(arg1 *s3.DeleteBucketWebsiteInput) (*request.Request, *s3.DeleteBucketWebsiteOutput) {
	fake.deleteBucketWebsiteRequestMutex.Lock()
	ret, specificReturn := fake.deleteBucketWebsiteRequestReturnsOnCall[len(fake.deleteBucketWebsiteRequestArgsForCall)]
	fake.deleteBucketWebsiteRequestArgsForCall = append(fake.deleteBucketWebsiteRequestArgsForCall, struct {
		arg1 *s3.DeleteBucketWebsiteInput
	}{arg1})
	fake.recordInvocation("DeleteBucketWebsiteRequest", []interface{}{arg1})
	fake.deleteBucketWebsiteRequestMutex.Unlock()
	if fake.DeleteBucketWebsiteRequestStub != nil {
		return fake.DeleteBucketWebsiteRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketWebsiteRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketWebsiteRequestCallCount() int {
	fake.deleteBucketWebsiteRequestMutex.RLock()
	defer fake.deleteBucketWebsiteRequestMutex.RUnlock()
	return len(fake.deleteBucketWebsiteRequestArgsForCall)
}

func (fake *FakeS3API) DeleteBucketWebsiteRequestCalls(stub func(*s3.DeleteBucketWebsiteInput) (*request.Request, *s3.DeleteBucketWebsiteOutput)) {
	fake.deleteBucketWebsiteRequestMutex.Lock()
	defer fake.deleteBucketWebsiteRequestMutex.Unlock()
	fake.DeleteBucketWebsiteRequestStub = stub
}

func (fake *FakeS3API) DeleteBucketWebsiteRequestArgsForCall(i int) *s3.DeleteBucketWebsiteInput {
	fake.deleteBucketWebsiteRequestMutex.RLock()
	defer fake.deleteBucketWebsiteRequestMutex.RUnlock()
	argsForCall := fake.deleteBucketWebsiteRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteBucketWebsiteRequestReturns(result1 *request.Request, result2 *s3.DeleteBucketWebsiteOutput) {
	fake.deleteBucketWebsiteRequestMutex.Lock()
	defer fake.deleteBucketWebsiteRequestMutex.Unlock()
	fake.DeleteBucketWebsiteRequestStub = nil
	fake.deleteBucketWebsiteRequestReturns = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketWebsiteOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketWebsiteRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.DeleteBucketWebsiteOutput) {
	fake.deleteBucketWebsiteRequestMutex.Lock()
	defer fake.deleteBucketWebsiteRequestMutex.Unlock()
	fake.DeleteBucketWebsiteRequestStub = nil
	if fake.deleteBucketWebsiteRequestReturnsOnCall == nil {
		fake.deleteBucketWebsiteRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.DeleteBucketWebsiteOutput
		})
	}
	fake.deleteBucketWebsiteRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.DeleteBucketWebsiteOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketWebsiteWithContext(arg1 context.Context, arg2 *s3.DeleteBucketWebsiteInput, arg3 ...request.Option) (*s3.DeleteBucketWebsiteOutput, error) {
	fake.deleteBucketWebsiteWithContextMutex.Lock()
	ret, specificReturn := fake.deleteBucketWebsiteWithContextReturnsOnCall[len(fake.deleteBucketWebsiteWithContextArgsForCall)]
	fake.deleteBucketWebsiteWithContextArgsForCall = append(fake.deleteBucketWebsiteWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketWebsiteInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteBucketWebsiteWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteBucketWebsiteWithContextMutex.Unlock()
	if fake.DeleteBucketWebsiteWithContextStub != nil {
		return fake.DeleteBucketWebsiteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketWebsiteWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketWebsiteWithContextCallCount() int {
	fake.deleteBucketWebsiteWithContextMutex.RLock()
	defer fake.deleteBucketWebsiteWithContextMutex.RUnlock()
	return len(fake.deleteBucketWebsiteWithContextArgsForCall)
}

func (fake *FakeS3API) DeleteBucketWebsiteWithContextCalls(stub func(context.Context, *s3.DeleteBucketWebsiteInput, ...request.Option) (*s3.DeleteBucketWebsiteOutput, error)) {
	fake.deleteBucketWebsiteWithContextMutex.Lock()
	defer fake.deleteBucketWebsiteWithContextMutex.Unlock()
	fake.DeleteBucketWebsiteWithContextStub = stub
}

func (fake *FakeS3API) DeleteBucketWebsiteWithContextArgsForCall(i int) (context.Context, *s3.DeleteBucketWebsiteInput, []request.Option) {
	fake.deleteBucketWebsiteWithContextMutex.RLock()
	defer fake.deleteBucketWebsiteWithContextMutex.RUnlock()
	argsForCall := fake.deleteBucketWebsiteWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) DeleteBucketWebsiteWithContextReturns(result1 *s3.DeleteBucketWebsiteOutput, result2 error) {
	fake.deleteBucketWebsiteWithContextMutex.Lock()
	defer fake.deleteBucketWebsiteWithContextMutex.Unlock()
	fake.DeleteBucketWebsiteWithContextStub = nil
	fake.deleteBucketWebsiteWithContextReturns = struct {
		result1 *s3.DeleteBucketWebsiteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketWebsiteWithContextReturnsOnCall(i int, result1 *s3.DeleteBucketWebsiteOutput, result2 error) {
	fake.deleteBucketWebsiteWithContextMutex.Lock()
	defer fake.deleteBucketWebsiteWithContextMutex.Unlock()
	fake.DeleteBucketWebsiteWithContextStub = nil
	if fake.deleteBucketWebsiteWithContextReturnsOnCall == nil {
		fake.deleteBucketWebsiteWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketWebsiteOutput
			result2 error
		})
	}
	fake.deleteBucketWebsiteWithContextReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketWebsiteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketWithContext(arg1 context.Context, arg2 *s3.DeleteBucketInput, arg3 ...request.Option) (*s3.DeleteBucketOutput, error) {
	fake.deleteBucketWithContextMutex.Lock()
	ret, specificReturn := fake.deleteBucketWithContextReturnsOnCall[len(fake.deleteBucketWithContextArgsForCall)]
	fake.deleteBucketWithContextArgsForCall = append(fake.deleteBucketWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteBucketWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteBucketWithContextMutex.Unlock()
	if fake.DeleteBucketWithContextStub != nil {
		return fake.DeleteBucketWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBucketWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteBucketWithContextCallCount() int {
	fake.deleteBucketWithContextMutex.RLock()
	defer fake.deleteBucketWithContextMutex.RUnlock()
	return len(fake.deleteBucketWithContextArgsForCall)
}

func (fake *FakeS3API) DeleteBucketWithContextCalls(stub func(context.Context, *s3.DeleteBucketInput, ...request.Option) (*s3.DeleteBucketOutput, error)) {
	fake.deleteBucketWithContextMutex.Lock()
	defer fake.deleteBucketWithContextMutex.Unlock()
	fake.DeleteBucketWithContextStub = stub
}

func (fake *FakeS3API) DeleteBucketWithContextArgsForCall(i int) (context.Context, *s3.DeleteBucketInput, []request.Option) {
	fake.deleteBucketWithContextMutex.RLock()
	defer fake.deleteBucketWithContextMutex.RUnlock()
	argsForCall := fake.deleteBucketWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) DeleteBucketWithContextReturns(result1 *s3.DeleteBucketOutput, result2 error) {
	fake.deleteBucketWithContextMutex.Lock()
	defer fake.deleteBucketWithContextMutex.Unlock()
	fake.DeleteBucketWithContextStub = nil
	fake.deleteBucketWithContextReturns = struct {
		result1 *s3.DeleteBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteBucketWithContextReturnsOnCall(i int, result1 *s3.DeleteBucketOutput, result2 error) {
	fake.deleteBucketWithContextMutex.Lock()
	defer fake.deleteBucketWithContextMutex.Unlock()
	fake.DeleteBucketWithContextStub = nil
	if fake.deleteBucketWithContextReturnsOnCall == nil {
		fake.deleteBucketWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketOutput
			result2 error
		})
	}
	fake.deleteBucketWithContextReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObject(arg1 *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
	fake.deleteObjectMutex.Lock()
	ret, specificReturn := fake.deleteObjectReturnsOnCall[len(fake.deleteObjectArgsForCall)]
	fake.deleteObjectArgsForCall = append(fake.deleteObjectArgsForCall, struct {
		arg1 *s3.DeleteObjectInput
	}{arg1})
	fake.recordInvocation("DeleteObject", []interface{}{arg1})
	fake.deleteObjectMutex.Unlock()
	if fake.DeleteObjectStub != nil {
		return fake.DeleteObjectStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteObjectReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteObjectCallCount() int {
	fake.deleteObjectMutex.RLock()
	defer fake.deleteObjectMutex.RUnlock()
	return len(fake.deleteObjectArgsForCall)
}

func (fake *FakeS3API) DeleteObjectCalls(stub func(*s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)) {
	fake.deleteObjectMutex.Lock()
	defer fake.deleteObjectMutex.Unlock()
	fake.DeleteObjectStub = stub
}

func (fake *FakeS3API) DeleteObjectArgsForCall(i int) *s3.DeleteObjectInput {
	fake.deleteObjectMutex.RLock()
	defer fake.deleteObjectMutex.RUnlock()
	argsForCall := fake.deleteObjectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteObjectReturns(result1 *s3.DeleteObjectOutput, result2 error) {
	fake.deleteObjectMutex.Lock()
	defer fake.deleteObjectMutex.Unlock()
	fake.DeleteObjectStub = nil
	fake.deleteObjectReturns = struct {
		result1 *s3.DeleteObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObjectReturnsOnCall(i int, result1 *s3.DeleteObjectOutput, result2 error) {
	fake.deleteObjectMutex.Lock()
	defer fake.deleteObjectMutex.Unlock()
	fake.DeleteObjectStub = nil
	if fake.deleteObjectReturnsOnCall == nil {
		fake.deleteObjectReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteObjectOutput
			result2 error
		})
	}
	fake.deleteObjectReturnsOnCall[i] = struct {
		result1 *s3.DeleteObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObjectRequest(arg1 *s3.DeleteObjectInput) (*request.Request, *s3.DeleteObjectOutput) {
	fake.deleteObjectRequestMutex.Lock()
	ret, specificReturn := fake.deleteObjectRequestReturnsOnCall[len(fake.deleteObjectRequestArgsForCall)]
	fake.deleteObjectRequestArgsForCall = append(fake.deleteObjectRequestArgsForCall, struct {
		arg1 *s3.DeleteObjectInput
	}{arg1})
	fake.recordInvocation("DeleteObjectRequest", []interface{}{arg1})
	fake.deleteObjectRequestMutex.Unlock()
	if fake.DeleteObjectRequestStub != nil {
		return fake.DeleteObjectRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteObjectRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteObjectRequestCallCount() int {
	fake.deleteObjectRequestMutex.RLock()
	defer fake.deleteObjectRequestMutex.RUnlock()
	return len(fake.deleteObjectRequestArgsForCall)
}

func (fake *FakeS3API) DeleteObjectRequestCalls(stub func(*s3.DeleteObjectInput) (*request.Request, *s3.DeleteObjectOutput)) {
	fake.deleteObjectRequestMutex.Lock()
	defer fake.deleteObjectRequestMutex.Unlock()
	fake.DeleteObjectRequestStub = stub
}

func (fake *FakeS3API) DeleteObjectRequestArgsForCall(i int) *s3.DeleteObjectInput {
	fake.deleteObjectRequestMutex.RLock()
	defer fake.deleteObjectRequestMutex.RUnlock()
	argsForCall := fake.deleteObjectRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteObjectRequestReturns(result1 *request.Request, result2 *s3.DeleteObjectOutput) {
	fake.deleteObjectRequestMutex.Lock()
	defer fake.deleteObjectRequestMutex.Unlock()
	fake.DeleteObjectRequestStub = nil
	fake.deleteObjectRequestReturns = struct {
		result1 *request.Request
		result2 *s3.DeleteObjectOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObjectRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.DeleteObjectOutput) {
	fake.deleteObjectRequestMutex.Lock()
	defer fake.deleteObjectRequestMutex.Unlock()
	fake.DeleteObjectRequestStub = nil
	if fake.deleteObjectRequestReturnsOnCall == nil {
		fake.deleteObjectRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.DeleteObjectOutput
		})
	}
	fake.deleteObjectRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.DeleteObjectOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObjectTagging(arg1 *s3.DeleteObjectTaggingInput) (*s3.DeleteObjectTaggingOutput, error) {
	fake.deleteObjectTaggingMutex.Lock()
	ret, specificReturn := fake.deleteObjectTaggingReturnsOnCall[len(fake.deleteObjectTaggingArgsForCall)]
	fake.deleteObjectTaggingArgsForCall = append(fake.deleteObjectTaggingArgsForCall, struct {
		arg1 *s3.DeleteObjectTaggingInput
	}{arg1})
	fake.recordInvocation("DeleteObjectTagging", []interface{}{arg1})
	fake.deleteObjectTaggingMutex.Unlock()
	if fake.DeleteObjectTaggingStub != nil {
		return fake.DeleteObjectTaggingStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteObjectTaggingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteObjectTaggingCallCount() int {
	fake.deleteObjectTaggingMutex.RLock()
	defer fake.deleteObjectTaggingMutex.RUnlock()
	return len(fake.deleteObjectTaggingArgsForCall)
}

func (fake *FakeS3API) DeleteObjectTaggingCalls(stub func(*s3.DeleteObjectTaggingInput) (*s3.DeleteObjectTaggingOutput, error)) {
	fake.deleteObjectTaggingMutex.Lock()
	defer fake.deleteObjectTaggingMutex.Unlock()
	fake.DeleteObjectTaggingStub = stub
}

func (fake *FakeS3API) DeleteObjectTaggingArgsForCall(i int) *s3.DeleteObjectTaggingInput {
	fake.deleteObjectTaggingMutex.RLock()
	defer fake.deleteObjectTaggingMutex.RUnlock()
	argsForCall := fake.deleteObjectTaggingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteObjectTaggingReturns(result1 *s3.DeleteObjectTaggingOutput, result2 error) {
	fake.deleteObjectTaggingMutex.Lock()
	defer fake.deleteObjectTaggingMutex.Unlock()
	fake.DeleteObjectTaggingStub = nil
	fake.deleteObjectTaggingReturns = struct {
		result1 *s3.DeleteObjectTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObjectTaggingReturnsOnCall(i int, result1 *s3.DeleteObjectTaggingOutput, result2 error) {
	fake.deleteObjectTaggingMutex.Lock()
	defer fake.deleteObjectTaggingMutex.Unlock()
	fake.DeleteObjectTaggingStub = nil
	if fake.deleteObjectTaggingReturnsOnCall == nil {
		fake.deleteObjectTaggingReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteObjectTaggingOutput
			result2 error
		})
	}
	fake.deleteObjectTaggingReturnsOnCall[i] = struct {
		result1 *s3.DeleteObjectTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObjectTaggingRequest(arg1 *s3.DeleteObjectTaggingInput) (*request.Request, *s3.DeleteObjectTaggingOutput) {
	fake.deleteObjectTaggingRequestMutex.Lock()
	ret, specificReturn := fake.deleteObjectTaggingRequestReturnsOnCall[len(fake.deleteObjectTaggingRequestArgsForCall)]
	fake.deleteObjectTaggingRequestArgsForCall = append(fake.deleteObjectTaggingRequestArgsForCall, struct {
		arg1 *s3.DeleteObjectTaggingInput
	}{arg1})
	fake.recordInvocation("DeleteObjectTaggingRequest", []interface{}{arg1})
	fake.deleteObjectTaggingRequestMutex.Unlock()
	if fake.DeleteObjectTaggingRequestStub != nil {
		return fake.DeleteObjectTaggingRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteObjectTaggingRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteObjectTaggingRequestCallCount() int {
	fake.deleteObjectTaggingRequestMutex.RLock()
	defer fake.deleteObjectTaggingRequestMutex.RUnlock()
	return len(fake.deleteObjectTaggingRequestArgsForCall)
}

func (fake *FakeS3API) DeleteObjectTaggingRequestCalls(stub func(*s3.DeleteObjectTaggingInput) (*request.Request, *s3.DeleteObjectTaggingOutput)) {
	fake.deleteObjectTaggingRequestMutex.Lock()
	defer fake.deleteObjectTaggingRequestMutex.Unlock()
	fake.DeleteObjectTaggingRequestStub = stub
}

func (fake *FakeS3API) DeleteObjectTaggingRequestArgsForCall(i int) *s3.DeleteObjectTaggingInput {
	fake.deleteObjectTaggingRequestMutex.RLock()
	defer fake.deleteObjectTaggingRequestMutex.RUnlock()
	argsForCall := fake.deleteObjectTaggingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteObjectTaggingRequestReturns(result1 *request.Request, result2 *s3.DeleteObjectTaggingOutput) {
	fake.deleteObjectTaggingRequestMutex.Lock()
	defer fake.deleteObjectTaggingRequestMutex.Unlock()
	fake.DeleteObjectTaggingRequestStub = nil
	fake.deleteObjectTaggingRequestReturns = struct {
		result1 *request.Request
		result2 *s3.DeleteObjectTaggingOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObjectTaggingRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.DeleteObjectTaggingOutput) {
	fake.deleteObjectTaggingRequestMutex.Lock()
	defer fake.deleteObjectTaggingRequestMutex.Unlock()
	fake.DeleteObjectTaggingRequestStub = nil
	if fake.deleteObjectTaggingRequestReturnsOnCall == nil {
		fake.deleteObjectTaggingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.DeleteObjectTaggingOutput
		})
	}
	fake.deleteObjectTaggingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.DeleteObjectTaggingOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObjectTaggingWithContext(arg1 context.Context, arg2 *s3.DeleteObjectTaggingInput, arg3 ...request.Option) (*s3.DeleteObjectTaggingOutput, error) {
	fake.deleteObjectTaggingWithContextMutex.Lock()
	ret, specificReturn := fake.deleteObjectTaggingWithContextReturnsOnCall[len(fake.deleteObjectTaggingWithContextArgsForCall)]
	fake.deleteObjectTaggingWithContextArgsForCall = append(fake.deleteObjectTaggingWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteObjectTaggingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteObjectTaggingWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteObjectTaggingWithContextMutex.Unlock()
	if fake.DeleteObjectTaggingWithContextStub != nil {
		return fake.DeleteObjectTaggingWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteObjectTaggingWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteObjectTaggingWithContextCallCount() int {
	fake.deleteObjectTaggingWithContextMutex.RLock()
	defer fake.deleteObjectTaggingWithContextMutex.RUnlock()
	return len(fake.deleteObjectTaggingWithContextArgsForCall)
}

func (fake *FakeS3API) DeleteObjectTaggingWithContextCalls(stub func(context.Context, *s3.DeleteObjectTaggingInput, ...request.Option) (*s3.DeleteObjectTaggingOutput, error)) {
	fake.deleteObjectTaggingWithContextMutex.Lock()
	defer fake.deleteObjectTaggingWithContextMutex.Unlock()
	fake.DeleteObjectTaggingWithContextStub = stub
}

func (fake *FakeS3API) DeleteObjectTaggingWithContextArgsForCall(i int) (context.Context, *s3.DeleteObjectTaggingInput, []request.Option) {
	fake.deleteObjectTaggingWithContextMutex.RLock()
	defer fake.deleteObjectTaggingWithContextMutex.RUnlock()
	argsForCall := fake.deleteObjectTaggingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) DeleteObjectTaggingWithContextReturns(result1 *s3.DeleteObjectTaggingOutput, result2 error) {
	fake.deleteObjectTaggingWithContextMutex.Lock()
	defer fake.deleteObjectTaggingWithContextMutex.Unlock()
	fake.DeleteObjectTaggingWithContextStub = nil
	fake.deleteObjectTaggingWithContextReturns = struct {
		result1 *s3.DeleteObjectTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObjectTaggingWithContextReturnsOnCall(i int, result1 *s3.DeleteObjectTaggingOutput, result2 error) {
	fake.deleteObjectTaggingWithContextMutex.Lock()
	defer fake.deleteObjectTaggingWithContextMutex.Unlock()
	fake.DeleteObjectTaggingWithContextStub = nil
	if fake.deleteObjectTaggingWithContextReturnsOnCall == nil {
		fake.deleteObjectTaggingWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteObjectTaggingOutput
			result2 error
		})
	}
	fake.deleteObjectTaggingWithContextReturnsOnCall[i] = struct {
		result1 *s3.DeleteObjectTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObjectWithContext(arg1 context.Context, arg2 *s3.DeleteObjectInput, arg3 ...request.Option) (*s3.DeleteObjectOutput, error) {
	fake.deleteObjectWithContextMutex.Lock()
	ret, specificReturn := fake.deleteObjectWithContextReturnsOnCall[len(fake.deleteObjectWithContextArgsForCall)]
	fake.deleteObjectWithContextArgsForCall = append(fake.deleteObjectWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteObjectInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteObjectWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteObjectWithContextMutex.Unlock()
	if fake.DeleteObjectWithContextStub != nil {
		return fake.DeleteObjectWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteObjectWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteObjectWithContextCallCount() int {
	fake.deleteObjectWithContextMutex.RLock()
	defer fake.deleteObjectWithContextMutex.RUnlock()
	return len(fake.deleteObjectWithContextArgsForCall)
}

func (fake *FakeS3API) DeleteObjectWithContextCalls(stub func(context.Context, *s3.DeleteObjectInput, ...request.Option) (*s3.DeleteObjectOutput, error)) {
	fake.deleteObjectWithContextMutex.Lock()
	defer fake.deleteObjectWithContextMutex.Unlock()
	fake.DeleteObjectWithContextStub = stub
}

func (fake *FakeS3API) DeleteObjectWithContextArgsForCall(i int) (context.Context, *s3.DeleteObjectInput, []request.Option) {
	fake.deleteObjectWithContextMutex.RLock()
	defer fake.deleteObjectWithContextMutex.RUnlock()
	argsForCall := fake.deleteObjectWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) DeleteObjectWithContextReturns(result1 *s3.DeleteObjectOutput, result2 error) {
	fake.deleteObjectWithContextMutex.Lock()
	defer fake.deleteObjectWithContextMutex.Unlock()
	fake.DeleteObjectWithContextStub = nil
	fake.deleteObjectWithContextReturns = struct {
		result1 *s3.DeleteObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObjectWithContextReturnsOnCall(i int, result1 *s3.DeleteObjectOutput, result2 error) {
	fake.deleteObjectWithContextMutex.Lock()
	defer fake.deleteObjectWithContextMutex.Unlock()
	fake.DeleteObjectWithContextStub = nil
	if fake.deleteObjectWithContextReturnsOnCall == nil {
		fake.deleteObjectWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteObjectOutput
			result2 error
		})
	}
	fake.deleteObjectWithContextReturnsOnCall[i] = struct {
		result1 *s3.DeleteObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObjects(arg1 *s3.DeleteObjectsInput) (*s3.DeleteObjectsOutput, error) {
	fake.deleteObjectsMutex.Lock()
	ret, specificReturn := fake.deleteObjectsReturnsOnCall[len(fake.deleteObjectsArgsForCall)]
	fake.deleteObjectsArgsForCall = append(fake.deleteObjectsArgsForCall, struct {
		arg1 *s3.DeleteObjectsInput
	}{arg1})
	fake.recordInvocation("DeleteObjects", []interface{}{arg1})
	fake.deleteObjectsMutex.Unlock()
	if fake.DeleteObjectsStub != nil {
		return fake.DeleteObjectsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteObjectsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteObjectsCallCount() int {
	fake.deleteObjectsMutex.RLock()
	defer fake.deleteObjectsMutex.RUnlock()
	return len(fake.deleteObjectsArgsForCall)
}

func (fake *FakeS3API) DeleteObjectsCalls(stub func(*s3.DeleteObjectsInput) (*s3.DeleteObjectsOutput, error)) {
	fake.deleteObjectsMutex.Lock()
	defer fake.deleteObjectsMutex.Unlock()
	fake.DeleteObjectsStub = stub
}

func (fake *FakeS3API) DeleteObjectsArgsForCall(i int) *s3.DeleteObjectsInput {
	fake.deleteObjectsMutex.RLock()
	defer fake.deleteObjectsMutex.RUnlock()
	argsForCall := fake.deleteObjectsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteObjectsReturns(result1 *s3.DeleteObjectsOutput, result2 error) {
	fake.deleteObjectsMutex.Lock()
	defer fake.deleteObjectsMutex.Unlock()
	fake.DeleteObjectsStub = nil
	fake.deleteObjectsReturns = struct {
		result1 *s3.DeleteObjectsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObjectsReturnsOnCall(i int, result1 *s3.DeleteObjectsOutput, result2 error) {
	fake.deleteObjectsMutex.Lock()
	defer fake.deleteObjectsMutex.Unlock()
	fake.DeleteObjectsStub = nil
	if fake.deleteObjectsReturnsOnCall == nil {
		fake.deleteObjectsReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteObjectsOutput
			result2 error
		})
	}
	fake.deleteObjectsReturnsOnCall[i] = struct {
		result1 *s3.DeleteObjectsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObjectsRequest(arg1 *s3.DeleteObjectsInput) (*request.Request, *s3.DeleteObjectsOutput) {
	fake.deleteObjectsRequestMutex.Lock()
	ret, specificReturn := fake.deleteObjectsRequestReturnsOnCall[len(fake.deleteObjectsRequestArgsForCall)]
	fake.deleteObjectsRequestArgsForCall = append(fake.deleteObjectsRequestArgsForCall, struct {
		arg1 *s3.DeleteObjectsInput
	}{arg1})
	fake.recordInvocation("DeleteObjectsRequest", []interface{}{arg1})
	fake.deleteObjectsRequestMutex.Unlock()
	if fake.DeleteObjectsRequestStub != nil {
		return fake.DeleteObjectsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteObjectsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteObjectsRequestCallCount() int {
	fake.deleteObjectsRequestMutex.RLock()
	defer fake.deleteObjectsRequestMutex.RUnlock()
	return len(fake.deleteObjectsRequestArgsForCall)
}

func (fake *FakeS3API) DeleteObjectsRequestCalls(stub func(*s3.DeleteObjectsInput) (*request.Request, *s3.DeleteObjectsOutput)) {
	fake.deleteObjectsRequestMutex.Lock()
	defer fake.deleteObjectsRequestMutex.Unlock()
	fake.DeleteObjectsRequestStub = stub
}

func (fake *FakeS3API) DeleteObjectsRequestArgsForCall(i int) *s3.DeleteObjectsInput {
	fake.deleteObjectsRequestMutex.RLock()
	defer fake.deleteObjectsRequestMutex.RUnlock()
	argsForCall := fake.deleteObjectsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeleteObjectsRequestReturns(result1 *request.Request, result2 *s3.DeleteObjectsOutput) {
	fake.deleteObjectsRequestMutex.Lock()
	defer fake.deleteObjectsRequestMutex.Unlock()
	fake.DeleteObjectsRequestStub = nil
	fake.deleteObjectsRequestReturns = struct {
		result1 *request.Request
		result2 *s3.DeleteObjectsOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObjectsRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.DeleteObjectsOutput) {
	fake.deleteObjectsRequestMutex.Lock()
	defer fake.deleteObjectsRequestMutex.Unlock()
	fake.DeleteObjectsRequestStub = nil
	if fake.deleteObjectsRequestReturnsOnCall == nil {
		fake.deleteObjectsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.DeleteObjectsOutput
		})
	}
	fake.deleteObjectsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.DeleteObjectsOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObjectsWithContext(arg1 context.Context, arg2 *s3.DeleteObjectsInput, arg3 ...request.Option) (*s3.DeleteObjectsOutput, error) {
	fake.deleteObjectsWithContextMutex.Lock()
	ret, specificReturn := fake.deleteObjectsWithContextReturnsOnCall[len(fake.deleteObjectsWithContextArgsForCall)]
	fake.deleteObjectsWithContextArgsForCall = append(fake.deleteObjectsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteObjectsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteObjectsWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteObjectsWithContextMutex.Unlock()
	if fake.DeleteObjectsWithContextStub != nil {
		return fake.DeleteObjectsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteObjectsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeleteObjectsWithContextCallCount() int {
	fake.deleteObjectsWithContextMutex.RLock()
	defer fake.deleteObjectsWithContextMutex.RUnlock()
	return len(fake.deleteObjectsWithContextArgsForCall)
}

func (fake *FakeS3API) DeleteObjectsWithContextCalls(stub func(context.Context, *s3.DeleteObjectsInput, ...request.Option) (*s3.DeleteObjectsOutput, error)) {
	fake.deleteObjectsWithContextMutex.Lock()
	defer fake.deleteObjectsWithContextMutex.Unlock()
	fake.DeleteObjectsWithContextStub = stub
}

func (fake *FakeS3API) DeleteObjectsWithContextArgsForCall(i int) (context.Context, *s3.DeleteObjectsInput, []request.Option) {
	fake.deleteObjectsWithContextMutex.RLock()
	defer fake.deleteObjectsWithContextMutex.RUnlock()
	argsForCall := fake.deleteObjectsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) DeleteObjectsWithContextReturns(result1 *s3.DeleteObjectsOutput, result2 error) {
	fake.deleteObjectsWithContextMutex.Lock()
	defer fake.deleteObjectsWithContextMutex.Unlock()
	fake.DeleteObjectsWithContextStub = nil
	fake.deleteObjectsWithContextReturns = struct {
		result1 *s3.DeleteObjectsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeleteObjectsWithContextReturnsOnCall(i int, result1 *s3.DeleteObjectsOutput, result2 error) {
	fake.deleteObjectsWithContextMutex.Lock()
	defer fake.deleteObjectsWithContextMutex.Unlock()
	fake.DeleteObjectsWithContextStub = nil
	if fake.deleteObjectsWithContextReturnsOnCall == nil {
		fake.deleteObjectsWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteObjectsOutput
			result2 error
		})
	}
	fake.deleteObjectsWithContextReturnsOnCall[i] = struct {
		result1 *s3.DeleteObjectsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeletePublicAccessBlock(arg1 *s3.DeletePublicAccessBlockInput) (*s3.DeletePublicAccessBlockOutput, error) {
	fake.deletePublicAccessBlockMutex.Lock()
	ret, specificReturn := fake.deletePublicAccessBlockReturnsOnCall[len(fake.deletePublicAccessBlockArgsForCall)]
	fake.deletePublicAccessBlockArgsForCall = append(fake.deletePublicAccessBlockArgsForCall, struct {
		arg1 *s3.DeletePublicAccessBlockInput
	}{arg1})
	fake.recordInvocation("DeletePublicAccessBlock", []interface{}{arg1})
	fake.deletePublicAccessBlockMutex.Unlock()
	if fake.DeletePublicAccessBlockStub != nil {
		return fake.DeletePublicAccessBlockStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePublicAccessBlockReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeletePublicAccessBlockCallCount() int {
	fake.deletePublicAccessBlockMutex.RLock()
	defer fake.deletePublicAccessBlockMutex.RUnlock()
	return len(fake.deletePublicAccessBlockArgsForCall)
}

func (fake *FakeS3API) DeletePublicAccessBlockCalls(stub func(*s3.DeletePublicAccessBlockInput) (*s3.DeletePublicAccessBlockOutput, error)) {
	fake.deletePublicAccessBlockMutex.Lock()
	defer fake.deletePublicAccessBlockMutex.Unlock()
	fake.DeletePublicAccessBlockStub = stub
}

func (fake *FakeS3API) DeletePublicAccessBlockArgsForCall(i int) *s3.DeletePublicAccessBlockInput {
	fake.deletePublicAccessBlockMutex.RLock()
	defer fake.deletePublicAccessBlockMutex.RUnlock()
	argsForCall := fake.deletePublicAccessBlockArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeletePublicAccessBlockReturns(result1 *s3.DeletePublicAccessBlockOutput, result2 error) {
	fake.deletePublicAccessBlockMutex.Lock()
	defer fake.deletePublicAccessBlockMutex.Unlock()
	fake.DeletePublicAccessBlockStub = nil
	fake.deletePublicAccessBlockReturns = struct {
		result1 *s3.DeletePublicAccessBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeletePublicAccessBlockReturnsOnCall(i int, result1 *s3.DeletePublicAccessBlockOutput, result2 error) {
	fake.deletePublicAccessBlockMutex.Lock()
	defer fake.deletePublicAccessBlockMutex.Unlock()
	fake.DeletePublicAccessBlockStub = nil
	if fake.deletePublicAccessBlockReturnsOnCall == nil {
		fake.deletePublicAccessBlockReturnsOnCall = make(map[int]struct {
			result1 *s3.DeletePublicAccessBlockOutput
			result2 error
		})
	}
	fake.deletePublicAccessBlockReturnsOnCall[i] = struct {
		result1 *s3.DeletePublicAccessBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeletePublicAccessBlockRequest(arg1 *s3.DeletePublicAccessBlockInput) (*request.Request, *s3.DeletePublicAccessBlockOutput) {
	fake.deletePublicAccessBlockRequestMutex.Lock()
	ret, specificReturn := fake.deletePublicAccessBlockRequestReturnsOnCall[len(fake.deletePublicAccessBlockRequestArgsForCall)]
	fake.deletePublicAccessBlockRequestArgsForCall = append(fake.deletePublicAccessBlockRequestArgsForCall, struct {
		arg1 *s3.DeletePublicAccessBlockInput
	}{arg1})
	fake.recordInvocation("DeletePublicAccessBlockRequest", []interface{}{arg1})
	fake.deletePublicAccessBlockRequestMutex.Unlock()
	if fake.DeletePublicAccessBlockRequestStub != nil {
		return fake.DeletePublicAccessBlockRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePublicAccessBlockRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeletePublicAccessBlockRequestCallCount() int {
	fake.deletePublicAccessBlockRequestMutex.RLock()
	defer fake.deletePublicAccessBlockRequestMutex.RUnlock()
	return len(fake.deletePublicAccessBlockRequestArgsForCall)
}

func (fake *FakeS3API) DeletePublicAccessBlockRequestCalls(stub func(*s3.DeletePublicAccessBlockInput) (*request.Request, *s3.DeletePublicAccessBlockOutput)) {
	fake.deletePublicAccessBlockRequestMutex.Lock()
	defer fake.deletePublicAccessBlockRequestMutex.Unlock()
	fake.DeletePublicAccessBlockRequestStub = stub
}

func (fake *FakeS3API) DeletePublicAccessBlockRequestArgsForCall(i int) *s3.DeletePublicAccessBlockInput {
	fake.deletePublicAccessBlockRequestMutex.RLock()
	defer fake.deletePublicAccessBlockRequestMutex.RUnlock()
	argsForCall := fake.deletePublicAccessBlockRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) DeletePublicAccessBlockRequestReturns(result1 *request.Request, result2 *s3.DeletePublicAccessBlockOutput) {
	fake.deletePublicAccessBlockRequestMutex.Lock()
	defer fake.deletePublicAccessBlockRequestMutex.Unlock()
	fake.DeletePublicAccessBlockRequestStub = nil
	fake.deletePublicAccessBlockRequestReturns = struct {
		result1 *request.Request
		result2 *s3.DeletePublicAccessBlockOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeletePublicAccessBlockRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.DeletePublicAccessBlockOutput) {
	fake.deletePublicAccessBlockRequestMutex.Lock()
	defer fake.deletePublicAccessBlockRequestMutex.Unlock()
	fake.DeletePublicAccessBlockRequestStub = nil
	if fake.deletePublicAccessBlockRequestReturnsOnCall == nil {
		fake.deletePublicAccessBlockRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.DeletePublicAccessBlockOutput
		})
	}
	fake.deletePublicAccessBlockRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.DeletePublicAccessBlockOutput
	}{result1, result2}
}

func (fake *FakeS3API) DeletePublicAccessBlockWithContext(arg1 context.Context, arg2 *s3.DeletePublicAccessBlockInput, arg3 ...request.Option) (*s3.DeletePublicAccessBlockOutput, error) {
	fake.deletePublicAccessBlockWithContextMutex.Lock()
	ret, specificReturn := fake.deletePublicAccessBlockWithContextReturnsOnCall[len(fake.deletePublicAccessBlockWithContextArgsForCall)]
	fake.deletePublicAccessBlockWithContextArgsForCall = append(fake.deletePublicAccessBlockWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeletePublicAccessBlockInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeletePublicAccessBlockWithContext", []interface{}{arg1, arg2, arg3})
	fake.deletePublicAccessBlockWithContextMutex.Unlock()
	if fake.DeletePublicAccessBlockWithContextStub != nil {
		return fake.DeletePublicAccessBlockWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePublicAccessBlockWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) DeletePublicAccessBlockWithContextCallCount() int {
	fake.deletePublicAccessBlockWithContextMutex.RLock()
	defer fake.deletePublicAccessBlockWithContextMutex.RUnlock()
	return len(fake.deletePublicAccessBlockWithContextArgsForCall)
}

func (fake *FakeS3API) DeletePublicAccessBlockWithContextCalls(stub func(context.Context, *s3.DeletePublicAccessBlockInput, ...request.Option) (*s3.DeletePublicAccessBlockOutput, error)) {
	fake.deletePublicAccessBlockWithContextMutex.Lock()
	defer fake.deletePublicAccessBlockWithContextMutex.Unlock()
	fake.DeletePublicAccessBlockWithContextStub = stub
}

func (fake *FakeS3API) DeletePublicAccessBlockWithContextArgsForCall(i int) (context.Context, *s3.DeletePublicAccessBlockInput, []request.Option) {
	fake.deletePublicAccessBlockWithContextMutex.RLock()
	defer fake.deletePublicAccessBlockWithContextMutex.RUnlock()
	argsForCall := fake.deletePublicAccessBlockWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) DeletePublicAccessBlockWithContextReturns(result1 *s3.DeletePublicAccessBlockOutput, result2 error) {
	fake.deletePublicAccessBlockWithContextMutex.Lock()
	defer fake.deletePublicAccessBlockWithContextMutex.Unlock()
	fake.DeletePublicAccessBlockWithContextStub = nil
	fake.deletePublicAccessBlockWithContextReturns = struct {
		result1 *s3.DeletePublicAccessBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) DeletePublicAccessBlockWithContextReturnsOnCall(i int, result1 *s3.DeletePublicAccessBlockOutput, result2 error) {
	fake.deletePublicAccessBlockWithContextMutex.Lock()
	defer fake.deletePublicAccessBlockWithContextMutex.Unlock()
	fake.DeletePublicAccessBlockWithContextStub = nil
	if fake.deletePublicAccessBlockWithContextReturnsOnCall == nil {
		fake.deletePublicAccessBlockWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.DeletePublicAccessBlockOutput
			result2 error
		})
	}
	fake.deletePublicAccessBlockWithContextReturnsOnCall[i] = struct {
		result1 *s3.DeletePublicAccessBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAccelerateConfiguration(arg1 *s3.GetBucketAccelerateConfigurationInput) (*s3.GetBucketAccelerateConfigurationOutput, error) {
	fake.getBucketAccelerateConfigurationMutex.Lock()
	ret, specificReturn := fake.getBucketAccelerateConfigurationReturnsOnCall[len(fake.getBucketAccelerateConfigurationArgsForCall)]
	fake.getBucketAccelerateConfigurationArgsForCall = append(fake.getBucketAccelerateConfigurationArgsForCall, struct {
		arg1 *s3.GetBucketAccelerateConfigurationInput
	}{arg1})
	fake.recordInvocation("GetBucketAccelerateConfiguration", []interface{}{arg1})
	fake.getBucketAccelerateConfigurationMutex.Unlock()
	if fake.GetBucketAccelerateConfigurationStub != nil {
		return fake.GetBucketAccelerateConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketAccelerateConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketAccelerateConfigurationCallCount() int {
	fake.getBucketAccelerateConfigurationMutex.RLock()
	defer fake.getBucketAccelerateConfigurationMutex.RUnlock()
	return len(fake.getBucketAccelerateConfigurationArgsForCall)
}

func (fake *FakeS3API) GetBucketAccelerateConfigurationCalls(stub func(*s3.GetBucketAccelerateConfigurationInput) (*s3.GetBucketAccelerateConfigurationOutput, error)) {
	fake.getBucketAccelerateConfigurationMutex.Lock()
	defer fake.getBucketAccelerateConfigurationMutex.Unlock()
	fake.GetBucketAccelerateConfigurationStub = stub
}

func (fake *FakeS3API) GetBucketAccelerateConfigurationArgsForCall(i int) *s3.GetBucketAccelerateConfigurationInput {
	fake.getBucketAccelerateConfigurationMutex.RLock()
	defer fake.getBucketAccelerateConfigurationMutex.RUnlock()
	argsForCall := fake.getBucketAccelerateConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketAccelerateConfigurationReturns(result1 *s3.GetBucketAccelerateConfigurationOutput, result2 error) {
	fake.getBucketAccelerateConfigurationMutex.Lock()
	defer fake.getBucketAccelerateConfigurationMutex.Unlock()
	fake.GetBucketAccelerateConfigurationStub = nil
	fake.getBucketAccelerateConfigurationReturns = struct {
		result1 *s3.GetBucketAccelerateConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAccelerateConfigurationReturnsOnCall(i int, result1 *s3.GetBucketAccelerateConfigurationOutput, result2 error) {
	fake.getBucketAccelerateConfigurationMutex.Lock()
	defer fake.getBucketAccelerateConfigurationMutex.Unlock()
	fake.GetBucketAccelerateConfigurationStub = nil
	if fake.getBucketAccelerateConfigurationReturnsOnCall == nil {
		fake.getBucketAccelerateConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketAccelerateConfigurationOutput
			result2 error
		})
	}
	fake.getBucketAccelerateConfigurationReturnsOnCall[i] = struct {
		result1 *s3.GetBucketAccelerateConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAccelerateConfigurationRequest(arg1 *s3.GetBucketAccelerateConfigurationInput) (*request.Request, *s3.GetBucketAccelerateConfigurationOutput) {
	fake.getBucketAccelerateConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.getBucketAccelerateConfigurationRequestReturnsOnCall[len(fake.getBucketAccelerateConfigurationRequestArgsForCall)]
	fake.getBucketAccelerateConfigurationRequestArgsForCall = append(fake.getBucketAccelerateConfigurationRequestArgsForCall, struct {
		arg1 *s3.GetBucketAccelerateConfigurationInput
	}{arg1})
	fake.recordInvocation("GetBucketAccelerateConfigurationRequest", []interface{}{arg1})
	fake.getBucketAccelerateConfigurationRequestMutex.Unlock()
	if fake.GetBucketAccelerateConfigurationRequestStub != nil {
		return fake.GetBucketAccelerateConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketAccelerateConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketAccelerateConfigurationRequestCallCount() int {
	fake.getBucketAccelerateConfigurationRequestMutex.RLock()
	defer fake.getBucketAccelerateConfigurationRequestMutex.RUnlock()
	return len(fake.getBucketAccelerateConfigurationRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketAccelerateConfigurationRequestCalls(stub func(*s3.GetBucketAccelerateConfigurationInput) (*request.Request, *s3.GetBucketAccelerateConfigurationOutput)) {
	fake.getBucketAccelerateConfigurationRequestMutex.Lock()
	defer fake.getBucketAccelerateConfigurationRequestMutex.Unlock()
	fake.GetBucketAccelerateConfigurationRequestStub = stub
}

func (fake *FakeS3API) GetBucketAccelerateConfigurationRequestArgsForCall(i int) *s3.GetBucketAccelerateConfigurationInput {
	fake.getBucketAccelerateConfigurationRequestMutex.RLock()
	defer fake.getBucketAccelerateConfigurationRequestMutex.RUnlock()
	argsForCall := fake.getBucketAccelerateConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketAccelerateConfigurationRequestReturns(result1 *request.Request, result2 *s3.GetBucketAccelerateConfigurationOutput) {
	fake.getBucketAccelerateConfigurationRequestMutex.Lock()
	defer fake.getBucketAccelerateConfigurationRequestMutex.Unlock()
	fake.GetBucketAccelerateConfigurationRequestStub = nil
	fake.getBucketAccelerateConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketAccelerateConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAccelerateConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketAccelerateConfigurationOutput) {
	fake.getBucketAccelerateConfigurationRequestMutex.Lock()
	defer fake.getBucketAccelerateConfigurationRequestMutex.Unlock()
	fake.GetBucketAccelerateConfigurationRequestStub = nil
	if fake.getBucketAccelerateConfigurationRequestReturnsOnCall == nil {
		fake.getBucketAccelerateConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketAccelerateConfigurationOutput
		})
	}
	fake.getBucketAccelerateConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketAccelerateConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAccelerateConfigurationWithContext(arg1 context.Context, arg2 *s3.GetBucketAccelerateConfigurationInput, arg3 ...request.Option) (*s3.GetBucketAccelerateConfigurationOutput, error) {
	fake.getBucketAccelerateConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketAccelerateConfigurationWithContextReturnsOnCall[len(fake.getBucketAccelerateConfigurationWithContextArgsForCall)]
	fake.getBucketAccelerateConfigurationWithContextArgsForCall = append(fake.getBucketAccelerateConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketAccelerateConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketAccelerateConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketAccelerateConfigurationWithContextMutex.Unlock()
	if fake.GetBucketAccelerateConfigurationWithContextStub != nil {
		return fake.GetBucketAccelerateConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketAccelerateConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketAccelerateConfigurationWithContextCallCount() int {
	fake.getBucketAccelerateConfigurationWithContextMutex.RLock()
	defer fake.getBucketAccelerateConfigurationWithContextMutex.RUnlock()
	return len(fake.getBucketAccelerateConfigurationWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketAccelerateConfigurationWithContextCalls(stub func(context.Context, *s3.GetBucketAccelerateConfigurationInput, ...request.Option) (*s3.GetBucketAccelerateConfigurationOutput, error)) {
	fake.getBucketAccelerateConfigurationWithContextMutex.Lock()
	defer fake.getBucketAccelerateConfigurationWithContextMutex.Unlock()
	fake.GetBucketAccelerateConfigurationWithContextStub = stub
}

func (fake *FakeS3API) GetBucketAccelerateConfigurationWithContextArgsForCall(i int) (context.Context, *s3.GetBucketAccelerateConfigurationInput, []request.Option) {
	fake.getBucketAccelerateConfigurationWithContextMutex.RLock()
	defer fake.getBucketAccelerateConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.getBucketAccelerateConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketAccelerateConfigurationWithContextReturns(result1 *s3.GetBucketAccelerateConfigurationOutput, result2 error) {
	fake.getBucketAccelerateConfigurationWithContextMutex.Lock()
	defer fake.getBucketAccelerateConfigurationWithContextMutex.Unlock()
	fake.GetBucketAccelerateConfigurationWithContextStub = nil
	fake.getBucketAccelerateConfigurationWithContextReturns = struct {
		result1 *s3.GetBucketAccelerateConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAccelerateConfigurationWithContextReturnsOnCall(i int, result1 *s3.GetBucketAccelerateConfigurationOutput, result2 error) {
	fake.getBucketAccelerateConfigurationWithContextMutex.Lock()
	defer fake.getBucketAccelerateConfigurationWithContextMutex.Unlock()
	fake.GetBucketAccelerateConfigurationWithContextStub = nil
	if fake.getBucketAccelerateConfigurationWithContextReturnsOnCall == nil {
		fake.getBucketAccelerateConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketAccelerateConfigurationOutput
			result2 error
		})
	}
	fake.getBucketAccelerateConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketAccelerateConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAcl(arg1 *s3.GetBucketAclInput) (*s3.GetBucketAclOutput, error) {
	fake.getBucketAclMutex.Lock()
	ret, specificReturn := fake.getBucketAclReturnsOnCall[len(fake.getBucketAclArgsForCall)]
	fake.getBucketAclArgsForCall = append(fake.getBucketAclArgsForCall, struct {
		arg1 *s3.GetBucketAclInput
	}{arg1})
	fake.recordInvocation("GetBucketAcl", []interface{}{arg1})
	fake.getBucketAclMutex.Unlock()
	if fake.GetBucketAclStub != nil {
		return fake.GetBucketAclStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketAclReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketAclCallCount() int {
	fake.getBucketAclMutex.RLock()
	defer fake.getBucketAclMutex.RUnlock()
	return len(fake.getBucketAclArgsForCall)
}

func (fake *FakeS3API) GetBucketAclCalls(stub func(*s3.GetBucketAclInput) (*s3.GetBucketAclOutput, error)) {
	fake.getBucketAclMutex.Lock()
	defer fake.getBucketAclMutex.Unlock()
	fake.GetBucketAclStub = stub
}

func (fake *FakeS3API) GetBucketAclArgsForCall(i int) *s3.GetBucketAclInput {
	fake.getBucketAclMutex.RLock()
	defer fake.getBucketAclMutex.RUnlock()
	argsForCall := fake.getBucketAclArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketAclReturns(result1 *s3.GetBucketAclOutput, result2 error) {
	fake.getBucketAclMutex.Lock()
	defer fake.getBucketAclMutex.Unlock()
	fake.GetBucketAclStub = nil
	fake.getBucketAclReturns = struct {
		result1 *s3.GetBucketAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAclReturnsOnCall(i int, result1 *s3.GetBucketAclOutput, result2 error) {
	fake.getBucketAclMutex.Lock()
	defer fake.getBucketAclMutex.Unlock()
	fake.GetBucketAclStub = nil
	if fake.getBucketAclReturnsOnCall == nil {
		fake.getBucketAclReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketAclOutput
			result2 error
		})
	}
	fake.getBucketAclReturnsOnCall[i] = struct {
		result1 *s3.GetBucketAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAclRequest(arg1 *s3.GetBucketAclInput) (*request.Request, *s3.GetBucketAclOutput) {
	fake.getBucketAclRequestMutex.Lock()
	ret, specificReturn := fake.getBucketAclRequestReturnsOnCall[len(fake.getBucketAclRequestArgsForCall)]
	fake.getBucketAclRequestArgsForCall = append(fake.getBucketAclRequestArgsForCall, struct {
		arg1 *s3.GetBucketAclInput
	}{arg1})
	fake.recordInvocation("GetBucketAclRequest", []interface{}{arg1})
	fake.getBucketAclRequestMutex.Unlock()
	if fake.GetBucketAclRequestStub != nil {
		return fake.GetBucketAclRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketAclRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketAclRequestCallCount() int {
	fake.getBucketAclRequestMutex.RLock()
	defer fake.getBucketAclRequestMutex.RUnlock()
	return len(fake.getBucketAclRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketAclRequestCalls(stub func(*s3.GetBucketAclInput) (*request.Request, *s3.GetBucketAclOutput)) {
	fake.getBucketAclRequestMutex.Lock()
	defer fake.getBucketAclRequestMutex.Unlock()
	fake.GetBucketAclRequestStub = stub
}

func (fake *FakeS3API) GetBucketAclRequestArgsForCall(i int) *s3.GetBucketAclInput {
	fake.getBucketAclRequestMutex.RLock()
	defer fake.getBucketAclRequestMutex.RUnlock()
	argsForCall := fake.getBucketAclRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketAclRequestReturns(result1 *request.Request, result2 *s3.GetBucketAclOutput) {
	fake.getBucketAclRequestMutex.Lock()
	defer fake.getBucketAclRequestMutex.Unlock()
	fake.GetBucketAclRequestStub = nil
	fake.getBucketAclRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketAclOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAclRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketAclOutput) {
	fake.getBucketAclRequestMutex.Lock()
	defer fake.getBucketAclRequestMutex.Unlock()
	fake.GetBucketAclRequestStub = nil
	if fake.getBucketAclRequestReturnsOnCall == nil {
		fake.getBucketAclRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketAclOutput
		})
	}
	fake.getBucketAclRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketAclOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAclWithContext(arg1 context.Context, arg2 *s3.GetBucketAclInput, arg3 ...request.Option) (*s3.GetBucketAclOutput, error) {
	fake.getBucketAclWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketAclWithContextReturnsOnCall[len(fake.getBucketAclWithContextArgsForCall)]
	fake.getBucketAclWithContextArgsForCall = append(fake.getBucketAclWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketAclInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketAclWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketAclWithContextMutex.Unlock()
	if fake.GetBucketAclWithContextStub != nil {
		return fake.GetBucketAclWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketAclWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketAclWithContextCallCount() int {
	fake.getBucketAclWithContextMutex.RLock()
	defer fake.getBucketAclWithContextMutex.RUnlock()
	return len(fake.getBucketAclWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketAclWithContextCalls(stub func(context.Context, *s3.GetBucketAclInput, ...request.Option) (*s3.GetBucketAclOutput, error)) {
	fake.getBucketAclWithContextMutex.Lock()
	defer fake.getBucketAclWithContextMutex.Unlock()
	fake.GetBucketAclWithContextStub = stub
}

func (fake *FakeS3API) GetBucketAclWithContextArgsForCall(i int) (context.Context, *s3.GetBucketAclInput, []request.Option) {
	fake.getBucketAclWithContextMutex.RLock()
	defer fake.getBucketAclWithContextMutex.RUnlock()
	argsForCall := fake.getBucketAclWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketAclWithContextReturns(result1 *s3.GetBucketAclOutput, result2 error) {
	fake.getBucketAclWithContextMutex.Lock()
	defer fake.getBucketAclWithContextMutex.Unlock()
	fake.GetBucketAclWithContextStub = nil
	fake.getBucketAclWithContextReturns = struct {
		result1 *s3.GetBucketAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAclWithContextReturnsOnCall(i int, result1 *s3.GetBucketAclOutput, result2 error) {
	fake.getBucketAclWithContextMutex.Lock()
	defer fake.getBucketAclWithContextMutex.Unlock()
	fake.GetBucketAclWithContextStub = nil
	if fake.getBucketAclWithContextReturnsOnCall == nil {
		fake.getBucketAclWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketAclOutput
			result2 error
		})
	}
	fake.getBucketAclWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAnalyticsConfiguration(arg1 *s3.GetBucketAnalyticsConfigurationInput) (*s3.GetBucketAnalyticsConfigurationOutput, error) {
	fake.getBucketAnalyticsConfigurationMutex.Lock()
	ret, specificReturn := fake.getBucketAnalyticsConfigurationReturnsOnCall[len(fake.getBucketAnalyticsConfigurationArgsForCall)]
	fake.getBucketAnalyticsConfigurationArgsForCall = append(fake.getBucketAnalyticsConfigurationArgsForCall, struct {
		arg1 *s3.GetBucketAnalyticsConfigurationInput
	}{arg1})
	fake.recordInvocation("GetBucketAnalyticsConfiguration", []interface{}{arg1})
	fake.getBucketAnalyticsConfigurationMutex.Unlock()
	if fake.GetBucketAnalyticsConfigurationStub != nil {
		return fake.GetBucketAnalyticsConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketAnalyticsConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketAnalyticsConfigurationCallCount() int {
	fake.getBucketAnalyticsConfigurationMutex.RLock()
	defer fake.getBucketAnalyticsConfigurationMutex.RUnlock()
	return len(fake.getBucketAnalyticsConfigurationArgsForCall)
}

func (fake *FakeS3API) GetBucketAnalyticsConfigurationCalls(stub func(*s3.GetBucketAnalyticsConfigurationInput) (*s3.GetBucketAnalyticsConfigurationOutput, error)) {
	fake.getBucketAnalyticsConfigurationMutex.Lock()
	defer fake.getBucketAnalyticsConfigurationMutex.Unlock()
	fake.GetBucketAnalyticsConfigurationStub = stub
}

func (fake *FakeS3API) GetBucketAnalyticsConfigurationArgsForCall(i int) *s3.GetBucketAnalyticsConfigurationInput {
	fake.getBucketAnalyticsConfigurationMutex.RLock()
	defer fake.getBucketAnalyticsConfigurationMutex.RUnlock()
	argsForCall := fake.getBucketAnalyticsConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketAnalyticsConfigurationReturns(result1 *s3.GetBucketAnalyticsConfigurationOutput, result2 error) {
	fake.getBucketAnalyticsConfigurationMutex.Lock()
	defer fake.getBucketAnalyticsConfigurationMutex.Unlock()
	fake.GetBucketAnalyticsConfigurationStub = nil
	fake.getBucketAnalyticsConfigurationReturns = struct {
		result1 *s3.GetBucketAnalyticsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAnalyticsConfigurationReturnsOnCall(i int, result1 *s3.GetBucketAnalyticsConfigurationOutput, result2 error) {
	fake.getBucketAnalyticsConfigurationMutex.Lock()
	defer fake.getBucketAnalyticsConfigurationMutex.Unlock()
	fake.GetBucketAnalyticsConfigurationStub = nil
	if fake.getBucketAnalyticsConfigurationReturnsOnCall == nil {
		fake.getBucketAnalyticsConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketAnalyticsConfigurationOutput
			result2 error
		})
	}
	fake.getBucketAnalyticsConfigurationReturnsOnCall[i] = struct {
		result1 *s3.GetBucketAnalyticsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAnalyticsConfigurationRequest(arg1 *s3.GetBucketAnalyticsConfigurationInput) (*request.Request, *s3.GetBucketAnalyticsConfigurationOutput) {
	fake.getBucketAnalyticsConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.getBucketAnalyticsConfigurationRequestReturnsOnCall[len(fake.getBucketAnalyticsConfigurationRequestArgsForCall)]
	fake.getBucketAnalyticsConfigurationRequestArgsForCall = append(fake.getBucketAnalyticsConfigurationRequestArgsForCall, struct {
		arg1 *s3.GetBucketAnalyticsConfigurationInput
	}{arg1})
	fake.recordInvocation("GetBucketAnalyticsConfigurationRequest", []interface{}{arg1})
	fake.getBucketAnalyticsConfigurationRequestMutex.Unlock()
	if fake.GetBucketAnalyticsConfigurationRequestStub != nil {
		return fake.GetBucketAnalyticsConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketAnalyticsConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketAnalyticsConfigurationRequestCallCount() int {
	fake.getBucketAnalyticsConfigurationRequestMutex.RLock()
	defer fake.getBucketAnalyticsConfigurationRequestMutex.RUnlock()
	return len(fake.getBucketAnalyticsConfigurationRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketAnalyticsConfigurationRequestCalls(stub func(*s3.GetBucketAnalyticsConfigurationInput) (*request.Request, *s3.GetBucketAnalyticsConfigurationOutput)) {
	fake.getBucketAnalyticsConfigurationRequestMutex.Lock()
	defer fake.getBucketAnalyticsConfigurationRequestMutex.Unlock()
	fake.GetBucketAnalyticsConfigurationRequestStub = stub
}

func (fake *FakeS3API) GetBucketAnalyticsConfigurationRequestArgsForCall(i int) *s3.GetBucketAnalyticsConfigurationInput {
	fake.getBucketAnalyticsConfigurationRequestMutex.RLock()
	defer fake.getBucketAnalyticsConfigurationRequestMutex.RUnlock()
	argsForCall := fake.getBucketAnalyticsConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketAnalyticsConfigurationRequestReturns(result1 *request.Request, result2 *s3.GetBucketAnalyticsConfigurationOutput) {
	fake.getBucketAnalyticsConfigurationRequestMutex.Lock()
	defer fake.getBucketAnalyticsConfigurationRequestMutex.Unlock()
	fake.GetBucketAnalyticsConfigurationRequestStub = nil
	fake.getBucketAnalyticsConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketAnalyticsConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAnalyticsConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketAnalyticsConfigurationOutput) {
	fake.getBucketAnalyticsConfigurationRequestMutex.Lock()
	defer fake.getBucketAnalyticsConfigurationRequestMutex.Unlock()
	fake.GetBucketAnalyticsConfigurationRequestStub = nil
	if fake.getBucketAnalyticsConfigurationRequestReturnsOnCall == nil {
		fake.getBucketAnalyticsConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketAnalyticsConfigurationOutput
		})
	}
	fake.getBucketAnalyticsConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketAnalyticsConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAnalyticsConfigurationWithContext(arg1 context.Context, arg2 *s3.GetBucketAnalyticsConfigurationInput, arg3 ...request.Option) (*s3.GetBucketAnalyticsConfigurationOutput, error) {
	fake.getBucketAnalyticsConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketAnalyticsConfigurationWithContextReturnsOnCall[len(fake.getBucketAnalyticsConfigurationWithContextArgsForCall)]
	fake.getBucketAnalyticsConfigurationWithContextArgsForCall = append(fake.getBucketAnalyticsConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketAnalyticsConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketAnalyticsConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketAnalyticsConfigurationWithContextMutex.Unlock()
	if fake.GetBucketAnalyticsConfigurationWithContextStub != nil {
		return fake.GetBucketAnalyticsConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketAnalyticsConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketAnalyticsConfigurationWithContextCallCount() int {
	fake.getBucketAnalyticsConfigurationWithContextMutex.RLock()
	defer fake.getBucketAnalyticsConfigurationWithContextMutex.RUnlock()
	return len(fake.getBucketAnalyticsConfigurationWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketAnalyticsConfigurationWithContextCalls(stub func(context.Context, *s3.GetBucketAnalyticsConfigurationInput, ...request.Option) (*s3.GetBucketAnalyticsConfigurationOutput, error)) {
	fake.getBucketAnalyticsConfigurationWithContextMutex.Lock()
	defer fake.getBucketAnalyticsConfigurationWithContextMutex.Unlock()
	fake.GetBucketAnalyticsConfigurationWithContextStub = stub
}

func (fake *FakeS3API) GetBucketAnalyticsConfigurationWithContextArgsForCall(i int) (context.Context, *s3.GetBucketAnalyticsConfigurationInput, []request.Option) {
	fake.getBucketAnalyticsConfigurationWithContextMutex.RLock()
	defer fake.getBucketAnalyticsConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.getBucketAnalyticsConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketAnalyticsConfigurationWithContextReturns(result1 *s3.GetBucketAnalyticsConfigurationOutput, result2 error) {
	fake.getBucketAnalyticsConfigurationWithContextMutex.Lock()
	defer fake.getBucketAnalyticsConfigurationWithContextMutex.Unlock()
	fake.GetBucketAnalyticsConfigurationWithContextStub = nil
	fake.getBucketAnalyticsConfigurationWithContextReturns = struct {
		result1 *s3.GetBucketAnalyticsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketAnalyticsConfigurationWithContextReturnsOnCall(i int, result1 *s3.GetBucketAnalyticsConfigurationOutput, result2 error) {
	fake.getBucketAnalyticsConfigurationWithContextMutex.Lock()
	defer fake.getBucketAnalyticsConfigurationWithContextMutex.Unlock()
	fake.GetBucketAnalyticsConfigurationWithContextStub = nil
	if fake.getBucketAnalyticsConfigurationWithContextReturnsOnCall == nil {
		fake.getBucketAnalyticsConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketAnalyticsConfigurationOutput
			result2 error
		})
	}
	fake.getBucketAnalyticsConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketAnalyticsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketCors(arg1 *s3.GetBucketCorsInput) (*s3.GetBucketCorsOutput, error) {
	fake.getBucketCorsMutex.Lock()
	ret, specificReturn := fake.getBucketCorsReturnsOnCall[len(fake.getBucketCorsArgsForCall)]
	fake.getBucketCorsArgsForCall = append(fake.getBucketCorsArgsForCall, struct {
		arg1 *s3.GetBucketCorsInput
	}{arg1})
	fake.recordInvocation("GetBucketCors", []interface{}{arg1})
	fake.getBucketCorsMutex.Unlock()
	if fake.GetBucketCorsStub != nil {
		return fake.GetBucketCorsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketCorsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketCorsCallCount() int {
	fake.getBucketCorsMutex.RLock()
	defer fake.getBucketCorsMutex.RUnlock()
	return len(fake.getBucketCorsArgsForCall)
}

func (fake *FakeS3API) GetBucketCorsCalls(stub func(*s3.GetBucketCorsInput) (*s3.GetBucketCorsOutput, error)) {
	fake.getBucketCorsMutex.Lock()
	defer fake.getBucketCorsMutex.Unlock()
	fake.GetBucketCorsStub = stub
}

func (fake *FakeS3API) GetBucketCorsArgsForCall(i int) *s3.GetBucketCorsInput {
	fake.getBucketCorsMutex.RLock()
	defer fake.getBucketCorsMutex.RUnlock()
	argsForCall := fake.getBucketCorsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketCorsReturns(result1 *s3.GetBucketCorsOutput, result2 error) {
	fake.getBucketCorsMutex.Lock()
	defer fake.getBucketCorsMutex.Unlock()
	fake.GetBucketCorsStub = nil
	fake.getBucketCorsReturns = struct {
		result1 *s3.GetBucketCorsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketCorsReturnsOnCall(i int, result1 *s3.GetBucketCorsOutput, result2 error) {
	fake.getBucketCorsMutex.Lock()
	defer fake.getBucketCorsMutex.Unlock()
	fake.GetBucketCorsStub = nil
	if fake.getBucketCorsReturnsOnCall == nil {
		fake.getBucketCorsReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketCorsOutput
			result2 error
		})
	}
	fake.getBucketCorsReturnsOnCall[i] = struct {
		result1 *s3.GetBucketCorsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketCorsRequest(arg1 *s3.GetBucketCorsInput) (*request.Request, *s3.GetBucketCorsOutput) {
	fake.getBucketCorsRequestMutex.Lock()
	ret, specificReturn := fake.getBucketCorsRequestReturnsOnCall[len(fake.getBucketCorsRequestArgsForCall)]
	fake.getBucketCorsRequestArgsForCall = append(fake.getBucketCorsRequestArgsForCall, struct {
		arg1 *s3.GetBucketCorsInput
	}{arg1})
	fake.recordInvocation("GetBucketCorsRequest", []interface{}{arg1})
	fake.getBucketCorsRequestMutex.Unlock()
	if fake.GetBucketCorsRequestStub != nil {
		return fake.GetBucketCorsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketCorsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketCorsRequestCallCount() int {
	fake.getBucketCorsRequestMutex.RLock()
	defer fake.getBucketCorsRequestMutex.RUnlock()
	return len(fake.getBucketCorsRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketCorsRequestCalls(stub func(*s3.GetBucketCorsInput) (*request.Request, *s3.GetBucketCorsOutput)) {
	fake.getBucketCorsRequestMutex.Lock()
	defer fake.getBucketCorsRequestMutex.Unlock()
	fake.GetBucketCorsRequestStub = stub
}

func (fake *FakeS3API) GetBucketCorsRequestArgsForCall(i int) *s3.GetBucketCorsInput {
	fake.getBucketCorsRequestMutex.RLock()
	defer fake.getBucketCorsRequestMutex.RUnlock()
	argsForCall := fake.getBucketCorsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketCorsRequestReturns(result1 *request.Request, result2 *s3.GetBucketCorsOutput) {
	fake.getBucketCorsRequestMutex.Lock()
	defer fake.getBucketCorsRequestMutex.Unlock()
	fake.GetBucketCorsRequestStub = nil
	fake.getBucketCorsRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketCorsOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketCorsRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketCorsOutput) {
	fake.getBucketCorsRequestMutex.Lock()
	defer fake.getBucketCorsRequestMutex.Unlock()
	fake.GetBucketCorsRequestStub = nil
	if fake.getBucketCorsRequestReturnsOnCall == nil {
		fake.getBucketCorsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketCorsOutput
		})
	}
	fake.getBucketCorsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketCorsOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketCorsWithContext(arg1 context.Context, arg2 *s3.GetBucketCorsInput, arg3 ...request.Option) (*s3.GetBucketCorsOutput, error) {
	fake.getBucketCorsWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketCorsWithContextReturnsOnCall[len(fake.getBucketCorsWithContextArgsForCall)]
	fake.getBucketCorsWithContextArgsForCall = append(fake.getBucketCorsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketCorsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketCorsWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketCorsWithContextMutex.Unlock()
	if fake.GetBucketCorsWithContextStub != nil {
		return fake.GetBucketCorsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketCorsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketCorsWithContextCallCount() int {
	fake.getBucketCorsWithContextMutex.RLock()
	defer fake.getBucketCorsWithContextMutex.RUnlock()
	return len(fake.getBucketCorsWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketCorsWithContextCalls(stub func(context.Context, *s3.GetBucketCorsInput, ...request.Option) (*s3.GetBucketCorsOutput, error)) {
	fake.getBucketCorsWithContextMutex.Lock()
	defer fake.getBucketCorsWithContextMutex.Unlock()
	fake.GetBucketCorsWithContextStub = stub
}

func (fake *FakeS3API) GetBucketCorsWithContextArgsForCall(i int) (context.Context, *s3.GetBucketCorsInput, []request.Option) {
	fake.getBucketCorsWithContextMutex.RLock()
	defer fake.getBucketCorsWithContextMutex.RUnlock()
	argsForCall := fake.getBucketCorsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketCorsWithContextReturns(result1 *s3.GetBucketCorsOutput, result2 error) {
	fake.getBucketCorsWithContextMutex.Lock()
	defer fake.getBucketCorsWithContextMutex.Unlock()
	fake.GetBucketCorsWithContextStub = nil
	fake.getBucketCorsWithContextReturns = struct {
		result1 *s3.GetBucketCorsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketCorsWithContextReturnsOnCall(i int, result1 *s3.GetBucketCorsOutput, result2 error) {
	fake.getBucketCorsWithContextMutex.Lock()
	defer fake.getBucketCorsWithContextMutex.Unlock()
	fake.GetBucketCorsWithContextStub = nil
	if fake.getBucketCorsWithContextReturnsOnCall == nil {
		fake.getBucketCorsWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketCorsOutput
			result2 error
		})
	}
	fake.getBucketCorsWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketCorsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketEncryption(arg1 *s3.GetBucketEncryptionInput) (*s3.GetBucketEncryptionOutput, error) {
	fake.getBucketEncryptionMutex.Lock()
	ret, specificReturn := fake.getBucketEncryptionReturnsOnCall[len(fake.getBucketEncryptionArgsForCall)]
	fake.getBucketEncryptionArgsForCall = append(fake.getBucketEncryptionArgsForCall, struct {
		arg1 *s3.GetBucketEncryptionInput
	}{arg1})
	fake.recordInvocation("GetBucketEncryption", []interface{}{arg1})
	fake.getBucketEncryptionMutex.Unlock()
	if fake.GetBucketEncryptionStub != nil {
		return fake.GetBucketEncryptionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketEncryptionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketEncryptionCallCount() int {
	fake.getBucketEncryptionMutex.RLock()
	defer fake.getBucketEncryptionMutex.RUnlock()
	return len(fake.getBucketEncryptionArgsForCall)
}

func (fake *FakeS3API) GetBucketEncryptionCalls(stub func(*s3.GetBucketEncryptionInput) (*s3.GetBucketEncryptionOutput, error)) {
	fake.getBucketEncryptionMutex.Lock()
	defer fake.getBucketEncryptionMutex.Unlock()
	fake.GetBucketEncryptionStub = stub
}

func (fake *FakeS3API) GetBucketEncryptionArgsForCall(i int) *s3.GetBucketEncryptionInput {
	fake.getBucketEncryptionMutex.RLock()
	defer fake.getBucketEncryptionMutex.RUnlock()
	argsForCall := fake.getBucketEncryptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketEncryptionReturns(result1 *s3.GetBucketEncryptionOutput, result2 error) {
	fake.getBucketEncryptionMutex.Lock()
	defer fake.getBucketEncryptionMutex.Unlock()
	fake.GetBucketEncryptionStub = nil
	fake.getBucketEncryptionReturns = struct {
		result1 *s3.GetBucketEncryptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketEncryptionReturnsOnCall(i int, result1 *s3.GetBucketEncryptionOutput, result2 error) {
	fake.getBucketEncryptionMutex.Lock()
	defer fake.getBucketEncryptionMutex.Unlock()
	fake.GetBucketEncryptionStub = nil
	if fake.getBucketEncryptionReturnsOnCall == nil {
		fake.getBucketEncryptionReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketEncryptionOutput
			result2 error
		})
	}
	fake.getBucketEncryptionReturnsOnCall[i] = struct {
		result1 *s3.GetBucketEncryptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketEncryptionRequest(arg1 *s3.GetBucketEncryptionInput) (*request.Request, *s3.GetBucketEncryptionOutput) {
	fake.getBucketEncryptionRequestMutex.Lock()
	ret, specificReturn := fake.getBucketEncryptionRequestReturnsOnCall[len(fake.getBucketEncryptionRequestArgsForCall)]
	fake.getBucketEncryptionRequestArgsForCall = append(fake.getBucketEncryptionRequestArgsForCall, struct {
		arg1 *s3.GetBucketEncryptionInput
	}{arg1})
	fake.recordInvocation("GetBucketEncryptionRequest", []interface{}{arg1})
	fake.getBucketEncryptionRequestMutex.Unlock()
	if fake.GetBucketEncryptionRequestStub != nil {
		return fake.GetBucketEncryptionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketEncryptionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketEncryptionRequestCallCount() int {
	fake.getBucketEncryptionRequestMutex.RLock()
	defer fake.getBucketEncryptionRequestMutex.RUnlock()
	return len(fake.getBucketEncryptionRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketEncryptionRequestCalls(stub func(*s3.GetBucketEncryptionInput) (*request.Request, *s3.GetBucketEncryptionOutput)) {
	fake.getBucketEncryptionRequestMutex.Lock()
	defer fake.getBucketEncryptionRequestMutex.Unlock()
	fake.GetBucketEncryptionRequestStub = stub
}

func (fake *FakeS3API) GetBucketEncryptionRequestArgsForCall(i int) *s3.GetBucketEncryptionInput {
	fake.getBucketEncryptionRequestMutex.RLock()
	defer fake.getBucketEncryptionRequestMutex.RUnlock()
	argsForCall := fake.getBucketEncryptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketEncryptionRequestReturns(result1 *request.Request, result2 *s3.GetBucketEncryptionOutput) {
	fake.getBucketEncryptionRequestMutex.Lock()
	defer fake.getBucketEncryptionRequestMutex.Unlock()
	fake.GetBucketEncryptionRequestStub = nil
	fake.getBucketEncryptionRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketEncryptionOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketEncryptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketEncryptionOutput) {
	fake.getBucketEncryptionRequestMutex.Lock()
	defer fake.getBucketEncryptionRequestMutex.Unlock()
	fake.GetBucketEncryptionRequestStub = nil
	if fake.getBucketEncryptionRequestReturnsOnCall == nil {
		fake.getBucketEncryptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketEncryptionOutput
		})
	}
	fake.getBucketEncryptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketEncryptionOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketEncryptionWithContext(arg1 context.Context, arg2 *s3.GetBucketEncryptionInput, arg3 ...request.Option) (*s3.GetBucketEncryptionOutput, error) {
	fake.getBucketEncryptionWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketEncryptionWithContextReturnsOnCall[len(fake.getBucketEncryptionWithContextArgsForCall)]
	fake.getBucketEncryptionWithContextArgsForCall = append(fake.getBucketEncryptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketEncryptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketEncryptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketEncryptionWithContextMutex.Unlock()
	if fake.GetBucketEncryptionWithContextStub != nil {
		return fake.GetBucketEncryptionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketEncryptionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketEncryptionWithContextCallCount() int {
	fake.getBucketEncryptionWithContextMutex.RLock()
	defer fake.getBucketEncryptionWithContextMutex.RUnlock()
	return len(fake.getBucketEncryptionWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketEncryptionWithContextCalls(stub func(context.Context, *s3.GetBucketEncryptionInput, ...request.Option) (*s3.GetBucketEncryptionOutput, error)) {
	fake.getBucketEncryptionWithContextMutex.Lock()
	defer fake.getBucketEncryptionWithContextMutex.Unlock()
	fake.GetBucketEncryptionWithContextStub = stub
}

func (fake *FakeS3API) GetBucketEncryptionWithContextArgsForCall(i int) (context.Context, *s3.GetBucketEncryptionInput, []request.Option) {
	fake.getBucketEncryptionWithContextMutex.RLock()
	defer fake.getBucketEncryptionWithContextMutex.RUnlock()
	argsForCall := fake.getBucketEncryptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketEncryptionWithContextReturns(result1 *s3.GetBucketEncryptionOutput, result2 error) {
	fake.getBucketEncryptionWithContextMutex.Lock()
	defer fake.getBucketEncryptionWithContextMutex.Unlock()
	fake.GetBucketEncryptionWithContextStub = nil
	fake.getBucketEncryptionWithContextReturns = struct {
		result1 *s3.GetBucketEncryptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketEncryptionWithContextReturnsOnCall(i int, result1 *s3.GetBucketEncryptionOutput, result2 error) {
	fake.getBucketEncryptionWithContextMutex.Lock()
	defer fake.getBucketEncryptionWithContextMutex.Unlock()
	fake.GetBucketEncryptionWithContextStub = nil
	if fake.getBucketEncryptionWithContextReturnsOnCall == nil {
		fake.getBucketEncryptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketEncryptionOutput
			result2 error
		})
	}
	fake.getBucketEncryptionWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketEncryptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketInventoryConfiguration(arg1 *s3.GetBucketInventoryConfigurationInput) (*s3.GetBucketInventoryConfigurationOutput, error) {
	fake.getBucketInventoryConfigurationMutex.Lock()
	ret, specificReturn := fake.getBucketInventoryConfigurationReturnsOnCall[len(fake.getBucketInventoryConfigurationArgsForCall)]
	fake.getBucketInventoryConfigurationArgsForCall = append(fake.getBucketInventoryConfigurationArgsForCall, struct {
		arg1 *s3.GetBucketInventoryConfigurationInput
	}{arg1})
	fake.recordInvocation("GetBucketInventoryConfiguration", []interface{}{arg1})
	fake.getBucketInventoryConfigurationMutex.Unlock()
	if fake.GetBucketInventoryConfigurationStub != nil {
		return fake.GetBucketInventoryConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketInventoryConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketInventoryConfigurationCallCount() int {
	fake.getBucketInventoryConfigurationMutex.RLock()
	defer fake.getBucketInventoryConfigurationMutex.RUnlock()
	return len(fake.getBucketInventoryConfigurationArgsForCall)
}

func (fake *FakeS3API) GetBucketInventoryConfigurationCalls(stub func(*s3.GetBucketInventoryConfigurationInput) (*s3.GetBucketInventoryConfigurationOutput, error)) {
	fake.getBucketInventoryConfigurationMutex.Lock()
	defer fake.getBucketInventoryConfigurationMutex.Unlock()
	fake.GetBucketInventoryConfigurationStub = stub
}

func (fake *FakeS3API) GetBucketInventoryConfigurationArgsForCall(i int) *s3.GetBucketInventoryConfigurationInput {
	fake.getBucketInventoryConfigurationMutex.RLock()
	defer fake.getBucketInventoryConfigurationMutex.RUnlock()
	argsForCall := fake.getBucketInventoryConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketInventoryConfigurationReturns(result1 *s3.GetBucketInventoryConfigurationOutput, result2 error) {
	fake.getBucketInventoryConfigurationMutex.Lock()
	defer fake.getBucketInventoryConfigurationMutex.Unlock()
	fake.GetBucketInventoryConfigurationStub = nil
	fake.getBucketInventoryConfigurationReturns = struct {
		result1 *s3.GetBucketInventoryConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketInventoryConfigurationReturnsOnCall(i int, result1 *s3.GetBucketInventoryConfigurationOutput, result2 error) {
	fake.getBucketInventoryConfigurationMutex.Lock()
	defer fake.getBucketInventoryConfigurationMutex.Unlock()
	fake.GetBucketInventoryConfigurationStub = nil
	if fake.getBucketInventoryConfigurationReturnsOnCall == nil {
		fake.getBucketInventoryConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketInventoryConfigurationOutput
			result2 error
		})
	}
	fake.getBucketInventoryConfigurationReturnsOnCall[i] = struct {
		result1 *s3.GetBucketInventoryConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketInventoryConfigurationRequest(arg1 *s3.GetBucketInventoryConfigurationInput) (*request.Request, *s3.GetBucketInventoryConfigurationOutput) {
	fake.getBucketInventoryConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.getBucketInventoryConfigurationRequestReturnsOnCall[len(fake.getBucketInventoryConfigurationRequestArgsForCall)]
	fake.getBucketInventoryConfigurationRequestArgsForCall = append(fake.getBucketInventoryConfigurationRequestArgsForCall, struct {
		arg1 *s3.GetBucketInventoryConfigurationInput
	}{arg1})
	fake.recordInvocation("GetBucketInventoryConfigurationRequest", []interface{}{arg1})
	fake.getBucketInventoryConfigurationRequestMutex.Unlock()
	if fake.GetBucketInventoryConfigurationRequestStub != nil {
		return fake.GetBucketInventoryConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketInventoryConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketInventoryConfigurationRequestCallCount() int {
	fake.getBucketInventoryConfigurationRequestMutex.RLock()
	defer fake.getBucketInventoryConfigurationRequestMutex.RUnlock()
	return len(fake.getBucketInventoryConfigurationRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketInventoryConfigurationRequestCalls(stub func(*s3.GetBucketInventoryConfigurationInput) (*request.Request, *s3.GetBucketInventoryConfigurationOutput)) {
	fake.getBucketInventoryConfigurationRequestMutex.Lock()
	defer fake.getBucketInventoryConfigurationRequestMutex.Unlock()
	fake.GetBucketInventoryConfigurationRequestStub = stub
}

func (fake *FakeS3API) GetBucketInventoryConfigurationRequestArgsForCall(i int) *s3.GetBucketInventoryConfigurationInput {
	fake.getBucketInventoryConfigurationRequestMutex.RLock()
	defer fake.getBucketInventoryConfigurationRequestMutex.RUnlock()
	argsForCall := fake.getBucketInventoryConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketInventoryConfigurationRequestReturns(result1 *request.Request, result2 *s3.GetBucketInventoryConfigurationOutput) {
	fake.getBucketInventoryConfigurationRequestMutex.Lock()
	defer fake.getBucketInventoryConfigurationRequestMutex.Unlock()
	fake.GetBucketInventoryConfigurationRequestStub = nil
	fake.getBucketInventoryConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketInventoryConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketInventoryConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketInventoryConfigurationOutput) {
	fake.getBucketInventoryConfigurationRequestMutex.Lock()
	defer fake.getBucketInventoryConfigurationRequestMutex.Unlock()
	fake.GetBucketInventoryConfigurationRequestStub = nil
	if fake.getBucketInventoryConfigurationRequestReturnsOnCall == nil {
		fake.getBucketInventoryConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketInventoryConfigurationOutput
		})
	}
	fake.getBucketInventoryConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketInventoryConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketInventoryConfigurationWithContext(arg1 context.Context, arg2 *s3.GetBucketInventoryConfigurationInput, arg3 ...request.Option) (*s3.GetBucketInventoryConfigurationOutput, error) {
	fake.getBucketInventoryConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketInventoryConfigurationWithContextReturnsOnCall[len(fake.getBucketInventoryConfigurationWithContextArgsForCall)]
	fake.getBucketInventoryConfigurationWithContextArgsForCall = append(fake.getBucketInventoryConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketInventoryConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketInventoryConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketInventoryConfigurationWithContextMutex.Unlock()
	if fake.GetBucketInventoryConfigurationWithContextStub != nil {
		return fake.GetBucketInventoryConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketInventoryConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketInventoryConfigurationWithContextCallCount() int {
	fake.getBucketInventoryConfigurationWithContextMutex.RLock()
	defer fake.getBucketInventoryConfigurationWithContextMutex.RUnlock()
	return len(fake.getBucketInventoryConfigurationWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketInventoryConfigurationWithContextCalls(stub func(context.Context, *s3.GetBucketInventoryConfigurationInput, ...request.Option) (*s3.GetBucketInventoryConfigurationOutput, error)) {
	fake.getBucketInventoryConfigurationWithContextMutex.Lock()
	defer fake.getBucketInventoryConfigurationWithContextMutex.Unlock()
	fake.GetBucketInventoryConfigurationWithContextStub = stub
}

func (fake *FakeS3API) GetBucketInventoryConfigurationWithContextArgsForCall(i int) (context.Context, *s3.GetBucketInventoryConfigurationInput, []request.Option) {
	fake.getBucketInventoryConfigurationWithContextMutex.RLock()
	defer fake.getBucketInventoryConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.getBucketInventoryConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketInventoryConfigurationWithContextReturns(result1 *s3.GetBucketInventoryConfigurationOutput, result2 error) {
	fake.getBucketInventoryConfigurationWithContextMutex.Lock()
	defer fake.getBucketInventoryConfigurationWithContextMutex.Unlock()
	fake.GetBucketInventoryConfigurationWithContextStub = nil
	fake.getBucketInventoryConfigurationWithContextReturns = struct {
		result1 *s3.GetBucketInventoryConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketInventoryConfigurationWithContextReturnsOnCall(i int, result1 *s3.GetBucketInventoryConfigurationOutput, result2 error) {
	fake.getBucketInventoryConfigurationWithContextMutex.Lock()
	defer fake.getBucketInventoryConfigurationWithContextMutex.Unlock()
	fake.GetBucketInventoryConfigurationWithContextStub = nil
	if fake.getBucketInventoryConfigurationWithContextReturnsOnCall == nil {
		fake.getBucketInventoryConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketInventoryConfigurationOutput
			result2 error
		})
	}
	fake.getBucketInventoryConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketInventoryConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLifecycle(arg1 *s3.GetBucketLifecycleInput) (*s3.GetBucketLifecycleOutput, error) {
	fake.getBucketLifecycleMutex.Lock()
	ret, specificReturn := fake.getBucketLifecycleReturnsOnCall[len(fake.getBucketLifecycleArgsForCall)]
	fake.getBucketLifecycleArgsForCall = append(fake.getBucketLifecycleArgsForCall, struct {
		arg1 *s3.GetBucketLifecycleInput
	}{arg1})
	fake.recordInvocation("GetBucketLifecycle", []interface{}{arg1})
	fake.getBucketLifecycleMutex.Unlock()
	if fake.GetBucketLifecycleStub != nil {
		return fake.GetBucketLifecycleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketLifecycleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketLifecycleCallCount() int {
	fake.getBucketLifecycleMutex.RLock()
	defer fake.getBucketLifecycleMutex.RUnlock()
	return len(fake.getBucketLifecycleArgsForCall)
}

func (fake *FakeS3API) GetBucketLifecycleCalls(stub func(*s3.GetBucketLifecycleInput) (*s3.GetBucketLifecycleOutput, error)) {
	fake.getBucketLifecycleMutex.Lock()
	defer fake.getBucketLifecycleMutex.Unlock()
	fake.GetBucketLifecycleStub = stub
}

func (fake *FakeS3API) GetBucketLifecycleArgsForCall(i int) *s3.GetBucketLifecycleInput {
	fake.getBucketLifecycleMutex.RLock()
	defer fake.getBucketLifecycleMutex.RUnlock()
	argsForCall := fake.getBucketLifecycleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketLifecycleReturns(result1 *s3.GetBucketLifecycleOutput, result2 error) {
	fake.getBucketLifecycleMutex.Lock()
	defer fake.getBucketLifecycleMutex.Unlock()
	fake.GetBucketLifecycleStub = nil
	fake.getBucketLifecycleReturns = struct {
		result1 *s3.GetBucketLifecycleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLifecycleReturnsOnCall(i int, result1 *s3.GetBucketLifecycleOutput, result2 error) {
	fake.getBucketLifecycleMutex.Lock()
	defer fake.getBucketLifecycleMutex.Unlock()
	fake.GetBucketLifecycleStub = nil
	if fake.getBucketLifecycleReturnsOnCall == nil {
		fake.getBucketLifecycleReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketLifecycleOutput
			result2 error
		})
	}
	fake.getBucketLifecycleReturnsOnCall[i] = struct {
		result1 *s3.GetBucketLifecycleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLifecycleConfiguration(arg1 *s3.GetBucketLifecycleConfigurationInput) (*s3.GetBucketLifecycleConfigurationOutput, error) {
	fake.getBucketLifecycleConfigurationMutex.Lock()
	ret, specificReturn := fake.getBucketLifecycleConfigurationReturnsOnCall[len(fake.getBucketLifecycleConfigurationArgsForCall)]
	fake.getBucketLifecycleConfigurationArgsForCall = append(fake.getBucketLifecycleConfigurationArgsForCall, struct {
		arg1 *s3.GetBucketLifecycleConfigurationInput
	}{arg1})
	fake.recordInvocation("GetBucketLifecycleConfiguration", []interface{}{arg1})
	fake.getBucketLifecycleConfigurationMutex.Unlock()
	if fake.GetBucketLifecycleConfigurationStub != nil {
		return fake.GetBucketLifecycleConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketLifecycleConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketLifecycleConfigurationCallCount() int {
	fake.getBucketLifecycleConfigurationMutex.RLock()
	defer fake.getBucketLifecycleConfigurationMutex.RUnlock()
	return len(fake.getBucketLifecycleConfigurationArgsForCall)
}

func (fake *FakeS3API) GetBucketLifecycleConfigurationCalls(stub func(*s3.GetBucketLifecycleConfigurationInput) (*s3.GetBucketLifecycleConfigurationOutput, error)) {
	fake.getBucketLifecycleConfigurationMutex.Lock()
	defer fake.getBucketLifecycleConfigurationMutex.Unlock()
	fake.GetBucketLifecycleConfigurationStub = stub
}

func (fake *FakeS3API) GetBucketLifecycleConfigurationArgsForCall(i int) *s3.GetBucketLifecycleConfigurationInput {
	fake.getBucketLifecycleConfigurationMutex.RLock()
	defer fake.getBucketLifecycleConfigurationMutex.RUnlock()
	argsForCall := fake.getBucketLifecycleConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketLifecycleConfigurationReturns(result1 *s3.GetBucketLifecycleConfigurationOutput, result2 error) {
	fake.getBucketLifecycleConfigurationMutex.Lock()
	defer fake.getBucketLifecycleConfigurationMutex.Unlock()
	fake.GetBucketLifecycleConfigurationStub = nil
	fake.getBucketLifecycleConfigurationReturns = struct {
		result1 *s3.GetBucketLifecycleConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLifecycleConfigurationReturnsOnCall(i int, result1 *s3.GetBucketLifecycleConfigurationOutput, result2 error) {
	fake.getBucketLifecycleConfigurationMutex.Lock()
	defer fake.getBucketLifecycleConfigurationMutex.Unlock()
	fake.GetBucketLifecycleConfigurationStub = nil
	if fake.getBucketLifecycleConfigurationReturnsOnCall == nil {
		fake.getBucketLifecycleConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketLifecycleConfigurationOutput
			result2 error
		})
	}
	fake.getBucketLifecycleConfigurationReturnsOnCall[i] = struct {
		result1 *s3.GetBucketLifecycleConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLifecycleConfigurationRequest(arg1 *s3.GetBucketLifecycleConfigurationInput) (*request.Request, *s3.GetBucketLifecycleConfigurationOutput) {
	fake.getBucketLifecycleConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.getBucketLifecycleConfigurationRequestReturnsOnCall[len(fake.getBucketLifecycleConfigurationRequestArgsForCall)]
	fake.getBucketLifecycleConfigurationRequestArgsForCall = append(fake.getBucketLifecycleConfigurationRequestArgsForCall, struct {
		arg1 *s3.GetBucketLifecycleConfigurationInput
	}{arg1})
	fake.recordInvocation("GetBucketLifecycleConfigurationRequest", []interface{}{arg1})
	fake.getBucketLifecycleConfigurationRequestMutex.Unlock()
	if fake.GetBucketLifecycleConfigurationRequestStub != nil {
		return fake.GetBucketLifecycleConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketLifecycleConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketLifecycleConfigurationRequestCallCount() int {
	fake.getBucketLifecycleConfigurationRequestMutex.RLock()
	defer fake.getBucketLifecycleConfigurationRequestMutex.RUnlock()
	return len(fake.getBucketLifecycleConfigurationRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketLifecycleConfigurationRequestCalls(stub func(*s3.GetBucketLifecycleConfigurationInput) (*request.Request, *s3.GetBucketLifecycleConfigurationOutput)) {
	fake.getBucketLifecycleConfigurationRequestMutex.Lock()
	defer fake.getBucketLifecycleConfigurationRequestMutex.Unlock()
	fake.GetBucketLifecycleConfigurationRequestStub = stub
}

func (fake *FakeS3API) GetBucketLifecycleConfigurationRequestArgsForCall(i int) *s3.GetBucketLifecycleConfigurationInput {
	fake.getBucketLifecycleConfigurationRequestMutex.RLock()
	defer fake.getBucketLifecycleConfigurationRequestMutex.RUnlock()
	argsForCall := fake.getBucketLifecycleConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketLifecycleConfigurationRequestReturns(result1 *request.Request, result2 *s3.GetBucketLifecycleConfigurationOutput) {
	fake.getBucketLifecycleConfigurationRequestMutex.Lock()
	defer fake.getBucketLifecycleConfigurationRequestMutex.Unlock()
	fake.GetBucketLifecycleConfigurationRequestStub = nil
	fake.getBucketLifecycleConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketLifecycleConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLifecycleConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketLifecycleConfigurationOutput) {
	fake.getBucketLifecycleConfigurationRequestMutex.Lock()
	defer fake.getBucketLifecycleConfigurationRequestMutex.Unlock()
	fake.GetBucketLifecycleConfigurationRequestStub = nil
	if fake.getBucketLifecycleConfigurationRequestReturnsOnCall == nil {
		fake.getBucketLifecycleConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketLifecycleConfigurationOutput
		})
	}
	fake.getBucketLifecycleConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketLifecycleConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLifecycleConfigurationWithContext(arg1 context.Context, arg2 *s3.GetBucketLifecycleConfigurationInput, arg3 ...request.Option) (*s3.GetBucketLifecycleConfigurationOutput, error) {
	fake.getBucketLifecycleConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketLifecycleConfigurationWithContextReturnsOnCall[len(fake.getBucketLifecycleConfigurationWithContextArgsForCall)]
	fake.getBucketLifecycleConfigurationWithContextArgsForCall = append(fake.getBucketLifecycleConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketLifecycleConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketLifecycleConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketLifecycleConfigurationWithContextMutex.Unlock()
	if fake.GetBucketLifecycleConfigurationWithContextStub != nil {
		return fake.GetBucketLifecycleConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketLifecycleConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketLifecycleConfigurationWithContextCallCount() int {
	fake.getBucketLifecycleConfigurationWithContextMutex.RLock()
	defer fake.getBucketLifecycleConfigurationWithContextMutex.RUnlock()
	return len(fake.getBucketLifecycleConfigurationWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketLifecycleConfigurationWithContextCalls(stub func(context.Context, *s3.GetBucketLifecycleConfigurationInput, ...request.Option) (*s3.GetBucketLifecycleConfigurationOutput, error)) {
	fake.getBucketLifecycleConfigurationWithContextMutex.Lock()
	defer fake.getBucketLifecycleConfigurationWithContextMutex.Unlock()
	fake.GetBucketLifecycleConfigurationWithContextStub = stub
}

func (fake *FakeS3API) GetBucketLifecycleConfigurationWithContextArgsForCall(i int) (context.Context, *s3.GetBucketLifecycleConfigurationInput, []request.Option) {
	fake.getBucketLifecycleConfigurationWithContextMutex.RLock()
	defer fake.getBucketLifecycleConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.getBucketLifecycleConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketLifecycleConfigurationWithContextReturns(result1 *s3.GetBucketLifecycleConfigurationOutput, result2 error) {
	fake.getBucketLifecycleConfigurationWithContextMutex.Lock()
	defer fake.getBucketLifecycleConfigurationWithContextMutex.Unlock()
	fake.GetBucketLifecycleConfigurationWithContextStub = nil
	fake.getBucketLifecycleConfigurationWithContextReturns = struct {
		result1 *s3.GetBucketLifecycleConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLifecycleConfigurationWithContextReturnsOnCall(i int, result1 *s3.GetBucketLifecycleConfigurationOutput, result2 error) {
	fake.getBucketLifecycleConfigurationWithContextMutex.Lock()
	defer fake.getBucketLifecycleConfigurationWithContextMutex.Unlock()
	fake.GetBucketLifecycleConfigurationWithContextStub = nil
	if fake.getBucketLifecycleConfigurationWithContextReturnsOnCall == nil {
		fake.getBucketLifecycleConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketLifecycleConfigurationOutput
			result2 error
		})
	}
	fake.getBucketLifecycleConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketLifecycleConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLifecycleRequest(arg1 *s3.GetBucketLifecycleInput) (*request.Request, *s3.GetBucketLifecycleOutput) {
	fake.getBucketLifecycleRequestMutex.Lock()
	ret, specificReturn := fake.getBucketLifecycleRequestReturnsOnCall[len(fake.getBucketLifecycleRequestArgsForCall)]
	fake.getBucketLifecycleRequestArgsForCall = append(fake.getBucketLifecycleRequestArgsForCall, struct {
		arg1 *s3.GetBucketLifecycleInput
	}{arg1})
	fake.recordInvocation("GetBucketLifecycleRequest", []interface{}{arg1})
	fake.getBucketLifecycleRequestMutex.Unlock()
	if fake.GetBucketLifecycleRequestStub != nil {
		return fake.GetBucketLifecycleRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketLifecycleRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketLifecycleRequestCallCount() int {
	fake.getBucketLifecycleRequestMutex.RLock()
	defer fake.getBucketLifecycleRequestMutex.RUnlock()
	return len(fake.getBucketLifecycleRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketLifecycleRequestCalls(stub func(*s3.GetBucketLifecycleInput) (*request.Request, *s3.GetBucketLifecycleOutput)) {
	fake.getBucketLifecycleRequestMutex.Lock()
	defer fake.getBucketLifecycleRequestMutex.Unlock()
	fake.GetBucketLifecycleRequestStub = stub
}

func (fake *FakeS3API) GetBucketLifecycleRequestArgsForCall(i int) *s3.GetBucketLifecycleInput {
	fake.getBucketLifecycleRequestMutex.RLock()
	defer fake.getBucketLifecycleRequestMutex.RUnlock()
	argsForCall := fake.getBucketLifecycleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketLifecycleRequestReturns(result1 *request.Request, result2 *s3.GetBucketLifecycleOutput) {
	fake.getBucketLifecycleRequestMutex.Lock()
	defer fake.getBucketLifecycleRequestMutex.Unlock()
	fake.GetBucketLifecycleRequestStub = nil
	fake.getBucketLifecycleRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketLifecycleOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLifecycleRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketLifecycleOutput) {
	fake.getBucketLifecycleRequestMutex.Lock()
	defer fake.getBucketLifecycleRequestMutex.Unlock()
	fake.GetBucketLifecycleRequestStub = nil
	if fake.getBucketLifecycleRequestReturnsOnCall == nil {
		fake.getBucketLifecycleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketLifecycleOutput
		})
	}
	fake.getBucketLifecycleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketLifecycleOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLifecycleWithContext(arg1 context.Context, arg2 *s3.GetBucketLifecycleInput, arg3 ...request.Option) (*s3.GetBucketLifecycleOutput, error) {
	fake.getBucketLifecycleWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketLifecycleWithContextReturnsOnCall[len(fake.getBucketLifecycleWithContextArgsForCall)]
	fake.getBucketLifecycleWithContextArgsForCall = append(fake.getBucketLifecycleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketLifecycleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketLifecycleWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketLifecycleWithContextMutex.Unlock()
	if fake.GetBucketLifecycleWithContextStub != nil {
		return fake.GetBucketLifecycleWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketLifecycleWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketLifecycleWithContextCallCount() int {
	fake.getBucketLifecycleWithContextMutex.RLock()
	defer fake.getBucketLifecycleWithContextMutex.RUnlock()
	return len(fake.getBucketLifecycleWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketLifecycleWithContextCalls(stub func(context.Context, *s3.GetBucketLifecycleInput, ...request.Option) (*s3.GetBucketLifecycleOutput, error)) {
	fake.getBucketLifecycleWithContextMutex.Lock()
	defer fake.getBucketLifecycleWithContextMutex.Unlock()
	fake.GetBucketLifecycleWithContextStub = stub
}

func (fake *FakeS3API) GetBucketLifecycleWithContextArgsForCall(i int) (context.Context, *s3.GetBucketLifecycleInput, []request.Option) {
	fake.getBucketLifecycleWithContextMutex.RLock()
	defer fake.getBucketLifecycleWithContextMutex.RUnlock()
	argsForCall := fake.getBucketLifecycleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketLifecycleWithContextReturns(result1 *s3.GetBucketLifecycleOutput, result2 error) {
	fake.getBucketLifecycleWithContextMutex.Lock()
	defer fake.getBucketLifecycleWithContextMutex.Unlock()
	fake.GetBucketLifecycleWithContextStub = nil
	fake.getBucketLifecycleWithContextReturns = struct {
		result1 *s3.GetBucketLifecycleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLifecycleWithContextReturnsOnCall(i int, result1 *s3.GetBucketLifecycleOutput, result2 error) {
	fake.getBucketLifecycleWithContextMutex.Lock()
	defer fake.getBucketLifecycleWithContextMutex.Unlock()
	fake.GetBucketLifecycleWithContextStub = nil
	if fake.getBucketLifecycleWithContextReturnsOnCall == nil {
		fake.getBucketLifecycleWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketLifecycleOutput
			result2 error
		})
	}
	fake.getBucketLifecycleWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketLifecycleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLocation(arg1 *s3.GetBucketLocationInput) (*s3.GetBucketLocationOutput, error) {
	fake.getBucketLocationMutex.Lock()
	ret, specificReturn := fake.getBucketLocationReturnsOnCall[len(fake.getBucketLocationArgsForCall)]
	fake.getBucketLocationArgsForCall = append(fake.getBucketLocationArgsForCall, struct {
		arg1 *s3.GetBucketLocationInput
	}{arg1})
	fake.recordInvocation("GetBucketLocation", []interface{}{arg1})
	fake.getBucketLocationMutex.Unlock()
	if fake.GetBucketLocationStub != nil {
		return fake.GetBucketLocationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketLocationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketLocationCallCount() int {
	fake.getBucketLocationMutex.RLock()
	defer fake.getBucketLocationMutex.RUnlock()
	return len(fake.getBucketLocationArgsForCall)
}

func (fake *FakeS3API) GetBucketLocationCalls(stub func(*s3.GetBucketLocationInput) (*s3.GetBucketLocationOutput, error)) {
	fake.getBucketLocationMutex.Lock()
	defer fake.getBucketLocationMutex.Unlock()
	fake.GetBucketLocationStub = stub
}

func (fake *FakeS3API) GetBucketLocationArgsForCall(i int) *s3.GetBucketLocationInput {
	fake.getBucketLocationMutex.RLock()
	defer fake.getBucketLocationMutex.RUnlock()
	argsForCall := fake.getBucketLocationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketLocationReturns(result1 *s3.GetBucketLocationOutput, result2 error) {
	fake.getBucketLocationMutex.Lock()
	defer fake.getBucketLocationMutex.Unlock()
	fake.GetBucketLocationStub = nil
	fake.getBucketLocationReturns = struct {
		result1 *s3.GetBucketLocationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLocationReturnsOnCall(i int, result1 *s3.GetBucketLocationOutput, result2 error) {
	fake.getBucketLocationMutex.Lock()
	defer fake.getBucketLocationMutex.Unlock()
	fake.GetBucketLocationStub = nil
	if fake.getBucketLocationReturnsOnCall == nil {
		fake.getBucketLocationReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketLocationOutput
			result2 error
		})
	}
	fake.getBucketLocationReturnsOnCall[i] = struct {
		result1 *s3.GetBucketLocationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLocationRequest(arg1 *s3.GetBucketLocationInput) (*request.Request, *s3.GetBucketLocationOutput) {
	fake.getBucketLocationRequestMutex.Lock()
	ret, specificReturn := fake.getBucketLocationRequestReturnsOnCall[len(fake.getBucketLocationRequestArgsForCall)]
	fake.getBucketLocationRequestArgsForCall = append(fake.getBucketLocationRequestArgsForCall, struct {
		arg1 *s3.GetBucketLocationInput
	}{arg1})
	fake.recordInvocation("GetBucketLocationRequest", []interface{}{arg1})
	fake.getBucketLocationRequestMutex.Unlock()
	if fake.GetBucketLocationRequestStub != nil {
		return fake.GetBucketLocationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketLocationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketLocationRequestCallCount() int {
	fake.getBucketLocationRequestMutex.RLock()
	defer fake.getBucketLocationRequestMutex.RUnlock()
	return len(fake.getBucketLocationRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketLocationRequestCalls(stub func(*s3.GetBucketLocationInput) (*request.Request, *s3.GetBucketLocationOutput)) {
	fake.getBucketLocationRequestMutex.Lock()
	defer fake.getBucketLocationRequestMutex.Unlock()
	fake.GetBucketLocationRequestStub = stub
}

func (fake *FakeS3API) GetBucketLocationRequestArgsForCall(i int) *s3.GetBucketLocationInput {
	fake.getBucketLocationRequestMutex.RLock()
	defer fake.getBucketLocationRequestMutex.RUnlock()
	argsForCall := fake.getBucketLocationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketLocationRequestReturns(result1 *request.Request, result2 *s3.GetBucketLocationOutput) {
	fake.getBucketLocationRequestMutex.Lock()
	defer fake.getBucketLocationRequestMutex.Unlock()
	fake.GetBucketLocationRequestStub = nil
	fake.getBucketLocationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketLocationOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLocationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketLocationOutput) {
	fake.getBucketLocationRequestMutex.Lock()
	defer fake.getBucketLocationRequestMutex.Unlock()
	fake.GetBucketLocationRequestStub = nil
	if fake.getBucketLocationRequestReturnsOnCall == nil {
		fake.getBucketLocationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketLocationOutput
		})
	}
	fake.getBucketLocationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketLocationOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLocationWithContext(arg1 context.Context, arg2 *s3.GetBucketLocationInput, arg3 ...request.Option) (*s3.GetBucketLocationOutput, error) {
	fake.getBucketLocationWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketLocationWithContextReturnsOnCall[len(fake.getBucketLocationWithContextArgsForCall)]
	fake.getBucketLocationWithContextArgsForCall = append(fake.getBucketLocationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketLocationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketLocationWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketLocationWithContextMutex.Unlock()
	if fake.GetBucketLocationWithContextStub != nil {
		return fake.GetBucketLocationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketLocationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketLocationWithContextCallCount() int {
	fake.getBucketLocationWithContextMutex.RLock()
	defer fake.getBucketLocationWithContextMutex.RUnlock()
	return len(fake.getBucketLocationWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketLocationWithContextCalls(stub func(context.Context, *s3.GetBucketLocationInput, ...request.Option) (*s3.GetBucketLocationOutput, error)) {
	fake.getBucketLocationWithContextMutex.Lock()
	defer fake.getBucketLocationWithContextMutex.Unlock()
	fake.GetBucketLocationWithContextStub = stub
}

func (fake *FakeS3API) GetBucketLocationWithContextArgsForCall(i int) (context.Context, *s3.GetBucketLocationInput, []request.Option) {
	fake.getBucketLocationWithContextMutex.RLock()
	defer fake.getBucketLocationWithContextMutex.RUnlock()
	argsForCall := fake.getBucketLocationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketLocationWithContextReturns(result1 *s3.GetBucketLocationOutput, result2 error) {
	fake.getBucketLocationWithContextMutex.Lock()
	defer fake.getBucketLocationWithContextMutex.Unlock()
	fake.GetBucketLocationWithContextStub = nil
	fake.getBucketLocationWithContextReturns = struct {
		result1 *s3.GetBucketLocationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLocationWithContextReturnsOnCall(i int, result1 *s3.GetBucketLocationOutput, result2 error) {
	fake.getBucketLocationWithContextMutex.Lock()
	defer fake.getBucketLocationWithContextMutex.Unlock()
	fake.GetBucketLocationWithContextStub = nil
	if fake.getBucketLocationWithContextReturnsOnCall == nil {
		fake.getBucketLocationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketLocationOutput
			result2 error
		})
	}
	fake.getBucketLocationWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketLocationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLogging(arg1 *s3.GetBucketLoggingInput) (*s3.GetBucketLoggingOutput, error) {
	fake.getBucketLoggingMutex.Lock()
	ret, specificReturn := fake.getBucketLoggingReturnsOnCall[len(fake.getBucketLoggingArgsForCall)]
	fake.getBucketLoggingArgsForCall = append(fake.getBucketLoggingArgsForCall, struct {
		arg1 *s3.GetBucketLoggingInput
	}{arg1})
	fake.recordInvocation("GetBucketLogging", []interface{}{arg1})
	fake.getBucketLoggingMutex.Unlock()
	if fake.GetBucketLoggingStub != nil {
		return fake.GetBucketLoggingStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketLoggingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketLoggingCallCount() int {
	fake.getBucketLoggingMutex.RLock()
	defer fake.getBucketLoggingMutex.RUnlock()
	return len(fake.getBucketLoggingArgsForCall)
}

func (fake *FakeS3API) GetBucketLoggingCalls(stub func(*s3.GetBucketLoggingInput) (*s3.GetBucketLoggingOutput, error)) {
	fake.getBucketLoggingMutex.Lock()
	defer fake.getBucketLoggingMutex.Unlock()
	fake.GetBucketLoggingStub = stub
}

func (fake *FakeS3API) GetBucketLoggingArgsForCall(i int) *s3.GetBucketLoggingInput {
	fake.getBucketLoggingMutex.RLock()
	defer fake.getBucketLoggingMutex.RUnlock()
	argsForCall := fake.getBucketLoggingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketLoggingReturns(result1 *s3.GetBucketLoggingOutput, result2 error) {
	fake.getBucketLoggingMutex.Lock()
	defer fake.getBucketLoggingMutex.Unlock()
	fake.GetBucketLoggingStub = nil
	fake.getBucketLoggingReturns = struct {
		result1 *s3.GetBucketLoggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLoggingReturnsOnCall(i int, result1 *s3.GetBucketLoggingOutput, result2 error) {
	fake.getBucketLoggingMutex.Lock()
	defer fake.getBucketLoggingMutex.Unlock()
	fake.GetBucketLoggingStub = nil
	if fake.getBucketLoggingReturnsOnCall == nil {
		fake.getBucketLoggingReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketLoggingOutput
			result2 error
		})
	}
	fake.getBucketLoggingReturnsOnCall[i] = struct {
		result1 *s3.GetBucketLoggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLoggingRequest(arg1 *s3.GetBucketLoggingInput) (*request.Request, *s3.GetBucketLoggingOutput) {
	fake.getBucketLoggingRequestMutex.Lock()
	ret, specificReturn := fake.getBucketLoggingRequestReturnsOnCall[len(fake.getBucketLoggingRequestArgsForCall)]
	fake.getBucketLoggingRequestArgsForCall = append(fake.getBucketLoggingRequestArgsForCall, struct {
		arg1 *s3.GetBucketLoggingInput
	}{arg1})
	fake.recordInvocation("GetBucketLoggingRequest", []interface{}{arg1})
	fake.getBucketLoggingRequestMutex.Unlock()
	if fake.GetBucketLoggingRequestStub != nil {
		return fake.GetBucketLoggingRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketLoggingRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketLoggingRequestCallCount() int {
	fake.getBucketLoggingRequestMutex.RLock()
	defer fake.getBucketLoggingRequestMutex.RUnlock()
	return len(fake.getBucketLoggingRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketLoggingRequestCalls(stub func(*s3.GetBucketLoggingInput) (*request.Request, *s3.GetBucketLoggingOutput)) {
	fake.getBucketLoggingRequestMutex.Lock()
	defer fake.getBucketLoggingRequestMutex.Unlock()
	fake.GetBucketLoggingRequestStub = stub
}

func (fake *FakeS3API) GetBucketLoggingRequestArgsForCall(i int) *s3.GetBucketLoggingInput {
	fake.getBucketLoggingRequestMutex.RLock()
	defer fake.getBucketLoggingRequestMutex.RUnlock()
	argsForCall := fake.getBucketLoggingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketLoggingRequestReturns(result1 *request.Request, result2 *s3.GetBucketLoggingOutput) {
	fake.getBucketLoggingRequestMutex.Lock()
	defer fake.getBucketLoggingRequestMutex.Unlock()
	fake.GetBucketLoggingRequestStub = nil
	fake.getBucketLoggingRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketLoggingOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLoggingRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketLoggingOutput) {
	fake.getBucketLoggingRequestMutex.Lock()
	defer fake.getBucketLoggingRequestMutex.Unlock()
	fake.GetBucketLoggingRequestStub = nil
	if fake.getBucketLoggingRequestReturnsOnCall == nil {
		fake.getBucketLoggingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketLoggingOutput
		})
	}
	fake.getBucketLoggingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketLoggingOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLoggingWithContext(arg1 context.Context, arg2 *s3.GetBucketLoggingInput, arg3 ...request.Option) (*s3.GetBucketLoggingOutput, error) {
	fake.getBucketLoggingWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketLoggingWithContextReturnsOnCall[len(fake.getBucketLoggingWithContextArgsForCall)]
	fake.getBucketLoggingWithContextArgsForCall = append(fake.getBucketLoggingWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketLoggingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketLoggingWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketLoggingWithContextMutex.Unlock()
	if fake.GetBucketLoggingWithContextStub != nil {
		return fake.GetBucketLoggingWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketLoggingWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketLoggingWithContextCallCount() int {
	fake.getBucketLoggingWithContextMutex.RLock()
	defer fake.getBucketLoggingWithContextMutex.RUnlock()
	return len(fake.getBucketLoggingWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketLoggingWithContextCalls(stub func(context.Context, *s3.GetBucketLoggingInput, ...request.Option) (*s3.GetBucketLoggingOutput, error)) {
	fake.getBucketLoggingWithContextMutex.Lock()
	defer fake.getBucketLoggingWithContextMutex.Unlock()
	fake.GetBucketLoggingWithContextStub = stub
}

func (fake *FakeS3API) GetBucketLoggingWithContextArgsForCall(i int) (context.Context, *s3.GetBucketLoggingInput, []request.Option) {
	fake.getBucketLoggingWithContextMutex.RLock()
	defer fake.getBucketLoggingWithContextMutex.RUnlock()
	argsForCall := fake.getBucketLoggingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketLoggingWithContextReturns(result1 *s3.GetBucketLoggingOutput, result2 error) {
	fake.getBucketLoggingWithContextMutex.Lock()
	defer fake.getBucketLoggingWithContextMutex.Unlock()
	fake.GetBucketLoggingWithContextStub = nil
	fake.getBucketLoggingWithContextReturns = struct {
		result1 *s3.GetBucketLoggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketLoggingWithContextReturnsOnCall(i int, result1 *s3.GetBucketLoggingOutput, result2 error) {
	fake.getBucketLoggingWithContextMutex.Lock()
	defer fake.getBucketLoggingWithContextMutex.Unlock()
	fake.GetBucketLoggingWithContextStub = nil
	if fake.getBucketLoggingWithContextReturnsOnCall == nil {
		fake.getBucketLoggingWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketLoggingOutput
			result2 error
		})
	}
	fake.getBucketLoggingWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketLoggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketMetricsConfiguration(arg1 *s3.GetBucketMetricsConfigurationInput) (*s3.GetBucketMetricsConfigurationOutput, error) {
	fake.getBucketMetricsConfigurationMutex.Lock()
	ret, specificReturn := fake.getBucketMetricsConfigurationReturnsOnCall[len(fake.getBucketMetricsConfigurationArgsForCall)]
	fake.getBucketMetricsConfigurationArgsForCall = append(fake.getBucketMetricsConfigurationArgsForCall, struct {
		arg1 *s3.GetBucketMetricsConfigurationInput
	}{arg1})
	fake.recordInvocation("GetBucketMetricsConfiguration", []interface{}{arg1})
	fake.getBucketMetricsConfigurationMutex.Unlock()
	if fake.GetBucketMetricsConfigurationStub != nil {
		return fake.GetBucketMetricsConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketMetricsConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketMetricsConfigurationCallCount() int {
	fake.getBucketMetricsConfigurationMutex.RLock()
	defer fake.getBucketMetricsConfigurationMutex.RUnlock()
	return len(fake.getBucketMetricsConfigurationArgsForCall)
}

func (fake *FakeS3API) GetBucketMetricsConfigurationCalls(stub func(*s3.GetBucketMetricsConfigurationInput) (*s3.GetBucketMetricsConfigurationOutput, error)) {
	fake.getBucketMetricsConfigurationMutex.Lock()
	defer fake.getBucketMetricsConfigurationMutex.Unlock()
	fake.GetBucketMetricsConfigurationStub = stub
}

func (fake *FakeS3API) GetBucketMetricsConfigurationArgsForCall(i int) *s3.GetBucketMetricsConfigurationInput {
	fake.getBucketMetricsConfigurationMutex.RLock()
	defer fake.getBucketMetricsConfigurationMutex.RUnlock()
	argsForCall := fake.getBucketMetricsConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketMetricsConfigurationReturns(result1 *s3.GetBucketMetricsConfigurationOutput, result2 error) {
	fake.getBucketMetricsConfigurationMutex.Lock()
	defer fake.getBucketMetricsConfigurationMutex.Unlock()
	fake.GetBucketMetricsConfigurationStub = nil
	fake.getBucketMetricsConfigurationReturns = struct {
		result1 *s3.GetBucketMetricsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketMetricsConfigurationReturnsOnCall(i int, result1 *s3.GetBucketMetricsConfigurationOutput, result2 error) {
	fake.getBucketMetricsConfigurationMutex.Lock()
	defer fake.getBucketMetricsConfigurationMutex.Unlock()
	fake.GetBucketMetricsConfigurationStub = nil
	if fake.getBucketMetricsConfigurationReturnsOnCall == nil {
		fake.getBucketMetricsConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketMetricsConfigurationOutput
			result2 error
		})
	}
	fake.getBucketMetricsConfigurationReturnsOnCall[i] = struct {
		result1 *s3.GetBucketMetricsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketMetricsConfigurationRequest(arg1 *s3.GetBucketMetricsConfigurationInput) (*request.Request, *s3.GetBucketMetricsConfigurationOutput) {
	fake.getBucketMetricsConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.getBucketMetricsConfigurationRequestReturnsOnCall[len(fake.getBucketMetricsConfigurationRequestArgsForCall)]
	fake.getBucketMetricsConfigurationRequestArgsForCall = append(fake.getBucketMetricsConfigurationRequestArgsForCall, struct {
		arg1 *s3.GetBucketMetricsConfigurationInput
	}{arg1})
	fake.recordInvocation("GetBucketMetricsConfigurationRequest", []interface{}{arg1})
	fake.getBucketMetricsConfigurationRequestMutex.Unlock()
	if fake.GetBucketMetricsConfigurationRequestStub != nil {
		return fake.GetBucketMetricsConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketMetricsConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketMetricsConfigurationRequestCallCount() int {
	fake.getBucketMetricsConfigurationRequestMutex.RLock()
	defer fake.getBucketMetricsConfigurationRequestMutex.RUnlock()
	return len(fake.getBucketMetricsConfigurationRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketMetricsConfigurationRequestCalls(stub func(*s3.GetBucketMetricsConfigurationInput) (*request.Request, *s3.GetBucketMetricsConfigurationOutput)) {
	fake.getBucketMetricsConfigurationRequestMutex.Lock()
	defer fake.getBucketMetricsConfigurationRequestMutex.Unlock()
	fake.GetBucketMetricsConfigurationRequestStub = stub
}

func (fake *FakeS3API) GetBucketMetricsConfigurationRequestArgsForCall(i int) *s3.GetBucketMetricsConfigurationInput {
	fake.getBucketMetricsConfigurationRequestMutex.RLock()
	defer fake.getBucketMetricsConfigurationRequestMutex.RUnlock()
	argsForCall := fake.getBucketMetricsConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketMetricsConfigurationRequestReturns(result1 *request.Request, result2 *s3.GetBucketMetricsConfigurationOutput) {
	fake.getBucketMetricsConfigurationRequestMutex.Lock()
	defer fake.getBucketMetricsConfigurationRequestMutex.Unlock()
	fake.GetBucketMetricsConfigurationRequestStub = nil
	fake.getBucketMetricsConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketMetricsConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketMetricsConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketMetricsConfigurationOutput) {
	fake.getBucketMetricsConfigurationRequestMutex.Lock()
	defer fake.getBucketMetricsConfigurationRequestMutex.Unlock()
	fake.GetBucketMetricsConfigurationRequestStub = nil
	if fake.getBucketMetricsConfigurationRequestReturnsOnCall == nil {
		fake.getBucketMetricsConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketMetricsConfigurationOutput
		})
	}
	fake.getBucketMetricsConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketMetricsConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketMetricsConfigurationWithContext(arg1 context.Context, arg2 *s3.GetBucketMetricsConfigurationInput, arg3 ...request.Option) (*s3.GetBucketMetricsConfigurationOutput, error) {
	fake.getBucketMetricsConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketMetricsConfigurationWithContextReturnsOnCall[len(fake.getBucketMetricsConfigurationWithContextArgsForCall)]
	fake.getBucketMetricsConfigurationWithContextArgsForCall = append(fake.getBucketMetricsConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketMetricsConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketMetricsConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketMetricsConfigurationWithContextMutex.Unlock()
	if fake.GetBucketMetricsConfigurationWithContextStub != nil {
		return fake.GetBucketMetricsConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketMetricsConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketMetricsConfigurationWithContextCallCount() int {
	fake.getBucketMetricsConfigurationWithContextMutex.RLock()
	defer fake.getBucketMetricsConfigurationWithContextMutex.RUnlock()
	return len(fake.getBucketMetricsConfigurationWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketMetricsConfigurationWithContextCalls(stub func(context.Context, *s3.GetBucketMetricsConfigurationInput, ...request.Option) (*s3.GetBucketMetricsConfigurationOutput, error)) {
	fake.getBucketMetricsConfigurationWithContextMutex.Lock()
	defer fake.getBucketMetricsConfigurationWithContextMutex.Unlock()
	fake.GetBucketMetricsConfigurationWithContextStub = stub
}

func (fake *FakeS3API) GetBucketMetricsConfigurationWithContextArgsForCall(i int) (context.Context, *s3.GetBucketMetricsConfigurationInput, []request.Option) {
	fake.getBucketMetricsConfigurationWithContextMutex.RLock()
	defer fake.getBucketMetricsConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.getBucketMetricsConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketMetricsConfigurationWithContextReturns(result1 *s3.GetBucketMetricsConfigurationOutput, result2 error) {
	fake.getBucketMetricsConfigurationWithContextMutex.Lock()
	defer fake.getBucketMetricsConfigurationWithContextMutex.Unlock()
	fake.GetBucketMetricsConfigurationWithContextStub = nil
	fake.getBucketMetricsConfigurationWithContextReturns = struct {
		result1 *s3.GetBucketMetricsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketMetricsConfigurationWithContextReturnsOnCall(i int, result1 *s3.GetBucketMetricsConfigurationOutput, result2 error) {
	fake.getBucketMetricsConfigurationWithContextMutex.Lock()
	defer fake.getBucketMetricsConfigurationWithContextMutex.Unlock()
	fake.GetBucketMetricsConfigurationWithContextStub = nil
	if fake.getBucketMetricsConfigurationWithContextReturnsOnCall == nil {
		fake.getBucketMetricsConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketMetricsConfigurationOutput
			result2 error
		})
	}
	fake.getBucketMetricsConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketMetricsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketNotification(arg1 *s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfigurationDeprecated, error) {
	fake.getBucketNotificationMutex.Lock()
	ret, specificReturn := fake.getBucketNotificationReturnsOnCall[len(fake.getBucketNotificationArgsForCall)]
	fake.getBucketNotificationArgsForCall = append(fake.getBucketNotificationArgsForCall, struct {
		arg1 *s3.GetBucketNotificationConfigurationRequest
	}{arg1})
	fake.recordInvocation("GetBucketNotification", []interface{}{arg1})
	fake.getBucketNotificationMutex.Unlock()
	if fake.GetBucketNotificationStub != nil {
		return fake.GetBucketNotificationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketNotificationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketNotificationCallCount() int {
	fake.getBucketNotificationMutex.RLock()
	defer fake.getBucketNotificationMutex.RUnlock()
	return len(fake.getBucketNotificationArgsForCall)
}

func (fake *FakeS3API) GetBucketNotificationCalls(stub func(*s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfigurationDeprecated, error)) {
	fake.getBucketNotificationMutex.Lock()
	defer fake.getBucketNotificationMutex.Unlock()
	fake.GetBucketNotificationStub = stub
}

func (fake *FakeS3API) GetBucketNotificationArgsForCall(i int) *s3.GetBucketNotificationConfigurationRequest {
	fake.getBucketNotificationMutex.RLock()
	defer fake.getBucketNotificationMutex.RUnlock()
	argsForCall := fake.getBucketNotificationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketNotificationReturns(result1 *s3.NotificationConfigurationDeprecated, result2 error) {
	fake.getBucketNotificationMutex.Lock()
	defer fake.getBucketNotificationMutex.Unlock()
	fake.GetBucketNotificationStub = nil
	fake.getBucketNotificationReturns = struct {
		result1 *s3.NotificationConfigurationDeprecated
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketNotificationReturnsOnCall(i int, result1 *s3.NotificationConfigurationDeprecated, result2 error) {
	fake.getBucketNotificationMutex.Lock()
	defer fake.getBucketNotificationMutex.Unlock()
	fake.GetBucketNotificationStub = nil
	if fake.getBucketNotificationReturnsOnCall == nil {
		fake.getBucketNotificationReturnsOnCall = make(map[int]struct {
			result1 *s3.NotificationConfigurationDeprecated
			result2 error
		})
	}
	fake.getBucketNotificationReturnsOnCall[i] = struct {
		result1 *s3.NotificationConfigurationDeprecated
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketNotificationConfiguration(arg1 *s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfiguration, error) {
	fake.getBucketNotificationConfigurationMutex.Lock()
	ret, specificReturn := fake.getBucketNotificationConfigurationReturnsOnCall[len(fake.getBucketNotificationConfigurationArgsForCall)]
	fake.getBucketNotificationConfigurationArgsForCall = append(fake.getBucketNotificationConfigurationArgsForCall, struct {
		arg1 *s3.GetBucketNotificationConfigurationRequest
	}{arg1})
	fake.recordInvocation("GetBucketNotificationConfiguration", []interface{}{arg1})
	fake.getBucketNotificationConfigurationMutex.Unlock()
	if fake.GetBucketNotificationConfigurationStub != nil {
		return fake.GetBucketNotificationConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketNotificationConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketNotificationConfigurationCallCount() int {
	fake.getBucketNotificationConfigurationMutex.RLock()
	defer fake.getBucketNotificationConfigurationMutex.RUnlock()
	return len(fake.getBucketNotificationConfigurationArgsForCall)
}

func (fake *FakeS3API) GetBucketNotificationConfigurationCalls(stub func(*s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfiguration, error)) {
	fake.getBucketNotificationConfigurationMutex.Lock()
	defer fake.getBucketNotificationConfigurationMutex.Unlock()
	fake.GetBucketNotificationConfigurationStub = stub
}

func (fake *FakeS3API) GetBucketNotificationConfigurationArgsForCall(i int) *s3.GetBucketNotificationConfigurationRequest {
	fake.getBucketNotificationConfigurationMutex.RLock()
	defer fake.getBucketNotificationConfigurationMutex.RUnlock()
	argsForCall := fake.getBucketNotificationConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketNotificationConfigurationReturns(result1 *s3.NotificationConfiguration, result2 error) {
	fake.getBucketNotificationConfigurationMutex.Lock()
	defer fake.getBucketNotificationConfigurationMutex.Unlock()
	fake.GetBucketNotificationConfigurationStub = nil
	fake.getBucketNotificationConfigurationReturns = struct {
		result1 *s3.NotificationConfiguration
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketNotificationConfigurationReturnsOnCall(i int, result1 *s3.NotificationConfiguration, result2 error) {
	fake.getBucketNotificationConfigurationMutex.Lock()
	defer fake.getBucketNotificationConfigurationMutex.Unlock()
	fake.GetBucketNotificationConfigurationStub = nil
	if fake.getBucketNotificationConfigurationReturnsOnCall == nil {
		fake.getBucketNotificationConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.NotificationConfiguration
			result2 error
		})
	}
	fake.getBucketNotificationConfigurationReturnsOnCall[i] = struct {
		result1 *s3.NotificationConfiguration
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketNotificationConfigurationRequest(arg1 *s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfiguration) {
	fake.getBucketNotificationConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.getBucketNotificationConfigurationRequestReturnsOnCall[len(fake.getBucketNotificationConfigurationRequestArgsForCall)]
	fake.getBucketNotificationConfigurationRequestArgsForCall = append(fake.getBucketNotificationConfigurationRequestArgsForCall, struct {
		arg1 *s3.GetBucketNotificationConfigurationRequest
	}{arg1})
	fake.recordInvocation("GetBucketNotificationConfigurationRequest", []interface{}{arg1})
	fake.getBucketNotificationConfigurationRequestMutex.Unlock()
	if fake.GetBucketNotificationConfigurationRequestStub != nil {
		return fake.GetBucketNotificationConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketNotificationConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketNotificationConfigurationRequestCallCount() int {
	fake.getBucketNotificationConfigurationRequestMutex.RLock()
	defer fake.getBucketNotificationConfigurationRequestMutex.RUnlock()
	return len(fake.getBucketNotificationConfigurationRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketNotificationConfigurationRequestCalls(stub func(*s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfiguration)) {
	fake.getBucketNotificationConfigurationRequestMutex.Lock()
	defer fake.getBucketNotificationConfigurationRequestMutex.Unlock()
	fake.GetBucketNotificationConfigurationRequestStub = stub
}

func (fake *FakeS3API) GetBucketNotificationConfigurationRequestArgsForCall(i int) *s3.GetBucketNotificationConfigurationRequest {
	fake.getBucketNotificationConfigurationRequestMutex.RLock()
	defer fake.getBucketNotificationConfigurationRequestMutex.RUnlock()
	argsForCall := fake.getBucketNotificationConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketNotificationConfigurationRequestReturns(result1 *request.Request, result2 *s3.NotificationConfiguration) {
	fake.getBucketNotificationConfigurationRequestMutex.Lock()
	defer fake.getBucketNotificationConfigurationRequestMutex.Unlock()
	fake.GetBucketNotificationConfigurationRequestStub = nil
	fake.getBucketNotificationConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.NotificationConfiguration
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketNotificationConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.NotificationConfiguration) {
	fake.getBucketNotificationConfigurationRequestMutex.Lock()
	defer fake.getBucketNotificationConfigurationRequestMutex.Unlock()
	fake.GetBucketNotificationConfigurationRequestStub = nil
	if fake.getBucketNotificationConfigurationRequestReturnsOnCall == nil {
		fake.getBucketNotificationConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.NotificationConfiguration
		})
	}
	fake.getBucketNotificationConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.NotificationConfiguration
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketNotificationConfigurationWithContext(arg1 context.Context, arg2 *s3.GetBucketNotificationConfigurationRequest, arg3 ...request.Option) (*s3.NotificationConfiguration, error) {
	fake.getBucketNotificationConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketNotificationConfigurationWithContextReturnsOnCall[len(fake.getBucketNotificationConfigurationWithContextArgsForCall)]
	fake.getBucketNotificationConfigurationWithContextArgsForCall = append(fake.getBucketNotificationConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketNotificationConfigurationRequest
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketNotificationConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketNotificationConfigurationWithContextMutex.Unlock()
	if fake.GetBucketNotificationConfigurationWithContextStub != nil {
		return fake.GetBucketNotificationConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketNotificationConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketNotificationConfigurationWithContextCallCount() int {
	fake.getBucketNotificationConfigurationWithContextMutex.RLock()
	defer fake.getBucketNotificationConfigurationWithContextMutex.RUnlock()
	return len(fake.getBucketNotificationConfigurationWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketNotificationConfigurationWithContextCalls(stub func(context.Context, *s3.GetBucketNotificationConfigurationRequest, ...request.Option) (*s3.NotificationConfiguration, error)) {
	fake.getBucketNotificationConfigurationWithContextMutex.Lock()
	defer fake.getBucketNotificationConfigurationWithContextMutex.Unlock()
	fake.GetBucketNotificationConfigurationWithContextStub = stub
}

func (fake *FakeS3API) GetBucketNotificationConfigurationWithContextArgsForCall(i int) (context.Context, *s3.GetBucketNotificationConfigurationRequest, []request.Option) {
	fake.getBucketNotificationConfigurationWithContextMutex.RLock()
	defer fake.getBucketNotificationConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.getBucketNotificationConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketNotificationConfigurationWithContextReturns(result1 *s3.NotificationConfiguration, result2 error) {
	fake.getBucketNotificationConfigurationWithContextMutex.Lock()
	defer fake.getBucketNotificationConfigurationWithContextMutex.Unlock()
	fake.GetBucketNotificationConfigurationWithContextStub = nil
	fake.getBucketNotificationConfigurationWithContextReturns = struct {
		result1 *s3.NotificationConfiguration
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketNotificationConfigurationWithContextReturnsOnCall(i int, result1 *s3.NotificationConfiguration, result2 error) {
	fake.getBucketNotificationConfigurationWithContextMutex.Lock()
	defer fake.getBucketNotificationConfigurationWithContextMutex.Unlock()
	fake.GetBucketNotificationConfigurationWithContextStub = nil
	if fake.getBucketNotificationConfigurationWithContextReturnsOnCall == nil {
		fake.getBucketNotificationConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.NotificationConfiguration
			result2 error
		})
	}
	fake.getBucketNotificationConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *s3.NotificationConfiguration
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketNotificationRequest(arg1 *s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfigurationDeprecated) {
	fake.getBucketNotificationRequestMutex.Lock()
	ret, specificReturn := fake.getBucketNotificationRequestReturnsOnCall[len(fake.getBucketNotificationRequestArgsForCall)]
	fake.getBucketNotificationRequestArgsForCall = append(fake.getBucketNotificationRequestArgsForCall, struct {
		arg1 *s3.GetBucketNotificationConfigurationRequest
	}{arg1})
	fake.recordInvocation("GetBucketNotificationRequest", []interface{}{arg1})
	fake.getBucketNotificationRequestMutex.Unlock()
	if fake.GetBucketNotificationRequestStub != nil {
		return fake.GetBucketNotificationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketNotificationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketNotificationRequestCallCount() int {
	fake.getBucketNotificationRequestMutex.RLock()
	defer fake.getBucketNotificationRequestMutex.RUnlock()
	return len(fake.getBucketNotificationRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketNotificationRequestCalls(stub func(*s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfigurationDeprecated)) {
	fake.getBucketNotificationRequestMutex.Lock()
	defer fake.getBucketNotificationRequestMutex.Unlock()
	fake.GetBucketNotificationRequestStub = stub
}

func (fake *FakeS3API) GetBucketNotificationRequestArgsForCall(i int) *s3.GetBucketNotificationConfigurationRequest {
	fake.getBucketNotificationRequestMutex.RLock()
	defer fake.getBucketNotificationRequestMutex.RUnlock()
	argsForCall := fake.getBucketNotificationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketNotificationRequestReturns(result1 *request.Request, result2 *s3.NotificationConfigurationDeprecated) {
	fake.getBucketNotificationRequestMutex.Lock()
	defer fake.getBucketNotificationRequestMutex.Unlock()
	fake.GetBucketNotificationRequestStub = nil
	fake.getBucketNotificationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.NotificationConfigurationDeprecated
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketNotificationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.NotificationConfigurationDeprecated) {
	fake.getBucketNotificationRequestMutex.Lock()
	defer fake.getBucketNotificationRequestMutex.Unlock()
	fake.GetBucketNotificationRequestStub = nil
	if fake.getBucketNotificationRequestReturnsOnCall == nil {
		fake.getBucketNotificationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.NotificationConfigurationDeprecated
		})
	}
	fake.getBucketNotificationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.NotificationConfigurationDeprecated
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketNotificationWithContext(arg1 context.Context, arg2 *s3.GetBucketNotificationConfigurationRequest, arg3 ...request.Option) (*s3.NotificationConfigurationDeprecated, error) {
	fake.getBucketNotificationWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketNotificationWithContextReturnsOnCall[len(fake.getBucketNotificationWithContextArgsForCall)]
	fake.getBucketNotificationWithContextArgsForCall = append(fake.getBucketNotificationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketNotificationConfigurationRequest
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketNotificationWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketNotificationWithContextMutex.Unlock()
	if fake.GetBucketNotificationWithContextStub != nil {
		return fake.GetBucketNotificationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketNotificationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketNotificationWithContextCallCount() int {
	fake.getBucketNotificationWithContextMutex.RLock()
	defer fake.getBucketNotificationWithContextMutex.RUnlock()
	return len(fake.getBucketNotificationWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketNotificationWithContextCalls(stub func(context.Context, *s3.GetBucketNotificationConfigurationRequest, ...request.Option) (*s3.NotificationConfigurationDeprecated, error)) {
	fake.getBucketNotificationWithContextMutex.Lock()
	defer fake.getBucketNotificationWithContextMutex.Unlock()
	fake.GetBucketNotificationWithContextStub = stub
}

func (fake *FakeS3API) GetBucketNotificationWithContextArgsForCall(i int) (context.Context, *s3.GetBucketNotificationConfigurationRequest, []request.Option) {
	fake.getBucketNotificationWithContextMutex.RLock()
	defer fake.getBucketNotificationWithContextMutex.RUnlock()
	argsForCall := fake.getBucketNotificationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketNotificationWithContextReturns(result1 *s3.NotificationConfigurationDeprecated, result2 error) {
	fake.getBucketNotificationWithContextMutex.Lock()
	defer fake.getBucketNotificationWithContextMutex.Unlock()
	fake.GetBucketNotificationWithContextStub = nil
	fake.getBucketNotificationWithContextReturns = struct {
		result1 *s3.NotificationConfigurationDeprecated
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketNotificationWithContextReturnsOnCall(i int, result1 *s3.NotificationConfigurationDeprecated, result2 error) {
	fake.getBucketNotificationWithContextMutex.Lock()
	defer fake.getBucketNotificationWithContextMutex.Unlock()
	fake.GetBucketNotificationWithContextStub = nil
	if fake.getBucketNotificationWithContextReturnsOnCall == nil {
		fake.getBucketNotificationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.NotificationConfigurationDeprecated
			result2 error
		})
	}
	fake.getBucketNotificationWithContextReturnsOnCall[i] = struct {
		result1 *s3.NotificationConfigurationDeprecated
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketPolicy(arg1 *s3.GetBucketPolicyInput) (*s3.GetBucketPolicyOutput, error) {
	fake.getBucketPolicyMutex.Lock()
	ret, specificReturn := fake.getBucketPolicyReturnsOnCall[len(fake.getBucketPolicyArgsForCall)]
	fake.getBucketPolicyArgsForCall = append(fake.getBucketPolicyArgsForCall, struct {
		arg1 *s3.GetBucketPolicyInput
	}{arg1})
	fake.recordInvocation("GetBucketPolicy", []interface{}{arg1})
	fake.getBucketPolicyMutex.Unlock()
	if fake.GetBucketPolicyStub != nil {
		return fake.GetBucketPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketPolicyCallCount() int {
	fake.getBucketPolicyMutex.RLock()
	defer fake.getBucketPolicyMutex.RUnlock()
	return len(fake.getBucketPolicyArgsForCall)
}

func (fake *FakeS3API) GetBucketPolicyCalls(stub func(*s3.GetBucketPolicyInput) (*s3.GetBucketPolicyOutput, error)) {
	fake.getBucketPolicyMutex.Lock()
	defer fake.getBucketPolicyMutex.Unlock()
	fake.GetBucketPolicyStub = stub
}

func (fake *FakeS3API) GetBucketPolicyArgsForCall(i int) *s3.GetBucketPolicyInput {
	fake.getBucketPolicyMutex.RLock()
	defer fake.getBucketPolicyMutex.RUnlock()
	argsForCall := fake.getBucketPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketPolicyReturns(result1 *s3.GetBucketPolicyOutput, result2 error) {
	fake.getBucketPolicyMutex.Lock()
	defer fake.getBucketPolicyMutex.Unlock()
	fake.GetBucketPolicyStub = nil
	fake.getBucketPolicyReturns = struct {
		result1 *s3.GetBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketPolicyReturnsOnCall(i int, result1 *s3.GetBucketPolicyOutput, result2 error) {
	fake.getBucketPolicyMutex.Lock()
	defer fake.getBucketPolicyMutex.Unlock()
	fake.GetBucketPolicyStub = nil
	if fake.getBucketPolicyReturnsOnCall == nil {
		fake.getBucketPolicyReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketPolicyOutput
			result2 error
		})
	}
	fake.getBucketPolicyReturnsOnCall[i] = struct {
		result1 *s3.GetBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketPolicyRequest(arg1 *s3.GetBucketPolicyInput) (*request.Request, *s3.GetBucketPolicyOutput) {
	fake.getBucketPolicyRequestMutex.Lock()
	ret, specificReturn := fake.getBucketPolicyRequestReturnsOnCall[len(fake.getBucketPolicyRequestArgsForCall)]
	fake.getBucketPolicyRequestArgsForCall = append(fake.getBucketPolicyRequestArgsForCall, struct {
		arg1 *s3.GetBucketPolicyInput
	}{arg1})
	fake.recordInvocation("GetBucketPolicyRequest", []interface{}{arg1})
	fake.getBucketPolicyRequestMutex.Unlock()
	if fake.GetBucketPolicyRequestStub != nil {
		return fake.GetBucketPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketPolicyRequestCallCount() int {
	fake.getBucketPolicyRequestMutex.RLock()
	defer fake.getBucketPolicyRequestMutex.RUnlock()
	return len(fake.getBucketPolicyRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketPolicyRequestCalls(stub func(*s3.GetBucketPolicyInput) (*request.Request, *s3.GetBucketPolicyOutput)) {
	fake.getBucketPolicyRequestMutex.Lock()
	defer fake.getBucketPolicyRequestMutex.Unlock()
	fake.GetBucketPolicyRequestStub = stub
}

func (fake *FakeS3API) GetBucketPolicyRequestArgsForCall(i int) *s3.GetBucketPolicyInput {
	fake.getBucketPolicyRequestMutex.RLock()
	defer fake.getBucketPolicyRequestMutex.RUnlock()
	argsForCall := fake.getBucketPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketPolicyRequestReturns(result1 *request.Request, result2 *s3.GetBucketPolicyOutput) {
	fake.getBucketPolicyRequestMutex.Lock()
	defer fake.getBucketPolicyRequestMutex.Unlock()
	fake.GetBucketPolicyRequestStub = nil
	fake.getBucketPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketPolicyOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketPolicyOutput) {
	fake.getBucketPolicyRequestMutex.Lock()
	defer fake.getBucketPolicyRequestMutex.Unlock()
	fake.GetBucketPolicyRequestStub = nil
	if fake.getBucketPolicyRequestReturnsOnCall == nil {
		fake.getBucketPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketPolicyOutput
		})
	}
	fake.getBucketPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketPolicyOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketPolicyStatus(arg1 *s3.GetBucketPolicyStatusInput) (*s3.GetBucketPolicyStatusOutput, error) {
	fake.getBucketPolicyStatusMutex.Lock()
	ret, specificReturn := fake.getBucketPolicyStatusReturnsOnCall[len(fake.getBucketPolicyStatusArgsForCall)]
	fake.getBucketPolicyStatusArgsForCall = append(fake.getBucketPolicyStatusArgsForCall, struct {
		arg1 *s3.GetBucketPolicyStatusInput
	}{arg1})
	fake.recordInvocation("GetBucketPolicyStatus", []interface{}{arg1})
	fake.getBucketPolicyStatusMutex.Unlock()
	if fake.GetBucketPolicyStatusStub != nil {
		return fake.GetBucketPolicyStatusStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketPolicyStatusReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketPolicyStatusCallCount() int {
	fake.getBucketPolicyStatusMutex.RLock()
	defer fake.getBucketPolicyStatusMutex.RUnlock()
	return len(fake.getBucketPolicyStatusArgsForCall)
}

func (fake *FakeS3API) GetBucketPolicyStatusCalls(stub func(*s3.GetBucketPolicyStatusInput) (*s3.GetBucketPolicyStatusOutput, error)) {
	fake.getBucketPolicyStatusMutex.Lock()
	defer fake.getBucketPolicyStatusMutex.Unlock()
	fake.GetBucketPolicyStatusStub = stub
}

func (fake *FakeS3API) GetBucketPolicyStatusArgsForCall(i int) *s3.GetBucketPolicyStatusInput {
	fake.getBucketPolicyStatusMutex.RLock()
	defer fake.getBucketPolicyStatusMutex.RUnlock()
	argsForCall := fake.getBucketPolicyStatusArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketPolicyStatusReturns(result1 *s3.GetBucketPolicyStatusOutput, result2 error) {
	fake.getBucketPolicyStatusMutex.Lock()
	defer fake.getBucketPolicyStatusMutex.Unlock()
	fake.GetBucketPolicyStatusStub = nil
	fake.getBucketPolicyStatusReturns = struct {
		result1 *s3.GetBucketPolicyStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketPolicyStatusReturnsOnCall(i int, result1 *s3.GetBucketPolicyStatusOutput, result2 error) {
	fake.getBucketPolicyStatusMutex.Lock()
	defer fake.getBucketPolicyStatusMutex.Unlock()
	fake.GetBucketPolicyStatusStub = nil
	if fake.getBucketPolicyStatusReturnsOnCall == nil {
		fake.getBucketPolicyStatusReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketPolicyStatusOutput
			result2 error
		})
	}
	fake.getBucketPolicyStatusReturnsOnCall[i] = struct {
		result1 *s3.GetBucketPolicyStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketPolicyStatusRequest(arg1 *s3.GetBucketPolicyStatusInput) (*request.Request, *s3.GetBucketPolicyStatusOutput) {
	fake.getBucketPolicyStatusRequestMutex.Lock()
	ret, specificReturn := fake.getBucketPolicyStatusRequestReturnsOnCall[len(fake.getBucketPolicyStatusRequestArgsForCall)]
	fake.getBucketPolicyStatusRequestArgsForCall = append(fake.getBucketPolicyStatusRequestArgsForCall, struct {
		arg1 *s3.GetBucketPolicyStatusInput
	}{arg1})
	fake.recordInvocation("GetBucketPolicyStatusRequest", []interface{}{arg1})
	fake.getBucketPolicyStatusRequestMutex.Unlock()
	if fake.GetBucketPolicyStatusRequestStub != nil {
		return fake.GetBucketPolicyStatusRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketPolicyStatusRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketPolicyStatusRequestCallCount() int {
	fake.getBucketPolicyStatusRequestMutex.RLock()
	defer fake.getBucketPolicyStatusRequestMutex.RUnlock()
	return len(fake.getBucketPolicyStatusRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketPolicyStatusRequestCalls(stub func(*s3.GetBucketPolicyStatusInput) (*request.Request, *s3.GetBucketPolicyStatusOutput)) {
	fake.getBucketPolicyStatusRequestMutex.Lock()
	defer fake.getBucketPolicyStatusRequestMutex.Unlock()
	fake.GetBucketPolicyStatusRequestStub = stub
}

func (fake *FakeS3API) GetBucketPolicyStatusRequestArgsForCall(i int) *s3.GetBucketPolicyStatusInput {
	fake.getBucketPolicyStatusRequestMutex.RLock()
	defer fake.getBucketPolicyStatusRequestMutex.RUnlock()
	argsForCall := fake.getBucketPolicyStatusRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketPolicyStatusRequestReturns(result1 *request.Request, result2 *s3.GetBucketPolicyStatusOutput) {
	fake.getBucketPolicyStatusRequestMutex.Lock()
	defer fake.getBucketPolicyStatusRequestMutex.Unlock()
	fake.GetBucketPolicyStatusRequestStub = nil
	fake.getBucketPolicyStatusRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketPolicyStatusOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketPolicyStatusRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketPolicyStatusOutput) {
	fake.getBucketPolicyStatusRequestMutex.Lock()
	defer fake.getBucketPolicyStatusRequestMutex.Unlock()
	fake.GetBucketPolicyStatusRequestStub = nil
	if fake.getBucketPolicyStatusRequestReturnsOnCall == nil {
		fake.getBucketPolicyStatusRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketPolicyStatusOutput
		})
	}
	fake.getBucketPolicyStatusRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketPolicyStatusOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketPolicyStatusWithContext(arg1 context.Context, arg2 *s3.GetBucketPolicyStatusInput, arg3 ...request.Option) (*s3.GetBucketPolicyStatusOutput, error) {
	fake.getBucketPolicyStatusWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketPolicyStatusWithContextReturnsOnCall[len(fake.getBucketPolicyStatusWithContextArgsForCall)]
	fake.getBucketPolicyStatusWithContextArgsForCall = append(fake.getBucketPolicyStatusWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketPolicyStatusInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketPolicyStatusWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketPolicyStatusWithContextMutex.Unlock()
	if fake.GetBucketPolicyStatusWithContextStub != nil {
		return fake.GetBucketPolicyStatusWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketPolicyStatusWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketPolicyStatusWithContextCallCount() int {
	fake.getBucketPolicyStatusWithContextMutex.RLock()
	defer fake.getBucketPolicyStatusWithContextMutex.RUnlock()
	return len(fake.getBucketPolicyStatusWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketPolicyStatusWithContextCalls(stub func(context.Context, *s3.GetBucketPolicyStatusInput, ...request.Option) (*s3.GetBucketPolicyStatusOutput, error)) {
	fake.getBucketPolicyStatusWithContextMutex.Lock()
	defer fake.getBucketPolicyStatusWithContextMutex.Unlock()
	fake.GetBucketPolicyStatusWithContextStub = stub
}

func (fake *FakeS3API) GetBucketPolicyStatusWithContextArgsForCall(i int) (context.Context, *s3.GetBucketPolicyStatusInput, []request.Option) {
	fake.getBucketPolicyStatusWithContextMutex.RLock()
	defer fake.getBucketPolicyStatusWithContextMutex.RUnlock()
	argsForCall := fake.getBucketPolicyStatusWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketPolicyStatusWithContextReturns(result1 *s3.GetBucketPolicyStatusOutput, result2 error) {
	fake.getBucketPolicyStatusWithContextMutex.Lock()
	defer fake.getBucketPolicyStatusWithContextMutex.Unlock()
	fake.GetBucketPolicyStatusWithContextStub = nil
	fake.getBucketPolicyStatusWithContextReturns = struct {
		result1 *s3.GetBucketPolicyStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketPolicyStatusWithContextReturnsOnCall(i int, result1 *s3.GetBucketPolicyStatusOutput, result2 error) {
	fake.getBucketPolicyStatusWithContextMutex.Lock()
	defer fake.getBucketPolicyStatusWithContextMutex.Unlock()
	fake.GetBucketPolicyStatusWithContextStub = nil
	if fake.getBucketPolicyStatusWithContextReturnsOnCall == nil {
		fake.getBucketPolicyStatusWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketPolicyStatusOutput
			result2 error
		})
	}
	fake.getBucketPolicyStatusWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketPolicyStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketPolicyWithContext(arg1 context.Context, arg2 *s3.GetBucketPolicyInput, arg3 ...request.Option) (*s3.GetBucketPolicyOutput, error) {
	fake.getBucketPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketPolicyWithContextReturnsOnCall[len(fake.getBucketPolicyWithContextArgsForCall)]
	fake.getBucketPolicyWithContextArgsForCall = append(fake.getBucketPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketPolicyWithContextMutex.Unlock()
	if fake.GetBucketPolicyWithContextStub != nil {
		return fake.GetBucketPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketPolicyWithContextCallCount() int {
	fake.getBucketPolicyWithContextMutex.RLock()
	defer fake.getBucketPolicyWithContextMutex.RUnlock()
	return len(fake.getBucketPolicyWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketPolicyWithContextCalls(stub func(context.Context, *s3.GetBucketPolicyInput, ...request.Option) (*s3.GetBucketPolicyOutput, error)) {
	fake.getBucketPolicyWithContextMutex.Lock()
	defer fake.getBucketPolicyWithContextMutex.Unlock()
	fake.GetBucketPolicyWithContextStub = stub
}

func (fake *FakeS3API) GetBucketPolicyWithContextArgsForCall(i int) (context.Context, *s3.GetBucketPolicyInput, []request.Option) {
	fake.getBucketPolicyWithContextMutex.RLock()
	defer fake.getBucketPolicyWithContextMutex.RUnlock()
	argsForCall := fake.getBucketPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketPolicyWithContextReturns(result1 *s3.GetBucketPolicyOutput, result2 error) {
	fake.getBucketPolicyWithContextMutex.Lock()
	defer fake.getBucketPolicyWithContextMutex.Unlock()
	fake.GetBucketPolicyWithContextStub = nil
	fake.getBucketPolicyWithContextReturns = struct {
		result1 *s3.GetBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketPolicyWithContextReturnsOnCall(i int, result1 *s3.GetBucketPolicyOutput, result2 error) {
	fake.getBucketPolicyWithContextMutex.Lock()
	defer fake.getBucketPolicyWithContextMutex.Unlock()
	fake.GetBucketPolicyWithContextStub = nil
	if fake.getBucketPolicyWithContextReturnsOnCall == nil {
		fake.getBucketPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketPolicyOutput
			result2 error
		})
	}
	fake.getBucketPolicyWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketReplication(arg1 *s3.GetBucketReplicationInput) (*s3.GetBucketReplicationOutput, error) {
	fake.getBucketReplicationMutex.Lock()
	ret, specificReturn := fake.getBucketReplicationReturnsOnCall[len(fake.getBucketReplicationArgsForCall)]
	fake.getBucketReplicationArgsForCall = append(fake.getBucketReplicationArgsForCall, struct {
		arg1 *s3.GetBucketReplicationInput
	}{arg1})
	fake.recordInvocation("GetBucketReplication", []interface{}{arg1})
	fake.getBucketReplicationMutex.Unlock()
	if fake.GetBucketReplicationStub != nil {
		return fake.GetBucketReplicationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketReplicationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketReplicationCallCount() int {
	fake.getBucketReplicationMutex.RLock()
	defer fake.getBucketReplicationMutex.RUnlock()
	return len(fake.getBucketReplicationArgsForCall)
}

func (fake *FakeS3API) GetBucketReplicationCalls(stub func(*s3.GetBucketReplicationInput) (*s3.GetBucketReplicationOutput, error)) {
	fake.getBucketReplicationMutex.Lock()
	defer fake.getBucketReplicationMutex.Unlock()
	fake.GetBucketReplicationStub = stub
}

func (fake *FakeS3API) GetBucketReplicationArgsForCall(i int) *s3.GetBucketReplicationInput {
	fake.getBucketReplicationMutex.RLock()
	defer fake.getBucketReplicationMutex.RUnlock()
	argsForCall := fake.getBucketReplicationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketReplicationReturns(result1 *s3.GetBucketReplicationOutput, result2 error) {
	fake.getBucketReplicationMutex.Lock()
	defer fake.getBucketReplicationMutex.Unlock()
	fake.GetBucketReplicationStub = nil
	fake.getBucketReplicationReturns = struct {
		result1 *s3.GetBucketReplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketReplicationReturnsOnCall(i int, result1 *s3.GetBucketReplicationOutput, result2 error) {
	fake.getBucketReplicationMutex.Lock()
	defer fake.getBucketReplicationMutex.Unlock()
	fake.GetBucketReplicationStub = nil
	if fake.getBucketReplicationReturnsOnCall == nil {
		fake.getBucketReplicationReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketReplicationOutput
			result2 error
		})
	}
	fake.getBucketReplicationReturnsOnCall[i] = struct {
		result1 *s3.GetBucketReplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketReplicationRequest(arg1 *s3.GetBucketReplicationInput) (*request.Request, *s3.GetBucketReplicationOutput) {
	fake.getBucketReplicationRequestMutex.Lock()
	ret, specificReturn := fake.getBucketReplicationRequestReturnsOnCall[len(fake.getBucketReplicationRequestArgsForCall)]
	fake.getBucketReplicationRequestArgsForCall = append(fake.getBucketReplicationRequestArgsForCall, struct {
		arg1 *s3.GetBucketReplicationInput
	}{arg1})
	fake.recordInvocation("GetBucketReplicationRequest", []interface{}{arg1})
	fake.getBucketReplicationRequestMutex.Unlock()
	if fake.GetBucketReplicationRequestStub != nil {
		return fake.GetBucketReplicationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketReplicationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketReplicationRequestCallCount() int {
	fake.getBucketReplicationRequestMutex.RLock()
	defer fake.getBucketReplicationRequestMutex.RUnlock()
	return len(fake.getBucketReplicationRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketReplicationRequestCalls(stub func(*s3.GetBucketReplicationInput) (*request.Request, *s3.GetBucketReplicationOutput)) {
	fake.getBucketReplicationRequestMutex.Lock()
	defer fake.getBucketReplicationRequestMutex.Unlock()
	fake.GetBucketReplicationRequestStub = stub
}

func (fake *FakeS3API) GetBucketReplicationRequestArgsForCall(i int) *s3.GetBucketReplicationInput {
	fake.getBucketReplicationRequestMutex.RLock()
	defer fake.getBucketReplicationRequestMutex.RUnlock()
	argsForCall := fake.getBucketReplicationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketReplicationRequestReturns(result1 *request.Request, result2 *s3.GetBucketReplicationOutput) {
	fake.getBucketReplicationRequestMutex.Lock()
	defer fake.getBucketReplicationRequestMutex.Unlock()
	fake.GetBucketReplicationRequestStub = nil
	fake.getBucketReplicationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketReplicationOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketReplicationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketReplicationOutput) {
	fake.getBucketReplicationRequestMutex.Lock()
	defer fake.getBucketReplicationRequestMutex.Unlock()
	fake.GetBucketReplicationRequestStub = nil
	if fake.getBucketReplicationRequestReturnsOnCall == nil {
		fake.getBucketReplicationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketReplicationOutput
		})
	}
	fake.getBucketReplicationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketReplicationOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketReplicationWithContext(arg1 context.Context, arg2 *s3.GetBucketReplicationInput, arg3 ...request.Option) (*s3.GetBucketReplicationOutput, error) {
	fake.getBucketReplicationWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketReplicationWithContextReturnsOnCall[len(fake.getBucketReplicationWithContextArgsForCall)]
	fake.getBucketReplicationWithContextArgsForCall = append(fake.getBucketReplicationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketReplicationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketReplicationWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketReplicationWithContextMutex.Unlock()
	if fake.GetBucketReplicationWithContextStub != nil {
		return fake.GetBucketReplicationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketReplicationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketReplicationWithContextCallCount() int {
	fake.getBucketReplicationWithContextMutex.RLock()
	defer fake.getBucketReplicationWithContextMutex.RUnlock()
	return len(fake.getBucketReplicationWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketReplicationWithContextCalls(stub func(context.Context, *s3.GetBucketReplicationInput, ...request.Option) (*s3.GetBucketReplicationOutput, error)) {
	fake.getBucketReplicationWithContextMutex.Lock()
	defer fake.getBucketReplicationWithContextMutex.Unlock()
	fake.GetBucketReplicationWithContextStub = stub
}

func (fake *FakeS3API) GetBucketReplicationWithContextArgsForCall(i int) (context.Context, *s3.GetBucketReplicationInput, []request.Option) {
	fake.getBucketReplicationWithContextMutex.RLock()
	defer fake.getBucketReplicationWithContextMutex.RUnlock()
	argsForCall := fake.getBucketReplicationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketReplicationWithContextReturns(result1 *s3.GetBucketReplicationOutput, result2 error) {
	fake.getBucketReplicationWithContextMutex.Lock()
	defer fake.getBucketReplicationWithContextMutex.Unlock()
	fake.GetBucketReplicationWithContextStub = nil
	fake.getBucketReplicationWithContextReturns = struct {
		result1 *s3.GetBucketReplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketReplicationWithContextReturnsOnCall(i int, result1 *s3.GetBucketReplicationOutput, result2 error) {
	fake.getBucketReplicationWithContextMutex.Lock()
	defer fake.getBucketReplicationWithContextMutex.Unlock()
	fake.GetBucketReplicationWithContextStub = nil
	if fake.getBucketReplicationWithContextReturnsOnCall == nil {
		fake.getBucketReplicationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketReplicationOutput
			result2 error
		})
	}
	fake.getBucketReplicationWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketReplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketRequestPayment(arg1 *s3.GetBucketRequestPaymentInput) (*s3.GetBucketRequestPaymentOutput, error) {
	fake.getBucketRequestPaymentMutex.Lock()
	ret, specificReturn := fake.getBucketRequestPaymentReturnsOnCall[len(fake.getBucketRequestPaymentArgsForCall)]
	fake.getBucketRequestPaymentArgsForCall = append(fake.getBucketRequestPaymentArgsForCall, struct {
		arg1 *s3.GetBucketRequestPaymentInput
	}{arg1})
	fake.recordInvocation("GetBucketRequestPayment", []interface{}{arg1})
	fake.getBucketRequestPaymentMutex.Unlock()
	if fake.GetBucketRequestPaymentStub != nil {
		return fake.GetBucketRequestPaymentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketRequestPaymentReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketRequestPaymentCallCount() int {
	fake.getBucketRequestPaymentMutex.RLock()
	defer fake.getBucketRequestPaymentMutex.RUnlock()
	return len(fake.getBucketRequestPaymentArgsForCall)
}

func (fake *FakeS3API) GetBucketRequestPaymentCalls(stub func(*s3.GetBucketRequestPaymentInput) (*s3.GetBucketRequestPaymentOutput, error)) {
	fake.getBucketRequestPaymentMutex.Lock()
	defer fake.getBucketRequestPaymentMutex.Unlock()
	fake.GetBucketRequestPaymentStub = stub
}

func (fake *FakeS3API) GetBucketRequestPaymentArgsForCall(i int) *s3.GetBucketRequestPaymentInput {
	fake.getBucketRequestPaymentMutex.RLock()
	defer fake.getBucketRequestPaymentMutex.RUnlock()
	argsForCall := fake.getBucketRequestPaymentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketRequestPaymentReturns(result1 *s3.GetBucketRequestPaymentOutput, result2 error) {
	fake.getBucketRequestPaymentMutex.Lock()
	defer fake.getBucketRequestPaymentMutex.Unlock()
	fake.GetBucketRequestPaymentStub = nil
	fake.getBucketRequestPaymentReturns = struct {
		result1 *s3.GetBucketRequestPaymentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketRequestPaymentReturnsOnCall(i int, result1 *s3.GetBucketRequestPaymentOutput, result2 error) {
	fake.getBucketRequestPaymentMutex.Lock()
	defer fake.getBucketRequestPaymentMutex.Unlock()
	fake.GetBucketRequestPaymentStub = nil
	if fake.getBucketRequestPaymentReturnsOnCall == nil {
		fake.getBucketRequestPaymentReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketRequestPaymentOutput
			result2 error
		})
	}
	fake.getBucketRequestPaymentReturnsOnCall[i] = struct {
		result1 *s3.GetBucketRequestPaymentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketRequestPaymentRequest(arg1 *s3.GetBucketRequestPaymentInput) (*request.Request, *s3.GetBucketRequestPaymentOutput) {
	fake.getBucketRequestPaymentRequestMutex.Lock()
	ret, specificReturn := fake.getBucketRequestPaymentRequestReturnsOnCall[len(fake.getBucketRequestPaymentRequestArgsForCall)]
	fake.getBucketRequestPaymentRequestArgsForCall = append(fake.getBucketRequestPaymentRequestArgsForCall, struct {
		arg1 *s3.GetBucketRequestPaymentInput
	}{arg1})
	fake.recordInvocation("GetBucketRequestPaymentRequest", []interface{}{arg1})
	fake.getBucketRequestPaymentRequestMutex.Unlock()
	if fake.GetBucketRequestPaymentRequestStub != nil {
		return fake.GetBucketRequestPaymentRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketRequestPaymentRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketRequestPaymentRequestCallCount() int {
	fake.getBucketRequestPaymentRequestMutex.RLock()
	defer fake.getBucketRequestPaymentRequestMutex.RUnlock()
	return len(fake.getBucketRequestPaymentRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketRequestPaymentRequestCalls(stub func(*s3.GetBucketRequestPaymentInput) (*request.Request, *s3.GetBucketRequestPaymentOutput)) {
	fake.getBucketRequestPaymentRequestMutex.Lock()
	defer fake.getBucketRequestPaymentRequestMutex.Unlock()
	fake.GetBucketRequestPaymentRequestStub = stub
}

func (fake *FakeS3API) GetBucketRequestPaymentRequestArgsForCall(i int) *s3.GetBucketRequestPaymentInput {
	fake.getBucketRequestPaymentRequestMutex.RLock()
	defer fake.getBucketRequestPaymentRequestMutex.RUnlock()
	argsForCall := fake.getBucketRequestPaymentRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketRequestPaymentRequestReturns(result1 *request.Request, result2 *s3.GetBucketRequestPaymentOutput) {
	fake.getBucketRequestPaymentRequestMutex.Lock()
	defer fake.getBucketRequestPaymentRequestMutex.Unlock()
	fake.GetBucketRequestPaymentRequestStub = nil
	fake.getBucketRequestPaymentRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketRequestPaymentOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketRequestPaymentRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketRequestPaymentOutput) {
	fake.getBucketRequestPaymentRequestMutex.Lock()
	defer fake.getBucketRequestPaymentRequestMutex.Unlock()
	fake.GetBucketRequestPaymentRequestStub = nil
	if fake.getBucketRequestPaymentRequestReturnsOnCall == nil {
		fake.getBucketRequestPaymentRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketRequestPaymentOutput
		})
	}
	fake.getBucketRequestPaymentRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketRequestPaymentOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketRequestPaymentWithContext(arg1 context.Context, arg2 *s3.GetBucketRequestPaymentInput, arg3 ...request.Option) (*s3.GetBucketRequestPaymentOutput, error) {
	fake.getBucketRequestPaymentWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketRequestPaymentWithContextReturnsOnCall[len(fake.getBucketRequestPaymentWithContextArgsForCall)]
	fake.getBucketRequestPaymentWithContextArgsForCall = append(fake.getBucketRequestPaymentWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketRequestPaymentInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketRequestPaymentWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketRequestPaymentWithContextMutex.Unlock()
	if fake.GetBucketRequestPaymentWithContextStub != nil {
		return fake.GetBucketRequestPaymentWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketRequestPaymentWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketRequestPaymentWithContextCallCount() int {
	fake.getBucketRequestPaymentWithContextMutex.RLock()
	defer fake.getBucketRequestPaymentWithContextMutex.RUnlock()
	return len(fake.getBucketRequestPaymentWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketRequestPaymentWithContextCalls(stub func(context.Context, *s3.GetBucketRequestPaymentInput, ...request.Option) (*s3.GetBucketRequestPaymentOutput, error)) {
	fake.getBucketRequestPaymentWithContextMutex.Lock()
	defer fake.getBucketRequestPaymentWithContextMutex.Unlock()
	fake.GetBucketRequestPaymentWithContextStub = stub
}

func (fake *FakeS3API) GetBucketRequestPaymentWithContextArgsForCall(i int) (context.Context, *s3.GetBucketRequestPaymentInput, []request.Option) {
	fake.getBucketRequestPaymentWithContextMutex.RLock()
	defer fake.getBucketRequestPaymentWithContextMutex.RUnlock()
	argsForCall := fake.getBucketRequestPaymentWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketRequestPaymentWithContextReturns(result1 *s3.GetBucketRequestPaymentOutput, result2 error) {
	fake.getBucketRequestPaymentWithContextMutex.Lock()
	defer fake.getBucketRequestPaymentWithContextMutex.Unlock()
	fake.GetBucketRequestPaymentWithContextStub = nil
	fake.getBucketRequestPaymentWithContextReturns = struct {
		result1 *s3.GetBucketRequestPaymentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketRequestPaymentWithContextReturnsOnCall(i int, result1 *s3.GetBucketRequestPaymentOutput, result2 error) {
	fake.getBucketRequestPaymentWithContextMutex.Lock()
	defer fake.getBucketRequestPaymentWithContextMutex.Unlock()
	fake.GetBucketRequestPaymentWithContextStub = nil
	if fake.getBucketRequestPaymentWithContextReturnsOnCall == nil {
		fake.getBucketRequestPaymentWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketRequestPaymentOutput
			result2 error
		})
	}
	fake.getBucketRequestPaymentWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketRequestPaymentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketTagging(arg1 *s3.GetBucketTaggingInput) (*s3.GetBucketTaggingOutput, error) {
	fake.getBucketTaggingMutex.Lock()
	ret, specificReturn := fake.getBucketTaggingReturnsOnCall[len(fake.getBucketTaggingArgsForCall)]
	fake.getBucketTaggingArgsForCall = append(fake.getBucketTaggingArgsForCall, struct {
		arg1 *s3.GetBucketTaggingInput
	}{arg1})
	fake.recordInvocation("GetBucketTagging", []interface{}{arg1})
	fake.getBucketTaggingMutex.Unlock()
	if fake.GetBucketTaggingStub != nil {
		return fake.GetBucketTaggingStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketTaggingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketTaggingCallCount() int {
	fake.getBucketTaggingMutex.RLock()
	defer fake.getBucketTaggingMutex.RUnlock()
	return len(fake.getBucketTaggingArgsForCall)
}

func (fake *FakeS3API) GetBucketTaggingCalls(stub func(*s3.GetBucketTaggingInput) (*s3.GetBucketTaggingOutput, error)) {
	fake.getBucketTaggingMutex.Lock()
	defer fake.getBucketTaggingMutex.Unlock()
	fake.GetBucketTaggingStub = stub
}

func (fake *FakeS3API) GetBucketTaggingArgsForCall(i int) *s3.GetBucketTaggingInput {
	fake.getBucketTaggingMutex.RLock()
	defer fake.getBucketTaggingMutex.RUnlock()
	argsForCall := fake.getBucketTaggingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketTaggingReturns(result1 *s3.GetBucketTaggingOutput, result2 error) {
	fake.getBucketTaggingMutex.Lock()
	defer fake.getBucketTaggingMutex.Unlock()
	fake.GetBucketTaggingStub = nil
	fake.getBucketTaggingReturns = struct {
		result1 *s3.GetBucketTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketTaggingReturnsOnCall(i int, result1 *s3.GetBucketTaggingOutput, result2 error) {
	fake.getBucketTaggingMutex.Lock()
	defer fake.getBucketTaggingMutex.Unlock()
	fake.GetBucketTaggingStub = nil
	if fake.getBucketTaggingReturnsOnCall == nil {
		fake.getBucketTaggingReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketTaggingOutput
			result2 error
		})
	}
	fake.getBucketTaggingReturnsOnCall[i] = struct {
		result1 *s3.GetBucketTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketTaggingRequest(arg1 *s3.GetBucketTaggingInput) (*request.Request, *s3.GetBucketTaggingOutput) {
	fake.getBucketTaggingRequestMutex.Lock()
	ret, specificReturn := fake.getBucketTaggingRequestReturnsOnCall[len(fake.getBucketTaggingRequestArgsForCall)]
	fake.getBucketTaggingRequestArgsForCall = append(fake.getBucketTaggingRequestArgsForCall, struct {
		arg1 *s3.GetBucketTaggingInput
	}{arg1})
	fake.recordInvocation("GetBucketTaggingRequest", []interface{}{arg1})
	fake.getBucketTaggingRequestMutex.Unlock()
	if fake.GetBucketTaggingRequestStub != nil {
		return fake.GetBucketTaggingRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketTaggingRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketTaggingRequestCallCount() int {
	fake.getBucketTaggingRequestMutex.RLock()
	defer fake.getBucketTaggingRequestMutex.RUnlock()
	return len(fake.getBucketTaggingRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketTaggingRequestCalls(stub func(*s3.GetBucketTaggingInput) (*request.Request, *s3.GetBucketTaggingOutput)) {
	fake.getBucketTaggingRequestMutex.Lock()
	defer fake.getBucketTaggingRequestMutex.Unlock()
	fake.GetBucketTaggingRequestStub = stub
}

func (fake *FakeS3API) GetBucketTaggingRequestArgsForCall(i int) *s3.GetBucketTaggingInput {
	fake.getBucketTaggingRequestMutex.RLock()
	defer fake.getBucketTaggingRequestMutex.RUnlock()
	argsForCall := fake.getBucketTaggingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketTaggingRequestReturns(result1 *request.Request, result2 *s3.GetBucketTaggingOutput) {
	fake.getBucketTaggingRequestMutex.Lock()
	defer fake.getBucketTaggingRequestMutex.Unlock()
	fake.GetBucketTaggingRequestStub = nil
	fake.getBucketTaggingRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketTaggingOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketTaggingRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketTaggingOutput) {
	fake.getBucketTaggingRequestMutex.Lock()
	defer fake.getBucketTaggingRequestMutex.Unlock()
	fake.GetBucketTaggingRequestStub = nil
	if fake.getBucketTaggingRequestReturnsOnCall == nil {
		fake.getBucketTaggingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketTaggingOutput
		})
	}
	fake.getBucketTaggingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketTaggingOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketTaggingWithContext(arg1 context.Context, arg2 *s3.GetBucketTaggingInput, arg3 ...request.Option) (*s3.GetBucketTaggingOutput, error) {
	fake.getBucketTaggingWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketTaggingWithContextReturnsOnCall[len(fake.getBucketTaggingWithContextArgsForCall)]
	fake.getBucketTaggingWithContextArgsForCall = append(fake.getBucketTaggingWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketTaggingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketTaggingWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketTaggingWithContextMutex.Unlock()
	if fake.GetBucketTaggingWithContextStub != nil {
		return fake.GetBucketTaggingWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketTaggingWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketTaggingWithContextCallCount() int {
	fake.getBucketTaggingWithContextMutex.RLock()
	defer fake.getBucketTaggingWithContextMutex.RUnlock()
	return len(fake.getBucketTaggingWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketTaggingWithContextCalls(stub func(context.Context, *s3.GetBucketTaggingInput, ...request.Option) (*s3.GetBucketTaggingOutput, error)) {
	fake.getBucketTaggingWithContextMutex.Lock()
	defer fake.getBucketTaggingWithContextMutex.Unlock()
	fake.GetBucketTaggingWithContextStub = stub
}

func (fake *FakeS3API) GetBucketTaggingWithContextArgsForCall(i int) (context.Context, *s3.GetBucketTaggingInput, []request.Option) {
	fake.getBucketTaggingWithContextMutex.RLock()
	defer fake.getBucketTaggingWithContextMutex.RUnlock()
	argsForCall := fake.getBucketTaggingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketTaggingWithContextReturns(result1 *s3.GetBucketTaggingOutput, result2 error) {
	fake.getBucketTaggingWithContextMutex.Lock()
	defer fake.getBucketTaggingWithContextMutex.Unlock()
	fake.GetBucketTaggingWithContextStub = nil
	fake.getBucketTaggingWithContextReturns = struct {
		result1 *s3.GetBucketTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketTaggingWithContextReturnsOnCall(i int, result1 *s3.GetBucketTaggingOutput, result2 error) {
	fake.getBucketTaggingWithContextMutex.Lock()
	defer fake.getBucketTaggingWithContextMutex.Unlock()
	fake.GetBucketTaggingWithContextStub = nil
	if fake.getBucketTaggingWithContextReturnsOnCall == nil {
		fake.getBucketTaggingWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketTaggingOutput
			result2 error
		})
	}
	fake.getBucketTaggingWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketVersioning(arg1 *s3.GetBucketVersioningInput) (*s3.GetBucketVersioningOutput, error) {
	fake.getBucketVersioningMutex.Lock()
	ret, specificReturn := fake.getBucketVersioningReturnsOnCall[len(fake.getBucketVersioningArgsForCall)]
	fake.getBucketVersioningArgsForCall = append(fake.getBucketVersioningArgsForCall, struct {
		arg1 *s3.GetBucketVersioningInput
	}{arg1})
	fake.recordInvocation("GetBucketVersioning", []interface{}{arg1})
	fake.getBucketVersioningMutex.Unlock()
	if fake.GetBucketVersioningStub != nil {
		return fake.GetBucketVersioningStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketVersioningReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketVersioningCallCount() int {
	fake.getBucketVersioningMutex.RLock()
	defer fake.getBucketVersioningMutex.RUnlock()
	return len(fake.getBucketVersioningArgsForCall)
}

func (fake *FakeS3API) GetBucketVersioningCalls(stub func(*s3.GetBucketVersioningInput) (*s3.GetBucketVersioningOutput, error)) {
	fake.getBucketVersioningMutex.Lock()
	defer fake.getBucketVersioningMutex.Unlock()
	fake.GetBucketVersioningStub = stub
}

func (fake *FakeS3API) GetBucketVersioningArgsForCall(i int) *s3.GetBucketVersioningInput {
	fake.getBucketVersioningMutex.RLock()
	defer fake.getBucketVersioningMutex.RUnlock()
	argsForCall := fake.getBucketVersioningArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketVersioningReturns(result1 *s3.GetBucketVersioningOutput, result2 error) {
	fake.getBucketVersioningMutex.Lock()
	defer fake.getBucketVersioningMutex.Unlock()
	fake.GetBucketVersioningStub = nil
	fake.getBucketVersioningReturns = struct {
		result1 *s3.GetBucketVersioningOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketVersioningReturnsOnCall(i int, result1 *s3.GetBucketVersioningOutput, result2 error) {
	fake.getBucketVersioningMutex.Lock()
	defer fake.getBucketVersioningMutex.Unlock()
	fake.GetBucketVersioningStub = nil
	if fake.getBucketVersioningReturnsOnCall == nil {
		fake.getBucketVersioningReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketVersioningOutput
			result2 error
		})
	}
	fake.getBucketVersioningReturnsOnCall[i] = struct {
		result1 *s3.GetBucketVersioningOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketVersioningRequest(arg1 *s3.GetBucketVersioningInput) (*request.Request, *s3.GetBucketVersioningOutput) {
	fake.getBucketVersioningRequestMutex.Lock()
	ret, specificReturn := fake.getBucketVersioningRequestReturnsOnCall[len(fake.getBucketVersioningRequestArgsForCall)]
	fake.getBucketVersioningRequestArgsForCall = append(fake.getBucketVersioningRequestArgsForCall, struct {
		arg1 *s3.GetBucketVersioningInput
	}{arg1})
	fake.recordInvocation("GetBucketVersioningRequest", []interface{}{arg1})
	fake.getBucketVersioningRequestMutex.Unlock()
	if fake.GetBucketVersioningRequestStub != nil {
		return fake.GetBucketVersioningRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketVersioningRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketVersioningRequestCallCount() int {
	fake.getBucketVersioningRequestMutex.RLock()
	defer fake.getBucketVersioningRequestMutex.RUnlock()
	return len(fake.getBucketVersioningRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketVersioningRequestCalls(stub func(*s3.GetBucketVersioningInput) (*request.Request, *s3.GetBucketVersioningOutput)) {
	fake.getBucketVersioningRequestMutex.Lock()
	defer fake.getBucketVersioningRequestMutex.Unlock()
	fake.GetBucketVersioningRequestStub = stub
}

func (fake *FakeS3API) GetBucketVersioningRequestArgsForCall(i int) *s3.GetBucketVersioningInput {
	fake.getBucketVersioningRequestMutex.RLock()
	defer fake.getBucketVersioningRequestMutex.RUnlock()
	argsForCall := fake.getBucketVersioningRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketVersioningRequestReturns(result1 *request.Request, result2 *s3.GetBucketVersioningOutput) {
	fake.getBucketVersioningRequestMutex.Lock()
	defer fake.getBucketVersioningRequestMutex.Unlock()
	fake.GetBucketVersioningRequestStub = nil
	fake.getBucketVersioningRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketVersioningOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketVersioningRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketVersioningOutput) {
	fake.getBucketVersioningRequestMutex.Lock()
	defer fake.getBucketVersioningRequestMutex.Unlock()
	fake.GetBucketVersioningRequestStub = nil
	if fake.getBucketVersioningRequestReturnsOnCall == nil {
		fake.getBucketVersioningRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketVersioningOutput
		})
	}
	fake.getBucketVersioningRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketVersioningOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketVersioningWithContext(arg1 context.Context, arg2 *s3.GetBucketVersioningInput, arg3 ...request.Option) (*s3.GetBucketVersioningOutput, error) {
	fake.getBucketVersioningWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketVersioningWithContextReturnsOnCall[len(fake.getBucketVersioningWithContextArgsForCall)]
	fake.getBucketVersioningWithContextArgsForCall = append(fake.getBucketVersioningWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketVersioningInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketVersioningWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketVersioningWithContextMutex.Unlock()
	if fake.GetBucketVersioningWithContextStub != nil {
		return fake.GetBucketVersioningWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketVersioningWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketVersioningWithContextCallCount() int {
	fake.getBucketVersioningWithContextMutex.RLock()
	defer fake.getBucketVersioningWithContextMutex.RUnlock()
	return len(fake.getBucketVersioningWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketVersioningWithContextCalls(stub func(context.Context, *s3.GetBucketVersioningInput, ...request.Option) (*s3.GetBucketVersioningOutput, error)) {
	fake.getBucketVersioningWithContextMutex.Lock()
	defer fake.getBucketVersioningWithContextMutex.Unlock()
	fake.GetBucketVersioningWithContextStub = stub
}

func (fake *FakeS3API) GetBucketVersioningWithContextArgsForCall(i int) (context.Context, *s3.GetBucketVersioningInput, []request.Option) {
	fake.getBucketVersioningWithContextMutex.RLock()
	defer fake.getBucketVersioningWithContextMutex.RUnlock()
	argsForCall := fake.getBucketVersioningWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketVersioningWithContextReturns(result1 *s3.GetBucketVersioningOutput, result2 error) {
	fake.getBucketVersioningWithContextMutex.Lock()
	defer fake.getBucketVersioningWithContextMutex.Unlock()
	fake.GetBucketVersioningWithContextStub = nil
	fake.getBucketVersioningWithContextReturns = struct {
		result1 *s3.GetBucketVersioningOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketVersioningWithContextReturnsOnCall(i int, result1 *s3.GetBucketVersioningOutput, result2 error) {
	fake.getBucketVersioningWithContextMutex.Lock()
	defer fake.getBucketVersioningWithContextMutex.Unlock()
	fake.GetBucketVersioningWithContextStub = nil
	if fake.getBucketVersioningWithContextReturnsOnCall == nil {
		fake.getBucketVersioningWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketVersioningOutput
			result2 error
		})
	}
	fake.getBucketVersioningWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketVersioningOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketWebsite(arg1 *s3.GetBucketWebsiteInput) (*s3.GetBucketWebsiteOutput, error) {
	fake.getBucketWebsiteMutex.Lock()
	ret, specificReturn := fake.getBucketWebsiteReturnsOnCall[len(fake.getBucketWebsiteArgsForCall)]
	fake.getBucketWebsiteArgsForCall = append(fake.getBucketWebsiteArgsForCall, struct {
		arg1 *s3.GetBucketWebsiteInput
	}{arg1})
	fake.recordInvocation("GetBucketWebsite", []interface{}{arg1})
	fake.getBucketWebsiteMutex.Unlock()
	if fake.GetBucketWebsiteStub != nil {
		return fake.GetBucketWebsiteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketWebsiteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketWebsiteCallCount() int {
	fake.getBucketWebsiteMutex.RLock()
	defer fake.getBucketWebsiteMutex.RUnlock()
	return len(fake.getBucketWebsiteArgsForCall)
}

func (fake *FakeS3API) GetBucketWebsiteCalls(stub func(*s3.GetBucketWebsiteInput) (*s3.GetBucketWebsiteOutput, error)) {
	fake.getBucketWebsiteMutex.Lock()
	defer fake.getBucketWebsiteMutex.Unlock()
	fake.GetBucketWebsiteStub = stub
}

func (fake *FakeS3API) GetBucketWebsiteArgsForCall(i int) *s3.GetBucketWebsiteInput {
	fake.getBucketWebsiteMutex.RLock()
	defer fake.getBucketWebsiteMutex.RUnlock()
	argsForCall := fake.getBucketWebsiteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketWebsiteReturns(result1 *s3.GetBucketWebsiteOutput, result2 error) {
	fake.getBucketWebsiteMutex.Lock()
	defer fake.getBucketWebsiteMutex.Unlock()
	fake.GetBucketWebsiteStub = nil
	fake.getBucketWebsiteReturns = struct {
		result1 *s3.GetBucketWebsiteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketWebsiteReturnsOnCall(i int, result1 *s3.GetBucketWebsiteOutput, result2 error) {
	fake.getBucketWebsiteMutex.Lock()
	defer fake.getBucketWebsiteMutex.Unlock()
	fake.GetBucketWebsiteStub = nil
	if fake.getBucketWebsiteReturnsOnCall == nil {
		fake.getBucketWebsiteReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketWebsiteOutput
			result2 error
		})
	}
	fake.getBucketWebsiteReturnsOnCall[i] = struct {
		result1 *s3.GetBucketWebsiteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketWebsiteRequest(arg1 *s3.GetBucketWebsiteInput) (*request.Request, *s3.GetBucketWebsiteOutput) {
	fake.getBucketWebsiteRequestMutex.Lock()
	ret, specificReturn := fake.getBucketWebsiteRequestReturnsOnCall[len(fake.getBucketWebsiteRequestArgsForCall)]
	fake.getBucketWebsiteRequestArgsForCall = append(fake.getBucketWebsiteRequestArgsForCall, struct {
		arg1 *s3.GetBucketWebsiteInput
	}{arg1})
	fake.recordInvocation("GetBucketWebsiteRequest", []interface{}{arg1})
	fake.getBucketWebsiteRequestMutex.Unlock()
	if fake.GetBucketWebsiteRequestStub != nil {
		return fake.GetBucketWebsiteRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketWebsiteRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketWebsiteRequestCallCount() int {
	fake.getBucketWebsiteRequestMutex.RLock()
	defer fake.getBucketWebsiteRequestMutex.RUnlock()
	return len(fake.getBucketWebsiteRequestArgsForCall)
}

func (fake *FakeS3API) GetBucketWebsiteRequestCalls(stub func(*s3.GetBucketWebsiteInput) (*request.Request, *s3.GetBucketWebsiteOutput)) {
	fake.getBucketWebsiteRequestMutex.Lock()
	defer fake.getBucketWebsiteRequestMutex.Unlock()
	fake.GetBucketWebsiteRequestStub = stub
}

func (fake *FakeS3API) GetBucketWebsiteRequestArgsForCall(i int) *s3.GetBucketWebsiteInput {
	fake.getBucketWebsiteRequestMutex.RLock()
	defer fake.getBucketWebsiteRequestMutex.RUnlock()
	argsForCall := fake.getBucketWebsiteRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetBucketWebsiteRequestReturns(result1 *request.Request, result2 *s3.GetBucketWebsiteOutput) {
	fake.getBucketWebsiteRequestMutex.Lock()
	defer fake.getBucketWebsiteRequestMutex.Unlock()
	fake.GetBucketWebsiteRequestStub = nil
	fake.getBucketWebsiteRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetBucketWebsiteOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketWebsiteRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetBucketWebsiteOutput) {
	fake.getBucketWebsiteRequestMutex.Lock()
	defer fake.getBucketWebsiteRequestMutex.Unlock()
	fake.GetBucketWebsiteRequestStub = nil
	if fake.getBucketWebsiteRequestReturnsOnCall == nil {
		fake.getBucketWebsiteRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetBucketWebsiteOutput
		})
	}
	fake.getBucketWebsiteRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetBucketWebsiteOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketWebsiteWithContext(arg1 context.Context, arg2 *s3.GetBucketWebsiteInput, arg3 ...request.Option) (*s3.GetBucketWebsiteOutput, error) {
	fake.getBucketWebsiteWithContextMutex.Lock()
	ret, specificReturn := fake.getBucketWebsiteWithContextReturnsOnCall[len(fake.getBucketWebsiteWithContextArgsForCall)]
	fake.getBucketWebsiteWithContextArgsForCall = append(fake.getBucketWebsiteWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketWebsiteInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBucketWebsiteWithContext", []interface{}{arg1, arg2, arg3})
	fake.getBucketWebsiteWithContextMutex.Unlock()
	if fake.GetBucketWebsiteWithContextStub != nil {
		return fake.GetBucketWebsiteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBucketWebsiteWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetBucketWebsiteWithContextCallCount() int {
	fake.getBucketWebsiteWithContextMutex.RLock()
	defer fake.getBucketWebsiteWithContextMutex.RUnlock()
	return len(fake.getBucketWebsiteWithContextArgsForCall)
}

func (fake *FakeS3API) GetBucketWebsiteWithContextCalls(stub func(context.Context, *s3.GetBucketWebsiteInput, ...request.Option) (*s3.GetBucketWebsiteOutput, error)) {
	fake.getBucketWebsiteWithContextMutex.Lock()
	defer fake.getBucketWebsiteWithContextMutex.Unlock()
	fake.GetBucketWebsiteWithContextStub = stub
}

func (fake *FakeS3API) GetBucketWebsiteWithContextArgsForCall(i int) (context.Context, *s3.GetBucketWebsiteInput, []request.Option) {
	fake.getBucketWebsiteWithContextMutex.RLock()
	defer fake.getBucketWebsiteWithContextMutex.RUnlock()
	argsForCall := fake.getBucketWebsiteWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetBucketWebsiteWithContextReturns(result1 *s3.GetBucketWebsiteOutput, result2 error) {
	fake.getBucketWebsiteWithContextMutex.Lock()
	defer fake.getBucketWebsiteWithContextMutex.Unlock()
	fake.GetBucketWebsiteWithContextStub = nil
	fake.getBucketWebsiteWithContextReturns = struct {
		result1 *s3.GetBucketWebsiteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetBucketWebsiteWithContextReturnsOnCall(i int, result1 *s3.GetBucketWebsiteOutput, result2 error) {
	fake.getBucketWebsiteWithContextMutex.Lock()
	defer fake.getBucketWebsiteWithContextMutex.Unlock()
	fake.GetBucketWebsiteWithContextStub = nil
	if fake.getBucketWebsiteWithContextReturnsOnCall == nil {
		fake.getBucketWebsiteWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketWebsiteOutput
			result2 error
		})
	}
	fake.getBucketWebsiteWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetBucketWebsiteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObject(arg1 *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
	fake.getObjectMutex.Lock()
	ret, specificReturn := fake.getObjectReturnsOnCall[len(fake.getObjectArgsForCall)]
	fake.getObjectArgsForCall = append(fake.getObjectArgsForCall, struct {
		arg1 *s3.GetObjectInput
	}{arg1})
	fake.recordInvocation("GetObject", []interface{}{arg1})
	fake.getObjectMutex.Unlock()
	if fake.GetObjectStub != nil {
		return fake.GetObjectStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectCallCount() int {
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	return len(fake.getObjectArgsForCall)
}

func (fake *FakeS3API) GetObjectCalls(stub func(*s3.GetObjectInput) (*s3.GetObjectOutput, error)) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = stub
}

func (fake *FakeS3API) GetObjectArgsForCall(i int) *s3.GetObjectInput {
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	argsForCall := fake.getObjectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetObjectReturns(result1 *s3.GetObjectOutput, result2 error) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = nil
	fake.getObjectReturns = struct {
		result1 *s3.GetObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectReturnsOnCall(i int, result1 *s3.GetObjectOutput, result2 error) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = nil
	if fake.getObjectReturnsOnCall == nil {
		fake.getObjectReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectOutput
			result2 error
		})
	}
	fake.getObjectReturnsOnCall[i] = struct {
		result1 *s3.GetObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectAcl(arg1 *s3.GetObjectAclInput) (*s3.GetObjectAclOutput, error) {
	fake.getObjectAclMutex.Lock()
	ret, specificReturn := fake.getObjectAclReturnsOnCall[len(fake.getObjectAclArgsForCall)]
	fake.getObjectAclArgsForCall = append(fake.getObjectAclArgsForCall, struct {
		arg1 *s3.GetObjectAclInput
	}{arg1})
	fake.recordInvocation("GetObjectAcl", []interface{}{arg1})
	fake.getObjectAclMutex.Unlock()
	if fake.GetObjectAclStub != nil {
		return fake.GetObjectAclStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectAclReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectAclCallCount() int {
	fake.getObjectAclMutex.RLock()
	defer fake.getObjectAclMutex.RUnlock()
	return len(fake.getObjectAclArgsForCall)
}

func (fake *FakeS3API) GetObjectAclCalls(stub func(*s3.GetObjectAclInput) (*s3.GetObjectAclOutput, error)) {
	fake.getObjectAclMutex.Lock()
	defer fake.getObjectAclMutex.Unlock()
	fake.GetObjectAclStub = stub
}

func (fake *FakeS3API) GetObjectAclArgsForCall(i int) *s3.GetObjectAclInput {
	fake.getObjectAclMutex.RLock()
	defer fake.getObjectAclMutex.RUnlock()
	argsForCall := fake.getObjectAclArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetObjectAclReturns(result1 *s3.GetObjectAclOutput, result2 error) {
	fake.getObjectAclMutex.Lock()
	defer fake.getObjectAclMutex.Unlock()
	fake.GetObjectAclStub = nil
	fake.getObjectAclReturns = struct {
		result1 *s3.GetObjectAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectAclReturnsOnCall(i int, result1 *s3.GetObjectAclOutput, result2 error) {
	fake.getObjectAclMutex.Lock()
	defer fake.getObjectAclMutex.Unlock()
	fake.GetObjectAclStub = nil
	if fake.getObjectAclReturnsOnCall == nil {
		fake.getObjectAclReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectAclOutput
			result2 error
		})
	}
	fake.getObjectAclReturnsOnCall[i] = struct {
		result1 *s3.GetObjectAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectAclRequest(arg1 *s3.GetObjectAclInput) (*request.Request, *s3.GetObjectAclOutput) {
	fake.getObjectAclRequestMutex.Lock()
	ret, specificReturn := fake.getObjectAclRequestReturnsOnCall[len(fake.getObjectAclRequestArgsForCall)]
	fake.getObjectAclRequestArgsForCall = append(fake.getObjectAclRequestArgsForCall, struct {
		arg1 *s3.GetObjectAclInput
	}{arg1})
	fake.recordInvocation("GetObjectAclRequest", []interface{}{arg1})
	fake.getObjectAclRequestMutex.Unlock()
	if fake.GetObjectAclRequestStub != nil {
		return fake.GetObjectAclRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectAclRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectAclRequestCallCount() int {
	fake.getObjectAclRequestMutex.RLock()
	defer fake.getObjectAclRequestMutex.RUnlock()
	return len(fake.getObjectAclRequestArgsForCall)
}

func (fake *FakeS3API) GetObjectAclRequestCalls(stub func(*s3.GetObjectAclInput) (*request.Request, *s3.GetObjectAclOutput)) {
	fake.getObjectAclRequestMutex.Lock()
	defer fake.getObjectAclRequestMutex.Unlock()
	fake.GetObjectAclRequestStub = stub
}

func (fake *FakeS3API) GetObjectAclRequestArgsForCall(i int) *s3.GetObjectAclInput {
	fake.getObjectAclRequestMutex.RLock()
	defer fake.getObjectAclRequestMutex.RUnlock()
	argsForCall := fake.getObjectAclRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetObjectAclRequestReturns(result1 *request.Request, result2 *s3.GetObjectAclOutput) {
	fake.getObjectAclRequestMutex.Lock()
	defer fake.getObjectAclRequestMutex.Unlock()
	fake.GetObjectAclRequestStub = nil
	fake.getObjectAclRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetObjectAclOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectAclRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetObjectAclOutput) {
	fake.getObjectAclRequestMutex.Lock()
	defer fake.getObjectAclRequestMutex.Unlock()
	fake.GetObjectAclRequestStub = nil
	if fake.getObjectAclRequestReturnsOnCall == nil {
		fake.getObjectAclRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetObjectAclOutput
		})
	}
	fake.getObjectAclRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetObjectAclOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectAclWithContext(arg1 context.Context, arg2 *s3.GetObjectAclInput, arg3 ...request.Option) (*s3.GetObjectAclOutput, error) {
	fake.getObjectAclWithContextMutex.Lock()
	ret, specificReturn := fake.getObjectAclWithContextReturnsOnCall[len(fake.getObjectAclWithContextArgsForCall)]
	fake.getObjectAclWithContextArgsForCall = append(fake.getObjectAclWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetObjectAclInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetObjectAclWithContext", []interface{}{arg1, arg2, arg3})
	fake.getObjectAclWithContextMutex.Unlock()
	if fake.GetObjectAclWithContextStub != nil {
		return fake.GetObjectAclWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectAclWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectAclWithContextCallCount() int {
	fake.getObjectAclWithContextMutex.RLock()
	defer fake.getObjectAclWithContextMutex.RUnlock()
	return len(fake.getObjectAclWithContextArgsForCall)
}

func (fake *FakeS3API) GetObjectAclWithContextCalls(stub func(context.Context, *s3.GetObjectAclInput, ...request.Option) (*s3.GetObjectAclOutput, error)) {
	fake.getObjectAclWithContextMutex.Lock()
	defer fake.getObjectAclWithContextMutex.Unlock()
	fake.GetObjectAclWithContextStub = stub
}

func (fake *FakeS3API) GetObjectAclWithContextArgsForCall(i int) (context.Context, *s3.GetObjectAclInput, []request.Option) {
	fake.getObjectAclWithContextMutex.RLock()
	defer fake.getObjectAclWithContextMutex.RUnlock()
	argsForCall := fake.getObjectAclWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetObjectAclWithContextReturns(result1 *s3.GetObjectAclOutput, result2 error) {
	fake.getObjectAclWithContextMutex.Lock()
	defer fake.getObjectAclWithContextMutex.Unlock()
	fake.GetObjectAclWithContextStub = nil
	fake.getObjectAclWithContextReturns = struct {
		result1 *s3.GetObjectAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectAclWithContextReturnsOnCall(i int, result1 *s3.GetObjectAclOutput, result2 error) {
	fake.getObjectAclWithContextMutex.Lock()
	defer fake.getObjectAclWithContextMutex.Unlock()
	fake.GetObjectAclWithContextStub = nil
	if fake.getObjectAclWithContextReturnsOnCall == nil {
		fake.getObjectAclWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectAclOutput
			result2 error
		})
	}
	fake.getObjectAclWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetObjectAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectLegalHold(arg1 *s3.GetObjectLegalHoldInput) (*s3.GetObjectLegalHoldOutput, error) {
	fake.getObjectLegalHoldMutex.Lock()
	ret, specificReturn := fake.getObjectLegalHoldReturnsOnCall[len(fake.getObjectLegalHoldArgsForCall)]
	fake.getObjectLegalHoldArgsForCall = append(fake.getObjectLegalHoldArgsForCall, struct {
		arg1 *s3.GetObjectLegalHoldInput
	}{arg1})
	fake.recordInvocation("GetObjectLegalHold", []interface{}{arg1})
	fake.getObjectLegalHoldMutex.Unlock()
	if fake.GetObjectLegalHoldStub != nil {
		return fake.GetObjectLegalHoldStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectLegalHoldReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectLegalHoldCallCount() int {
	fake.getObjectLegalHoldMutex.RLock()
	defer fake.getObjectLegalHoldMutex.RUnlock()
	return len(fake.getObjectLegalHoldArgsForCall)
}

func (fake *FakeS3API) GetObjectLegalHoldCalls(stub func(*s3.GetObjectLegalHoldInput) (*s3.GetObjectLegalHoldOutput, error)) {
	fake.getObjectLegalHoldMutex.Lock()
	defer fake.getObjectLegalHoldMutex.Unlock()
	fake.GetObjectLegalHoldStub = stub
}

func (fake *FakeS3API) GetObjectLegalHoldArgsForCall(i int) *s3.GetObjectLegalHoldInput {
	fake.getObjectLegalHoldMutex.RLock()
	defer fake.getObjectLegalHoldMutex.RUnlock()
	argsForCall := fake.getObjectLegalHoldArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetObjectLegalHoldReturns(result1 *s3.GetObjectLegalHoldOutput, result2 error) {
	fake.getObjectLegalHoldMutex.Lock()
	defer fake.getObjectLegalHoldMutex.Unlock()
	fake.GetObjectLegalHoldStub = nil
	fake.getObjectLegalHoldReturns = struct {
		result1 *s3.GetObjectLegalHoldOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectLegalHoldReturnsOnCall(i int, result1 *s3.GetObjectLegalHoldOutput, result2 error) {
	fake.getObjectLegalHoldMutex.Lock()
	defer fake.getObjectLegalHoldMutex.Unlock()
	fake.GetObjectLegalHoldStub = nil
	if fake.getObjectLegalHoldReturnsOnCall == nil {
		fake.getObjectLegalHoldReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectLegalHoldOutput
			result2 error
		})
	}
	fake.getObjectLegalHoldReturnsOnCall[i] = struct {
		result1 *s3.GetObjectLegalHoldOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectLegalHoldRequest(arg1 *s3.GetObjectLegalHoldInput) (*request.Request, *s3.GetObjectLegalHoldOutput) {
	fake.getObjectLegalHoldRequestMutex.Lock()
	ret, specificReturn := fake.getObjectLegalHoldRequestReturnsOnCall[len(fake.getObjectLegalHoldRequestArgsForCall)]
	fake.getObjectLegalHoldRequestArgsForCall = append(fake.getObjectLegalHoldRequestArgsForCall, struct {
		arg1 *s3.GetObjectLegalHoldInput
	}{arg1})
	fake.recordInvocation("GetObjectLegalHoldRequest", []interface{}{arg1})
	fake.getObjectLegalHoldRequestMutex.Unlock()
	if fake.GetObjectLegalHoldRequestStub != nil {
		return fake.GetObjectLegalHoldRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectLegalHoldRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectLegalHoldRequestCallCount() int {
	fake.getObjectLegalHoldRequestMutex.RLock()
	defer fake.getObjectLegalHoldRequestMutex.RUnlock()
	return len(fake.getObjectLegalHoldRequestArgsForCall)
}

func (fake *FakeS3API) GetObjectLegalHoldRequestCalls(stub func(*s3.GetObjectLegalHoldInput) (*request.Request, *s3.GetObjectLegalHoldOutput)) {
	fake.getObjectLegalHoldRequestMutex.Lock()
	defer fake.getObjectLegalHoldRequestMutex.Unlock()
	fake.GetObjectLegalHoldRequestStub = stub
}

func (fake *FakeS3API) GetObjectLegalHoldRequestArgsForCall(i int) *s3.GetObjectLegalHoldInput {
	fake.getObjectLegalHoldRequestMutex.RLock()
	defer fake.getObjectLegalHoldRequestMutex.RUnlock()
	argsForCall := fake.getObjectLegalHoldRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetObjectLegalHoldRequestReturns(result1 *request.Request, result2 *s3.GetObjectLegalHoldOutput) {
	fake.getObjectLegalHoldRequestMutex.Lock()
	defer fake.getObjectLegalHoldRequestMutex.Unlock()
	fake.GetObjectLegalHoldRequestStub = nil
	fake.getObjectLegalHoldRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetObjectLegalHoldOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectLegalHoldRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetObjectLegalHoldOutput) {
	fake.getObjectLegalHoldRequestMutex.Lock()
	defer fake.getObjectLegalHoldRequestMutex.Unlock()
	fake.GetObjectLegalHoldRequestStub = nil
	if fake.getObjectLegalHoldRequestReturnsOnCall == nil {
		fake.getObjectLegalHoldRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetObjectLegalHoldOutput
		})
	}
	fake.getObjectLegalHoldRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetObjectLegalHoldOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectLegalHoldWithContext(arg1 context.Context, arg2 *s3.GetObjectLegalHoldInput, arg3 ...request.Option) (*s3.GetObjectLegalHoldOutput, error) {
	fake.getObjectLegalHoldWithContextMutex.Lock()
	ret, specificReturn := fake.getObjectLegalHoldWithContextReturnsOnCall[len(fake.getObjectLegalHoldWithContextArgsForCall)]
	fake.getObjectLegalHoldWithContextArgsForCall = append(fake.getObjectLegalHoldWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetObjectLegalHoldInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetObjectLegalHoldWithContext", []interface{}{arg1, arg2, arg3})
	fake.getObjectLegalHoldWithContextMutex.Unlock()
	if fake.GetObjectLegalHoldWithContextStub != nil {
		return fake.GetObjectLegalHoldWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectLegalHoldWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectLegalHoldWithContextCallCount() int {
	fake.getObjectLegalHoldWithContextMutex.RLock()
	defer fake.getObjectLegalHoldWithContextMutex.RUnlock()
	return len(fake.getObjectLegalHoldWithContextArgsForCall)
}

func (fake *FakeS3API) GetObjectLegalHoldWithContextCalls(stub func(context.Context, *s3.GetObjectLegalHoldInput, ...request.Option) (*s3.GetObjectLegalHoldOutput, error)) {
	fake.getObjectLegalHoldWithContextMutex.Lock()
	defer fake.getObjectLegalHoldWithContextMutex.Unlock()
	fake.GetObjectLegalHoldWithContextStub = stub
}

func (fake *FakeS3API) GetObjectLegalHoldWithContextArgsForCall(i int) (context.Context, *s3.GetObjectLegalHoldInput, []request.Option) {
	fake.getObjectLegalHoldWithContextMutex.RLock()
	defer fake.getObjectLegalHoldWithContextMutex.RUnlock()
	argsForCall := fake.getObjectLegalHoldWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetObjectLegalHoldWithContextReturns(result1 *s3.GetObjectLegalHoldOutput, result2 error) {
	fake.getObjectLegalHoldWithContextMutex.Lock()
	defer fake.getObjectLegalHoldWithContextMutex.Unlock()
	fake.GetObjectLegalHoldWithContextStub = nil
	fake.getObjectLegalHoldWithContextReturns = struct {
		result1 *s3.GetObjectLegalHoldOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectLegalHoldWithContextReturnsOnCall(i int, result1 *s3.GetObjectLegalHoldOutput, result2 error) {
	fake.getObjectLegalHoldWithContextMutex.Lock()
	defer fake.getObjectLegalHoldWithContextMutex.Unlock()
	fake.GetObjectLegalHoldWithContextStub = nil
	if fake.getObjectLegalHoldWithContextReturnsOnCall == nil {
		fake.getObjectLegalHoldWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectLegalHoldOutput
			result2 error
		})
	}
	fake.getObjectLegalHoldWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetObjectLegalHoldOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectLockConfiguration(arg1 *s3.GetObjectLockConfigurationInput) (*s3.GetObjectLockConfigurationOutput, error) {
	fake.getObjectLockConfigurationMutex.Lock()
	ret, specificReturn := fake.getObjectLockConfigurationReturnsOnCall[len(fake.getObjectLockConfigurationArgsForCall)]
	fake.getObjectLockConfigurationArgsForCall = append(fake.getObjectLockConfigurationArgsForCall, struct {
		arg1 *s3.GetObjectLockConfigurationInput
	}{arg1})
	fake.recordInvocation("GetObjectLockConfiguration", []interface{}{arg1})
	fake.getObjectLockConfigurationMutex.Unlock()
	if fake.GetObjectLockConfigurationStub != nil {
		return fake.GetObjectLockConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectLockConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectLockConfigurationCallCount() int {
	fake.getObjectLockConfigurationMutex.RLock()
	defer fake.getObjectLockConfigurationMutex.RUnlock()
	return len(fake.getObjectLockConfigurationArgsForCall)
}

func (fake *FakeS3API) GetObjectLockConfigurationCalls(stub func(*s3.GetObjectLockConfigurationInput) (*s3.GetObjectLockConfigurationOutput, error)) {
	fake.getObjectLockConfigurationMutex.Lock()
	defer fake.getObjectLockConfigurationMutex.Unlock()
	fake.GetObjectLockConfigurationStub = stub
}

func (fake *FakeS3API) GetObjectLockConfigurationArgsForCall(i int) *s3.GetObjectLockConfigurationInput {
	fake.getObjectLockConfigurationMutex.RLock()
	defer fake.getObjectLockConfigurationMutex.RUnlock()
	argsForCall := fake.getObjectLockConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetObjectLockConfigurationReturns(result1 *s3.GetObjectLockConfigurationOutput, result2 error) {
	fake.getObjectLockConfigurationMutex.Lock()
	defer fake.getObjectLockConfigurationMutex.Unlock()
	fake.GetObjectLockConfigurationStub = nil
	fake.getObjectLockConfigurationReturns = struct {
		result1 *s3.GetObjectLockConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectLockConfigurationReturnsOnCall(i int, result1 *s3.GetObjectLockConfigurationOutput, result2 error) {
	fake.getObjectLockConfigurationMutex.Lock()
	defer fake.getObjectLockConfigurationMutex.Unlock()
	fake.GetObjectLockConfigurationStub = nil
	if fake.getObjectLockConfigurationReturnsOnCall == nil {
		fake.getObjectLockConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectLockConfigurationOutput
			result2 error
		})
	}
	fake.getObjectLockConfigurationReturnsOnCall[i] = struct {
		result1 *s3.GetObjectLockConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectLockConfigurationRequest(arg1 *s3.GetObjectLockConfigurationInput) (*request.Request, *s3.GetObjectLockConfigurationOutput) {
	fake.getObjectLockConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.getObjectLockConfigurationRequestReturnsOnCall[len(fake.getObjectLockConfigurationRequestArgsForCall)]
	fake.getObjectLockConfigurationRequestArgsForCall = append(fake.getObjectLockConfigurationRequestArgsForCall, struct {
		arg1 *s3.GetObjectLockConfigurationInput
	}{arg1})
	fake.recordInvocation("GetObjectLockConfigurationRequest", []interface{}{arg1})
	fake.getObjectLockConfigurationRequestMutex.Unlock()
	if fake.GetObjectLockConfigurationRequestStub != nil {
		return fake.GetObjectLockConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectLockConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectLockConfigurationRequestCallCount() int {
	fake.getObjectLockConfigurationRequestMutex.RLock()
	defer fake.getObjectLockConfigurationRequestMutex.RUnlock()
	return len(fake.getObjectLockConfigurationRequestArgsForCall)
}

func (fake *FakeS3API) GetObjectLockConfigurationRequestCalls(stub func(*s3.GetObjectLockConfigurationInput) (*request.Request, *s3.GetObjectLockConfigurationOutput)) {
	fake.getObjectLockConfigurationRequestMutex.Lock()
	defer fake.getObjectLockConfigurationRequestMutex.Unlock()
	fake.GetObjectLockConfigurationRequestStub = stub
}

func (fake *FakeS3API) GetObjectLockConfigurationRequestArgsForCall(i int) *s3.GetObjectLockConfigurationInput {
	fake.getObjectLockConfigurationRequestMutex.RLock()
	defer fake.getObjectLockConfigurationRequestMutex.RUnlock()
	argsForCall := fake.getObjectLockConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetObjectLockConfigurationRequestReturns(result1 *request.Request, result2 *s3.GetObjectLockConfigurationOutput) {
	fake.getObjectLockConfigurationRequestMutex.Lock()
	defer fake.getObjectLockConfigurationRequestMutex.Unlock()
	fake.GetObjectLockConfigurationRequestStub = nil
	fake.getObjectLockConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetObjectLockConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectLockConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetObjectLockConfigurationOutput) {
	fake.getObjectLockConfigurationRequestMutex.Lock()
	defer fake.getObjectLockConfigurationRequestMutex.Unlock()
	fake.GetObjectLockConfigurationRequestStub = nil
	if fake.getObjectLockConfigurationRequestReturnsOnCall == nil {
		fake.getObjectLockConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetObjectLockConfigurationOutput
		})
	}
	fake.getObjectLockConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetObjectLockConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectLockConfigurationWithContext(arg1 context.Context, arg2 *s3.GetObjectLockConfigurationInput, arg3 ...request.Option) (*s3.GetObjectLockConfigurationOutput, error) {
	fake.getObjectLockConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.getObjectLockConfigurationWithContextReturnsOnCall[len(fake.getObjectLockConfigurationWithContextArgsForCall)]
	fake.getObjectLockConfigurationWithContextArgsForCall = append(fake.getObjectLockConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetObjectLockConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetObjectLockConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.getObjectLockConfigurationWithContextMutex.Unlock()
	if fake.GetObjectLockConfigurationWithContextStub != nil {
		return fake.GetObjectLockConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectLockConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectLockConfigurationWithContextCallCount() int {
	fake.getObjectLockConfigurationWithContextMutex.RLock()
	defer fake.getObjectLockConfigurationWithContextMutex.RUnlock()
	return len(fake.getObjectLockConfigurationWithContextArgsForCall)
}

func (fake *FakeS3API) GetObjectLockConfigurationWithContextCalls(stub func(context.Context, *s3.GetObjectLockConfigurationInput, ...request.Option) (*s3.GetObjectLockConfigurationOutput, error)) {
	fake.getObjectLockConfigurationWithContextMutex.Lock()
	defer fake.getObjectLockConfigurationWithContextMutex.Unlock()
	fake.GetObjectLockConfigurationWithContextStub = stub
}

func (fake *FakeS3API) GetObjectLockConfigurationWithContextArgsForCall(i int) (context.Context, *s3.GetObjectLockConfigurationInput, []request.Option) {
	fake.getObjectLockConfigurationWithContextMutex.RLock()
	defer fake.getObjectLockConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.getObjectLockConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetObjectLockConfigurationWithContextReturns(result1 *s3.GetObjectLockConfigurationOutput, result2 error) {
	fake.getObjectLockConfigurationWithContextMutex.Lock()
	defer fake.getObjectLockConfigurationWithContextMutex.Unlock()
	fake.GetObjectLockConfigurationWithContextStub = nil
	fake.getObjectLockConfigurationWithContextReturns = struct {
		result1 *s3.GetObjectLockConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectLockConfigurationWithContextReturnsOnCall(i int, result1 *s3.GetObjectLockConfigurationOutput, result2 error) {
	fake.getObjectLockConfigurationWithContextMutex.Lock()
	defer fake.getObjectLockConfigurationWithContextMutex.Unlock()
	fake.GetObjectLockConfigurationWithContextStub = nil
	if fake.getObjectLockConfigurationWithContextReturnsOnCall == nil {
		fake.getObjectLockConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectLockConfigurationOutput
			result2 error
		})
	}
	fake.getObjectLockConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetObjectLockConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectRequest(arg1 *s3.GetObjectInput) (*request.Request, *s3.GetObjectOutput) {
	fake.getObjectRequestMutex.Lock()
	ret, specificReturn := fake.getObjectRequestReturnsOnCall[len(fake.getObjectRequestArgsForCall)]
	fake.getObjectRequestArgsForCall = append(fake.getObjectRequestArgsForCall, struct {
		arg1 *s3.GetObjectInput
	}{arg1})
	fake.recordInvocation("GetObjectRequest", []interface{}{arg1})
	fake.getObjectRequestMutex.Unlock()
	if fake.GetObjectRequestStub != nil {
		return fake.GetObjectRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectRequestCallCount() int {
	fake.getObjectRequestMutex.RLock()
	defer fake.getObjectRequestMutex.RUnlock()
	return len(fake.getObjectRequestArgsForCall)
}

func (fake *FakeS3API) GetObjectRequestCalls(stub func(*s3.GetObjectInput) (*request.Request, *s3.GetObjectOutput)) {
	fake.getObjectRequestMutex.Lock()
	defer fake.getObjectRequestMutex.Unlock()
	fake.GetObjectRequestStub = stub
}

func (fake *FakeS3API) GetObjectRequestArgsForCall(i int) *s3.GetObjectInput {
	fake.getObjectRequestMutex.RLock()
	defer fake.getObjectRequestMutex.RUnlock()
	argsForCall := fake.getObjectRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetObjectRequestReturns(result1 *request.Request, result2 *s3.GetObjectOutput) {
	fake.getObjectRequestMutex.Lock()
	defer fake.getObjectRequestMutex.Unlock()
	fake.GetObjectRequestStub = nil
	fake.getObjectRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetObjectOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetObjectOutput) {
	fake.getObjectRequestMutex.Lock()
	defer fake.getObjectRequestMutex.Unlock()
	fake.GetObjectRequestStub = nil
	if fake.getObjectRequestReturnsOnCall == nil {
		fake.getObjectRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetObjectOutput
		})
	}
	fake.getObjectRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetObjectOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectRetention(arg1 *s3.GetObjectRetentionInput) (*s3.GetObjectRetentionOutput, error) {
	fake.getObjectRetentionMutex.Lock()
	ret, specificReturn := fake.getObjectRetentionReturnsOnCall[len(fake.getObjectRetentionArgsForCall)]
	fake.getObjectRetentionArgsForCall = append(fake.getObjectRetentionArgsForCall, struct {
		arg1 *s3.GetObjectRetentionInput
	}{arg1})
	fake.recordInvocation("GetObjectRetention", []interface{}{arg1})
	fake.getObjectRetentionMutex.Unlock()
	if fake.GetObjectRetentionStub != nil {
		return fake.GetObjectRetentionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectRetentionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectRetentionCallCount() int {
	fake.getObjectRetentionMutex.RLock()
	defer fake.getObjectRetentionMutex.RUnlock()
	return len(fake.getObjectRetentionArgsForCall)
}

func (fake *FakeS3API) GetObjectRetentionCalls(stub func(*s3.GetObjectRetentionInput) (*s3.GetObjectRetentionOutput, error)) {
	fake.getObjectRetentionMutex.Lock()
	defer fake.getObjectRetentionMutex.Unlock()
	fake.GetObjectRetentionStub = stub
}

func (fake *FakeS3API) GetObjectRetentionArgsForCall(i int) *s3.GetObjectRetentionInput {
	fake.getObjectRetentionMutex.RLock()
	defer fake.getObjectRetentionMutex.RUnlock()
	argsForCall := fake.getObjectRetentionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetObjectRetentionReturns(result1 *s3.GetObjectRetentionOutput, result2 error) {
	fake.getObjectRetentionMutex.Lock()
	defer fake.getObjectRetentionMutex.Unlock()
	fake.GetObjectRetentionStub = nil
	fake.getObjectRetentionReturns = struct {
		result1 *s3.GetObjectRetentionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectRetentionReturnsOnCall(i int, result1 *s3.GetObjectRetentionOutput, result2 error) {
	fake.getObjectRetentionMutex.Lock()
	defer fake.getObjectRetentionMutex.Unlock()
	fake.GetObjectRetentionStub = nil
	if fake.getObjectRetentionReturnsOnCall == nil {
		fake.getObjectRetentionReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectRetentionOutput
			result2 error
		})
	}
	fake.getObjectRetentionReturnsOnCall[i] = struct {
		result1 *s3.GetObjectRetentionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectRetentionRequest(arg1 *s3.GetObjectRetentionInput) (*request.Request, *s3.GetObjectRetentionOutput) {
	fake.getObjectRetentionRequestMutex.Lock()
	ret, specificReturn := fake.getObjectRetentionRequestReturnsOnCall[len(fake.getObjectRetentionRequestArgsForCall)]
	fake.getObjectRetentionRequestArgsForCall = append(fake.getObjectRetentionRequestArgsForCall, struct {
		arg1 *s3.GetObjectRetentionInput
	}{arg1})
	fake.recordInvocation("GetObjectRetentionRequest", []interface{}{arg1})
	fake.getObjectRetentionRequestMutex.Unlock()
	if fake.GetObjectRetentionRequestStub != nil {
		return fake.GetObjectRetentionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectRetentionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectRetentionRequestCallCount() int {
	fake.getObjectRetentionRequestMutex.RLock()
	defer fake.getObjectRetentionRequestMutex.RUnlock()
	return len(fake.getObjectRetentionRequestArgsForCall)
}

func (fake *FakeS3API) GetObjectRetentionRequestCalls(stub func(*s3.GetObjectRetentionInput) (*request.Request, *s3.GetObjectRetentionOutput)) {
	fake.getObjectRetentionRequestMutex.Lock()
	defer fake.getObjectRetentionRequestMutex.Unlock()
	fake.GetObjectRetentionRequestStub = stub
}

func (fake *FakeS3API) GetObjectRetentionRequestArgsForCall(i int) *s3.GetObjectRetentionInput {
	fake.getObjectRetentionRequestMutex.RLock()
	defer fake.getObjectRetentionRequestMutex.RUnlock()
	argsForCall := fake.getObjectRetentionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetObjectRetentionRequestReturns(result1 *request.Request, result2 *s3.GetObjectRetentionOutput) {
	fake.getObjectRetentionRequestMutex.Lock()
	defer fake.getObjectRetentionRequestMutex.Unlock()
	fake.GetObjectRetentionRequestStub = nil
	fake.getObjectRetentionRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetObjectRetentionOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectRetentionRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetObjectRetentionOutput) {
	fake.getObjectRetentionRequestMutex.Lock()
	defer fake.getObjectRetentionRequestMutex.Unlock()
	fake.GetObjectRetentionRequestStub = nil
	if fake.getObjectRetentionRequestReturnsOnCall == nil {
		fake.getObjectRetentionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetObjectRetentionOutput
		})
	}
	fake.getObjectRetentionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetObjectRetentionOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectRetentionWithContext(arg1 context.Context, arg2 *s3.GetObjectRetentionInput, arg3 ...request.Option) (*s3.GetObjectRetentionOutput, error) {
	fake.getObjectRetentionWithContextMutex.Lock()
	ret, specificReturn := fake.getObjectRetentionWithContextReturnsOnCall[len(fake.getObjectRetentionWithContextArgsForCall)]
	fake.getObjectRetentionWithContextArgsForCall = append(fake.getObjectRetentionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetObjectRetentionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetObjectRetentionWithContext", []interface{}{arg1, arg2, arg3})
	fake.getObjectRetentionWithContextMutex.Unlock()
	if fake.GetObjectRetentionWithContextStub != nil {
		return fake.GetObjectRetentionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectRetentionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectRetentionWithContextCallCount() int {
	fake.getObjectRetentionWithContextMutex.RLock()
	defer fake.getObjectRetentionWithContextMutex.RUnlock()
	return len(fake.getObjectRetentionWithContextArgsForCall)
}

func (fake *FakeS3API) GetObjectRetentionWithContextCalls(stub func(context.Context, *s3.GetObjectRetentionInput, ...request.Option) (*s3.GetObjectRetentionOutput, error)) {
	fake.getObjectRetentionWithContextMutex.Lock()
	defer fake.getObjectRetentionWithContextMutex.Unlock()
	fake.GetObjectRetentionWithContextStub = stub
}

func (fake *FakeS3API) GetObjectRetentionWithContextArgsForCall(i int) (context.Context, *s3.GetObjectRetentionInput, []request.Option) {
	fake.getObjectRetentionWithContextMutex.RLock()
	defer fake.getObjectRetentionWithContextMutex.RUnlock()
	argsForCall := fake.getObjectRetentionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetObjectRetentionWithContextReturns(result1 *s3.GetObjectRetentionOutput, result2 error) {
	fake.getObjectRetentionWithContextMutex.Lock()
	defer fake.getObjectRetentionWithContextMutex.Unlock()
	fake.GetObjectRetentionWithContextStub = nil
	fake.getObjectRetentionWithContextReturns = struct {
		result1 *s3.GetObjectRetentionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectRetentionWithContextReturnsOnCall(i int, result1 *s3.GetObjectRetentionOutput, result2 error) {
	fake.getObjectRetentionWithContextMutex.Lock()
	defer fake.getObjectRetentionWithContextMutex.Unlock()
	fake.GetObjectRetentionWithContextStub = nil
	if fake.getObjectRetentionWithContextReturnsOnCall == nil {
		fake.getObjectRetentionWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectRetentionOutput
			result2 error
		})
	}
	fake.getObjectRetentionWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetObjectRetentionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectTagging(arg1 *s3.GetObjectTaggingInput) (*s3.GetObjectTaggingOutput, error) {
	fake.getObjectTaggingMutex.Lock()
	ret, specificReturn := fake.getObjectTaggingReturnsOnCall[len(fake.getObjectTaggingArgsForCall)]
	fake.getObjectTaggingArgsForCall = append(fake.getObjectTaggingArgsForCall, struct {
		arg1 *s3.GetObjectTaggingInput
	}{arg1})
	fake.recordInvocation("GetObjectTagging", []interface{}{arg1})
	fake.getObjectTaggingMutex.Unlock()
	if fake.GetObjectTaggingStub != nil {
		return fake.GetObjectTaggingStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectTaggingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectTaggingCallCount() int {
	fake.getObjectTaggingMutex.RLock()
	defer fake.getObjectTaggingMutex.RUnlock()
	return len(fake.getObjectTaggingArgsForCall)
}

func (fake *FakeS3API) GetObjectTaggingCalls(stub func(*s3.GetObjectTaggingInput) (*s3.GetObjectTaggingOutput, error)) {
	fake.getObjectTaggingMutex.Lock()
	defer fake.getObjectTaggingMutex.Unlock()
	fake.GetObjectTaggingStub = stub
}

func (fake *FakeS3API) GetObjectTaggingArgsForCall(i int) *s3.GetObjectTaggingInput {
	fake.getObjectTaggingMutex.RLock()
	defer fake.getObjectTaggingMutex.RUnlock()
	argsForCall := fake.getObjectTaggingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetObjectTaggingReturns(result1 *s3.GetObjectTaggingOutput, result2 error) {
	fake.getObjectTaggingMutex.Lock()
	defer fake.getObjectTaggingMutex.Unlock()
	fake.GetObjectTaggingStub = nil
	fake.getObjectTaggingReturns = struct {
		result1 *s3.GetObjectTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectTaggingReturnsOnCall(i int, result1 *s3.GetObjectTaggingOutput, result2 error) {
	fake.getObjectTaggingMutex.Lock()
	defer fake.getObjectTaggingMutex.Unlock()
	fake.GetObjectTaggingStub = nil
	if fake.getObjectTaggingReturnsOnCall == nil {
		fake.getObjectTaggingReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectTaggingOutput
			result2 error
		})
	}
	fake.getObjectTaggingReturnsOnCall[i] = struct {
		result1 *s3.GetObjectTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectTaggingRequest(arg1 *s3.GetObjectTaggingInput) (*request.Request, *s3.GetObjectTaggingOutput) {
	fake.getObjectTaggingRequestMutex.Lock()
	ret, specificReturn := fake.getObjectTaggingRequestReturnsOnCall[len(fake.getObjectTaggingRequestArgsForCall)]
	fake.getObjectTaggingRequestArgsForCall = append(fake.getObjectTaggingRequestArgsForCall, struct {
		arg1 *s3.GetObjectTaggingInput
	}{arg1})
	fake.recordInvocation("GetObjectTaggingRequest", []interface{}{arg1})
	fake.getObjectTaggingRequestMutex.Unlock()
	if fake.GetObjectTaggingRequestStub != nil {
		return fake.GetObjectTaggingRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectTaggingRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectTaggingRequestCallCount() int {
	fake.getObjectTaggingRequestMutex.RLock()
	defer fake.getObjectTaggingRequestMutex.RUnlock()
	return len(fake.getObjectTaggingRequestArgsForCall)
}

func (fake *FakeS3API) GetObjectTaggingRequestCalls(stub func(*s3.GetObjectTaggingInput) (*request.Request, *s3.GetObjectTaggingOutput)) {
	fake.getObjectTaggingRequestMutex.Lock()
	defer fake.getObjectTaggingRequestMutex.Unlock()
	fake.GetObjectTaggingRequestStub = stub
}

func (fake *FakeS3API) GetObjectTaggingRequestArgsForCall(i int) *s3.GetObjectTaggingInput {
	fake.getObjectTaggingRequestMutex.RLock()
	defer fake.getObjectTaggingRequestMutex.RUnlock()
	argsForCall := fake.getObjectTaggingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetObjectTaggingRequestReturns(result1 *request.Request, result2 *s3.GetObjectTaggingOutput) {
	fake.getObjectTaggingRequestMutex.Lock()
	defer fake.getObjectTaggingRequestMutex.Unlock()
	fake.GetObjectTaggingRequestStub = nil
	fake.getObjectTaggingRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetObjectTaggingOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectTaggingRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetObjectTaggingOutput) {
	fake.getObjectTaggingRequestMutex.Lock()
	defer fake.getObjectTaggingRequestMutex.Unlock()
	fake.GetObjectTaggingRequestStub = nil
	if fake.getObjectTaggingRequestReturnsOnCall == nil {
		fake.getObjectTaggingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetObjectTaggingOutput
		})
	}
	fake.getObjectTaggingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetObjectTaggingOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectTaggingWithContext(arg1 context.Context, arg2 *s3.GetObjectTaggingInput, arg3 ...request.Option) (*s3.GetObjectTaggingOutput, error) {
	fake.getObjectTaggingWithContextMutex.Lock()
	ret, specificReturn := fake.getObjectTaggingWithContextReturnsOnCall[len(fake.getObjectTaggingWithContextArgsForCall)]
	fake.getObjectTaggingWithContextArgsForCall = append(fake.getObjectTaggingWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetObjectTaggingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetObjectTaggingWithContext", []interface{}{arg1, arg2, arg3})
	fake.getObjectTaggingWithContextMutex.Unlock()
	if fake.GetObjectTaggingWithContextStub != nil {
		return fake.GetObjectTaggingWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectTaggingWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectTaggingWithContextCallCount() int {
	fake.getObjectTaggingWithContextMutex.RLock()
	defer fake.getObjectTaggingWithContextMutex.RUnlock()
	return len(fake.getObjectTaggingWithContextArgsForCall)
}

func (fake *FakeS3API) GetObjectTaggingWithContextCalls(stub func(context.Context, *s3.GetObjectTaggingInput, ...request.Option) (*s3.GetObjectTaggingOutput, error)) {
	fake.getObjectTaggingWithContextMutex.Lock()
	defer fake.getObjectTaggingWithContextMutex.Unlock()
	fake.GetObjectTaggingWithContextStub = stub
}

func (fake *FakeS3API) GetObjectTaggingWithContextArgsForCall(i int) (context.Context, *s3.GetObjectTaggingInput, []request.Option) {
	fake.getObjectTaggingWithContextMutex.RLock()
	defer fake.getObjectTaggingWithContextMutex.RUnlock()
	argsForCall := fake.getObjectTaggingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetObjectTaggingWithContextReturns(result1 *s3.GetObjectTaggingOutput, result2 error) {
	fake.getObjectTaggingWithContextMutex.Lock()
	defer fake.getObjectTaggingWithContextMutex.Unlock()
	fake.GetObjectTaggingWithContextStub = nil
	fake.getObjectTaggingWithContextReturns = struct {
		result1 *s3.GetObjectTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectTaggingWithContextReturnsOnCall(i int, result1 *s3.GetObjectTaggingOutput, result2 error) {
	fake.getObjectTaggingWithContextMutex.Lock()
	defer fake.getObjectTaggingWithContextMutex.Unlock()
	fake.GetObjectTaggingWithContextStub = nil
	if fake.getObjectTaggingWithContextReturnsOnCall == nil {
		fake.getObjectTaggingWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectTaggingOutput
			result2 error
		})
	}
	fake.getObjectTaggingWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetObjectTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectTorrent(arg1 *s3.GetObjectTorrentInput) (*s3.GetObjectTorrentOutput, error) {
	fake.getObjectTorrentMutex.Lock()
	ret, specificReturn := fake.getObjectTorrentReturnsOnCall[len(fake.getObjectTorrentArgsForCall)]
	fake.getObjectTorrentArgsForCall = append(fake.getObjectTorrentArgsForCall, struct {
		arg1 *s3.GetObjectTorrentInput
	}{arg1})
	fake.recordInvocation("GetObjectTorrent", []interface{}{arg1})
	fake.getObjectTorrentMutex.Unlock()
	if fake.GetObjectTorrentStub != nil {
		return fake.GetObjectTorrentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectTorrentReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectTorrentCallCount() int {
	fake.getObjectTorrentMutex.RLock()
	defer fake.getObjectTorrentMutex.RUnlock()
	return len(fake.getObjectTorrentArgsForCall)
}

func (fake *FakeS3API) GetObjectTorrentCalls(stub func(*s3.GetObjectTorrentInput) (*s3.GetObjectTorrentOutput, error)) {
	fake.getObjectTorrentMutex.Lock()
	defer fake.getObjectTorrentMutex.Unlock()
	fake.GetObjectTorrentStub = stub
}

func (fake *FakeS3API) GetObjectTorrentArgsForCall(i int) *s3.GetObjectTorrentInput {
	fake.getObjectTorrentMutex.RLock()
	defer fake.getObjectTorrentMutex.RUnlock()
	argsForCall := fake.getObjectTorrentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetObjectTorrentReturns(result1 *s3.GetObjectTorrentOutput, result2 error) {
	fake.getObjectTorrentMutex.Lock()
	defer fake.getObjectTorrentMutex.Unlock()
	fake.GetObjectTorrentStub = nil
	fake.getObjectTorrentReturns = struct {
		result1 *s3.GetObjectTorrentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectTorrentReturnsOnCall(i int, result1 *s3.GetObjectTorrentOutput, result2 error) {
	fake.getObjectTorrentMutex.Lock()
	defer fake.getObjectTorrentMutex.Unlock()
	fake.GetObjectTorrentStub = nil
	if fake.getObjectTorrentReturnsOnCall == nil {
		fake.getObjectTorrentReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectTorrentOutput
			result2 error
		})
	}
	fake.getObjectTorrentReturnsOnCall[i] = struct {
		result1 *s3.GetObjectTorrentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectTorrentRequest(arg1 *s3.GetObjectTorrentInput) (*request.Request, *s3.GetObjectTorrentOutput) {
	fake.getObjectTorrentRequestMutex.Lock()
	ret, specificReturn := fake.getObjectTorrentRequestReturnsOnCall[len(fake.getObjectTorrentRequestArgsForCall)]
	fake.getObjectTorrentRequestArgsForCall = append(fake.getObjectTorrentRequestArgsForCall, struct {
		arg1 *s3.GetObjectTorrentInput
	}{arg1})
	fake.recordInvocation("GetObjectTorrentRequest", []interface{}{arg1})
	fake.getObjectTorrentRequestMutex.Unlock()
	if fake.GetObjectTorrentRequestStub != nil {
		return fake.GetObjectTorrentRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectTorrentRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectTorrentRequestCallCount() int {
	fake.getObjectTorrentRequestMutex.RLock()
	defer fake.getObjectTorrentRequestMutex.RUnlock()
	return len(fake.getObjectTorrentRequestArgsForCall)
}

func (fake *FakeS3API) GetObjectTorrentRequestCalls(stub func(*s3.GetObjectTorrentInput) (*request.Request, *s3.GetObjectTorrentOutput)) {
	fake.getObjectTorrentRequestMutex.Lock()
	defer fake.getObjectTorrentRequestMutex.Unlock()
	fake.GetObjectTorrentRequestStub = stub
}

func (fake *FakeS3API) GetObjectTorrentRequestArgsForCall(i int) *s3.GetObjectTorrentInput {
	fake.getObjectTorrentRequestMutex.RLock()
	defer fake.getObjectTorrentRequestMutex.RUnlock()
	argsForCall := fake.getObjectTorrentRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetObjectTorrentRequestReturns(result1 *request.Request, result2 *s3.GetObjectTorrentOutput) {
	fake.getObjectTorrentRequestMutex.Lock()
	defer fake.getObjectTorrentRequestMutex.Unlock()
	fake.GetObjectTorrentRequestStub = nil
	fake.getObjectTorrentRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetObjectTorrentOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectTorrentRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetObjectTorrentOutput) {
	fake.getObjectTorrentRequestMutex.Lock()
	defer fake.getObjectTorrentRequestMutex.Unlock()
	fake.GetObjectTorrentRequestStub = nil
	if fake.getObjectTorrentRequestReturnsOnCall == nil {
		fake.getObjectTorrentRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetObjectTorrentOutput
		})
	}
	fake.getObjectTorrentRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetObjectTorrentOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectTorrentWithContext(arg1 context.Context, arg2 *s3.GetObjectTorrentInput, arg3 ...request.Option) (*s3.GetObjectTorrentOutput, error) {
	fake.getObjectTorrentWithContextMutex.Lock()
	ret, specificReturn := fake.getObjectTorrentWithContextReturnsOnCall[len(fake.getObjectTorrentWithContextArgsForCall)]
	fake.getObjectTorrentWithContextArgsForCall = append(fake.getObjectTorrentWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetObjectTorrentInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetObjectTorrentWithContext", []interface{}{arg1, arg2, arg3})
	fake.getObjectTorrentWithContextMutex.Unlock()
	if fake.GetObjectTorrentWithContextStub != nil {
		return fake.GetObjectTorrentWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectTorrentWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectTorrentWithContextCallCount() int {
	fake.getObjectTorrentWithContextMutex.RLock()
	defer fake.getObjectTorrentWithContextMutex.RUnlock()
	return len(fake.getObjectTorrentWithContextArgsForCall)
}

func (fake *FakeS3API) GetObjectTorrentWithContextCalls(stub func(context.Context, *s3.GetObjectTorrentInput, ...request.Option) (*s3.GetObjectTorrentOutput, error)) {
	fake.getObjectTorrentWithContextMutex.Lock()
	defer fake.getObjectTorrentWithContextMutex.Unlock()
	fake.GetObjectTorrentWithContextStub = stub
}

func (fake *FakeS3API) GetObjectTorrentWithContextArgsForCall(i int) (context.Context, *s3.GetObjectTorrentInput, []request.Option) {
	fake.getObjectTorrentWithContextMutex.RLock()
	defer fake.getObjectTorrentWithContextMutex.RUnlock()
	argsForCall := fake.getObjectTorrentWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetObjectTorrentWithContextReturns(result1 *s3.GetObjectTorrentOutput, result2 error) {
	fake.getObjectTorrentWithContextMutex.Lock()
	defer fake.getObjectTorrentWithContextMutex.Unlock()
	fake.GetObjectTorrentWithContextStub = nil
	fake.getObjectTorrentWithContextReturns = struct {
		result1 *s3.GetObjectTorrentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectTorrentWithContextReturnsOnCall(i int, result1 *s3.GetObjectTorrentOutput, result2 error) {
	fake.getObjectTorrentWithContextMutex.Lock()
	defer fake.getObjectTorrentWithContextMutex.Unlock()
	fake.GetObjectTorrentWithContextStub = nil
	if fake.getObjectTorrentWithContextReturnsOnCall == nil {
		fake.getObjectTorrentWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectTorrentOutput
			result2 error
		})
	}
	fake.getObjectTorrentWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetObjectTorrentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectWithContext(arg1 context.Context, arg2 *s3.GetObjectInput, arg3 ...request.Option) (*s3.GetObjectOutput, error) {
	fake.getObjectWithContextMutex.Lock()
	ret, specificReturn := fake.getObjectWithContextReturnsOnCall[len(fake.getObjectWithContextArgsForCall)]
	fake.getObjectWithContextArgsForCall = append(fake.getObjectWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetObjectInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetObjectWithContext", []interface{}{arg1, arg2, arg3})
	fake.getObjectWithContextMutex.Unlock()
	if fake.GetObjectWithContextStub != nil {
		return fake.GetObjectWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectWithContextCallCount() int {
	fake.getObjectWithContextMutex.RLock()
	defer fake.getObjectWithContextMutex.RUnlock()
	return len(fake.getObjectWithContextArgsForCall)
}

func (fake *FakeS3API) GetObjectWithContextCalls(stub func(context.Context, *s3.GetObjectInput, ...request.Option) (*s3.GetObjectOutput, error)) {
	fake.getObjectWithContextMutex.Lock()
	defer fake.getObjectWithContextMutex.Unlock()
	fake.GetObjectWithContextStub = stub
}

func (fake *FakeS3API) GetObjectWithContextArgsForCall(i int) (context.Context, *s3.GetObjectInput, []request.Option) {
	fake.getObjectWithContextMutex.RLock()
	defer fake.getObjectWithContextMutex.RUnlock()
	argsForCall := fake.getObjectWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetObjectWithContextReturns(result1 *s3.GetObjectOutput, result2 error) {
	fake.getObjectWithContextMutex.Lock()
	defer fake.getObjectWithContextMutex.Unlock()
	fake.GetObjectWithContextStub = nil
	fake.getObjectWithContextReturns = struct {
		result1 *s3.GetObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectWithContextReturnsOnCall(i int, result1 *s3.GetObjectOutput, result2 error) {
	fake.getObjectWithContextMutex.Lock()
	defer fake.getObjectWithContextMutex.Unlock()
	fake.GetObjectWithContextStub = nil
	if fake.getObjectWithContextReturnsOnCall == nil {
		fake.getObjectWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectOutput
			result2 error
		})
	}
	fake.getObjectWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetPublicAccessBlock(arg1 *s3.GetPublicAccessBlockInput) (*s3.GetPublicAccessBlockOutput, error) {
	fake.getPublicAccessBlockMutex.Lock()
	ret, specificReturn := fake.getPublicAccessBlockReturnsOnCall[len(fake.getPublicAccessBlockArgsForCall)]
	fake.getPublicAccessBlockArgsForCall = append(fake.getPublicAccessBlockArgsForCall, struct {
		arg1 *s3.GetPublicAccessBlockInput
	}{arg1})
	fake.recordInvocation("GetPublicAccessBlock", []interface{}{arg1})
	fake.getPublicAccessBlockMutex.Unlock()
	if fake.GetPublicAccessBlockStub != nil {
		return fake.GetPublicAccessBlockStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPublicAccessBlockReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetPublicAccessBlockCallCount() int {
	fake.getPublicAccessBlockMutex.RLock()
	defer fake.getPublicAccessBlockMutex.RUnlock()
	return len(fake.getPublicAccessBlockArgsForCall)
}

func (fake *FakeS3API) GetPublicAccessBlockCalls(stub func(*s3.GetPublicAccessBlockInput) (*s3.GetPublicAccessBlockOutput, error)) {
	fake.getPublicAccessBlockMutex.Lock()
	defer fake.getPublicAccessBlockMutex.Unlock()
	fake.GetPublicAccessBlockStub = stub
}

func (fake *FakeS3API) GetPublicAccessBlockArgsForCall(i int) *s3.GetPublicAccessBlockInput {
	fake.getPublicAccessBlockMutex.RLock()
	defer fake.getPublicAccessBlockMutex.RUnlock()
	argsForCall := fake.getPublicAccessBlockArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetPublicAccessBlockReturns(result1 *s3.GetPublicAccessBlockOutput, result2 error) {
	fake.getPublicAccessBlockMutex.Lock()
	defer fake.getPublicAccessBlockMutex.Unlock()
	fake.GetPublicAccessBlockStub = nil
	fake.getPublicAccessBlockReturns = struct {
		result1 *s3.GetPublicAccessBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetPublicAccessBlockReturnsOnCall(i int, result1 *s3.GetPublicAccessBlockOutput, result2 error) {
	fake.getPublicAccessBlockMutex.Lock()
	defer fake.getPublicAccessBlockMutex.Unlock()
	fake.GetPublicAccessBlockStub = nil
	if fake.getPublicAccessBlockReturnsOnCall == nil {
		fake.getPublicAccessBlockReturnsOnCall = make(map[int]struct {
			result1 *s3.GetPublicAccessBlockOutput
			result2 error
		})
	}
	fake.getPublicAccessBlockReturnsOnCall[i] = struct {
		result1 *s3.GetPublicAccessBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetPublicAccessBlockRequest(arg1 *s3.GetPublicAccessBlockInput) (*request.Request, *s3.GetPublicAccessBlockOutput) {
	fake.getPublicAccessBlockRequestMutex.Lock()
	ret, specificReturn := fake.getPublicAccessBlockRequestReturnsOnCall[len(fake.getPublicAccessBlockRequestArgsForCall)]
	fake.getPublicAccessBlockRequestArgsForCall = append(fake.getPublicAccessBlockRequestArgsForCall, struct {
		arg1 *s3.GetPublicAccessBlockInput
	}{arg1})
	fake.recordInvocation("GetPublicAccessBlockRequest", []interface{}{arg1})
	fake.getPublicAccessBlockRequestMutex.Unlock()
	if fake.GetPublicAccessBlockRequestStub != nil {
		return fake.GetPublicAccessBlockRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPublicAccessBlockRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetPublicAccessBlockRequestCallCount() int {
	fake.getPublicAccessBlockRequestMutex.RLock()
	defer fake.getPublicAccessBlockRequestMutex.RUnlock()
	return len(fake.getPublicAccessBlockRequestArgsForCall)
}

func (fake *FakeS3API) GetPublicAccessBlockRequestCalls(stub func(*s3.GetPublicAccessBlockInput) (*request.Request, *s3.GetPublicAccessBlockOutput)) {
	fake.getPublicAccessBlockRequestMutex.Lock()
	defer fake.getPublicAccessBlockRequestMutex.Unlock()
	fake.GetPublicAccessBlockRequestStub = stub
}

func (fake *FakeS3API) GetPublicAccessBlockRequestArgsForCall(i int) *s3.GetPublicAccessBlockInput {
	fake.getPublicAccessBlockRequestMutex.RLock()
	defer fake.getPublicAccessBlockRequestMutex.RUnlock()
	argsForCall := fake.getPublicAccessBlockRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetPublicAccessBlockRequestReturns(result1 *request.Request, result2 *s3.GetPublicAccessBlockOutput) {
	fake.getPublicAccessBlockRequestMutex.Lock()
	defer fake.getPublicAccessBlockRequestMutex.Unlock()
	fake.GetPublicAccessBlockRequestStub = nil
	fake.getPublicAccessBlockRequestReturns = struct {
		result1 *request.Request
		result2 *s3.GetPublicAccessBlockOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetPublicAccessBlockRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.GetPublicAccessBlockOutput) {
	fake.getPublicAccessBlockRequestMutex.Lock()
	defer fake.getPublicAccessBlockRequestMutex.Unlock()
	fake.GetPublicAccessBlockRequestStub = nil
	if fake.getPublicAccessBlockRequestReturnsOnCall == nil {
		fake.getPublicAccessBlockRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.GetPublicAccessBlockOutput
		})
	}
	fake.getPublicAccessBlockRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.GetPublicAccessBlockOutput
	}{result1, result2}
}

func (fake *FakeS3API) GetPublicAccessBlockWithContext(arg1 context.Context, arg2 *s3.GetPublicAccessBlockInput, arg3 ...request.Option) (*s3.GetPublicAccessBlockOutput, error) {
	fake.getPublicAccessBlockWithContextMutex.Lock()
	ret, specificReturn := fake.getPublicAccessBlockWithContextReturnsOnCall[len(fake.getPublicAccessBlockWithContextArgsForCall)]
	fake.getPublicAccessBlockWithContextArgsForCall = append(fake.getPublicAccessBlockWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetPublicAccessBlockInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetPublicAccessBlockWithContext", []interface{}{arg1, arg2, arg3})
	fake.getPublicAccessBlockWithContextMutex.Unlock()
	if fake.GetPublicAccessBlockWithContextStub != nil {
		return fake.GetPublicAccessBlockWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPublicAccessBlockWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetPublicAccessBlockWithContextCallCount() int {
	fake.getPublicAccessBlockWithContextMutex.RLock()
	defer fake.getPublicAccessBlockWithContextMutex.RUnlock()
	return len(fake.getPublicAccessBlockWithContextArgsForCall)
}

func (fake *FakeS3API) GetPublicAccessBlockWithContextCalls(stub func(context.Context, *s3.GetPublicAccessBlockInput, ...request.Option) (*s3.GetPublicAccessBlockOutput, error)) {
	fake.getPublicAccessBlockWithContextMutex.Lock()
	defer fake.getPublicAccessBlockWithContextMutex.Unlock()
	fake.GetPublicAccessBlockWithContextStub = stub
}

func (fake *FakeS3API) GetPublicAccessBlockWithContextArgsForCall(i int) (context.Context, *s3.GetPublicAccessBlockInput, []request.Option) {
	fake.getPublicAccessBlockWithContextMutex.RLock()
	defer fake.getPublicAccessBlockWithContextMutex.RUnlock()
	argsForCall := fake.getPublicAccessBlockWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) GetPublicAccessBlockWithContextReturns(result1 *s3.GetPublicAccessBlockOutput, result2 error) {
	fake.getPublicAccessBlockWithContextMutex.Lock()
	defer fake.getPublicAccessBlockWithContextMutex.Unlock()
	fake.GetPublicAccessBlockWithContextStub = nil
	fake.getPublicAccessBlockWithContextReturns = struct {
		result1 *s3.GetPublicAccessBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetPublicAccessBlockWithContextReturnsOnCall(i int, result1 *s3.GetPublicAccessBlockOutput, result2 error) {
	fake.getPublicAccessBlockWithContextMutex.Lock()
	defer fake.getPublicAccessBlockWithContextMutex.Unlock()
	fake.GetPublicAccessBlockWithContextStub = nil
	if fake.getPublicAccessBlockWithContextReturnsOnCall == nil {
		fake.getPublicAccessBlockWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.GetPublicAccessBlockOutput
			result2 error
		})
	}
	fake.getPublicAccessBlockWithContextReturnsOnCall[i] = struct {
		result1 *s3.GetPublicAccessBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) HeadBucket(arg1 *s3.HeadBucketInput) (*s3.HeadBucketOutput, error) {
	fake.headBucketMutex.Lock()
	ret, specificReturn := fake.headBucketReturnsOnCall[len(fake.headBucketArgsForCall)]
	fake.headBucketArgsForCall = append(fake.headBucketArgsForCall, struct {
		arg1 *s3.HeadBucketInput
	}{arg1})
	fake.recordInvocation("HeadBucket", []interface{}{arg1})
	fake.headBucketMutex.Unlock()
	if fake.HeadBucketStub != nil {
		return fake.HeadBucketStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.headBucketReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) HeadBucketCallCount() int {
	fake.headBucketMutex.RLock()
	defer fake.headBucketMutex.RUnlock()
	return len(fake.headBucketArgsForCall)
}

func (fake *FakeS3API) HeadBucketCalls(stub func(*s3.HeadBucketInput) (*s3.HeadBucketOutput, error)) {
	fake.headBucketMutex.Lock()
	defer fake.headBucketMutex.Unlock()
	fake.HeadBucketStub = stub
}

func (fake *FakeS3API) HeadBucketArgsForCall(i int) *s3.HeadBucketInput {
	fake.headBucketMutex.RLock()
	defer fake.headBucketMutex.RUnlock()
	argsForCall := fake.headBucketArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) HeadBucketReturns(result1 *s3.HeadBucketOutput, result2 error) {
	fake.headBucketMutex.Lock()
	defer fake.headBucketMutex.Unlock()
	fake.HeadBucketStub = nil
	fake.headBucketReturns = struct {
		result1 *s3.HeadBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) HeadBucketReturnsOnCall(i int, result1 *s3.HeadBucketOutput, result2 error) {
	fake.headBucketMutex.Lock()
	defer fake.headBucketMutex.Unlock()
	fake.HeadBucketStub = nil
	if fake.headBucketReturnsOnCall == nil {
		fake.headBucketReturnsOnCall = make(map[int]struct {
			result1 *s3.HeadBucketOutput
			result2 error
		})
	}
	fake.headBucketReturnsOnCall[i] = struct {
		result1 *s3.HeadBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) HeadBucketRequest(arg1 *s3.HeadBucketInput) (*request.Request, *s3.HeadBucketOutput) {
	fake.headBucketRequestMutex.Lock()
	ret, specificReturn := fake.headBucketRequestReturnsOnCall[len(fake.headBucketRequestArgsForCall)]
	fake.headBucketRequestArgsForCall = append(fake.headBucketRequestArgsForCall, struct {
		arg1 *s3.HeadBucketInput
	}{arg1})
	fake.recordInvocation("HeadBucketRequest", []interface{}{arg1})
	fake.headBucketRequestMutex.Unlock()
	if fake.HeadBucketRequestStub != nil {
		return fake.HeadBucketRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.headBucketRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) HeadBucketRequestCallCount() int {
	fake.headBucketRequestMutex.RLock()
	defer fake.headBucketRequestMutex.RUnlock()
	return len(fake.headBucketRequestArgsForCall)
}

func (fake *FakeS3API) HeadBucketRequestCalls(stub func(*s3.HeadBucketInput) (*request.Request, *s3.HeadBucketOutput)) {
	fake.headBucketRequestMutex.Lock()
	defer fake.headBucketRequestMutex.Unlock()
	fake.HeadBucketRequestStub = stub
}

func (fake *FakeS3API) HeadBucketRequestArgsForCall(i int) *s3.HeadBucketInput {
	fake.headBucketRequestMutex.RLock()
	defer fake.headBucketRequestMutex.RUnlock()
	argsForCall := fake.headBucketRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) HeadBucketRequestReturns(result1 *request.Request, result2 *s3.HeadBucketOutput) {
	fake.headBucketRequestMutex.Lock()
	defer fake.headBucketRequestMutex.Unlock()
	fake.HeadBucketRequestStub = nil
	fake.headBucketRequestReturns = struct {
		result1 *request.Request
		result2 *s3.HeadBucketOutput
	}{result1, result2}
}

func (fake *FakeS3API) HeadBucketRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.HeadBucketOutput) {
	fake.headBucketRequestMutex.Lock()
	defer fake.headBucketRequestMutex.Unlock()
	fake.HeadBucketRequestStub = nil
	if fake.headBucketRequestReturnsOnCall == nil {
		fake.headBucketRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.HeadBucketOutput
		})
	}
	fake.headBucketRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.HeadBucketOutput
	}{result1, result2}
}

func (fake *FakeS3API) HeadBucketWithContext(arg1 context.Context, arg2 *s3.HeadBucketInput, arg3 ...request.Option) (*s3.HeadBucketOutput, error) {
	fake.headBucketWithContextMutex.Lock()
	ret, specificReturn := fake.headBucketWithContextReturnsOnCall[len(fake.headBucketWithContextArgsForCall)]
	fake.headBucketWithContextArgsForCall = append(fake.headBucketWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.HeadBucketInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("HeadBucketWithContext", []interface{}{arg1, arg2, arg3})
	fake.headBucketWithContextMutex.Unlock()
	if fake.HeadBucketWithContextStub != nil {
		return fake.HeadBucketWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.headBucketWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) HeadBucketWithContextCallCount() int {
	fake.headBucketWithContextMutex.RLock()
	defer fake.headBucketWithContextMutex.RUnlock()
	return len(fake.headBucketWithContextArgsForCall)
}

func (fake *FakeS3API) HeadBucketWithContextCalls(stub func(context.Context, *s3.HeadBucketInput, ...request.Option) (*s3.HeadBucketOutput, error)) {
	fake.headBucketWithContextMutex.Lock()
	defer fake.headBucketWithContextMutex.Unlock()
	fake.HeadBucketWithContextStub = stub
}

func (fake *FakeS3API) HeadBucketWithContextArgsForCall(i int) (context.Context, *s3.HeadBucketInput, []request.Option) {
	fake.headBucketWithContextMutex.RLock()
	defer fake.headBucketWithContextMutex.RUnlock()
	argsForCall := fake.headBucketWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) HeadBucketWithContextReturns(result1 *s3.HeadBucketOutput, result2 error) {
	fake.headBucketWithContextMutex.Lock()
	defer fake.headBucketWithContextMutex.Unlock()
	fake.HeadBucketWithContextStub = nil
	fake.headBucketWithContextReturns = struct {
		result1 *s3.HeadBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) HeadBucketWithContextReturnsOnCall(i int, result1 *s3.HeadBucketOutput, result2 error) {
	fake.headBucketWithContextMutex.Lock()
	defer fake.headBucketWithContextMutex.Unlock()
	fake.HeadBucketWithContextStub = nil
	if fake.headBucketWithContextReturnsOnCall == nil {
		fake.headBucketWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.HeadBucketOutput
			result2 error
		})
	}
	fake.headBucketWithContextReturnsOnCall[i] = struct {
		result1 *s3.HeadBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) HeadObject(arg1 *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
	fake.headObjectMutex.Lock()
	ret, specificReturn := fake.headObjectReturnsOnCall[len(fake.headObjectArgsForCall)]
	fake.headObjectArgsForCall = append(fake.headObjectArgsForCall, struct {
		arg1 *s3.HeadObjectInput
	}{arg1})
	fake.recordInvocation("HeadObject", []interface{}{arg1})
	fake.headObjectMutex.Unlock()
	if fake.HeadObjectStub != nil {
		return fake.HeadObjectStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.headObjectReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) HeadObjectCallCount() int {
	fake.headObjectMutex.RLock()
	defer fake.headObjectMutex.RUnlock()
	return len(fake.headObjectArgsForCall)
}

func (fake *FakeS3API) HeadObjectCalls(stub func(*s3.HeadObjectInput) (*s3.HeadObjectOutput, error)) {
	fake.headObjectMutex.Lock()
	defer fake.headObjectMutex.Unlock()
	fake.HeadObjectStub = stub
}

func (fake *FakeS3API) HeadObjectArgsForCall(i int) *s3.HeadObjectInput {
	fake.headObjectMutex.RLock()
	defer fake.headObjectMutex.RUnlock()
	argsForCall := fake.headObjectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) HeadObjectReturns(result1 *s3.HeadObjectOutput, result2 error) {
	fake.headObjectMutex.Lock()
	defer fake.headObjectMutex.Unlock()
	fake.HeadObjectStub = nil
	fake.headObjectReturns = struct {
		result1 *s3.HeadObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) HeadObjectReturnsOnCall(i int, result1 *s3.HeadObjectOutput, result2 error) {
	fake.headObjectMutex.Lock()
	defer fake.headObjectMutex.Unlock()
	fake.HeadObjectStub = nil
	if fake.headObjectReturnsOnCall == nil {
		fake.headObjectReturnsOnCall = make(map[int]struct {
			result1 *s3.HeadObjectOutput
			result2 error
		})
	}
	fake.headObjectReturnsOnCall[i] = struct {
		result1 *s3.HeadObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) HeadObjectRequest(arg1 *s3.HeadObjectInput) (*request.Request, *s3.HeadObjectOutput) {
	fake.headObjectRequestMutex.Lock()
	ret, specificReturn := fake.headObjectRequestReturnsOnCall[len(fake.headObjectRequestArgsForCall)]
	fake.headObjectRequestArgsForCall = append(fake.headObjectRequestArgsForCall, struct {
		arg1 *s3.HeadObjectInput
	}{arg1})
	fake.recordInvocation("HeadObjectRequest", []interface{}{arg1})
	fake.headObjectRequestMutex.Unlock()
	if fake.HeadObjectRequestStub != nil {
		return fake.HeadObjectRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.headObjectRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) HeadObjectRequestCallCount() int {
	fake.headObjectRequestMutex.RLock()
	defer fake.headObjectRequestMutex.RUnlock()
	return len(fake.headObjectRequestArgsForCall)
}

func (fake *FakeS3API) HeadObjectRequestCalls(stub func(*s3.HeadObjectInput) (*request.Request, *s3.HeadObjectOutput)) {
	fake.headObjectRequestMutex.Lock()
	defer fake.headObjectRequestMutex.Unlock()
	fake.HeadObjectRequestStub = stub
}

func (fake *FakeS3API) HeadObjectRequestArgsForCall(i int) *s3.HeadObjectInput {
	fake.headObjectRequestMutex.RLock()
	defer fake.headObjectRequestMutex.RUnlock()
	argsForCall := fake.headObjectRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) HeadObjectRequestReturns(result1 *request.Request, result2 *s3.HeadObjectOutput) {
	fake.headObjectRequestMutex.Lock()
	defer fake.headObjectRequestMutex.Unlock()
	fake.HeadObjectRequestStub = nil
	fake.headObjectRequestReturns = struct {
		result1 *request.Request
		result2 *s3.HeadObjectOutput
	}{result1, result2}
}

func (fake *FakeS3API) HeadObjectRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.HeadObjectOutput) {
	fake.headObjectRequestMutex.Lock()
	defer fake.headObjectRequestMutex.Unlock()
	fake.HeadObjectRequestStub = nil
	if fake.headObjectRequestReturnsOnCall == nil {
		fake.headObjectRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.HeadObjectOutput
		})
	}
	fake.headObjectRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.HeadObjectOutput
	}{result1, result2}
}

func (fake *FakeS3API) HeadObjectWithContext(arg1 context.Context, arg2 *s3.HeadObjectInput, arg3 ...request.Option) (*s3.HeadObjectOutput, error) {
	fake.headObjectWithContextMutex.Lock()
	ret, specificReturn := fake.headObjectWithContextReturnsOnCall[len(fake.headObjectWithContextArgsForCall)]
	fake.headObjectWithContextArgsForCall = append(fake.headObjectWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.HeadObjectInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("HeadObjectWithContext", []interface{}{arg1, arg2, arg3})
	fake.headObjectWithContextMutex.Unlock()
	if fake.HeadObjectWithContextStub != nil {
		return fake.HeadObjectWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.headObjectWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) HeadObjectWithContextCallCount() int {
	fake.headObjectWithContextMutex.RLock()
	defer fake.headObjectWithContextMutex.RUnlock()
	return len(fake.headObjectWithContextArgsForCall)
}

func (fake *FakeS3API) HeadObjectWithContextCalls(stub func(context.Context, *s3.HeadObjectInput, ...request.Option) (*s3.HeadObjectOutput, error)) {
	fake.headObjectWithContextMutex.Lock()
	defer fake.headObjectWithContextMutex.Unlock()
	fake.HeadObjectWithContextStub = stub
}

func (fake *FakeS3API) HeadObjectWithContextArgsForCall(i int) (context.Context, *s3.HeadObjectInput, []request.Option) {
	fake.headObjectWithContextMutex.RLock()
	defer fake.headObjectWithContextMutex.RUnlock()
	argsForCall := fake.headObjectWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) HeadObjectWithContextReturns(result1 *s3.HeadObjectOutput, result2 error) {
	fake.headObjectWithContextMutex.Lock()
	defer fake.headObjectWithContextMutex.Unlock()
	fake.HeadObjectWithContextStub = nil
	fake.headObjectWithContextReturns = struct {
		result1 *s3.HeadObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) HeadObjectWithContextReturnsOnCall(i int, result1 *s3.HeadObjectOutput, result2 error) {
	fake.headObjectWithContextMutex.Lock()
	defer fake.headObjectWithContextMutex.Unlock()
	fake.HeadObjectWithContextStub = nil
	if fake.headObjectWithContextReturnsOnCall == nil {
		fake.headObjectWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.HeadObjectOutput
			result2 error
		})
	}
	fake.headObjectWithContextReturnsOnCall[i] = struct {
		result1 *s3.HeadObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurations(arg1 *s3.ListBucketAnalyticsConfigurationsInput) (*s3.ListBucketAnalyticsConfigurationsOutput, error) {
	fake.listBucketAnalyticsConfigurationsMutex.Lock()
	ret, specificReturn := fake.listBucketAnalyticsConfigurationsReturnsOnCall[len(fake.listBucketAnalyticsConfigurationsArgsForCall)]
	fake.listBucketAnalyticsConfigurationsArgsForCall = append(fake.listBucketAnalyticsConfigurationsArgsForCall, struct {
		arg1 *s3.ListBucketAnalyticsConfigurationsInput
	}{arg1})
	fake.recordInvocation("ListBucketAnalyticsConfigurations", []interface{}{arg1})
	fake.listBucketAnalyticsConfigurationsMutex.Unlock()
	if fake.ListBucketAnalyticsConfigurationsStub != nil {
		return fake.ListBucketAnalyticsConfigurationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listBucketAnalyticsConfigurationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurationsCallCount() int {
	fake.listBucketAnalyticsConfigurationsMutex.RLock()
	defer fake.listBucketAnalyticsConfigurationsMutex.RUnlock()
	return len(fake.listBucketAnalyticsConfigurationsArgsForCall)
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurationsCalls(stub func(*s3.ListBucketAnalyticsConfigurationsInput) (*s3.ListBucketAnalyticsConfigurationsOutput, error)) {
	fake.listBucketAnalyticsConfigurationsMutex.Lock()
	defer fake.listBucketAnalyticsConfigurationsMutex.Unlock()
	fake.ListBucketAnalyticsConfigurationsStub = stub
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurationsArgsForCall(i int) *s3.ListBucketAnalyticsConfigurationsInput {
	fake.listBucketAnalyticsConfigurationsMutex.RLock()
	defer fake.listBucketAnalyticsConfigurationsMutex.RUnlock()
	argsForCall := fake.listBucketAnalyticsConfigurationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurationsReturns(result1 *s3.ListBucketAnalyticsConfigurationsOutput, result2 error) {
	fake.listBucketAnalyticsConfigurationsMutex.Lock()
	defer fake.listBucketAnalyticsConfigurationsMutex.Unlock()
	fake.ListBucketAnalyticsConfigurationsStub = nil
	fake.listBucketAnalyticsConfigurationsReturns = struct {
		result1 *s3.ListBucketAnalyticsConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurationsReturnsOnCall(i int, result1 *s3.ListBucketAnalyticsConfigurationsOutput, result2 error) {
	fake.listBucketAnalyticsConfigurationsMutex.Lock()
	defer fake.listBucketAnalyticsConfigurationsMutex.Unlock()
	fake.ListBucketAnalyticsConfigurationsStub = nil
	if fake.listBucketAnalyticsConfigurationsReturnsOnCall == nil {
		fake.listBucketAnalyticsConfigurationsReturnsOnCall = make(map[int]struct {
			result1 *s3.ListBucketAnalyticsConfigurationsOutput
			result2 error
		})
	}
	fake.listBucketAnalyticsConfigurationsReturnsOnCall[i] = struct {
		result1 *s3.ListBucketAnalyticsConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurationsRequest(arg1 *s3.ListBucketAnalyticsConfigurationsInput) (*request.Request, *s3.ListBucketAnalyticsConfigurationsOutput) {
	fake.listBucketAnalyticsConfigurationsRequestMutex.Lock()
	ret, specificReturn := fake.listBucketAnalyticsConfigurationsRequestReturnsOnCall[len(fake.listBucketAnalyticsConfigurationsRequestArgsForCall)]
	fake.listBucketAnalyticsConfigurationsRequestArgsForCall = append(fake.listBucketAnalyticsConfigurationsRequestArgsForCall, struct {
		arg1 *s3.ListBucketAnalyticsConfigurationsInput
	}{arg1})
	fake.recordInvocation("ListBucketAnalyticsConfigurationsRequest", []interface{}{arg1})
	fake.listBucketAnalyticsConfigurationsRequestMutex.Unlock()
	if fake.ListBucketAnalyticsConfigurationsRequestStub != nil {
		return fake.ListBucketAnalyticsConfigurationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listBucketAnalyticsConfigurationsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurationsRequestCallCount() int {
	fake.listBucketAnalyticsConfigurationsRequestMutex.RLock()
	defer fake.listBucketAnalyticsConfigurationsRequestMutex.RUnlock()
	return len(fake.listBucketAnalyticsConfigurationsRequestArgsForCall)
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurationsRequestCalls(stub func(*s3.ListBucketAnalyticsConfigurationsInput) (*request.Request, *s3.ListBucketAnalyticsConfigurationsOutput)) {
	fake.listBucketAnalyticsConfigurationsRequestMutex.Lock()
	defer fake.listBucketAnalyticsConfigurationsRequestMutex.Unlock()
	fake.ListBucketAnalyticsConfigurationsRequestStub = stub
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurationsRequestArgsForCall(i int) *s3.ListBucketAnalyticsConfigurationsInput {
	fake.listBucketAnalyticsConfigurationsRequestMutex.RLock()
	defer fake.listBucketAnalyticsConfigurationsRequestMutex.RUnlock()
	argsForCall := fake.listBucketAnalyticsConfigurationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurationsRequestReturns(result1 *request.Request, result2 *s3.ListBucketAnalyticsConfigurationsOutput) {
	fake.listBucketAnalyticsConfigurationsRequestMutex.Lock()
	defer fake.listBucketAnalyticsConfigurationsRequestMutex.Unlock()
	fake.ListBucketAnalyticsConfigurationsRequestStub = nil
	fake.listBucketAnalyticsConfigurationsRequestReturns = struct {
		result1 *request.Request
		result2 *s3.ListBucketAnalyticsConfigurationsOutput
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.ListBucketAnalyticsConfigurationsOutput) {
	fake.listBucketAnalyticsConfigurationsRequestMutex.Lock()
	defer fake.listBucketAnalyticsConfigurationsRequestMutex.Unlock()
	fake.ListBucketAnalyticsConfigurationsRequestStub = nil
	if fake.listBucketAnalyticsConfigurationsRequestReturnsOnCall == nil {
		fake.listBucketAnalyticsConfigurationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.ListBucketAnalyticsConfigurationsOutput
		})
	}
	fake.listBucketAnalyticsConfigurationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.ListBucketAnalyticsConfigurationsOutput
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurationsWithContext(arg1 context.Context, arg2 *s3.ListBucketAnalyticsConfigurationsInput, arg3 ...request.Option) (*s3.ListBucketAnalyticsConfigurationsOutput, error) {
	fake.listBucketAnalyticsConfigurationsWithContextMutex.Lock()
	ret, specificReturn := fake.listBucketAnalyticsConfigurationsWithContextReturnsOnCall[len(fake.listBucketAnalyticsConfigurationsWithContextArgsForCall)]
	fake.listBucketAnalyticsConfigurationsWithContextArgsForCall = append(fake.listBucketAnalyticsConfigurationsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListBucketAnalyticsConfigurationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListBucketAnalyticsConfigurationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listBucketAnalyticsConfigurationsWithContextMutex.Unlock()
	if fake.ListBucketAnalyticsConfigurationsWithContextStub != nil {
		return fake.ListBucketAnalyticsConfigurationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listBucketAnalyticsConfigurationsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurationsWithContextCallCount() int {
	fake.listBucketAnalyticsConfigurationsWithContextMutex.RLock()
	defer fake.listBucketAnalyticsConfigurationsWithContextMutex.RUnlock()
	return len(fake.listBucketAnalyticsConfigurationsWithContextArgsForCall)
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurationsWithContextCalls(stub func(context.Context, *s3.ListBucketAnalyticsConfigurationsInput, ...request.Option) (*s3.ListBucketAnalyticsConfigurationsOutput, error)) {
	fake.listBucketAnalyticsConfigurationsWithContextMutex.Lock()
	defer fake.listBucketAnalyticsConfigurationsWithContextMutex.Unlock()
	fake.ListBucketAnalyticsConfigurationsWithContextStub = stub
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurationsWithContextArgsForCall(i int) (context.Context, *s3.ListBucketAnalyticsConfigurationsInput, []request.Option) {
	fake.listBucketAnalyticsConfigurationsWithContextMutex.RLock()
	defer fake.listBucketAnalyticsConfigurationsWithContextMutex.RUnlock()
	argsForCall := fake.listBucketAnalyticsConfigurationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurationsWithContextReturns(result1 *s3.ListBucketAnalyticsConfigurationsOutput, result2 error) {
	fake.listBucketAnalyticsConfigurationsWithContextMutex.Lock()
	defer fake.listBucketAnalyticsConfigurationsWithContextMutex.Unlock()
	fake.ListBucketAnalyticsConfigurationsWithContextStub = nil
	fake.listBucketAnalyticsConfigurationsWithContextReturns = struct {
		result1 *s3.ListBucketAnalyticsConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketAnalyticsConfigurationsWithContextReturnsOnCall(i int, result1 *s3.ListBucketAnalyticsConfigurationsOutput, result2 error) {
	fake.listBucketAnalyticsConfigurationsWithContextMutex.Lock()
	defer fake.listBucketAnalyticsConfigurationsWithContextMutex.Unlock()
	fake.ListBucketAnalyticsConfigurationsWithContextStub = nil
	if fake.listBucketAnalyticsConfigurationsWithContextReturnsOnCall == nil {
		fake.listBucketAnalyticsConfigurationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.ListBucketAnalyticsConfigurationsOutput
			result2 error
		})
	}
	fake.listBucketAnalyticsConfigurationsWithContextReturnsOnCall[i] = struct {
		result1 *s3.ListBucketAnalyticsConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketInventoryConfigurations(arg1 *s3.ListBucketInventoryConfigurationsInput) (*s3.ListBucketInventoryConfigurationsOutput, error) {
	fake.listBucketInventoryConfigurationsMutex.Lock()
	ret, specificReturn := fake.listBucketInventoryConfigurationsReturnsOnCall[len(fake.listBucketInventoryConfigurationsArgsForCall)]
	fake.listBucketInventoryConfigurationsArgsForCall = append(fake.listBucketInventoryConfigurationsArgsForCall, struct {
		arg1 *s3.ListBucketInventoryConfigurationsInput
	}{arg1})
	fake.recordInvocation("ListBucketInventoryConfigurations", []interface{}{arg1})
	fake.listBucketInventoryConfigurationsMutex.Unlock()
	if fake.ListBucketInventoryConfigurationsStub != nil {
		return fake.ListBucketInventoryConfigurationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listBucketInventoryConfigurationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListBucketInventoryConfigurationsCallCount() int {
	fake.listBucketInventoryConfigurationsMutex.RLock()
	defer fake.listBucketInventoryConfigurationsMutex.RUnlock()
	return len(fake.listBucketInventoryConfigurationsArgsForCall)
}

func (fake *FakeS3API) ListBucketInventoryConfigurationsCalls(stub func(*s3.ListBucketInventoryConfigurationsInput) (*s3.ListBucketInventoryConfigurationsOutput, error)) {
	fake.listBucketInventoryConfigurationsMutex.Lock()
	defer fake.listBucketInventoryConfigurationsMutex.Unlock()
	fake.ListBucketInventoryConfigurationsStub = stub
}

func (fake *FakeS3API) ListBucketInventoryConfigurationsArgsForCall(i int) *s3.ListBucketInventoryConfigurationsInput {
	fake.listBucketInventoryConfigurationsMutex.RLock()
	defer fake.listBucketInventoryConfigurationsMutex.RUnlock()
	argsForCall := fake.listBucketInventoryConfigurationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListBucketInventoryConfigurationsReturns(result1 *s3.ListBucketInventoryConfigurationsOutput, result2 error) {
	fake.listBucketInventoryConfigurationsMutex.Lock()
	defer fake.listBucketInventoryConfigurationsMutex.Unlock()
	fake.ListBucketInventoryConfigurationsStub = nil
	fake.listBucketInventoryConfigurationsReturns = struct {
		result1 *s3.ListBucketInventoryConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketInventoryConfigurationsReturnsOnCall(i int, result1 *s3.ListBucketInventoryConfigurationsOutput, result2 error) {
	fake.listBucketInventoryConfigurationsMutex.Lock()
	defer fake.listBucketInventoryConfigurationsMutex.Unlock()
	fake.ListBucketInventoryConfigurationsStub = nil
	if fake.listBucketInventoryConfigurationsReturnsOnCall == nil {
		fake.listBucketInventoryConfigurationsReturnsOnCall = make(map[int]struct {
			result1 *s3.ListBucketInventoryConfigurationsOutput
			result2 error
		})
	}
	fake.listBucketInventoryConfigurationsReturnsOnCall[i] = struct {
		result1 *s3.ListBucketInventoryConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketInventoryConfigurationsRequest(arg1 *s3.ListBucketInventoryConfigurationsInput) (*request.Request, *s3.ListBucketInventoryConfigurationsOutput) {
	fake.listBucketInventoryConfigurationsRequestMutex.Lock()
	ret, specificReturn := fake.listBucketInventoryConfigurationsRequestReturnsOnCall[len(fake.listBucketInventoryConfigurationsRequestArgsForCall)]
	fake.listBucketInventoryConfigurationsRequestArgsForCall = append(fake.listBucketInventoryConfigurationsRequestArgsForCall, struct {
		arg1 *s3.ListBucketInventoryConfigurationsInput
	}{arg1})
	fake.recordInvocation("ListBucketInventoryConfigurationsRequest", []interface{}{arg1})
	fake.listBucketInventoryConfigurationsRequestMutex.Unlock()
	if fake.ListBucketInventoryConfigurationsRequestStub != nil {
		return fake.ListBucketInventoryConfigurationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listBucketInventoryConfigurationsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListBucketInventoryConfigurationsRequestCallCount() int {
	fake.listBucketInventoryConfigurationsRequestMutex.RLock()
	defer fake.listBucketInventoryConfigurationsRequestMutex.RUnlock()
	return len(fake.listBucketInventoryConfigurationsRequestArgsForCall)
}

func (fake *FakeS3API) ListBucketInventoryConfigurationsRequestCalls(stub func(*s3.ListBucketInventoryConfigurationsInput) (*request.Request, *s3.ListBucketInventoryConfigurationsOutput)) {
	fake.listBucketInventoryConfigurationsRequestMutex.Lock()
	defer fake.listBucketInventoryConfigurationsRequestMutex.Unlock()
	fake.ListBucketInventoryConfigurationsRequestStub = stub
}

func (fake *FakeS3API) ListBucketInventoryConfigurationsRequestArgsForCall(i int) *s3.ListBucketInventoryConfigurationsInput {
	fake.listBucketInventoryConfigurationsRequestMutex.RLock()
	defer fake.listBucketInventoryConfigurationsRequestMutex.RUnlock()
	argsForCall := fake.listBucketInventoryConfigurationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListBucketInventoryConfigurationsRequestReturns(result1 *request.Request, result2 *s3.ListBucketInventoryConfigurationsOutput) {
	fake.listBucketInventoryConfigurationsRequestMutex.Lock()
	defer fake.listBucketInventoryConfigurationsRequestMutex.Unlock()
	fake.ListBucketInventoryConfigurationsRequestStub = nil
	fake.listBucketInventoryConfigurationsRequestReturns = struct {
		result1 *request.Request
		result2 *s3.ListBucketInventoryConfigurationsOutput
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketInventoryConfigurationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.ListBucketInventoryConfigurationsOutput) {
	fake.listBucketInventoryConfigurationsRequestMutex.Lock()
	defer fake.listBucketInventoryConfigurationsRequestMutex.Unlock()
	fake.ListBucketInventoryConfigurationsRequestStub = nil
	if fake.listBucketInventoryConfigurationsRequestReturnsOnCall == nil {
		fake.listBucketInventoryConfigurationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.ListBucketInventoryConfigurationsOutput
		})
	}
	fake.listBucketInventoryConfigurationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.ListBucketInventoryConfigurationsOutput
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketInventoryConfigurationsWithContext(arg1 context.Context, arg2 *s3.ListBucketInventoryConfigurationsInput, arg3 ...request.Option) (*s3.ListBucketInventoryConfigurationsOutput, error) {
	fake.listBucketInventoryConfigurationsWithContextMutex.Lock()
	ret, specificReturn := fake.listBucketInventoryConfigurationsWithContextReturnsOnCall[len(fake.listBucketInventoryConfigurationsWithContextArgsForCall)]
	fake.listBucketInventoryConfigurationsWithContextArgsForCall = append(fake.listBucketInventoryConfigurationsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListBucketInventoryConfigurationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListBucketInventoryConfigurationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listBucketInventoryConfigurationsWithContextMutex.Unlock()
	if fake.ListBucketInventoryConfigurationsWithContextStub != nil {
		return fake.ListBucketInventoryConfigurationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listBucketInventoryConfigurationsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListBucketInventoryConfigurationsWithContextCallCount() int {
	fake.listBucketInventoryConfigurationsWithContextMutex.RLock()
	defer fake.listBucketInventoryConfigurationsWithContextMutex.RUnlock()
	return len(fake.listBucketInventoryConfigurationsWithContextArgsForCall)
}

func (fake *FakeS3API) ListBucketInventoryConfigurationsWithContextCalls(stub func(context.Context, *s3.ListBucketInventoryConfigurationsInput, ...request.Option) (*s3.ListBucketInventoryConfigurationsOutput, error)) {
	fake.listBucketInventoryConfigurationsWithContextMutex.Lock()
	defer fake.listBucketInventoryConfigurationsWithContextMutex.Unlock()
	fake.ListBucketInventoryConfigurationsWithContextStub = stub
}

func (fake *FakeS3API) ListBucketInventoryConfigurationsWithContextArgsForCall(i int) (context.Context, *s3.ListBucketInventoryConfigurationsInput, []request.Option) {
	fake.listBucketInventoryConfigurationsWithContextMutex.RLock()
	defer fake.listBucketInventoryConfigurationsWithContextMutex.RUnlock()
	argsForCall := fake.listBucketInventoryConfigurationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) ListBucketInventoryConfigurationsWithContextReturns(result1 *s3.ListBucketInventoryConfigurationsOutput, result2 error) {
	fake.listBucketInventoryConfigurationsWithContextMutex.Lock()
	defer fake.listBucketInventoryConfigurationsWithContextMutex.Unlock()
	fake.ListBucketInventoryConfigurationsWithContextStub = nil
	fake.listBucketInventoryConfigurationsWithContextReturns = struct {
		result1 *s3.ListBucketInventoryConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketInventoryConfigurationsWithContextReturnsOnCall(i int, result1 *s3.ListBucketInventoryConfigurationsOutput, result2 error) {
	fake.listBucketInventoryConfigurationsWithContextMutex.Lock()
	defer fake.listBucketInventoryConfigurationsWithContextMutex.Unlock()
	fake.ListBucketInventoryConfigurationsWithContextStub = nil
	if fake.listBucketInventoryConfigurationsWithContextReturnsOnCall == nil {
		fake.listBucketInventoryConfigurationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.ListBucketInventoryConfigurationsOutput
			result2 error
		})
	}
	fake.listBucketInventoryConfigurationsWithContextReturnsOnCall[i] = struct {
		result1 *s3.ListBucketInventoryConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketMetricsConfigurations(arg1 *s3.ListBucketMetricsConfigurationsInput) (*s3.ListBucketMetricsConfigurationsOutput, error) {
	fake.listBucketMetricsConfigurationsMutex.Lock()
	ret, specificReturn := fake.listBucketMetricsConfigurationsReturnsOnCall[len(fake.listBucketMetricsConfigurationsArgsForCall)]
	fake.listBucketMetricsConfigurationsArgsForCall = append(fake.listBucketMetricsConfigurationsArgsForCall, struct {
		arg1 *s3.ListBucketMetricsConfigurationsInput
	}{arg1})
	fake.recordInvocation("ListBucketMetricsConfigurations", []interface{}{arg1})
	fake.listBucketMetricsConfigurationsMutex.Unlock()
	if fake.ListBucketMetricsConfigurationsStub != nil {
		return fake.ListBucketMetricsConfigurationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listBucketMetricsConfigurationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListBucketMetricsConfigurationsCallCount() int {
	fake.listBucketMetricsConfigurationsMutex.RLock()
	defer fake.listBucketMetricsConfigurationsMutex.RUnlock()
	return len(fake.listBucketMetricsConfigurationsArgsForCall)
}

func (fake *FakeS3API) ListBucketMetricsConfigurationsCalls(stub func(*s3.ListBucketMetricsConfigurationsInput) (*s3.ListBucketMetricsConfigurationsOutput, error)) {
	fake.listBucketMetricsConfigurationsMutex.Lock()
	defer fake.listBucketMetricsConfigurationsMutex.Unlock()
	fake.ListBucketMetricsConfigurationsStub = stub
}

func (fake *FakeS3API) ListBucketMetricsConfigurationsArgsForCall(i int) *s3.ListBucketMetricsConfigurationsInput {
	fake.listBucketMetricsConfigurationsMutex.RLock()
	defer fake.listBucketMetricsConfigurationsMutex.RUnlock()
	argsForCall := fake.listBucketMetricsConfigurationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListBucketMetricsConfigurationsReturns(result1 *s3.ListBucketMetricsConfigurationsOutput, result2 error) {
	fake.listBucketMetricsConfigurationsMutex.Lock()
	defer fake.listBucketMetricsConfigurationsMutex.Unlock()
	fake.ListBucketMetricsConfigurationsStub = nil
	fake.listBucketMetricsConfigurationsReturns = struct {
		result1 *s3.ListBucketMetricsConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketMetricsConfigurationsReturnsOnCall(i int, result1 *s3.ListBucketMetricsConfigurationsOutput, result2 error) {
	fake.listBucketMetricsConfigurationsMutex.Lock()
	defer fake.listBucketMetricsConfigurationsMutex.Unlock()
	fake.ListBucketMetricsConfigurationsStub = nil
	if fake.listBucketMetricsConfigurationsReturnsOnCall == nil {
		fake.listBucketMetricsConfigurationsReturnsOnCall = make(map[int]struct {
			result1 *s3.ListBucketMetricsConfigurationsOutput
			result2 error
		})
	}
	fake.listBucketMetricsConfigurationsReturnsOnCall[i] = struct {
		result1 *s3.ListBucketMetricsConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketMetricsConfigurationsRequest(arg1 *s3.ListBucketMetricsConfigurationsInput) (*request.Request, *s3.ListBucketMetricsConfigurationsOutput) {
	fake.listBucketMetricsConfigurationsRequestMutex.Lock()
	ret, specificReturn := fake.listBucketMetricsConfigurationsRequestReturnsOnCall[len(fake.listBucketMetricsConfigurationsRequestArgsForCall)]
	fake.listBucketMetricsConfigurationsRequestArgsForCall = append(fake.listBucketMetricsConfigurationsRequestArgsForCall, struct {
		arg1 *s3.ListBucketMetricsConfigurationsInput
	}{arg1})
	fake.recordInvocation("ListBucketMetricsConfigurationsRequest", []interface{}{arg1})
	fake.listBucketMetricsConfigurationsRequestMutex.Unlock()
	if fake.ListBucketMetricsConfigurationsRequestStub != nil {
		return fake.ListBucketMetricsConfigurationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listBucketMetricsConfigurationsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListBucketMetricsConfigurationsRequestCallCount() int {
	fake.listBucketMetricsConfigurationsRequestMutex.RLock()
	defer fake.listBucketMetricsConfigurationsRequestMutex.RUnlock()
	return len(fake.listBucketMetricsConfigurationsRequestArgsForCall)
}

func (fake *FakeS3API) ListBucketMetricsConfigurationsRequestCalls(stub func(*s3.ListBucketMetricsConfigurationsInput) (*request.Request, *s3.ListBucketMetricsConfigurationsOutput)) {
	fake.listBucketMetricsConfigurationsRequestMutex.Lock()
	defer fake.listBucketMetricsConfigurationsRequestMutex.Unlock()
	fake.ListBucketMetricsConfigurationsRequestStub = stub
}

func (fake *FakeS3API) ListBucketMetricsConfigurationsRequestArgsForCall(i int) *s3.ListBucketMetricsConfigurationsInput {
	fake.listBucketMetricsConfigurationsRequestMutex.RLock()
	defer fake.listBucketMetricsConfigurationsRequestMutex.RUnlock()
	argsForCall := fake.listBucketMetricsConfigurationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListBucketMetricsConfigurationsRequestReturns(result1 *request.Request, result2 *s3.ListBucketMetricsConfigurationsOutput) {
	fake.listBucketMetricsConfigurationsRequestMutex.Lock()
	defer fake.listBucketMetricsConfigurationsRequestMutex.Unlock()
	fake.ListBucketMetricsConfigurationsRequestStub = nil
	fake.listBucketMetricsConfigurationsRequestReturns = struct {
		result1 *request.Request
		result2 *s3.ListBucketMetricsConfigurationsOutput
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketMetricsConfigurationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.ListBucketMetricsConfigurationsOutput) {
	fake.listBucketMetricsConfigurationsRequestMutex.Lock()
	defer fake.listBucketMetricsConfigurationsRequestMutex.Unlock()
	fake.ListBucketMetricsConfigurationsRequestStub = nil
	if fake.listBucketMetricsConfigurationsRequestReturnsOnCall == nil {
		fake.listBucketMetricsConfigurationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.ListBucketMetricsConfigurationsOutput
		})
	}
	fake.listBucketMetricsConfigurationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.ListBucketMetricsConfigurationsOutput
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketMetricsConfigurationsWithContext(arg1 context.Context, arg2 *s3.ListBucketMetricsConfigurationsInput, arg3 ...request.Option) (*s3.ListBucketMetricsConfigurationsOutput, error) {
	fake.listBucketMetricsConfigurationsWithContextMutex.Lock()
	ret, specificReturn := fake.listBucketMetricsConfigurationsWithContextReturnsOnCall[len(fake.listBucketMetricsConfigurationsWithContextArgsForCall)]
	fake.listBucketMetricsConfigurationsWithContextArgsForCall = append(fake.listBucketMetricsConfigurationsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListBucketMetricsConfigurationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListBucketMetricsConfigurationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listBucketMetricsConfigurationsWithContextMutex.Unlock()
	if fake.ListBucketMetricsConfigurationsWithContextStub != nil {
		return fake.ListBucketMetricsConfigurationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listBucketMetricsConfigurationsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListBucketMetricsConfigurationsWithContextCallCount() int {
	fake.listBucketMetricsConfigurationsWithContextMutex.RLock()
	defer fake.listBucketMetricsConfigurationsWithContextMutex.RUnlock()
	return len(fake.listBucketMetricsConfigurationsWithContextArgsForCall)
}

func (fake *FakeS3API) ListBucketMetricsConfigurationsWithContextCalls(stub func(context.Context, *s3.ListBucketMetricsConfigurationsInput, ...request.Option) (*s3.ListBucketMetricsConfigurationsOutput, error)) {
	fake.listBucketMetricsConfigurationsWithContextMutex.Lock()
	defer fake.listBucketMetricsConfigurationsWithContextMutex.Unlock()
	fake.ListBucketMetricsConfigurationsWithContextStub = stub
}

func (fake *FakeS3API) ListBucketMetricsConfigurationsWithContextArgsForCall(i int) (context.Context, *s3.ListBucketMetricsConfigurationsInput, []request.Option) {
	fake.listBucketMetricsConfigurationsWithContextMutex.RLock()
	defer fake.listBucketMetricsConfigurationsWithContextMutex.RUnlock()
	argsForCall := fake.listBucketMetricsConfigurationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) ListBucketMetricsConfigurationsWithContextReturns(result1 *s3.ListBucketMetricsConfigurationsOutput, result2 error) {
	fake.listBucketMetricsConfigurationsWithContextMutex.Lock()
	defer fake.listBucketMetricsConfigurationsWithContextMutex.Unlock()
	fake.ListBucketMetricsConfigurationsWithContextStub = nil
	fake.listBucketMetricsConfigurationsWithContextReturns = struct {
		result1 *s3.ListBucketMetricsConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketMetricsConfigurationsWithContextReturnsOnCall(i int, result1 *s3.ListBucketMetricsConfigurationsOutput, result2 error) {
	fake.listBucketMetricsConfigurationsWithContextMutex.Lock()
	defer fake.listBucketMetricsConfigurationsWithContextMutex.Unlock()
	fake.ListBucketMetricsConfigurationsWithContextStub = nil
	if fake.listBucketMetricsConfigurationsWithContextReturnsOnCall == nil {
		fake.listBucketMetricsConfigurationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.ListBucketMetricsConfigurationsOutput
			result2 error
		})
	}
	fake.listBucketMetricsConfigurationsWithContextReturnsOnCall[i] = struct {
		result1 *s3.ListBucketMetricsConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListBuckets(arg1 *s3.ListBucketsInput) (*s3.ListBucketsOutput, error) {
	fake.listBucketsMutex.Lock()
	ret, specificReturn := fake.listBucketsReturnsOnCall[len(fake.listBucketsArgsForCall)]
	fake.listBucketsArgsForCall = append(fake.listBucketsArgsForCall, struct {
		arg1 *s3.ListBucketsInput
	}{arg1})
	fake.recordInvocation("ListBuckets", []interface{}{arg1})
	fake.listBucketsMutex.Unlock()
	if fake.ListBucketsStub != nil {
		return fake.ListBucketsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listBucketsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListBucketsCallCount() int {
	fake.listBucketsMutex.RLock()
	defer fake.listBucketsMutex.RUnlock()
	return len(fake.listBucketsArgsForCall)
}

func (fake *FakeS3API) ListBucketsCalls(stub func(*s3.ListBucketsInput) (*s3.ListBucketsOutput, error)) {
	fake.listBucketsMutex.Lock()
	defer fake.listBucketsMutex.Unlock()
	fake.ListBucketsStub = stub
}

func (fake *FakeS3API) ListBucketsArgsForCall(i int) *s3.ListBucketsInput {
	fake.listBucketsMutex.RLock()
	defer fake.listBucketsMutex.RUnlock()
	argsForCall := fake.listBucketsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListBucketsReturns(result1 *s3.ListBucketsOutput, result2 error) {
	fake.listBucketsMutex.Lock()
	defer fake.listBucketsMutex.Unlock()
	fake.ListBucketsStub = nil
	fake.listBucketsReturns = struct {
		result1 *s3.ListBucketsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketsReturnsOnCall(i int, result1 *s3.ListBucketsOutput, result2 error) {
	fake.listBucketsMutex.Lock()
	defer fake.listBucketsMutex.Unlock()
	fake.ListBucketsStub = nil
	if fake.listBucketsReturnsOnCall == nil {
		fake.listBucketsReturnsOnCall = make(map[int]struct {
			result1 *s3.ListBucketsOutput
			result2 error
		})
	}
	fake.listBucketsReturnsOnCall[i] = struct {
		result1 *s3.ListBucketsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketsRequest(arg1 *s3.ListBucketsInput) (*request.Request, *s3.ListBucketsOutput) {
	fake.listBucketsRequestMutex.Lock()
	ret, specificReturn := fake.listBucketsRequestReturnsOnCall[len(fake.listBucketsRequestArgsForCall)]
	fake.listBucketsRequestArgsForCall = append(fake.listBucketsRequestArgsForCall, struct {
		arg1 *s3.ListBucketsInput
	}{arg1})
	fake.recordInvocation("ListBucketsRequest", []interface{}{arg1})
	fake.listBucketsRequestMutex.Unlock()
	if fake.ListBucketsRequestStub != nil {
		return fake.ListBucketsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listBucketsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListBucketsRequestCallCount() int {
	fake.listBucketsRequestMutex.RLock()
	defer fake.listBucketsRequestMutex.RUnlock()
	return len(fake.listBucketsRequestArgsForCall)
}

func (fake *FakeS3API) ListBucketsRequestCalls(stub func(*s3.ListBucketsInput) (*request.Request, *s3.ListBucketsOutput)) {
	fake.listBucketsRequestMutex.Lock()
	defer fake.listBucketsRequestMutex.Unlock()
	fake.ListBucketsRequestStub = stub
}

func (fake *FakeS3API) ListBucketsRequestArgsForCall(i int) *s3.ListBucketsInput {
	fake.listBucketsRequestMutex.RLock()
	defer fake.listBucketsRequestMutex.RUnlock()
	argsForCall := fake.listBucketsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListBucketsRequestReturns(result1 *request.Request, result2 *s3.ListBucketsOutput) {
	fake.listBucketsRequestMutex.Lock()
	defer fake.listBucketsRequestMutex.Unlock()
	fake.ListBucketsRequestStub = nil
	fake.listBucketsRequestReturns = struct {
		result1 *request.Request
		result2 *s3.ListBucketsOutput
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketsRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.ListBucketsOutput) {
	fake.listBucketsRequestMutex.Lock()
	defer fake.listBucketsRequestMutex.Unlock()
	fake.ListBucketsRequestStub = nil
	if fake.listBucketsRequestReturnsOnCall == nil {
		fake.listBucketsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.ListBucketsOutput
		})
	}
	fake.listBucketsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.ListBucketsOutput
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketsWithContext(arg1 context.Context, arg2 *s3.ListBucketsInput, arg3 ...request.Option) (*s3.ListBucketsOutput, error) {
	fake.listBucketsWithContextMutex.Lock()
	ret, specificReturn := fake.listBucketsWithContextReturnsOnCall[len(fake.listBucketsWithContextArgsForCall)]
	fake.listBucketsWithContextArgsForCall = append(fake.listBucketsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListBucketsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListBucketsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listBucketsWithContextMutex.Unlock()
	if fake.ListBucketsWithContextStub != nil {
		return fake.ListBucketsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listBucketsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListBucketsWithContextCallCount() int {
	fake.listBucketsWithContextMutex.RLock()
	defer fake.listBucketsWithContextMutex.RUnlock()
	return len(fake.listBucketsWithContextArgsForCall)
}

func (fake *FakeS3API) ListBucketsWithContextCalls(stub func(context.Context, *s3.ListBucketsInput, ...request.Option) (*s3.ListBucketsOutput, error)) {
	fake.listBucketsWithContextMutex.Lock()
	defer fake.listBucketsWithContextMutex.Unlock()
	fake.ListBucketsWithContextStub = stub
}

func (fake *FakeS3API) ListBucketsWithContextArgsForCall(i int) (context.Context, *s3.ListBucketsInput, []request.Option) {
	fake.listBucketsWithContextMutex.RLock()
	defer fake.listBucketsWithContextMutex.RUnlock()
	argsForCall := fake.listBucketsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) ListBucketsWithContextReturns(result1 *s3.ListBucketsOutput, result2 error) {
	fake.listBucketsWithContextMutex.Lock()
	defer fake.listBucketsWithContextMutex.Unlock()
	fake.ListBucketsWithContextStub = nil
	fake.listBucketsWithContextReturns = struct {
		result1 *s3.ListBucketsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListBucketsWithContextReturnsOnCall(i int, result1 *s3.ListBucketsOutput, result2 error) {
	fake.listBucketsWithContextMutex.Lock()
	defer fake.listBucketsWithContextMutex.Unlock()
	fake.ListBucketsWithContextStub = nil
	if fake.listBucketsWithContextReturnsOnCall == nil {
		fake.listBucketsWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.ListBucketsOutput
			result2 error
		})
	}
	fake.listBucketsWithContextReturnsOnCall[i] = struct {
		result1 *s3.ListBucketsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListMultipartUploads(arg1 *s3.ListMultipartUploadsInput) (*s3.ListMultipartUploadsOutput, error) {
	fake.listMultipartUploadsMutex.Lock()
	ret, specificReturn := fake.listMultipartUploadsReturnsOnCall[len(fake.listMultipartUploadsArgsForCall)]
	fake.listMultipartUploadsArgsForCall = append(fake.listMultipartUploadsArgsForCall, struct {
		arg1 *s3.ListMultipartUploadsInput
	}{arg1})
	fake.recordInvocation("ListMultipartUploads", []interface{}{arg1})
	fake.listMultipartUploadsMutex.Unlock()
	if fake.ListMultipartUploadsStub != nil {
		return fake.ListMultipartUploadsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listMultipartUploadsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListMultipartUploadsCallCount() int {
	fake.listMultipartUploadsMutex.RLock()
	defer fake.listMultipartUploadsMutex.RUnlock()
	return len(fake.listMultipartUploadsArgsForCall)
}

func (fake *FakeS3API) ListMultipartUploadsCalls(stub func(*s3.ListMultipartUploadsInput) (*s3.ListMultipartUploadsOutput, error)) {
	fake.listMultipartUploadsMutex.Lock()
	defer fake.listMultipartUploadsMutex.Unlock()
	fake.ListMultipartUploadsStub = stub
}

func (fake *FakeS3API) ListMultipartUploadsArgsForCall(i int) *s3.ListMultipartUploadsInput {
	fake.listMultipartUploadsMutex.RLock()
	defer fake.listMultipartUploadsMutex.RUnlock()
	argsForCall := fake.listMultipartUploadsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListMultipartUploadsReturns(result1 *s3.ListMultipartUploadsOutput, result2 error) {
	fake.listMultipartUploadsMutex.Lock()
	defer fake.listMultipartUploadsMutex.Unlock()
	fake.ListMultipartUploadsStub = nil
	fake.listMultipartUploadsReturns = struct {
		result1 *s3.ListMultipartUploadsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListMultipartUploadsReturnsOnCall(i int, result1 *s3.ListMultipartUploadsOutput, result2 error) {
	fake.listMultipartUploadsMutex.Lock()
	defer fake.listMultipartUploadsMutex.Unlock()
	fake.ListMultipartUploadsStub = nil
	if fake.listMultipartUploadsReturnsOnCall == nil {
		fake.listMultipartUploadsReturnsOnCall = make(map[int]struct {
			result1 *s3.ListMultipartUploadsOutput
			result2 error
		})
	}
	fake.listMultipartUploadsReturnsOnCall[i] = struct {
		result1 *s3.ListMultipartUploadsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListMultipartUploadsPages(arg1 *s3.ListMultipartUploadsInput, arg2 func(*s3.ListMultipartUploadsOutput, bool) bool) error {
	fake.listMultipartUploadsPagesMutex.Lock()
	ret, specificReturn := fake.listMultipartUploadsPagesReturnsOnCall[len(fake.listMultipartUploadsPagesArgsForCall)]
	fake.listMultipartUploadsPagesArgsForCall = append(fake.listMultipartUploadsPagesArgsForCall, struct {
		arg1 *s3.ListMultipartUploadsInput
		arg2 func(*s3.ListMultipartUploadsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListMultipartUploadsPages", []interface{}{arg1, arg2})
	fake.listMultipartUploadsPagesMutex.Unlock()
	if fake.ListMultipartUploadsPagesStub != nil {
		return fake.ListMultipartUploadsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listMultipartUploadsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) ListMultipartUploadsPagesCallCount() int {
	fake.listMultipartUploadsPagesMutex.RLock()
	defer fake.listMultipartUploadsPagesMutex.RUnlock()
	return len(fake.listMultipartUploadsPagesArgsForCall)
}

func (fake *FakeS3API) ListMultipartUploadsPagesCalls(stub func(*s3.ListMultipartUploadsInput, func(*s3.ListMultipartUploadsOutput, bool) bool) error) {
	fake.listMultipartUploadsPagesMutex.Lock()
	defer fake.listMultipartUploadsPagesMutex.Unlock()
	fake.ListMultipartUploadsPagesStub = stub
}

func (fake *FakeS3API) ListMultipartUploadsPagesArgsForCall(i int) (*s3.ListMultipartUploadsInput, func(*s3.ListMultipartUploadsOutput, bool) bool) {
	fake.listMultipartUploadsPagesMutex.RLock()
	defer fake.listMultipartUploadsPagesMutex.RUnlock()
	argsForCall := fake.listMultipartUploadsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeS3API) ListMultipartUploadsPagesReturns(result1 error) {
	fake.listMultipartUploadsPagesMutex.Lock()
	defer fake.listMultipartUploadsPagesMutex.Unlock()
	fake.ListMultipartUploadsPagesStub = nil
	fake.listMultipartUploadsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListMultipartUploadsPagesReturnsOnCall(i int, result1 error) {
	fake.listMultipartUploadsPagesMutex.Lock()
	defer fake.listMultipartUploadsPagesMutex.Unlock()
	fake.ListMultipartUploadsPagesStub = nil
	if fake.listMultipartUploadsPagesReturnsOnCall == nil {
		fake.listMultipartUploadsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listMultipartUploadsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListMultipartUploadsPagesWithContext(arg1 context.Context, arg2 *s3.ListMultipartUploadsInput, arg3 func(*s3.ListMultipartUploadsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listMultipartUploadsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listMultipartUploadsPagesWithContextReturnsOnCall[len(fake.listMultipartUploadsPagesWithContextArgsForCall)]
	fake.listMultipartUploadsPagesWithContextArgsForCall = append(fake.listMultipartUploadsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListMultipartUploadsInput
		arg3 func(*s3.ListMultipartUploadsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListMultipartUploadsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listMultipartUploadsPagesWithContextMutex.Unlock()
	if fake.ListMultipartUploadsPagesWithContextStub != nil {
		return fake.ListMultipartUploadsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listMultipartUploadsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) ListMultipartUploadsPagesWithContextCallCount() int {
	fake.listMultipartUploadsPagesWithContextMutex.RLock()
	defer fake.listMultipartUploadsPagesWithContextMutex.RUnlock()
	return len(fake.listMultipartUploadsPagesWithContextArgsForCall)
}

func (fake *FakeS3API) ListMultipartUploadsPagesWithContextCalls(stub func(context.Context, *s3.ListMultipartUploadsInput, func(*s3.ListMultipartUploadsOutput, bool) bool, ...request.Option) error) {
	fake.listMultipartUploadsPagesWithContextMutex.Lock()
	defer fake.listMultipartUploadsPagesWithContextMutex.Unlock()
	fake.ListMultipartUploadsPagesWithContextStub = stub
}

func (fake *FakeS3API) ListMultipartUploadsPagesWithContextArgsForCall(i int) (context.Context, *s3.ListMultipartUploadsInput, func(*s3.ListMultipartUploadsOutput, bool) bool, []request.Option) {
	fake.listMultipartUploadsPagesWithContextMutex.RLock()
	defer fake.listMultipartUploadsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listMultipartUploadsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeS3API) ListMultipartUploadsPagesWithContextReturns(result1 error) {
	fake.listMultipartUploadsPagesWithContextMutex.Lock()
	defer fake.listMultipartUploadsPagesWithContextMutex.Unlock()
	fake.ListMultipartUploadsPagesWithContextStub = nil
	fake.listMultipartUploadsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListMultipartUploadsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listMultipartUploadsPagesWithContextMutex.Lock()
	defer fake.listMultipartUploadsPagesWithContextMutex.Unlock()
	fake.ListMultipartUploadsPagesWithContextStub = nil
	if fake.listMultipartUploadsPagesWithContextReturnsOnCall == nil {
		fake.listMultipartUploadsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listMultipartUploadsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListMultipartUploadsRequest(arg1 *s3.ListMultipartUploadsInput) (*request.Request, *s3.ListMultipartUploadsOutput) {
	fake.listMultipartUploadsRequestMutex.Lock()
	ret, specificReturn := fake.listMultipartUploadsRequestReturnsOnCall[len(fake.listMultipartUploadsRequestArgsForCall)]
	fake.listMultipartUploadsRequestArgsForCall = append(fake.listMultipartUploadsRequestArgsForCall, struct {
		arg1 *s3.ListMultipartUploadsInput
	}{arg1})
	fake.recordInvocation("ListMultipartUploadsRequest", []interface{}{arg1})
	fake.listMultipartUploadsRequestMutex.Unlock()
	if fake.ListMultipartUploadsRequestStub != nil {
		return fake.ListMultipartUploadsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listMultipartUploadsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListMultipartUploadsRequestCallCount() int {
	fake.listMultipartUploadsRequestMutex.RLock()
	defer fake.listMultipartUploadsRequestMutex.RUnlock()
	return len(fake.listMultipartUploadsRequestArgsForCall)
}

func (fake *FakeS3API) ListMultipartUploadsRequestCalls(stub func(*s3.ListMultipartUploadsInput) (*request.Request, *s3.ListMultipartUploadsOutput)) {
	fake.listMultipartUploadsRequestMutex.Lock()
	defer fake.listMultipartUploadsRequestMutex.Unlock()
	fake.ListMultipartUploadsRequestStub = stub
}

func (fake *FakeS3API) ListMultipartUploadsRequestArgsForCall(i int) *s3.ListMultipartUploadsInput {
	fake.listMultipartUploadsRequestMutex.RLock()
	defer fake.listMultipartUploadsRequestMutex.RUnlock()
	argsForCall := fake.listMultipartUploadsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListMultipartUploadsRequestReturns(result1 *request.Request, result2 *s3.ListMultipartUploadsOutput) {
	fake.listMultipartUploadsRequestMutex.Lock()
	defer fake.listMultipartUploadsRequestMutex.Unlock()
	fake.ListMultipartUploadsRequestStub = nil
	fake.listMultipartUploadsRequestReturns = struct {
		result1 *request.Request
		result2 *s3.ListMultipartUploadsOutput
	}{result1, result2}
}

func (fake *FakeS3API) ListMultipartUploadsRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.ListMultipartUploadsOutput) {
	fake.listMultipartUploadsRequestMutex.Lock()
	defer fake.listMultipartUploadsRequestMutex.Unlock()
	fake.ListMultipartUploadsRequestStub = nil
	if fake.listMultipartUploadsRequestReturnsOnCall == nil {
		fake.listMultipartUploadsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.ListMultipartUploadsOutput
		})
	}
	fake.listMultipartUploadsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.ListMultipartUploadsOutput
	}{result1, result2}
}

func (fake *FakeS3API) ListMultipartUploadsWithContext(arg1 context.Context, arg2 *s3.ListMultipartUploadsInput, arg3 ...request.Option) (*s3.ListMultipartUploadsOutput, error) {
	fake.listMultipartUploadsWithContextMutex.Lock()
	ret, specificReturn := fake.listMultipartUploadsWithContextReturnsOnCall[len(fake.listMultipartUploadsWithContextArgsForCall)]
	fake.listMultipartUploadsWithContextArgsForCall = append(fake.listMultipartUploadsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListMultipartUploadsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListMultipartUploadsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listMultipartUploadsWithContextMutex.Unlock()
	if fake.ListMultipartUploadsWithContextStub != nil {
		return fake.ListMultipartUploadsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listMultipartUploadsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListMultipartUploadsWithContextCallCount() int {
	fake.listMultipartUploadsWithContextMutex.RLock()
	defer fake.listMultipartUploadsWithContextMutex.RUnlock()
	return len(fake.listMultipartUploadsWithContextArgsForCall)
}

func (fake *FakeS3API) ListMultipartUploadsWithContextCalls(stub func(context.Context, *s3.ListMultipartUploadsInput, ...request.Option) (*s3.ListMultipartUploadsOutput, error)) {
	fake.listMultipartUploadsWithContextMutex.Lock()
	defer fake.listMultipartUploadsWithContextMutex.Unlock()
	fake.ListMultipartUploadsWithContextStub = stub
}

func (fake *FakeS3API) ListMultipartUploadsWithContextArgsForCall(i int) (context.Context, *s3.ListMultipartUploadsInput, []request.Option) {
	fake.listMultipartUploadsWithContextMutex.RLock()
	defer fake.listMultipartUploadsWithContextMutex.RUnlock()
	argsForCall := fake.listMultipartUploadsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) ListMultipartUploadsWithContextReturns(result1 *s3.ListMultipartUploadsOutput, result2 error) {
	fake.listMultipartUploadsWithContextMutex.Lock()
	defer fake.listMultipartUploadsWithContextMutex.Unlock()
	fake.ListMultipartUploadsWithContextStub = nil
	fake.listMultipartUploadsWithContextReturns = struct {
		result1 *s3.ListMultipartUploadsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListMultipartUploadsWithContextReturnsOnCall(i int, result1 *s3.ListMultipartUploadsOutput, result2 error) {
	fake.listMultipartUploadsWithContextMutex.Lock()
	defer fake.listMultipartUploadsWithContextMutex.Unlock()
	fake.ListMultipartUploadsWithContextStub = nil
	if fake.listMultipartUploadsWithContextReturnsOnCall == nil {
		fake.listMultipartUploadsWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.ListMultipartUploadsOutput
			result2 error
		})
	}
	fake.listMultipartUploadsWithContextReturnsOnCall[i] = struct {
		result1 *s3.ListMultipartUploadsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListObjectVersions(arg1 *s3.ListObjectVersionsInput) (*s3.ListObjectVersionsOutput, error) {
	fake.listObjectVersionsMutex.Lock()
	ret, specificReturn := fake.listObjectVersionsReturnsOnCall[len(fake.listObjectVersionsArgsForCall)]
	fake.listObjectVersionsArgsForCall = append(fake.listObjectVersionsArgsForCall, struct {
		arg1 *s3.ListObjectVersionsInput
	}{arg1})
	fake.recordInvocation("ListObjectVersions", []interface{}{arg1})
	fake.listObjectVersionsMutex.Unlock()
	if fake.ListObjectVersionsStub != nil {
		return fake.ListObjectVersionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listObjectVersionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListObjectVersionsCallCount() int {
	fake.listObjectVersionsMutex.RLock()
	defer fake.listObjectVersionsMutex.RUnlock()
	return len(fake.listObjectVersionsArgsForCall)
}

func (fake *FakeS3API) ListObjectVersionsCalls(stub func(*s3.ListObjectVersionsInput) (*s3.ListObjectVersionsOutput, error)) {
	fake.listObjectVersionsMutex.Lock()
	defer fake.listObjectVersionsMutex.Unlock()
	fake.ListObjectVersionsStub = stub
}

func (fake *FakeS3API) ListObjectVersionsArgsForCall(i int) *s3.ListObjectVersionsInput {
	fake.listObjectVersionsMutex.RLock()
	defer fake.listObjectVersionsMutex.RUnlock()
	argsForCall := fake.listObjectVersionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListObjectVersionsReturns(result1 *s3.ListObjectVersionsOutput, result2 error) {
	fake.listObjectVersionsMutex.Lock()
	defer fake.listObjectVersionsMutex.Unlock()
	fake.ListObjectVersionsStub = nil
	fake.listObjectVersionsReturns = struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListObjectVersionsReturnsOnCall(i int, result1 *s3.ListObjectVersionsOutput, result2 error) {
	fake.listObjectVersionsMutex.Lock()
	defer fake.listObjectVersionsMutex.Unlock()
	fake.ListObjectVersionsStub = nil
	if fake.listObjectVersionsReturnsOnCall == nil {
		fake.listObjectVersionsReturnsOnCall = make(map[int]struct {
			result1 *s3.ListObjectVersionsOutput
			result2 error
		})
	}
	fake.listObjectVersionsReturnsOnCall[i] = struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListObjectVersionsPages(arg1 *s3.ListObjectVersionsInput, arg2 func(*s3.ListObjectVersionsOutput, bool) bool) error {
	fake.listObjectVersionsPagesMutex.Lock()
	ret, specificReturn := fake.listObjectVersionsPagesReturnsOnCall[len(fake.listObjectVersionsPagesArgsForCall)]
	fake.listObjectVersionsPagesArgsForCall = append(fake.listObjectVersionsPagesArgsForCall, struct {
		arg1 *s3.ListObjectVersionsInput
		arg2 func(*s3.ListObjectVersionsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListObjectVersionsPages", []interface{}{arg1, arg2})
	fake.listObjectVersionsPagesMutex.Unlock()
	if fake.ListObjectVersionsPagesStub != nil {
		return fake.ListObjectVersionsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listObjectVersionsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) ListObjectVersionsPagesCallCount() int {
	fake.listObjectVersionsPagesMutex.RLock()
	defer fake.listObjectVersionsPagesMutex.RUnlock()
	return len(fake.listObjectVersionsPagesArgsForCall)
}

func (fake *FakeS3API) ListObjectVersionsPagesCalls(stub func(*s3.ListObjectVersionsInput, func(*s3.ListObjectVersionsOutput, bool) bool) error) {
	fake.listObjectVersionsPagesMutex.Lock()
	defer fake.listObjectVersionsPagesMutex.Unlock()
	fake.ListObjectVersionsPagesStub = stub
}

func (fake *FakeS3API) ListObjectVersionsPagesArgsForCall(i int) (*s3.ListObjectVersionsInput, func(*s3.ListObjectVersionsOutput, bool) bool) {
	fake.listObjectVersionsPagesMutex.RLock()
	defer fake.listObjectVersionsPagesMutex.RUnlock()
	argsForCall := fake.listObjectVersionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeS3API) ListObjectVersionsPagesReturns(result1 error) {
	fake.listObjectVersionsPagesMutex.Lock()
	defer fake.listObjectVersionsPagesMutex.Unlock()
	fake.ListObjectVersionsPagesStub = nil
	fake.listObjectVersionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListObjectVersionsPagesReturnsOnCall(i int, result1 error) {
	fake.listObjectVersionsPagesMutex.Lock()
	defer fake.listObjectVersionsPagesMutex.Unlock()
	fake.ListObjectVersionsPagesStub = nil
	if fake.listObjectVersionsPagesReturnsOnCall == nil {
		fake.listObjectVersionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listObjectVersionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListObjectVersionsPagesWithContext(arg1 context.Context, arg2 *s3.ListObjectVersionsInput, arg3 func(*s3.ListObjectVersionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listObjectVersionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listObjectVersionsPagesWithContextReturnsOnCall[len(fake.listObjectVersionsPagesWithContextArgsForCall)]
	fake.listObjectVersionsPagesWithContextArgsForCall = append(fake.listObjectVersionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListObjectVersionsInput
		arg3 func(*s3.ListObjectVersionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListObjectVersionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listObjectVersionsPagesWithContextMutex.Unlock()
	if fake.ListObjectVersionsPagesWithContextStub != nil {
		return fake.ListObjectVersionsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listObjectVersionsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) ListObjectVersionsPagesWithContextCallCount() int {
	fake.listObjectVersionsPagesWithContextMutex.RLock()
	defer fake.listObjectVersionsPagesWithContextMutex.RUnlock()
	return len(fake.listObjectVersionsPagesWithContextArgsForCall)
}

func (fake *FakeS3API) ListObjectVersionsPagesWithContextCalls(stub func(context.Context, *s3.ListObjectVersionsInput, func(*s3.ListObjectVersionsOutput, bool) bool, ...request.Option) error) {
	fake.listObjectVersionsPagesWithContextMutex.Lock()
	defer fake.listObjectVersionsPagesWithContextMutex.Unlock()
	fake.ListObjectVersionsPagesWithContextStub = stub
}

func (fake *FakeS3API) ListObjectVersionsPagesWithContextArgsForCall(i int) (context.Context, *s3.ListObjectVersionsInput, func(*s3.ListObjectVersionsOutput, bool) bool, []request.Option) {
	fake.listObjectVersionsPagesWithContextMutex.RLock()
	defer fake.listObjectVersionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listObjectVersionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeS3API) ListObjectVersionsPagesWithContextReturns(result1 error) {
	fake.listObjectVersionsPagesWithContextMutex.Lock()
	defer fake.listObjectVersionsPagesWithContextMutex.Unlock()
	fake.ListObjectVersionsPagesWithContextStub = nil
	fake.listObjectVersionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListObjectVersionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listObjectVersionsPagesWithContextMutex.Lock()
	defer fake.listObjectVersionsPagesWithContextMutex.Unlock()
	fake.ListObjectVersionsPagesWithContextStub = nil
	if fake.listObjectVersionsPagesWithContextReturnsOnCall == nil {
		fake.listObjectVersionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listObjectVersionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListObjectVersionsRequest(arg1 *s3.ListObjectVersionsInput) (*request.Request, *s3.ListObjectVersionsOutput) {
	fake.listObjectVersionsRequestMutex.Lock()
	ret, specificReturn := fake.listObjectVersionsRequestReturnsOnCall[len(fake.listObjectVersionsRequestArgsForCall)]
	fake.listObjectVersionsRequestArgsForCall = append(fake.listObjectVersionsRequestArgsForCall, struct {
		arg1 *s3.ListObjectVersionsInput
	}{arg1})
	fake.recordInvocation("ListObjectVersionsRequest", []interface{}{arg1})
	fake.listObjectVersionsRequestMutex.Unlock()
	if fake.ListObjectVersionsRequestStub != nil {
		return fake.ListObjectVersionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listObjectVersionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListObjectVersionsRequestCallCount() int {
	fake.listObjectVersionsRequestMutex.RLock()
	defer fake.listObjectVersionsRequestMutex.RUnlock()
	return len(fake.listObjectVersionsRequestArgsForCall)
}

func (fake *FakeS3API) ListObjectVersionsRequestCalls(stub func(*s3.ListObjectVersionsInput) (*request.Request, *s3.ListObjectVersionsOutput)) {
	fake.listObjectVersionsRequestMutex.Lock()
	defer fake.listObjectVersionsRequestMutex.Unlock()
	fake.ListObjectVersionsRequestStub = stub
}

func (fake *FakeS3API) ListObjectVersionsRequestArgsForCall(i int) *s3.ListObjectVersionsInput {
	fake.listObjectVersionsRequestMutex.RLock()
	defer fake.listObjectVersionsRequestMutex.RUnlock()
	argsForCall := fake.listObjectVersionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListObjectVersionsRequestReturns(result1 *request.Request, result2 *s3.ListObjectVersionsOutput) {
	fake.listObjectVersionsRequestMutex.Lock()
	defer fake.listObjectVersionsRequestMutex.Unlock()
	fake.ListObjectVersionsRequestStub = nil
	fake.listObjectVersionsRequestReturns = struct {
		result1 *request.Request
		result2 *s3.ListObjectVersionsOutput
	}{result1, result2}
}

func (fake *FakeS3API) ListObjectVersionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.ListObjectVersionsOutput) {
	fake.listObjectVersionsRequestMutex.Lock()
	defer fake.listObjectVersionsRequestMutex.Unlock()
	fake.ListObjectVersionsRequestStub = nil
	if fake.listObjectVersionsRequestReturnsOnCall == nil {
		fake.listObjectVersionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.ListObjectVersionsOutput
		})
	}
	fake.listObjectVersionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.ListObjectVersionsOutput
	}{result1, result2}
}

func (fake *FakeS3API) ListObjectVersionsWithContext(arg1 context.Context, arg2 *s3.ListObjectVersionsInput, arg3 ...request.Option) (*s3.ListObjectVersionsOutput, error) {
	fake.listObjectVersionsWithContextMutex.Lock()
	ret, specificReturn := fake.listObjectVersionsWithContextReturnsOnCall[len(fake.listObjectVersionsWithContextArgsForCall)]
	fake.listObjectVersionsWithContextArgsForCall = append(fake.listObjectVersionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListObjectVersionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListObjectVersionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listObjectVersionsWithContextMutex.Unlock()
	if fake.ListObjectVersionsWithContextStub != nil {
		return fake.ListObjectVersionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listObjectVersionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListObjectVersionsWithContextCallCount() int {
	fake.listObjectVersionsWithContextMutex.RLock()
	defer fake.listObjectVersionsWithContextMutex.RUnlock()
	return len(fake.listObjectVersionsWithContextArgsForCall)
}

func (fake *FakeS3API) ListObjectVersionsWithContextCalls(stub func(context.Context, *s3.ListObjectVersionsInput, ...request.Option) (*s3.ListObjectVersionsOutput, error)) {
	fake.listObjectVersionsWithContextMutex.Lock()
	defer fake.listObjectVersionsWithContextMutex.Unlock()
	fake.ListObjectVersionsWithContextStub = stub
}

func (fake *FakeS3API) ListObjectVersionsWithContextArgsForCall(i int) (context.Context, *s3.ListObjectVersionsInput, []request.Option) {
	fake.listObjectVersionsWithContextMutex.RLock()
	defer fake.listObjectVersionsWithContextMutex.RUnlock()
	argsForCall := fake.listObjectVersionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) ListObjectVersionsWithContextReturns(result1 *s3.ListObjectVersionsOutput, result2 error) {
	fake.listObjectVersionsWithContextMutex.Lock()
	defer fake.listObjectVersionsWithContextMutex.Unlock()
	fake.ListObjectVersionsWithContextStub = nil
	fake.listObjectVersionsWithContextReturns = struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListObjectVersionsWithContextReturnsOnCall(i int, result1 *s3.ListObjectVersionsOutput, result2 error) {
	fake.listObjectVersionsWithContextMutex.Lock()
	defer fake.listObjectVersionsWithContextMutex.Unlock()
	fake.ListObjectVersionsWithContextStub = nil
	if fake.listObjectVersionsWithContextReturnsOnCall == nil {
		fake.listObjectVersionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.ListObjectVersionsOutput
			result2 error
		})
	}
	fake.listObjectVersionsWithContextReturnsOnCall[i] = struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListObjects(arg1 *s3.ListObjectsInput) (*s3.ListObjectsOutput, error) {
	fake.listObjectsMutex.Lock()
	ret, specificReturn := fake.listObjectsReturnsOnCall[len(fake.listObjectsArgsForCall)]
	fake.listObjectsArgsForCall = append(fake.listObjectsArgsForCall, struct {
		arg1 *s3.ListObjectsInput
	}{arg1})
	fake.recordInvocation("ListObjects", []interface{}{arg1})
	fake.listObjectsMutex.Unlock()
	if fake.ListObjectsStub != nil {
		return fake.ListObjectsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listObjectsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListObjectsCallCount() int {
	fake.listObjectsMutex.RLock()
	defer fake.listObjectsMutex.RUnlock()
	return len(fake.listObjectsArgsForCall)
}

func (fake *FakeS3API) ListObjectsCalls(stub func(*s3.ListObjectsInput) (*s3.ListObjectsOutput, error)) {
	fake.listObjectsMutex.Lock()
	defer fake.listObjectsMutex.Unlock()
	fake.ListObjectsStub = stub
}

func (fake *FakeS3API) ListObjectsArgsForCall(i int) *s3.ListObjectsInput {
	fake.listObjectsMutex.RLock()
	defer fake.listObjectsMutex.RUnlock()
	argsForCall := fake.listObjectsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListObjectsReturns(result1 *s3.ListObjectsOutput, result2 error) {
	fake.listObjectsMutex.Lock()
	defer fake.listObjectsMutex.Unlock()
	fake.ListObjectsStub = nil
	fake.listObjectsReturns = struct {
		result1 *s3.ListObjectsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListObjectsReturnsOnCall(i int, result1 *s3.ListObjectsOutput, result2 error) {
	fake.listObjectsMutex.Lock()
	defer fake.listObjectsMutex.Unlock()
	fake.ListObjectsStub = nil
	if fake.listObjectsReturnsOnCall == nil {
		fake.listObjectsReturnsOnCall = make(map[int]struct {
			result1 *s3.ListObjectsOutput
			result2 error
		})
	}
	fake.listObjectsReturnsOnCall[i] = struct {
		result1 *s3.ListObjectsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListObjectsPages(arg1 *s3.ListObjectsInput, arg2 func(*s3.ListObjectsOutput, bool) bool) error {
	fake.listObjectsPagesMutex.Lock()
	ret, specificReturn := fake.listObjectsPagesReturnsOnCall[len(fake.listObjectsPagesArgsForCall)]
	fake.listObjectsPagesArgsForCall = append(fake.listObjectsPagesArgsForCall, struct {
		arg1 *s3.ListObjectsInput
		arg2 func(*s3.ListObjectsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListObjectsPages", []interface{}{arg1, arg2})
	fake.listObjectsPagesMutex.Unlock()
	if fake.ListObjectsPagesStub != nil {
		return fake.ListObjectsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listObjectsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) ListObjectsPagesCallCount() int {
	fake.listObjectsPagesMutex.RLock()
	defer fake.listObjectsPagesMutex.RUnlock()
	return len(fake.listObjectsPagesArgsForCall)
}

func (fake *FakeS3API) ListObjectsPagesCalls(stub func(*s3.ListObjectsInput, func(*s3.ListObjectsOutput, bool) bool) error) {
	fake.listObjectsPagesMutex.Lock()
	defer fake.listObjectsPagesMutex.Unlock()
	fake.ListObjectsPagesStub = stub
}

func (fake *FakeS3API) ListObjectsPagesArgsForCall(i int) (*s3.ListObjectsInput, func(*s3.ListObjectsOutput, bool) bool) {
	fake.listObjectsPagesMutex.RLock()
	defer fake.listObjectsPagesMutex.RUnlock()
	argsForCall := fake.listObjectsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeS3API) ListObjectsPagesReturns(result1 error) {
	fake.listObjectsPagesMutex.Lock()
	defer fake.listObjectsPagesMutex.Unlock()
	fake.ListObjectsPagesStub = nil
	fake.listObjectsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListObjectsPagesReturnsOnCall(i int, result1 error) {
	fake.listObjectsPagesMutex.Lock()
	defer fake.listObjectsPagesMutex.Unlock()
	fake.ListObjectsPagesStub = nil
	if fake.listObjectsPagesReturnsOnCall == nil {
		fake.listObjectsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listObjectsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListObjectsPagesWithContext(arg1 context.Context, arg2 *s3.ListObjectsInput, arg3 func(*s3.ListObjectsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listObjectsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listObjectsPagesWithContextReturnsOnCall[len(fake.listObjectsPagesWithContextArgsForCall)]
	fake.listObjectsPagesWithContextArgsForCall = append(fake.listObjectsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListObjectsInput
		arg3 func(*s3.ListObjectsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListObjectsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listObjectsPagesWithContextMutex.Unlock()
	if fake.ListObjectsPagesWithContextStub != nil {
		return fake.ListObjectsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listObjectsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) ListObjectsPagesWithContextCallCount() int {
	fake.listObjectsPagesWithContextMutex.RLock()
	defer fake.listObjectsPagesWithContextMutex.RUnlock()
	return len(fake.listObjectsPagesWithContextArgsForCall)
}

func (fake *FakeS3API) ListObjectsPagesWithContextCalls(stub func(context.Context, *s3.ListObjectsInput, func(*s3.ListObjectsOutput, bool) bool, ...request.Option) error) {
	fake.listObjectsPagesWithContextMutex.Lock()
	defer fake.listObjectsPagesWithContextMutex.Unlock()
	fake.ListObjectsPagesWithContextStub = stub
}

func (fake *FakeS3API) ListObjectsPagesWithContextArgsForCall(i int) (context.Context, *s3.ListObjectsInput, func(*s3.ListObjectsOutput, bool) bool, []request.Option) {
	fake.listObjectsPagesWithContextMutex.RLock()
	defer fake.listObjectsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listObjectsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeS3API) ListObjectsPagesWithContextReturns(result1 error) {
	fake.listObjectsPagesWithContextMutex.Lock()
	defer fake.listObjectsPagesWithContextMutex.Unlock()
	fake.ListObjectsPagesWithContextStub = nil
	fake.listObjectsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListObjectsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listObjectsPagesWithContextMutex.Lock()
	defer fake.listObjectsPagesWithContextMutex.Unlock()
	fake.ListObjectsPagesWithContextStub = nil
	if fake.listObjectsPagesWithContextReturnsOnCall == nil {
		fake.listObjectsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listObjectsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListObjectsRequest(arg1 *s3.ListObjectsInput) (*request.Request, *s3.ListObjectsOutput) {
	fake.listObjectsRequestMutex.Lock()
	ret, specificReturn := fake.listObjectsRequestReturnsOnCall[len(fake.listObjectsRequestArgsForCall)]
	fake.listObjectsRequestArgsForCall = append(fake.listObjectsRequestArgsForCall, struct {
		arg1 *s3.ListObjectsInput
	}{arg1})
	fake.recordInvocation("ListObjectsRequest", []interface{}{arg1})
	fake.listObjectsRequestMutex.Unlock()
	if fake.ListObjectsRequestStub != nil {
		return fake.ListObjectsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listObjectsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListObjectsRequestCallCount() int {
	fake.listObjectsRequestMutex.RLock()
	defer fake.listObjectsRequestMutex.RUnlock()
	return len(fake.listObjectsRequestArgsForCall)
}

func (fake *FakeS3API) ListObjectsRequestCalls(stub func(*s3.ListObjectsInput) (*request.Request, *s3.ListObjectsOutput)) {
	fake.listObjectsRequestMutex.Lock()
	defer fake.listObjectsRequestMutex.Unlock()
	fake.ListObjectsRequestStub = stub
}

func (fake *FakeS3API) ListObjectsRequestArgsForCall(i int) *s3.ListObjectsInput {
	fake.listObjectsRequestMutex.RLock()
	defer fake.listObjectsRequestMutex.RUnlock()
	argsForCall := fake.listObjectsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListObjectsRequestReturns(result1 *request.Request, result2 *s3.ListObjectsOutput) {
	fake.listObjectsRequestMutex.Lock()
	defer fake.listObjectsRequestMutex.Unlock()
	fake.ListObjectsRequestStub = nil
	fake.listObjectsRequestReturns = struct {
		result1 *request.Request
		result2 *s3.ListObjectsOutput
	}{result1, result2}
}

func (fake *FakeS3API) ListObjectsRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.ListObjectsOutput) {
	fake.listObjectsRequestMutex.Lock()
	defer fake.listObjectsRequestMutex.Unlock()
	fake.ListObjectsRequestStub = nil
	if fake.listObjectsRequestReturnsOnCall == nil {
		fake.listObjectsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.ListObjectsOutput
		})
	}
	fake.listObjectsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.ListObjectsOutput
	}{result1, result2}
}

func (fake *FakeS3API) ListObjectsV2(arg1 *s3.ListObjectsV2Input) (*s3.ListObjectsV2Output, error) {
	fake.listObjectsV2Mutex.Lock()
	ret, specificReturn := fake.listObjectsV2ReturnsOnCall[len(fake.listObjectsV2ArgsForCall)]
	fake.listObjectsV2ArgsForCall = append(fake.listObjectsV2ArgsForCall, struct {
		arg1 *s3.ListObjectsV2Input
	}{arg1})
	fake.recordInvocation("ListObjectsV2", []interface{}{arg1})
	fake.listObjectsV2Mutex.Unlock()
	if fake.ListObjectsV2Stub != nil {
		return fake.ListObjectsV2Stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listObjectsV2Returns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListObjectsV2CallCount() int {
	fake.listObjectsV2Mutex.RLock()
	defer fake.listObjectsV2Mutex.RUnlock()
	return len(fake.listObjectsV2ArgsForCall)
}

func (fake *FakeS3API) ListObjectsV2Calls(stub func(*s3.ListObjectsV2Input) (*s3.ListObjectsV2Output, error)) {
	fake.listObjectsV2Mutex.Lock()
	defer fake.listObjectsV2Mutex.Unlock()
	fake.ListObjectsV2Stub = stub
}

func (fake *FakeS3API) ListObjectsV2ArgsForCall(i int) *s3.ListObjectsV2Input {
	fake.listObjectsV2Mutex.RLock()
	defer fake.listObjectsV2Mutex.RUnlock()
	argsForCall := fake.listObjectsV2ArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListObjectsV2Returns(result1 *s3.ListObjectsV2Output, result2 error) {
	fake.listObjectsV2Mutex.Lock()
	defer fake.listObjectsV2Mutex.Unlock()
	fake.ListObjectsV2Stub = nil
	fake.listObjectsV2Returns = struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListObjectsV2ReturnsOnCall(i int, result1 *s3.ListObjectsV2Output, result2 error) {
	fake.listObjectsV2Mutex.Lock()
	defer fake.listObjectsV2Mutex.Unlock()
	fake.ListObjectsV2Stub = nil
	if fake.listObjectsV2ReturnsOnCall == nil {
		fake.listObjectsV2ReturnsOnCall = make(map[int]struct {
			result1 *s3.ListObjectsV2Output
			result2 error
		})
	}
	fake.listObjectsV2ReturnsOnCall[i] = struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListObjectsV2Pages(arg1 *s3.ListObjectsV2Input, arg2 func(*s3.ListObjectsV2Output, bool) bool) error {
	fake.listObjectsV2PagesMutex.Lock()
	ret, specificReturn := fake.listObjectsV2PagesReturnsOnCall[len(fake.listObjectsV2PagesArgsForCall)]
	fake.listObjectsV2PagesArgsForCall = append(fake.listObjectsV2PagesArgsForCall, struct {
		arg1 *s3.ListObjectsV2Input
		arg2 func(*s3.ListObjectsV2Output, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListObjectsV2Pages", []interface{}{arg1, arg2})
	fake.listObjectsV2PagesMutex.Unlock()
	if fake.ListObjectsV2PagesStub != nil {
		return fake.ListObjectsV2PagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listObjectsV2PagesReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) ListObjectsV2PagesCallCount() int {
	fake.listObjectsV2PagesMutex.RLock()
	defer fake.listObjectsV2PagesMutex.RUnlock()
	return len(fake.listObjectsV2PagesArgsForCall)
}

func (fake *FakeS3API) ListObjectsV2PagesCalls(stub func(*s3.ListObjectsV2Input, func(*s3.ListObjectsV2Output, bool) bool) error) {
	fake.listObjectsV2PagesMutex.Lock()
	defer fake.listObjectsV2PagesMutex.Unlock()
	fake.ListObjectsV2PagesStub = stub
}

func (fake *FakeS3API) ListObjectsV2PagesArgsForCall(i int) (*s3.ListObjectsV2Input, func(*s3.ListObjectsV2Output, bool) bool) {
	fake.listObjectsV2PagesMutex.RLock()
	defer fake.listObjectsV2PagesMutex.RUnlock()
	argsForCall := fake.listObjectsV2PagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeS3API) ListObjectsV2PagesReturns(result1 error) {
	fake.listObjectsV2PagesMutex.Lock()
	defer fake.listObjectsV2PagesMutex.Unlock()
	fake.ListObjectsV2PagesStub = nil
	fake.listObjectsV2PagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListObjectsV2PagesReturnsOnCall(i int, result1 error) {
	fake.listObjectsV2PagesMutex.Lock()
	defer fake.listObjectsV2PagesMutex.Unlock()
	fake.ListObjectsV2PagesStub = nil
	if fake.listObjectsV2PagesReturnsOnCall == nil {
		fake.listObjectsV2PagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listObjectsV2PagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListObjectsV2PagesWithContext(arg1 context.Context, arg2 *s3.ListObjectsV2Input, arg3 func(*s3.ListObjectsV2Output, bool) bool, arg4 ...request.Option) error {
	fake.listObjectsV2PagesWithContextMutex.Lock()
	ret, specificReturn := fake.listObjectsV2PagesWithContextReturnsOnCall[len(fake.listObjectsV2PagesWithContextArgsForCall)]
	fake.listObjectsV2PagesWithContextArgsForCall = append(fake.listObjectsV2PagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListObjectsV2Input
		arg3 func(*s3.ListObjectsV2Output, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListObjectsV2PagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listObjectsV2PagesWithContextMutex.Unlock()
	if fake.ListObjectsV2PagesWithContextStub != nil {
		return fake.ListObjectsV2PagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listObjectsV2PagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) ListObjectsV2PagesWithContextCallCount() int {
	fake.listObjectsV2PagesWithContextMutex.RLock()
	defer fake.listObjectsV2PagesWithContextMutex.RUnlock()
	return len(fake.listObjectsV2PagesWithContextArgsForCall)
}

func (fake *FakeS3API) ListObjectsV2PagesWithContextCalls(stub func(context.Context, *s3.ListObjectsV2Input, func(*s3.ListObjectsV2Output, bool) bool, ...request.Option) error) {
	fake.listObjectsV2PagesWithContextMutex.Lock()
	defer fake.listObjectsV2PagesWithContextMutex.Unlock()
	fake.ListObjectsV2PagesWithContextStub = stub
}

func (fake *FakeS3API) ListObjectsV2PagesWithContextArgsForCall(i int) (context.Context, *s3.ListObjectsV2Input, func(*s3.ListObjectsV2Output, bool) bool, []request.Option) {
	fake.listObjectsV2PagesWithContextMutex.RLock()
	defer fake.listObjectsV2PagesWithContextMutex.RUnlock()
	argsForCall := fake.listObjectsV2PagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeS3API) ListObjectsV2PagesWithContextReturns(result1 error) {
	fake.listObjectsV2PagesWithContextMutex.Lock()
	defer fake.listObjectsV2PagesWithContextMutex.Unlock()
	fake.ListObjectsV2PagesWithContextStub = nil
	fake.listObjectsV2PagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListObjectsV2PagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listObjectsV2PagesWithContextMutex.Lock()
	defer fake.listObjectsV2PagesWithContextMutex.Unlock()
	fake.ListObjectsV2PagesWithContextStub = nil
	if fake.listObjectsV2PagesWithContextReturnsOnCall == nil {
		fake.listObjectsV2PagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listObjectsV2PagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListObjectsV2Request(arg1 *s3.ListObjectsV2Input) (*request.Request, *s3.ListObjectsV2Output) {
	fake.listObjectsV2RequestMutex.Lock()
	ret, specificReturn := fake.listObjectsV2RequestReturnsOnCall[len(fake.listObjectsV2RequestArgsForCall)]
	fake.listObjectsV2RequestArgsForCall = append(fake.listObjectsV2RequestArgsForCall, struct {
		arg1 *s3.ListObjectsV2Input
	}{arg1})
	fake.recordInvocation("ListObjectsV2Request", []interface{}{arg1})
	fake.listObjectsV2RequestMutex.Unlock()
	if fake.ListObjectsV2RequestStub != nil {
		return fake.ListObjectsV2RequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listObjectsV2RequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListObjectsV2RequestCallCount() int {
	fake.listObjectsV2RequestMutex.RLock()
	defer fake.listObjectsV2RequestMutex.RUnlock()
	return len(fake.listObjectsV2RequestArgsForCall)
}

func (fake *FakeS3API) ListObjectsV2RequestCalls(stub func(*s3.ListObjectsV2Input) (*request.Request, *s3.ListObjectsV2Output)) {
	fake.listObjectsV2RequestMutex.Lock()
	defer fake.listObjectsV2RequestMutex.Unlock()
	fake.ListObjectsV2RequestStub = stub
}

func (fake *FakeS3API) ListObjectsV2RequestArgsForCall(i int) *s3.ListObjectsV2Input {
	fake.listObjectsV2RequestMutex.RLock()
	defer fake.listObjectsV2RequestMutex.RUnlock()
	argsForCall := fake.listObjectsV2RequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListObjectsV2RequestReturns(result1 *request.Request, result2 *s3.ListObjectsV2Output) {
	fake.listObjectsV2RequestMutex.Lock()
	defer fake.listObjectsV2RequestMutex.Unlock()
	fake.ListObjectsV2RequestStub = nil
	fake.listObjectsV2RequestReturns = struct {
		result1 *request.Request
		result2 *s3.ListObjectsV2Output
	}{result1, result2}
}

func (fake *FakeS3API) ListObjectsV2RequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.ListObjectsV2Output) {
	fake.listObjectsV2RequestMutex.Lock()
	defer fake.listObjectsV2RequestMutex.Unlock()
	fake.ListObjectsV2RequestStub = nil
	if fake.listObjectsV2RequestReturnsOnCall == nil {
		fake.listObjectsV2RequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.ListObjectsV2Output
		})
	}
	fake.listObjectsV2RequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.ListObjectsV2Output
	}{result1, result2}
}

func (fake *FakeS3API) ListObjectsV2WithContext(arg1 context.Context, arg2 *s3.ListObjectsV2Input, arg3 ...request.Option) (*s3.ListObjectsV2Output, error) {
	fake.listObjectsV2WithContextMutex.Lock()
	ret, specificReturn := fake.listObjectsV2WithContextReturnsOnCall[len(fake.listObjectsV2WithContextArgsForCall)]
	fake.listObjectsV2WithContextArgsForCall = append(fake.listObjectsV2WithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListObjectsV2Input
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListObjectsV2WithContext", []interface{}{arg1, arg2, arg3})
	fake.listObjectsV2WithContextMutex.Unlock()
	if fake.ListObjectsV2WithContextStub != nil {
		return fake.ListObjectsV2WithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listObjectsV2WithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListObjectsV2WithContextCallCount() int {
	fake.listObjectsV2WithContextMutex.RLock()
	defer fake.listObjectsV2WithContextMutex.RUnlock()
	return len(fake.listObjectsV2WithContextArgsForCall)
}

func (fake *FakeS3API) ListObjectsV2WithContextCalls(stub func(context.Context, *s3.ListObjectsV2Input, ...request.Option) (*s3.ListObjectsV2Output, error)) {
	fake.listObjectsV2WithContextMutex.Lock()
	defer fake.listObjectsV2WithContextMutex.Unlock()
	fake.ListObjectsV2WithContextStub = stub
}

func (fake *FakeS3API) ListObjectsV2WithContextArgsForCall(i int) (context.Context, *s3.ListObjectsV2Input, []request.Option) {
	fake.listObjectsV2WithContextMutex.RLock()
	defer fake.listObjectsV2WithContextMutex.RUnlock()
	argsForCall := fake.listObjectsV2WithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) ListObjectsV2WithContextReturns(result1 *s3.ListObjectsV2Output, result2 error) {
	fake.listObjectsV2WithContextMutex.Lock()
	defer fake.listObjectsV2WithContextMutex.Unlock()
	fake.ListObjectsV2WithContextStub = nil
	fake.listObjectsV2WithContextReturns = struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListObjectsV2WithContextReturnsOnCall(i int, result1 *s3.ListObjectsV2Output, result2 error) {
	fake.listObjectsV2WithContextMutex.Lock()
	defer fake.listObjectsV2WithContextMutex.Unlock()
	fake.ListObjectsV2WithContextStub = nil
	if fake.listObjectsV2WithContextReturnsOnCall == nil {
		fake.listObjectsV2WithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.ListObjectsV2Output
			result2 error
		})
	}
	fake.listObjectsV2WithContextReturnsOnCall[i] = struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListObjectsWithContext(arg1 context.Context, arg2 *s3.ListObjectsInput, arg3 ...request.Option) (*s3.ListObjectsOutput, error) {
	fake.listObjectsWithContextMutex.Lock()
	ret, specificReturn := fake.listObjectsWithContextReturnsOnCall[len(fake.listObjectsWithContextArgsForCall)]
	fake.listObjectsWithContextArgsForCall = append(fake.listObjectsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListObjectsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListObjectsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listObjectsWithContextMutex.Unlock()
	if fake.ListObjectsWithContextStub != nil {
		return fake.ListObjectsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listObjectsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListObjectsWithContextCallCount() int {
	fake.listObjectsWithContextMutex.RLock()
	defer fake.listObjectsWithContextMutex.RUnlock()
	return len(fake.listObjectsWithContextArgsForCall)
}

func (fake *FakeS3API) ListObjectsWithContextCalls(stub func(context.Context, *s3.ListObjectsInput, ...request.Option) (*s3.ListObjectsOutput, error)) {
	fake.listObjectsWithContextMutex.Lock()
	defer fake.listObjectsWithContextMutex.Unlock()
	fake.ListObjectsWithContextStub = stub
}

func (fake *FakeS3API) ListObjectsWithContextArgsForCall(i int) (context.Context, *s3.ListObjectsInput, []request.Option) {
	fake.listObjectsWithContextMutex.RLock()
	defer fake.listObjectsWithContextMutex.RUnlock()
	argsForCall := fake.listObjectsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) ListObjectsWithContextReturns(result1 *s3.ListObjectsOutput, result2 error) {
	fake.listObjectsWithContextMutex.Lock()
	defer fake.listObjectsWithContextMutex.Unlock()
	fake.ListObjectsWithContextStub = nil
	fake.listObjectsWithContextReturns = struct {
		result1 *s3.ListObjectsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListObjectsWithContextReturnsOnCall(i int, result1 *s3.ListObjectsOutput, result2 error) {
	fake.listObjectsWithContextMutex.Lock()
	defer fake.listObjectsWithContextMutex.Unlock()
	fake.ListObjectsWithContextStub = nil
	if fake.listObjectsWithContextReturnsOnCall == nil {
		fake.listObjectsWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.ListObjectsOutput
			result2 error
		})
	}
	fake.listObjectsWithContextReturnsOnCall[i] = struct {
		result1 *s3.ListObjectsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListParts(arg1 *s3.ListPartsInput) (*s3.ListPartsOutput, error) {
	fake.listPartsMutex.Lock()
	ret, specificReturn := fake.listPartsReturnsOnCall[len(fake.listPartsArgsForCall)]
	fake.listPartsArgsForCall = append(fake.listPartsArgsForCall, struct {
		arg1 *s3.ListPartsInput
	}{arg1})
	fake.recordInvocation("ListParts", []interface{}{arg1})
	fake.listPartsMutex.Unlock()
	if fake.ListPartsStub != nil {
		return fake.ListPartsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPartsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListPartsCallCount() int {
	fake.listPartsMutex.RLock()
	defer fake.listPartsMutex.RUnlock()
	return len(fake.listPartsArgsForCall)
}

func (fake *FakeS3API) ListPartsCalls(stub func(*s3.ListPartsInput) (*s3.ListPartsOutput, error)) {
	fake.listPartsMutex.Lock()
	defer fake.listPartsMutex.Unlock()
	fake.ListPartsStub = stub
}

func (fake *FakeS3API) ListPartsArgsForCall(i int) *s3.ListPartsInput {
	fake.listPartsMutex.RLock()
	defer fake.listPartsMutex.RUnlock()
	argsForCall := fake.listPartsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListPartsReturns(result1 *s3.ListPartsOutput, result2 error) {
	fake.listPartsMutex.Lock()
	defer fake.listPartsMutex.Unlock()
	fake.ListPartsStub = nil
	fake.listPartsReturns = struct {
		result1 *s3.ListPartsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListPartsReturnsOnCall(i int, result1 *s3.ListPartsOutput, result2 error) {
	fake.listPartsMutex.Lock()
	defer fake.listPartsMutex.Unlock()
	fake.ListPartsStub = nil
	if fake.listPartsReturnsOnCall == nil {
		fake.listPartsReturnsOnCall = make(map[int]struct {
			result1 *s3.ListPartsOutput
			result2 error
		})
	}
	fake.listPartsReturnsOnCall[i] = struct {
		result1 *s3.ListPartsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListPartsPages(arg1 *s3.ListPartsInput, arg2 func(*s3.ListPartsOutput, bool) bool) error {
	fake.listPartsPagesMutex.Lock()
	ret, specificReturn := fake.listPartsPagesReturnsOnCall[len(fake.listPartsPagesArgsForCall)]
	fake.listPartsPagesArgsForCall = append(fake.listPartsPagesArgsForCall, struct {
		arg1 *s3.ListPartsInput
		arg2 func(*s3.ListPartsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListPartsPages", []interface{}{arg1, arg2})
	fake.listPartsPagesMutex.Unlock()
	if fake.ListPartsPagesStub != nil {
		return fake.ListPartsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listPartsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) ListPartsPagesCallCount() int {
	fake.listPartsPagesMutex.RLock()
	defer fake.listPartsPagesMutex.RUnlock()
	return len(fake.listPartsPagesArgsForCall)
}

func (fake *FakeS3API) ListPartsPagesCalls(stub func(*s3.ListPartsInput, func(*s3.ListPartsOutput, bool) bool) error) {
	fake.listPartsPagesMutex.Lock()
	defer fake.listPartsPagesMutex.Unlock()
	fake.ListPartsPagesStub = stub
}

func (fake *FakeS3API) ListPartsPagesArgsForCall(i int) (*s3.ListPartsInput, func(*s3.ListPartsOutput, bool) bool) {
	fake.listPartsPagesMutex.RLock()
	defer fake.listPartsPagesMutex.RUnlock()
	argsForCall := fake.listPartsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeS3API) ListPartsPagesReturns(result1 error) {
	fake.listPartsPagesMutex.Lock()
	defer fake.listPartsPagesMutex.Unlock()
	fake.ListPartsPagesStub = nil
	fake.listPartsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListPartsPagesReturnsOnCall(i int, result1 error) {
	fake.listPartsPagesMutex.Lock()
	defer fake.listPartsPagesMutex.Unlock()
	fake.ListPartsPagesStub = nil
	if fake.listPartsPagesReturnsOnCall == nil {
		fake.listPartsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listPartsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListPartsPagesWithContext(arg1 context.Context, arg2 *s3.ListPartsInput, arg3 func(*s3.ListPartsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listPartsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listPartsPagesWithContextReturnsOnCall[len(fake.listPartsPagesWithContextArgsForCall)]
	fake.listPartsPagesWithContextArgsForCall = append(fake.listPartsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListPartsInput
		arg3 func(*s3.ListPartsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListPartsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listPartsPagesWithContextMutex.Unlock()
	if fake.ListPartsPagesWithContextStub != nil {
		return fake.ListPartsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listPartsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) ListPartsPagesWithContextCallCount() int {
	fake.listPartsPagesWithContextMutex.RLock()
	defer fake.listPartsPagesWithContextMutex.RUnlock()
	return len(fake.listPartsPagesWithContextArgsForCall)
}

func (fake *FakeS3API) ListPartsPagesWithContextCalls(stub func(context.Context, *s3.ListPartsInput, func(*s3.ListPartsOutput, bool) bool, ...request.Option) error) {
	fake.listPartsPagesWithContextMutex.Lock()
	defer fake.listPartsPagesWithContextMutex.Unlock()
	fake.ListPartsPagesWithContextStub = stub
}

func (fake *FakeS3API) ListPartsPagesWithContextArgsForCall(i int) (context.Context, *s3.ListPartsInput, func(*s3.ListPartsOutput, bool) bool, []request.Option) {
	fake.listPartsPagesWithContextMutex.RLock()
	defer fake.listPartsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listPartsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeS3API) ListPartsPagesWithContextReturns(result1 error) {
	fake.listPartsPagesWithContextMutex.Lock()
	defer fake.listPartsPagesWithContextMutex.Unlock()
	fake.ListPartsPagesWithContextStub = nil
	fake.listPartsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListPartsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listPartsPagesWithContextMutex.Lock()
	defer fake.listPartsPagesWithContextMutex.Unlock()
	fake.ListPartsPagesWithContextStub = nil
	if fake.listPartsPagesWithContextReturnsOnCall == nil {
		fake.listPartsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listPartsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) ListPartsRequest(arg1 *s3.ListPartsInput) (*request.Request, *s3.ListPartsOutput) {
	fake.listPartsRequestMutex.Lock()
	ret, specificReturn := fake.listPartsRequestReturnsOnCall[len(fake.listPartsRequestArgsForCall)]
	fake.listPartsRequestArgsForCall = append(fake.listPartsRequestArgsForCall, struct {
		arg1 *s3.ListPartsInput
	}{arg1})
	fake.recordInvocation("ListPartsRequest", []interface{}{arg1})
	fake.listPartsRequestMutex.Unlock()
	if fake.ListPartsRequestStub != nil {
		return fake.ListPartsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPartsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListPartsRequestCallCount() int {
	fake.listPartsRequestMutex.RLock()
	defer fake.listPartsRequestMutex.RUnlock()
	return len(fake.listPartsRequestArgsForCall)
}

func (fake *FakeS3API) ListPartsRequestCalls(stub func(*s3.ListPartsInput) (*request.Request, *s3.ListPartsOutput)) {
	fake.listPartsRequestMutex.Lock()
	defer fake.listPartsRequestMutex.Unlock()
	fake.ListPartsRequestStub = stub
}

func (fake *FakeS3API) ListPartsRequestArgsForCall(i int) *s3.ListPartsInput {
	fake.listPartsRequestMutex.RLock()
	defer fake.listPartsRequestMutex.RUnlock()
	argsForCall := fake.listPartsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) ListPartsRequestReturns(result1 *request.Request, result2 *s3.ListPartsOutput) {
	fake.listPartsRequestMutex.Lock()
	defer fake.listPartsRequestMutex.Unlock()
	fake.ListPartsRequestStub = nil
	fake.listPartsRequestReturns = struct {
		result1 *request.Request
		result2 *s3.ListPartsOutput
	}{result1, result2}
}

func (fake *FakeS3API) ListPartsRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.ListPartsOutput) {
	fake.listPartsRequestMutex.Lock()
	defer fake.listPartsRequestMutex.Unlock()
	fake.ListPartsRequestStub = nil
	if fake.listPartsRequestReturnsOnCall == nil {
		fake.listPartsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.ListPartsOutput
		})
	}
	fake.listPartsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.ListPartsOutput
	}{result1, result2}
}

func (fake *FakeS3API) ListPartsWithContext(arg1 context.Context, arg2 *s3.ListPartsInput, arg3 ...request.Option) (*s3.ListPartsOutput, error) {
	fake.listPartsWithContextMutex.Lock()
	ret, specificReturn := fake.listPartsWithContextReturnsOnCall[len(fake.listPartsWithContextArgsForCall)]
	fake.listPartsWithContextArgsForCall = append(fake.listPartsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListPartsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListPartsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listPartsWithContextMutex.Unlock()
	if fake.ListPartsWithContextStub != nil {
		return fake.ListPartsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPartsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) ListPartsWithContextCallCount() int {
	fake.listPartsWithContextMutex.RLock()
	defer fake.listPartsWithContextMutex.RUnlock()
	return len(fake.listPartsWithContextArgsForCall)
}

func (fake *FakeS3API) ListPartsWithContextCalls(stub func(context.Context, *s3.ListPartsInput, ...request.Option) (*s3.ListPartsOutput, error)) {
	fake.listPartsWithContextMutex.Lock()
	defer fake.listPartsWithContextMutex.Unlock()
	fake.ListPartsWithContextStub = stub
}

func (fake *FakeS3API) ListPartsWithContextArgsForCall(i int) (context.Context, *s3.ListPartsInput, []request.Option) {
	fake.listPartsWithContextMutex.RLock()
	defer fake.listPartsWithContextMutex.RUnlock()
	argsForCall := fake.listPartsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) ListPartsWithContextReturns(result1 *s3.ListPartsOutput, result2 error) {
	fake.listPartsWithContextMutex.Lock()
	defer fake.listPartsWithContextMutex.Unlock()
	fake.ListPartsWithContextStub = nil
	fake.listPartsWithContextReturns = struct {
		result1 *s3.ListPartsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) ListPartsWithContextReturnsOnCall(i int, result1 *s3.ListPartsOutput, result2 error) {
	fake.listPartsWithContextMutex.Lock()
	defer fake.listPartsWithContextMutex.Unlock()
	fake.ListPartsWithContextStub = nil
	if fake.listPartsWithContextReturnsOnCall == nil {
		fake.listPartsWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.ListPartsOutput
			result2 error
		})
	}
	fake.listPartsWithContextReturnsOnCall[i] = struct {
		result1 *s3.ListPartsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAccelerateConfiguration(arg1 *s3.PutBucketAccelerateConfigurationInput) (*s3.PutBucketAccelerateConfigurationOutput, error) {
	fake.putBucketAccelerateConfigurationMutex.Lock()
	ret, specificReturn := fake.putBucketAccelerateConfigurationReturnsOnCall[len(fake.putBucketAccelerateConfigurationArgsForCall)]
	fake.putBucketAccelerateConfigurationArgsForCall = append(fake.putBucketAccelerateConfigurationArgsForCall, struct {
		arg1 *s3.PutBucketAccelerateConfigurationInput
	}{arg1})
	fake.recordInvocation("PutBucketAccelerateConfiguration", []interface{}{arg1})
	fake.putBucketAccelerateConfigurationMutex.Unlock()
	if fake.PutBucketAccelerateConfigurationStub != nil {
		return fake.PutBucketAccelerateConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketAccelerateConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketAccelerateConfigurationCallCount() int {
	fake.putBucketAccelerateConfigurationMutex.RLock()
	defer fake.putBucketAccelerateConfigurationMutex.RUnlock()
	return len(fake.putBucketAccelerateConfigurationArgsForCall)
}

func (fake *FakeS3API) PutBucketAccelerateConfigurationCalls(stub func(*s3.PutBucketAccelerateConfigurationInput) (*s3.PutBucketAccelerateConfigurationOutput, error)) {
	fake.putBucketAccelerateConfigurationMutex.Lock()
	defer fake.putBucketAccelerateConfigurationMutex.Unlock()
	fake.PutBucketAccelerateConfigurationStub = stub
}

func (fake *FakeS3API) PutBucketAccelerateConfigurationArgsForCall(i int) *s3.PutBucketAccelerateConfigurationInput {
	fake.putBucketAccelerateConfigurationMutex.RLock()
	defer fake.putBucketAccelerateConfigurationMutex.RUnlock()
	argsForCall := fake.putBucketAccelerateConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketAccelerateConfigurationReturns(result1 *s3.PutBucketAccelerateConfigurationOutput, result2 error) {
	fake.putBucketAccelerateConfigurationMutex.Lock()
	defer fake.putBucketAccelerateConfigurationMutex.Unlock()
	fake.PutBucketAccelerateConfigurationStub = nil
	fake.putBucketAccelerateConfigurationReturns = struct {
		result1 *s3.PutBucketAccelerateConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAccelerateConfigurationReturnsOnCall(i int, result1 *s3.PutBucketAccelerateConfigurationOutput, result2 error) {
	fake.putBucketAccelerateConfigurationMutex.Lock()
	defer fake.putBucketAccelerateConfigurationMutex.Unlock()
	fake.PutBucketAccelerateConfigurationStub = nil
	if fake.putBucketAccelerateConfigurationReturnsOnCall == nil {
		fake.putBucketAccelerateConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketAccelerateConfigurationOutput
			result2 error
		})
	}
	fake.putBucketAccelerateConfigurationReturnsOnCall[i] = struct {
		result1 *s3.PutBucketAccelerateConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAccelerateConfigurationRequest(arg1 *s3.PutBucketAccelerateConfigurationInput) (*request.Request, *s3.PutBucketAccelerateConfigurationOutput) {
	fake.putBucketAccelerateConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.putBucketAccelerateConfigurationRequestReturnsOnCall[len(fake.putBucketAccelerateConfigurationRequestArgsForCall)]
	fake.putBucketAccelerateConfigurationRequestArgsForCall = append(fake.putBucketAccelerateConfigurationRequestArgsForCall, struct {
		arg1 *s3.PutBucketAccelerateConfigurationInput
	}{arg1})
	fake.recordInvocation("PutBucketAccelerateConfigurationRequest", []interface{}{arg1})
	fake.putBucketAccelerateConfigurationRequestMutex.Unlock()
	if fake.PutBucketAccelerateConfigurationRequestStub != nil {
		return fake.PutBucketAccelerateConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketAccelerateConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketAccelerateConfigurationRequestCallCount() int {
	fake.putBucketAccelerateConfigurationRequestMutex.RLock()
	defer fake.putBucketAccelerateConfigurationRequestMutex.RUnlock()
	return len(fake.putBucketAccelerateConfigurationRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketAccelerateConfigurationRequestCalls(stub func(*s3.PutBucketAccelerateConfigurationInput) (*request.Request, *s3.PutBucketAccelerateConfigurationOutput)) {
	fake.putBucketAccelerateConfigurationRequestMutex.Lock()
	defer fake.putBucketAccelerateConfigurationRequestMutex.Unlock()
	fake.PutBucketAccelerateConfigurationRequestStub = stub
}

func (fake *FakeS3API) PutBucketAccelerateConfigurationRequestArgsForCall(i int) *s3.PutBucketAccelerateConfigurationInput {
	fake.putBucketAccelerateConfigurationRequestMutex.RLock()
	defer fake.putBucketAccelerateConfigurationRequestMutex.RUnlock()
	argsForCall := fake.putBucketAccelerateConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketAccelerateConfigurationRequestReturns(result1 *request.Request, result2 *s3.PutBucketAccelerateConfigurationOutput) {
	fake.putBucketAccelerateConfigurationRequestMutex.Lock()
	defer fake.putBucketAccelerateConfigurationRequestMutex.Unlock()
	fake.PutBucketAccelerateConfigurationRequestStub = nil
	fake.putBucketAccelerateConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketAccelerateConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAccelerateConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketAccelerateConfigurationOutput) {
	fake.putBucketAccelerateConfigurationRequestMutex.Lock()
	defer fake.putBucketAccelerateConfigurationRequestMutex.Unlock()
	fake.PutBucketAccelerateConfigurationRequestStub = nil
	if fake.putBucketAccelerateConfigurationRequestReturnsOnCall == nil {
		fake.putBucketAccelerateConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketAccelerateConfigurationOutput
		})
	}
	fake.putBucketAccelerateConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketAccelerateConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAccelerateConfigurationWithContext(arg1 context.Context, arg2 *s3.PutBucketAccelerateConfigurationInput, arg3 ...request.Option) (*s3.PutBucketAccelerateConfigurationOutput, error) {
	fake.putBucketAccelerateConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketAccelerateConfigurationWithContextReturnsOnCall[len(fake.putBucketAccelerateConfigurationWithContextArgsForCall)]
	fake.putBucketAccelerateConfigurationWithContextArgsForCall = append(fake.putBucketAccelerateConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketAccelerateConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketAccelerateConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketAccelerateConfigurationWithContextMutex.Unlock()
	if fake.PutBucketAccelerateConfigurationWithContextStub != nil {
		return fake.PutBucketAccelerateConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketAccelerateConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketAccelerateConfigurationWithContextCallCount() int {
	fake.putBucketAccelerateConfigurationWithContextMutex.RLock()
	defer fake.putBucketAccelerateConfigurationWithContextMutex.RUnlock()
	return len(fake.putBucketAccelerateConfigurationWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketAccelerateConfigurationWithContextCalls(stub func(context.Context, *s3.PutBucketAccelerateConfigurationInput, ...request.Option) (*s3.PutBucketAccelerateConfigurationOutput, error)) {
	fake.putBucketAccelerateConfigurationWithContextMutex.Lock()
	defer fake.putBucketAccelerateConfigurationWithContextMutex.Unlock()
	fake.PutBucketAccelerateConfigurationWithContextStub = stub
}

func (fake *FakeS3API) PutBucketAccelerateConfigurationWithContextArgsForCall(i int) (context.Context, *s3.PutBucketAccelerateConfigurationInput, []request.Option) {
	fake.putBucketAccelerateConfigurationWithContextMutex.RLock()
	defer fake.putBucketAccelerateConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.putBucketAccelerateConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketAccelerateConfigurationWithContextReturns(result1 *s3.PutBucketAccelerateConfigurationOutput, result2 error) {
	fake.putBucketAccelerateConfigurationWithContextMutex.Lock()
	defer fake.putBucketAccelerateConfigurationWithContextMutex.Unlock()
	fake.PutBucketAccelerateConfigurationWithContextStub = nil
	fake.putBucketAccelerateConfigurationWithContextReturns = struct {
		result1 *s3.PutBucketAccelerateConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAccelerateConfigurationWithContextReturnsOnCall(i int, result1 *s3.PutBucketAccelerateConfigurationOutput, result2 error) {
	fake.putBucketAccelerateConfigurationWithContextMutex.Lock()
	defer fake.putBucketAccelerateConfigurationWithContextMutex.Unlock()
	fake.PutBucketAccelerateConfigurationWithContextStub = nil
	if fake.putBucketAccelerateConfigurationWithContextReturnsOnCall == nil {
		fake.putBucketAccelerateConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketAccelerateConfigurationOutput
			result2 error
		})
	}
	fake.putBucketAccelerateConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketAccelerateConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAcl(arg1 *s3.PutBucketAclInput) (*s3.PutBucketAclOutput, error) {
	fake.putBucketAclMutex.Lock()
	ret, specificReturn := fake.putBucketAclReturnsOnCall[len(fake.putBucketAclArgsForCall)]
	fake.putBucketAclArgsForCall = append(fake.putBucketAclArgsForCall, struct {
		arg1 *s3.PutBucketAclInput
	}{arg1})
	fake.recordInvocation("PutBucketAcl", []interface{}{arg1})
	fake.putBucketAclMutex.Unlock()
	if fake.PutBucketAclStub != nil {
		return fake.PutBucketAclStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketAclReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketAclCallCount() int {
	fake.putBucketAclMutex.RLock()
	defer fake.putBucketAclMutex.RUnlock()
	return len(fake.putBucketAclArgsForCall)
}

func (fake *FakeS3API) PutBucketAclCalls(stub func(*s3.PutBucketAclInput) (*s3.PutBucketAclOutput, error)) {
	fake.putBucketAclMutex.Lock()
	defer fake.putBucketAclMutex.Unlock()
	fake.PutBucketAclStub = stub
}

func (fake *FakeS3API) PutBucketAclArgsForCall(i int) *s3.PutBucketAclInput {
	fake.putBucketAclMutex.RLock()
	defer fake.putBucketAclMutex.RUnlock()
	argsForCall := fake.putBucketAclArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketAclReturns(result1 *s3.PutBucketAclOutput, result2 error) {
	fake.putBucketAclMutex.Lock()
	defer fake.putBucketAclMutex.Unlock()
	fake.PutBucketAclStub = nil
	fake.putBucketAclReturns = struct {
		result1 *s3.PutBucketAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAclReturnsOnCall(i int, result1 *s3.PutBucketAclOutput, result2 error) {
	fake.putBucketAclMutex.Lock()
	defer fake.putBucketAclMutex.Unlock()
	fake.PutBucketAclStub = nil
	if fake.putBucketAclReturnsOnCall == nil {
		fake.putBucketAclReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketAclOutput
			result2 error
		})
	}
	fake.putBucketAclReturnsOnCall[i] = struct {
		result1 *s3.PutBucketAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAclRequest(arg1 *s3.PutBucketAclInput) (*request.Request, *s3.PutBucketAclOutput) {
	fake.putBucketAclRequestMutex.Lock()
	ret, specificReturn := fake.putBucketAclRequestReturnsOnCall[len(fake.putBucketAclRequestArgsForCall)]
	fake.putBucketAclRequestArgsForCall = append(fake.putBucketAclRequestArgsForCall, struct {
		arg1 *s3.PutBucketAclInput
	}{arg1})
	fake.recordInvocation("PutBucketAclRequest", []interface{}{arg1})
	fake.putBucketAclRequestMutex.Unlock()
	if fake.PutBucketAclRequestStub != nil {
		return fake.PutBucketAclRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketAclRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketAclRequestCallCount() int {
	fake.putBucketAclRequestMutex.RLock()
	defer fake.putBucketAclRequestMutex.RUnlock()
	return len(fake.putBucketAclRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketAclRequestCalls(stub func(*s3.PutBucketAclInput) (*request.Request, *s3.PutBucketAclOutput)) {
	fake.putBucketAclRequestMutex.Lock()
	defer fake.putBucketAclRequestMutex.Unlock()
	fake.PutBucketAclRequestStub = stub
}

func (fake *FakeS3API) PutBucketAclRequestArgsForCall(i int) *s3.PutBucketAclInput {
	fake.putBucketAclRequestMutex.RLock()
	defer fake.putBucketAclRequestMutex.RUnlock()
	argsForCall := fake.putBucketAclRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketAclRequestReturns(result1 *request.Request, result2 *s3.PutBucketAclOutput) {
	fake.putBucketAclRequestMutex.Lock()
	defer fake.putBucketAclRequestMutex.Unlock()
	fake.PutBucketAclRequestStub = nil
	fake.putBucketAclRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketAclOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAclRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketAclOutput) {
	fake.putBucketAclRequestMutex.Lock()
	defer fake.putBucketAclRequestMutex.Unlock()
	fake.PutBucketAclRequestStub = nil
	if fake.putBucketAclRequestReturnsOnCall == nil {
		fake.putBucketAclRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketAclOutput
		})
	}
	fake.putBucketAclRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketAclOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAclWithContext(arg1 context.Context, arg2 *s3.PutBucketAclInput, arg3 ...request.Option) (*s3.PutBucketAclOutput, error) {
	fake.putBucketAclWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketAclWithContextReturnsOnCall[len(fake.putBucketAclWithContextArgsForCall)]
	fake.putBucketAclWithContextArgsForCall = append(fake.putBucketAclWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketAclInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketAclWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketAclWithContextMutex.Unlock()
	if fake.PutBucketAclWithContextStub != nil {
		return fake.PutBucketAclWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketAclWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketAclWithContextCallCount() int {
	fake.putBucketAclWithContextMutex.RLock()
	defer fake.putBucketAclWithContextMutex.RUnlock()
	return len(fake.putBucketAclWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketAclWithContextCalls(stub func(context.Context, *s3.PutBucketAclInput, ...request.Option) (*s3.PutBucketAclOutput, error)) {
	fake.putBucketAclWithContextMutex.Lock()
	defer fake.putBucketAclWithContextMutex.Unlock()
	fake.PutBucketAclWithContextStub = stub
}

func (fake *FakeS3API) PutBucketAclWithContextArgsForCall(i int) (context.Context, *s3.PutBucketAclInput, []request.Option) {
	fake.putBucketAclWithContextMutex.RLock()
	defer fake.putBucketAclWithContextMutex.RUnlock()
	argsForCall := fake.putBucketAclWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketAclWithContextReturns(result1 *s3.PutBucketAclOutput, result2 error) {
	fake.putBucketAclWithContextMutex.Lock()
	defer fake.putBucketAclWithContextMutex.Unlock()
	fake.PutBucketAclWithContextStub = nil
	fake.putBucketAclWithContextReturns = struct {
		result1 *s3.PutBucketAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAclWithContextReturnsOnCall(i int, result1 *s3.PutBucketAclOutput, result2 error) {
	fake.putBucketAclWithContextMutex.Lock()
	defer fake.putBucketAclWithContextMutex.Unlock()
	fake.PutBucketAclWithContextStub = nil
	if fake.putBucketAclWithContextReturnsOnCall == nil {
		fake.putBucketAclWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketAclOutput
			result2 error
		})
	}
	fake.putBucketAclWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAnalyticsConfiguration(arg1 *s3.PutBucketAnalyticsConfigurationInput) (*s3.PutBucketAnalyticsConfigurationOutput, error) {
	fake.putBucketAnalyticsConfigurationMutex.Lock()
	ret, specificReturn := fake.putBucketAnalyticsConfigurationReturnsOnCall[len(fake.putBucketAnalyticsConfigurationArgsForCall)]
	fake.putBucketAnalyticsConfigurationArgsForCall = append(fake.putBucketAnalyticsConfigurationArgsForCall, struct {
		arg1 *s3.PutBucketAnalyticsConfigurationInput
	}{arg1})
	fake.recordInvocation("PutBucketAnalyticsConfiguration", []interface{}{arg1})
	fake.putBucketAnalyticsConfigurationMutex.Unlock()
	if fake.PutBucketAnalyticsConfigurationStub != nil {
		return fake.PutBucketAnalyticsConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketAnalyticsConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketAnalyticsConfigurationCallCount() int {
	fake.putBucketAnalyticsConfigurationMutex.RLock()
	defer fake.putBucketAnalyticsConfigurationMutex.RUnlock()
	return len(fake.putBucketAnalyticsConfigurationArgsForCall)
}

func (fake *FakeS3API) PutBucketAnalyticsConfigurationCalls(stub func(*s3.PutBucketAnalyticsConfigurationInput) (*s3.PutBucketAnalyticsConfigurationOutput, error)) {
	fake.putBucketAnalyticsConfigurationMutex.Lock()
	defer fake.putBucketAnalyticsConfigurationMutex.Unlock()
	fake.PutBucketAnalyticsConfigurationStub = stub
}

func (fake *FakeS3API) PutBucketAnalyticsConfigurationArgsForCall(i int) *s3.PutBucketAnalyticsConfigurationInput {
	fake.putBucketAnalyticsConfigurationMutex.RLock()
	defer fake.putBucketAnalyticsConfigurationMutex.RUnlock()
	argsForCall := fake.putBucketAnalyticsConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketAnalyticsConfigurationReturns(result1 *s3.PutBucketAnalyticsConfigurationOutput, result2 error) {
	fake.putBucketAnalyticsConfigurationMutex.Lock()
	defer fake.putBucketAnalyticsConfigurationMutex.Unlock()
	fake.PutBucketAnalyticsConfigurationStub = nil
	fake.putBucketAnalyticsConfigurationReturns = struct {
		result1 *s3.PutBucketAnalyticsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAnalyticsConfigurationReturnsOnCall(i int, result1 *s3.PutBucketAnalyticsConfigurationOutput, result2 error) {
	fake.putBucketAnalyticsConfigurationMutex.Lock()
	defer fake.putBucketAnalyticsConfigurationMutex.Unlock()
	fake.PutBucketAnalyticsConfigurationStub = nil
	if fake.putBucketAnalyticsConfigurationReturnsOnCall == nil {
		fake.putBucketAnalyticsConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketAnalyticsConfigurationOutput
			result2 error
		})
	}
	fake.putBucketAnalyticsConfigurationReturnsOnCall[i] = struct {
		result1 *s3.PutBucketAnalyticsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAnalyticsConfigurationRequest(arg1 *s3.PutBucketAnalyticsConfigurationInput) (*request.Request, *s3.PutBucketAnalyticsConfigurationOutput) {
	fake.putBucketAnalyticsConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.putBucketAnalyticsConfigurationRequestReturnsOnCall[len(fake.putBucketAnalyticsConfigurationRequestArgsForCall)]
	fake.putBucketAnalyticsConfigurationRequestArgsForCall = append(fake.putBucketAnalyticsConfigurationRequestArgsForCall, struct {
		arg1 *s3.PutBucketAnalyticsConfigurationInput
	}{arg1})
	fake.recordInvocation("PutBucketAnalyticsConfigurationRequest", []interface{}{arg1})
	fake.putBucketAnalyticsConfigurationRequestMutex.Unlock()
	if fake.PutBucketAnalyticsConfigurationRequestStub != nil {
		return fake.PutBucketAnalyticsConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketAnalyticsConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketAnalyticsConfigurationRequestCallCount() int {
	fake.putBucketAnalyticsConfigurationRequestMutex.RLock()
	defer fake.putBucketAnalyticsConfigurationRequestMutex.RUnlock()
	return len(fake.putBucketAnalyticsConfigurationRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketAnalyticsConfigurationRequestCalls(stub func(*s3.PutBucketAnalyticsConfigurationInput) (*request.Request, *s3.PutBucketAnalyticsConfigurationOutput)) {
	fake.putBucketAnalyticsConfigurationRequestMutex.Lock()
	defer fake.putBucketAnalyticsConfigurationRequestMutex.Unlock()
	fake.PutBucketAnalyticsConfigurationRequestStub = stub
}

func (fake *FakeS3API) PutBucketAnalyticsConfigurationRequestArgsForCall(i int) *s3.PutBucketAnalyticsConfigurationInput {
	fake.putBucketAnalyticsConfigurationRequestMutex.RLock()
	defer fake.putBucketAnalyticsConfigurationRequestMutex.RUnlock()
	argsForCall := fake.putBucketAnalyticsConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketAnalyticsConfigurationRequestReturns(result1 *request.Request, result2 *s3.PutBucketAnalyticsConfigurationOutput) {
	fake.putBucketAnalyticsConfigurationRequestMutex.Lock()
	defer fake.putBucketAnalyticsConfigurationRequestMutex.Unlock()
	fake.PutBucketAnalyticsConfigurationRequestStub = nil
	fake.putBucketAnalyticsConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketAnalyticsConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAnalyticsConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketAnalyticsConfigurationOutput) {
	fake.putBucketAnalyticsConfigurationRequestMutex.Lock()
	defer fake.putBucketAnalyticsConfigurationRequestMutex.Unlock()
	fake.PutBucketAnalyticsConfigurationRequestStub = nil
	if fake.putBucketAnalyticsConfigurationRequestReturnsOnCall == nil {
		fake.putBucketAnalyticsConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketAnalyticsConfigurationOutput
		})
	}
	fake.putBucketAnalyticsConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketAnalyticsConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAnalyticsConfigurationWithContext(arg1 context.Context, arg2 *s3.PutBucketAnalyticsConfigurationInput, arg3 ...request.Option) (*s3.PutBucketAnalyticsConfigurationOutput, error) {
	fake.putBucketAnalyticsConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketAnalyticsConfigurationWithContextReturnsOnCall[len(fake.putBucketAnalyticsConfigurationWithContextArgsForCall)]
	fake.putBucketAnalyticsConfigurationWithContextArgsForCall = append(fake.putBucketAnalyticsConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketAnalyticsConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketAnalyticsConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketAnalyticsConfigurationWithContextMutex.Unlock()
	if fake.PutBucketAnalyticsConfigurationWithContextStub != nil {
		return fake.PutBucketAnalyticsConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketAnalyticsConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketAnalyticsConfigurationWithContextCallCount() int {
	fake.putBucketAnalyticsConfigurationWithContextMutex.RLock()
	defer fake.putBucketAnalyticsConfigurationWithContextMutex.RUnlock()
	return len(fake.putBucketAnalyticsConfigurationWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketAnalyticsConfigurationWithContextCalls(stub func(context.Context, *s3.PutBucketAnalyticsConfigurationInput, ...request.Option) (*s3.PutBucketAnalyticsConfigurationOutput, error)) {
	fake.putBucketAnalyticsConfigurationWithContextMutex.Lock()
	defer fake.putBucketAnalyticsConfigurationWithContextMutex.Unlock()
	fake.PutBucketAnalyticsConfigurationWithContextStub = stub
}

func (fake *FakeS3API) PutBucketAnalyticsConfigurationWithContextArgsForCall(i int) (context.Context, *s3.PutBucketAnalyticsConfigurationInput, []request.Option) {
	fake.putBucketAnalyticsConfigurationWithContextMutex.RLock()
	defer fake.putBucketAnalyticsConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.putBucketAnalyticsConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketAnalyticsConfigurationWithContextReturns(result1 *s3.PutBucketAnalyticsConfigurationOutput, result2 error) {
	fake.putBucketAnalyticsConfigurationWithContextMutex.Lock()
	defer fake.putBucketAnalyticsConfigurationWithContextMutex.Unlock()
	fake.PutBucketAnalyticsConfigurationWithContextStub = nil
	fake.putBucketAnalyticsConfigurationWithContextReturns = struct {
		result1 *s3.PutBucketAnalyticsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketAnalyticsConfigurationWithContextReturnsOnCall(i int, result1 *s3.PutBucketAnalyticsConfigurationOutput, result2 error) {
	fake.putBucketAnalyticsConfigurationWithContextMutex.Lock()
	defer fake.putBucketAnalyticsConfigurationWithContextMutex.Unlock()
	fake.PutBucketAnalyticsConfigurationWithContextStub = nil
	if fake.putBucketAnalyticsConfigurationWithContextReturnsOnCall == nil {
		fake.putBucketAnalyticsConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketAnalyticsConfigurationOutput
			result2 error
		})
	}
	fake.putBucketAnalyticsConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketAnalyticsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketCors(arg1 *s3.PutBucketCorsInput) (*s3.PutBucketCorsOutput, error) {
	fake.putBucketCorsMutex.Lock()
	ret, specificReturn := fake.putBucketCorsReturnsOnCall[len(fake.putBucketCorsArgsForCall)]
	fake.putBucketCorsArgsForCall = append(fake.putBucketCorsArgsForCall, struct {
		arg1 *s3.PutBucketCorsInput
	}{arg1})
	fake.recordInvocation("PutBucketCors", []interface{}{arg1})
	fake.putBucketCorsMutex.Unlock()
	if fake.PutBucketCorsStub != nil {
		return fake.PutBucketCorsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketCorsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketCorsCallCount() int {
	fake.putBucketCorsMutex.RLock()
	defer fake.putBucketCorsMutex.RUnlock()
	return len(fake.putBucketCorsArgsForCall)
}

func (fake *FakeS3API) PutBucketCorsCalls(stub func(*s3.PutBucketCorsInput) (*s3.PutBucketCorsOutput, error)) {
	fake.putBucketCorsMutex.Lock()
	defer fake.putBucketCorsMutex.Unlock()
	fake.PutBucketCorsStub = stub
}

func (fake *FakeS3API) PutBucketCorsArgsForCall(i int) *s3.PutBucketCorsInput {
	fake.putBucketCorsMutex.RLock()
	defer fake.putBucketCorsMutex.RUnlock()
	argsForCall := fake.putBucketCorsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketCorsReturns(result1 *s3.PutBucketCorsOutput, result2 error) {
	fake.putBucketCorsMutex.Lock()
	defer fake.putBucketCorsMutex.Unlock()
	fake.PutBucketCorsStub = nil
	fake.putBucketCorsReturns = struct {
		result1 *s3.PutBucketCorsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketCorsReturnsOnCall(i int, result1 *s3.PutBucketCorsOutput, result2 error) {
	fake.putBucketCorsMutex.Lock()
	defer fake.putBucketCorsMutex.Unlock()
	fake.PutBucketCorsStub = nil
	if fake.putBucketCorsReturnsOnCall == nil {
		fake.putBucketCorsReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketCorsOutput
			result2 error
		})
	}
	fake.putBucketCorsReturnsOnCall[i] = struct {
		result1 *s3.PutBucketCorsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketCorsRequest(arg1 *s3.PutBucketCorsInput) (*request.Request, *s3.PutBucketCorsOutput) {
	fake.putBucketCorsRequestMutex.Lock()
	ret, specificReturn := fake.putBucketCorsRequestReturnsOnCall[len(fake.putBucketCorsRequestArgsForCall)]
	fake.putBucketCorsRequestArgsForCall = append(fake.putBucketCorsRequestArgsForCall, struct {
		arg1 *s3.PutBucketCorsInput
	}{arg1})
	fake.recordInvocation("PutBucketCorsRequest", []interface{}{arg1})
	fake.putBucketCorsRequestMutex.Unlock()
	if fake.PutBucketCorsRequestStub != nil {
		return fake.PutBucketCorsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketCorsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketCorsRequestCallCount() int {
	fake.putBucketCorsRequestMutex.RLock()
	defer fake.putBucketCorsRequestMutex.RUnlock()
	return len(fake.putBucketCorsRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketCorsRequestCalls(stub func(*s3.PutBucketCorsInput) (*request.Request, *s3.PutBucketCorsOutput)) {
	fake.putBucketCorsRequestMutex.Lock()
	defer fake.putBucketCorsRequestMutex.Unlock()
	fake.PutBucketCorsRequestStub = stub
}

func (fake *FakeS3API) PutBucketCorsRequestArgsForCall(i int) *s3.PutBucketCorsInput {
	fake.putBucketCorsRequestMutex.RLock()
	defer fake.putBucketCorsRequestMutex.RUnlock()
	argsForCall := fake.putBucketCorsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketCorsRequestReturns(result1 *request.Request, result2 *s3.PutBucketCorsOutput) {
	fake.putBucketCorsRequestMutex.Lock()
	defer fake.putBucketCorsRequestMutex.Unlock()
	fake.PutBucketCorsRequestStub = nil
	fake.putBucketCorsRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketCorsOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketCorsRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketCorsOutput) {
	fake.putBucketCorsRequestMutex.Lock()
	defer fake.putBucketCorsRequestMutex.Unlock()
	fake.PutBucketCorsRequestStub = nil
	if fake.putBucketCorsRequestReturnsOnCall == nil {
		fake.putBucketCorsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketCorsOutput
		})
	}
	fake.putBucketCorsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketCorsOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketCorsWithContext(arg1 context.Context, arg2 *s3.PutBucketCorsInput, arg3 ...request.Option) (*s3.PutBucketCorsOutput, error) {
	fake.putBucketCorsWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketCorsWithContextReturnsOnCall[len(fake.putBucketCorsWithContextArgsForCall)]
	fake.putBucketCorsWithContextArgsForCall = append(fake.putBucketCorsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketCorsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketCorsWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketCorsWithContextMutex.Unlock()
	if fake.PutBucketCorsWithContextStub != nil {
		return fake.PutBucketCorsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketCorsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketCorsWithContextCallCount() int {
	fake.putBucketCorsWithContextMutex.RLock()
	defer fake.putBucketCorsWithContextMutex.RUnlock()
	return len(fake.putBucketCorsWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketCorsWithContextCalls(stub func(context.Context, *s3.PutBucketCorsInput, ...request.Option) (*s3.PutBucketCorsOutput, error)) {
	fake.putBucketCorsWithContextMutex.Lock()
	defer fake.putBucketCorsWithContextMutex.Unlock()
	fake.PutBucketCorsWithContextStub = stub
}

func (fake *FakeS3API) PutBucketCorsWithContextArgsForCall(i int) (context.Context, *s3.PutBucketCorsInput, []request.Option) {
	fake.putBucketCorsWithContextMutex.RLock()
	defer fake.putBucketCorsWithContextMutex.RUnlock()
	argsForCall := fake.putBucketCorsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketCorsWithContextReturns(result1 *s3.PutBucketCorsOutput, result2 error) {
	fake.putBucketCorsWithContextMutex.Lock()
	defer fake.putBucketCorsWithContextMutex.Unlock()
	fake.PutBucketCorsWithContextStub = nil
	fake.putBucketCorsWithContextReturns = struct {
		result1 *s3.PutBucketCorsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketCorsWithContextReturnsOnCall(i int, result1 *s3.PutBucketCorsOutput, result2 error) {
	fake.putBucketCorsWithContextMutex.Lock()
	defer fake.putBucketCorsWithContextMutex.Unlock()
	fake.PutBucketCorsWithContextStub = nil
	if fake.putBucketCorsWithContextReturnsOnCall == nil {
		fake.putBucketCorsWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketCorsOutput
			result2 error
		})
	}
	fake.putBucketCorsWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketCorsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketEncryption(arg1 *s3.PutBucketEncryptionInput) (*s3.PutBucketEncryptionOutput, error) {
	fake.putBucketEncryptionMutex.Lock()
	ret, specificReturn := fake.putBucketEncryptionReturnsOnCall[len(fake.putBucketEncryptionArgsForCall)]
	fake.putBucketEncryptionArgsForCall = append(fake.putBucketEncryptionArgsForCall, struct {
		arg1 *s3.PutBucketEncryptionInput
	}{arg1})
	fake.recordInvocation("PutBucketEncryption", []interface{}{arg1})
	fake.putBucketEncryptionMutex.Unlock()
	if fake.PutBucketEncryptionStub != nil {
		return fake.PutBucketEncryptionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketEncryptionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketEncryptionCallCount() int {
	fake.putBucketEncryptionMutex.RLock()
	defer fake.putBucketEncryptionMutex.RUnlock()
	return len(fake.putBucketEncryptionArgsForCall)
}

func (fake *FakeS3API) PutBucketEncryptionCalls(stub func(*s3.PutBucketEncryptionInput) (*s3.PutBucketEncryptionOutput, error)) {
	fake.putBucketEncryptionMutex.Lock()
	defer fake.putBucketEncryptionMutex.Unlock()
	fake.PutBucketEncryptionStub = stub
}

func (fake *FakeS3API) PutBucketEncryptionArgsForCall(i int) *s3.PutBucketEncryptionInput {
	fake.putBucketEncryptionMutex.RLock()
	defer fake.putBucketEncryptionMutex.RUnlock()
	argsForCall := fake.putBucketEncryptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketEncryptionReturns(result1 *s3.PutBucketEncryptionOutput, result2 error) {
	fake.putBucketEncryptionMutex.Lock()
	defer fake.putBucketEncryptionMutex.Unlock()
	fake.PutBucketEncryptionStub = nil
	fake.putBucketEncryptionReturns = struct {
		result1 *s3.PutBucketEncryptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketEncryptionReturnsOnCall(i int, result1 *s3.PutBucketEncryptionOutput, result2 error) {
	fake.putBucketEncryptionMutex.Lock()
	defer fake.putBucketEncryptionMutex.Unlock()
	fake.PutBucketEncryptionStub = nil
	if fake.putBucketEncryptionReturnsOnCall == nil {
		fake.putBucketEncryptionReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketEncryptionOutput
			result2 error
		})
	}
	fake.putBucketEncryptionReturnsOnCall[i] = struct {
		result1 *s3.PutBucketEncryptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketEncryptionRequest(arg1 *s3.PutBucketEncryptionInput) (*request.Request, *s3.PutBucketEncryptionOutput) {
	fake.putBucketEncryptionRequestMutex.Lock()
	ret, specificReturn := fake.putBucketEncryptionRequestReturnsOnCall[len(fake.putBucketEncryptionRequestArgsForCall)]
	fake.putBucketEncryptionRequestArgsForCall = append(fake.putBucketEncryptionRequestArgsForCall, struct {
		arg1 *s3.PutBucketEncryptionInput
	}{arg1})
	fake.recordInvocation("PutBucketEncryptionRequest", []interface{}{arg1})
	fake.putBucketEncryptionRequestMutex.Unlock()
	if fake.PutBucketEncryptionRequestStub != nil {
		return fake.PutBucketEncryptionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketEncryptionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketEncryptionRequestCallCount() int {
	fake.putBucketEncryptionRequestMutex.RLock()
	defer fake.putBucketEncryptionRequestMutex.RUnlock()
	return len(fake.putBucketEncryptionRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketEncryptionRequestCalls(stub func(*s3.PutBucketEncryptionInput) (*request.Request, *s3.PutBucketEncryptionOutput)) {
	fake.putBucketEncryptionRequestMutex.Lock()
	defer fake.putBucketEncryptionRequestMutex.Unlock()
	fake.PutBucketEncryptionRequestStub = stub
}

func (fake *FakeS3API) PutBucketEncryptionRequestArgsForCall(i int) *s3.PutBucketEncryptionInput {
	fake.putBucketEncryptionRequestMutex.RLock()
	defer fake.putBucketEncryptionRequestMutex.RUnlock()
	argsForCall := fake.putBucketEncryptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketEncryptionRequestReturns(result1 *request.Request, result2 *s3.PutBucketEncryptionOutput) {
	fake.putBucketEncryptionRequestMutex.Lock()
	defer fake.putBucketEncryptionRequestMutex.Unlock()
	fake.PutBucketEncryptionRequestStub = nil
	fake.putBucketEncryptionRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketEncryptionOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketEncryptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketEncryptionOutput) {
	fake.putBucketEncryptionRequestMutex.Lock()
	defer fake.putBucketEncryptionRequestMutex.Unlock()
	fake.PutBucketEncryptionRequestStub = nil
	if fake.putBucketEncryptionRequestReturnsOnCall == nil {
		fake.putBucketEncryptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketEncryptionOutput
		})
	}
	fake.putBucketEncryptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketEncryptionOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketEncryptionWithContext(arg1 context.Context, arg2 *s3.PutBucketEncryptionInput, arg3 ...request.Option) (*s3.PutBucketEncryptionOutput, error) {
	fake.putBucketEncryptionWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketEncryptionWithContextReturnsOnCall[len(fake.putBucketEncryptionWithContextArgsForCall)]
	fake.putBucketEncryptionWithContextArgsForCall = append(fake.putBucketEncryptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketEncryptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketEncryptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketEncryptionWithContextMutex.Unlock()
	if fake.PutBucketEncryptionWithContextStub != nil {
		return fake.PutBucketEncryptionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketEncryptionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketEncryptionWithContextCallCount() int {
	fake.putBucketEncryptionWithContextMutex.RLock()
	defer fake.putBucketEncryptionWithContextMutex.RUnlock()
	return len(fake.putBucketEncryptionWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketEncryptionWithContextCalls(stub func(context.Context, *s3.PutBucketEncryptionInput, ...request.Option) (*s3.PutBucketEncryptionOutput, error)) {
	fake.putBucketEncryptionWithContextMutex.Lock()
	defer fake.putBucketEncryptionWithContextMutex.Unlock()
	fake.PutBucketEncryptionWithContextStub = stub
}

func (fake *FakeS3API) PutBucketEncryptionWithContextArgsForCall(i int) (context.Context, *s3.PutBucketEncryptionInput, []request.Option) {
	fake.putBucketEncryptionWithContextMutex.RLock()
	defer fake.putBucketEncryptionWithContextMutex.RUnlock()
	argsForCall := fake.putBucketEncryptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketEncryptionWithContextReturns(result1 *s3.PutBucketEncryptionOutput, result2 error) {
	fake.putBucketEncryptionWithContextMutex.Lock()
	defer fake.putBucketEncryptionWithContextMutex.Unlock()
	fake.PutBucketEncryptionWithContextStub = nil
	fake.putBucketEncryptionWithContextReturns = struct {
		result1 *s3.PutBucketEncryptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketEncryptionWithContextReturnsOnCall(i int, result1 *s3.PutBucketEncryptionOutput, result2 error) {
	fake.putBucketEncryptionWithContextMutex.Lock()
	defer fake.putBucketEncryptionWithContextMutex.Unlock()
	fake.PutBucketEncryptionWithContextStub = nil
	if fake.putBucketEncryptionWithContextReturnsOnCall == nil {
		fake.putBucketEncryptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketEncryptionOutput
			result2 error
		})
	}
	fake.putBucketEncryptionWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketEncryptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketInventoryConfiguration(arg1 *s3.PutBucketInventoryConfigurationInput) (*s3.PutBucketInventoryConfigurationOutput, error) {
	fake.putBucketInventoryConfigurationMutex.Lock()
	ret, specificReturn := fake.putBucketInventoryConfigurationReturnsOnCall[len(fake.putBucketInventoryConfigurationArgsForCall)]
	fake.putBucketInventoryConfigurationArgsForCall = append(fake.putBucketInventoryConfigurationArgsForCall, struct {
		arg1 *s3.PutBucketInventoryConfigurationInput
	}{arg1})
	fake.recordInvocation("PutBucketInventoryConfiguration", []interface{}{arg1})
	fake.putBucketInventoryConfigurationMutex.Unlock()
	if fake.PutBucketInventoryConfigurationStub != nil {
		return fake.PutBucketInventoryConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketInventoryConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketInventoryConfigurationCallCount() int {
	fake.putBucketInventoryConfigurationMutex.RLock()
	defer fake.putBucketInventoryConfigurationMutex.RUnlock()
	return len(fake.putBucketInventoryConfigurationArgsForCall)
}

func (fake *FakeS3API) PutBucketInventoryConfigurationCalls(stub func(*s3.PutBucketInventoryConfigurationInput) (*s3.PutBucketInventoryConfigurationOutput, error)) {
	fake.putBucketInventoryConfigurationMutex.Lock()
	defer fake.putBucketInventoryConfigurationMutex.Unlock()
	fake.PutBucketInventoryConfigurationStub = stub
}

func (fake *FakeS3API) PutBucketInventoryConfigurationArgsForCall(i int) *s3.PutBucketInventoryConfigurationInput {
	fake.putBucketInventoryConfigurationMutex.RLock()
	defer fake.putBucketInventoryConfigurationMutex.RUnlock()
	argsForCall := fake.putBucketInventoryConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketInventoryConfigurationReturns(result1 *s3.PutBucketInventoryConfigurationOutput, result2 error) {
	fake.putBucketInventoryConfigurationMutex.Lock()
	defer fake.putBucketInventoryConfigurationMutex.Unlock()
	fake.PutBucketInventoryConfigurationStub = nil
	fake.putBucketInventoryConfigurationReturns = struct {
		result1 *s3.PutBucketInventoryConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketInventoryConfigurationReturnsOnCall(i int, result1 *s3.PutBucketInventoryConfigurationOutput, result2 error) {
	fake.putBucketInventoryConfigurationMutex.Lock()
	defer fake.putBucketInventoryConfigurationMutex.Unlock()
	fake.PutBucketInventoryConfigurationStub = nil
	if fake.putBucketInventoryConfigurationReturnsOnCall == nil {
		fake.putBucketInventoryConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketInventoryConfigurationOutput
			result2 error
		})
	}
	fake.putBucketInventoryConfigurationReturnsOnCall[i] = struct {
		result1 *s3.PutBucketInventoryConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketInventoryConfigurationRequest(arg1 *s3.PutBucketInventoryConfigurationInput) (*request.Request, *s3.PutBucketInventoryConfigurationOutput) {
	fake.putBucketInventoryConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.putBucketInventoryConfigurationRequestReturnsOnCall[len(fake.putBucketInventoryConfigurationRequestArgsForCall)]
	fake.putBucketInventoryConfigurationRequestArgsForCall = append(fake.putBucketInventoryConfigurationRequestArgsForCall, struct {
		arg1 *s3.PutBucketInventoryConfigurationInput
	}{arg1})
	fake.recordInvocation("PutBucketInventoryConfigurationRequest", []interface{}{arg1})
	fake.putBucketInventoryConfigurationRequestMutex.Unlock()
	if fake.PutBucketInventoryConfigurationRequestStub != nil {
		return fake.PutBucketInventoryConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketInventoryConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketInventoryConfigurationRequestCallCount() int {
	fake.putBucketInventoryConfigurationRequestMutex.RLock()
	defer fake.putBucketInventoryConfigurationRequestMutex.RUnlock()
	return len(fake.putBucketInventoryConfigurationRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketInventoryConfigurationRequestCalls(stub func(*s3.PutBucketInventoryConfigurationInput) (*request.Request, *s3.PutBucketInventoryConfigurationOutput)) {
	fake.putBucketInventoryConfigurationRequestMutex.Lock()
	defer fake.putBucketInventoryConfigurationRequestMutex.Unlock()
	fake.PutBucketInventoryConfigurationRequestStub = stub
}

func (fake *FakeS3API) PutBucketInventoryConfigurationRequestArgsForCall(i int) *s3.PutBucketInventoryConfigurationInput {
	fake.putBucketInventoryConfigurationRequestMutex.RLock()
	defer fake.putBucketInventoryConfigurationRequestMutex.RUnlock()
	argsForCall := fake.putBucketInventoryConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketInventoryConfigurationRequestReturns(result1 *request.Request, result2 *s3.PutBucketInventoryConfigurationOutput) {
	fake.putBucketInventoryConfigurationRequestMutex.Lock()
	defer fake.putBucketInventoryConfigurationRequestMutex.Unlock()
	fake.PutBucketInventoryConfigurationRequestStub = nil
	fake.putBucketInventoryConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketInventoryConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketInventoryConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketInventoryConfigurationOutput) {
	fake.putBucketInventoryConfigurationRequestMutex.Lock()
	defer fake.putBucketInventoryConfigurationRequestMutex.Unlock()
	fake.PutBucketInventoryConfigurationRequestStub = nil
	if fake.putBucketInventoryConfigurationRequestReturnsOnCall == nil {
		fake.putBucketInventoryConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketInventoryConfigurationOutput
		})
	}
	fake.putBucketInventoryConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketInventoryConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketInventoryConfigurationWithContext(arg1 context.Context, arg2 *s3.PutBucketInventoryConfigurationInput, arg3 ...request.Option) (*s3.PutBucketInventoryConfigurationOutput, error) {
	fake.putBucketInventoryConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketInventoryConfigurationWithContextReturnsOnCall[len(fake.putBucketInventoryConfigurationWithContextArgsForCall)]
	fake.putBucketInventoryConfigurationWithContextArgsForCall = append(fake.putBucketInventoryConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketInventoryConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketInventoryConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketInventoryConfigurationWithContextMutex.Unlock()
	if fake.PutBucketInventoryConfigurationWithContextStub != nil {
		return fake.PutBucketInventoryConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketInventoryConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketInventoryConfigurationWithContextCallCount() int {
	fake.putBucketInventoryConfigurationWithContextMutex.RLock()
	defer fake.putBucketInventoryConfigurationWithContextMutex.RUnlock()
	return len(fake.putBucketInventoryConfigurationWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketInventoryConfigurationWithContextCalls(stub func(context.Context, *s3.PutBucketInventoryConfigurationInput, ...request.Option) (*s3.PutBucketInventoryConfigurationOutput, error)) {
	fake.putBucketInventoryConfigurationWithContextMutex.Lock()
	defer fake.putBucketInventoryConfigurationWithContextMutex.Unlock()
	fake.PutBucketInventoryConfigurationWithContextStub = stub
}

func (fake *FakeS3API) PutBucketInventoryConfigurationWithContextArgsForCall(i int) (context.Context, *s3.PutBucketInventoryConfigurationInput, []request.Option) {
	fake.putBucketInventoryConfigurationWithContextMutex.RLock()
	defer fake.putBucketInventoryConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.putBucketInventoryConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketInventoryConfigurationWithContextReturns(result1 *s3.PutBucketInventoryConfigurationOutput, result2 error) {
	fake.putBucketInventoryConfigurationWithContextMutex.Lock()
	defer fake.putBucketInventoryConfigurationWithContextMutex.Unlock()
	fake.PutBucketInventoryConfigurationWithContextStub = nil
	fake.putBucketInventoryConfigurationWithContextReturns = struct {
		result1 *s3.PutBucketInventoryConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketInventoryConfigurationWithContextReturnsOnCall(i int, result1 *s3.PutBucketInventoryConfigurationOutput, result2 error) {
	fake.putBucketInventoryConfigurationWithContextMutex.Lock()
	defer fake.putBucketInventoryConfigurationWithContextMutex.Unlock()
	fake.PutBucketInventoryConfigurationWithContextStub = nil
	if fake.putBucketInventoryConfigurationWithContextReturnsOnCall == nil {
		fake.putBucketInventoryConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketInventoryConfigurationOutput
			result2 error
		})
	}
	fake.putBucketInventoryConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketInventoryConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLifecycle(arg1 *s3.PutBucketLifecycleInput) (*s3.PutBucketLifecycleOutput, error) {
	fake.putBucketLifecycleMutex.Lock()
	ret, specificReturn := fake.putBucketLifecycleReturnsOnCall[len(fake.putBucketLifecycleArgsForCall)]
	fake.putBucketLifecycleArgsForCall = append(fake.putBucketLifecycleArgsForCall, struct {
		arg1 *s3.PutBucketLifecycleInput
	}{arg1})
	fake.recordInvocation("PutBucketLifecycle", []interface{}{arg1})
	fake.putBucketLifecycleMutex.Unlock()
	if fake.PutBucketLifecycleStub != nil {
		return fake.PutBucketLifecycleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketLifecycleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketLifecycleCallCount() int {
	fake.putBucketLifecycleMutex.RLock()
	defer fake.putBucketLifecycleMutex.RUnlock()
	return len(fake.putBucketLifecycleArgsForCall)
}

func (fake *FakeS3API) PutBucketLifecycleCalls(stub func(*s3.PutBucketLifecycleInput) (*s3.PutBucketLifecycleOutput, error)) {
	fake.putBucketLifecycleMutex.Lock()
	defer fake.putBucketLifecycleMutex.Unlock()
	fake.PutBucketLifecycleStub = stub
}

func (fake *FakeS3API) PutBucketLifecycleArgsForCall(i int) *s3.PutBucketLifecycleInput {
	fake.putBucketLifecycleMutex.RLock()
	defer fake.putBucketLifecycleMutex.RUnlock()
	argsForCall := fake.putBucketLifecycleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketLifecycleReturns(result1 *s3.PutBucketLifecycleOutput, result2 error) {
	fake.putBucketLifecycleMutex.Lock()
	defer fake.putBucketLifecycleMutex.Unlock()
	fake.PutBucketLifecycleStub = nil
	fake.putBucketLifecycleReturns = struct {
		result1 *s3.PutBucketLifecycleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLifecycleReturnsOnCall(i int, result1 *s3.PutBucketLifecycleOutput, result2 error) {
	fake.putBucketLifecycleMutex.Lock()
	defer fake.putBucketLifecycleMutex.Unlock()
	fake.PutBucketLifecycleStub = nil
	if fake.putBucketLifecycleReturnsOnCall == nil {
		fake.putBucketLifecycleReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketLifecycleOutput
			result2 error
		})
	}
	fake.putBucketLifecycleReturnsOnCall[i] = struct {
		result1 *s3.PutBucketLifecycleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLifecycleConfiguration(arg1 *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error) {
	fake.putBucketLifecycleConfigurationMutex.Lock()
	ret, specificReturn := fake.putBucketLifecycleConfigurationReturnsOnCall[len(fake.putBucketLifecycleConfigurationArgsForCall)]
	fake.putBucketLifecycleConfigurationArgsForCall = append(fake.putBucketLifecycleConfigurationArgsForCall, struct {
		arg1 *s3.PutBucketLifecycleConfigurationInput
	}{arg1})
	fake.recordInvocation("PutBucketLifecycleConfiguration", []interface{}{arg1})
	fake.putBucketLifecycleConfigurationMutex.Unlock()
	if fake.PutBucketLifecycleConfigurationStub != nil {
		return fake.PutBucketLifecycleConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketLifecycleConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketLifecycleConfigurationCallCount() int {
	fake.putBucketLifecycleConfigurationMutex.RLock()
	defer fake.putBucketLifecycleConfigurationMutex.RUnlock()
	return len(fake.putBucketLifecycleConfigurationArgsForCall)
}

func (fake *FakeS3API) PutBucketLifecycleConfigurationCalls(stub func(*s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)) {
	fake.putBucketLifecycleConfigurationMutex.Lock()
	defer fake.putBucketLifecycleConfigurationMutex.Unlock()
	fake.PutBucketLifecycleConfigurationStub = stub
}

func (fake *FakeS3API) PutBucketLifecycleConfigurationArgsForCall(i int) *s3.PutBucketLifecycleConfigurationInput {
	fake.putBucketLifecycleConfigurationMutex.RLock()
	defer fake.putBucketLifecycleConfigurationMutex.RUnlock()
	argsForCall := fake.putBucketLifecycleConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketLifecycleConfigurationReturns(result1 *s3.PutBucketLifecycleConfigurationOutput, result2 error) {
	fake.putBucketLifecycleConfigurationMutex.Lock()
	defer fake.putBucketLifecycleConfigurationMutex.Unlock()
	fake.PutBucketLifecycleConfigurationStub = nil
	fake.putBucketLifecycleConfigurationReturns = struct {
		result1 *s3.PutBucketLifecycleConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLifecycleConfigurationReturnsOnCall(i int, result1 *s3.PutBucketLifecycleConfigurationOutput, result2 error) {
	fake.putBucketLifecycleConfigurationMutex.Lock()
	defer fake.putBucketLifecycleConfigurationMutex.Unlock()
	fake.PutBucketLifecycleConfigurationStub = nil
	if fake.putBucketLifecycleConfigurationReturnsOnCall == nil {
		fake.putBucketLifecycleConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketLifecycleConfigurationOutput
			result2 error
		})
	}
	fake.putBucketLifecycleConfigurationReturnsOnCall[i] = struct {
		result1 *s3.PutBucketLifecycleConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLifecycleConfigurationRequest(arg1 *s3.PutBucketLifecycleConfigurationInput) (*request.Request, *s3.PutBucketLifecycleConfigurationOutput) {
	fake.putBucketLifecycleConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.putBucketLifecycleConfigurationRequestReturnsOnCall[len(fake.putBucketLifecycleConfigurationRequestArgsForCall)]
	fake.putBucketLifecycleConfigurationRequestArgsForCall = append(fake.putBucketLifecycleConfigurationRequestArgsForCall, struct {
		arg1 *s3.PutBucketLifecycleConfigurationInput
	}{arg1})
	fake.recordInvocation("PutBucketLifecycleConfigurationRequest", []interface{}{arg1})
	fake.putBucketLifecycleConfigurationRequestMutex.Unlock()
	if fake.PutBucketLifecycleConfigurationRequestStub != nil {
		return fake.PutBucketLifecycleConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketLifecycleConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketLifecycleConfigurationRequestCallCount() int {
	fake.putBucketLifecycleConfigurationRequestMutex.RLock()
	defer fake.putBucketLifecycleConfigurationRequestMutex.RUnlock()
	return len(fake.putBucketLifecycleConfigurationRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketLifecycleConfigurationRequestCalls(stub func(*s3.PutBucketLifecycleConfigurationInput) (*request.Request, *s3.PutBucketLifecycleConfigurationOutput)) {
	fake.putBucketLifecycleConfigurationRequestMutex.Lock()
	defer fake.putBucketLifecycleConfigurationRequestMutex.Unlock()
	fake.PutBucketLifecycleConfigurationRequestStub = stub
}

func (fake *FakeS3API) PutBucketLifecycleConfigurationRequestArgsForCall(i int) *s3.PutBucketLifecycleConfigurationInput {
	fake.putBucketLifecycleConfigurationRequestMutex.RLock()
	defer fake.putBucketLifecycleConfigurationRequestMutex.RUnlock()
	argsForCall := fake.putBucketLifecycleConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketLifecycleConfigurationRequestReturns(result1 *request.Request, result2 *s3.PutBucketLifecycleConfigurationOutput) {
	fake.putBucketLifecycleConfigurationRequestMutex.Lock()
	defer fake.putBucketLifecycleConfigurationRequestMutex.Unlock()
	fake.PutBucketLifecycleConfigurationRequestStub = nil
	fake.putBucketLifecycleConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketLifecycleConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLifecycleConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketLifecycleConfigurationOutput) {
	fake.putBucketLifecycleConfigurationRequestMutex.Lock()
	defer fake.putBucketLifecycleConfigurationRequestMutex.Unlock()
	fake.PutBucketLifecycleConfigurationRequestStub = nil
	if fake.putBucketLifecycleConfigurationRequestReturnsOnCall == nil {
		fake.putBucketLifecycleConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketLifecycleConfigurationOutput
		})
	}
	fake.putBucketLifecycleConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketLifecycleConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLifecycleConfigurationWithContext(arg1 context.Context, arg2 *s3.PutBucketLifecycleConfigurationInput, arg3 ...request.Option) (*s3.PutBucketLifecycleConfigurationOutput, error) {
	fake.putBucketLifecycleConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketLifecycleConfigurationWithContextReturnsOnCall[len(fake.putBucketLifecycleConfigurationWithContextArgsForCall)]
	fake.putBucketLifecycleConfigurationWithContextArgsForCall = append(fake.putBucketLifecycleConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketLifecycleConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketLifecycleConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketLifecycleConfigurationWithContextMutex.Unlock()
	if fake.PutBucketLifecycleConfigurationWithContextStub != nil {
		return fake.PutBucketLifecycleConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketLifecycleConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketLifecycleConfigurationWithContextCallCount() int {
	fake.putBucketLifecycleConfigurationWithContextMutex.RLock()
	defer fake.putBucketLifecycleConfigurationWithContextMutex.RUnlock()
	return len(fake.putBucketLifecycleConfigurationWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketLifecycleConfigurationWithContextCalls(stub func(context.Context, *s3.PutBucketLifecycleConfigurationInput, ...request.Option) (*s3.PutBucketLifecycleConfigurationOutput, error)) {
	fake.putBucketLifecycleConfigurationWithContextMutex.Lock()
	defer fake.putBucketLifecycleConfigurationWithContextMutex.Unlock()
	fake.PutBucketLifecycleConfigurationWithContextStub = stub
}

func (fake *FakeS3API) PutBucketLifecycleConfigurationWithContextArgsForCall(i int) (context.Context, *s3.PutBucketLifecycleConfigurationInput, []request.Option) {
	fake.putBucketLifecycleConfigurationWithContextMutex.RLock()
	defer fake.putBucketLifecycleConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.putBucketLifecycleConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketLifecycleConfigurationWithContextReturns(result1 *s3.PutBucketLifecycleConfigurationOutput, result2 error) {
	fake.putBucketLifecycleConfigurationWithContextMutex.Lock()
	defer fake.putBucketLifecycleConfigurationWithContextMutex.Unlock()
	fake.PutBucketLifecycleConfigurationWithContextStub = nil
	fake.putBucketLifecycleConfigurationWithContextReturns = struct {
		result1 *s3.PutBucketLifecycleConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLifecycleConfigurationWithContextReturnsOnCall(i int, result1 *s3.PutBucketLifecycleConfigurationOutput, result2 error) {
	fake.putBucketLifecycleConfigurationWithContextMutex.Lock()
	defer fake.putBucketLifecycleConfigurationWithContextMutex.Unlock()
	fake.PutBucketLifecycleConfigurationWithContextStub = nil
	if fake.putBucketLifecycleConfigurationWithContextReturnsOnCall == nil {
		fake.putBucketLifecycleConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketLifecycleConfigurationOutput
			result2 error
		})
	}
	fake.putBucketLifecycleConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketLifecycleConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLifecycleRequest(arg1 *s3.PutBucketLifecycleInput) (*request.Request, *s3.PutBucketLifecycleOutput) {
	fake.putBucketLifecycleRequestMutex.Lock()
	ret, specificReturn := fake.putBucketLifecycleRequestReturnsOnCall[len(fake.putBucketLifecycleRequestArgsForCall)]
	fake.putBucketLifecycleRequestArgsForCall = append(fake.putBucketLifecycleRequestArgsForCall, struct {
		arg1 *s3.PutBucketLifecycleInput
	}{arg1})
	fake.recordInvocation("PutBucketLifecycleRequest", []interface{}{arg1})
	fake.putBucketLifecycleRequestMutex.Unlock()
	if fake.PutBucketLifecycleRequestStub != nil {
		return fake.PutBucketLifecycleRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketLifecycleRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketLifecycleRequestCallCount() int {
	fake.putBucketLifecycleRequestMutex.RLock()
	defer fake.putBucketLifecycleRequestMutex.RUnlock()
	return len(fake.putBucketLifecycleRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketLifecycleRequestCalls(stub func(*s3.PutBucketLifecycleInput) (*request.Request, *s3.PutBucketLifecycleOutput)) {
	fake.putBucketLifecycleRequestMutex.Lock()
	defer fake.putBucketLifecycleRequestMutex.Unlock()
	fake.PutBucketLifecycleRequestStub = stub
}

func (fake *FakeS3API) PutBucketLifecycleRequestArgsForCall(i int) *s3.PutBucketLifecycleInput {
	fake.putBucketLifecycleRequestMutex.RLock()
	defer fake.putBucketLifecycleRequestMutex.RUnlock()
	argsForCall := fake.putBucketLifecycleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketLifecycleRequestReturns(result1 *request.Request, result2 *s3.PutBucketLifecycleOutput) {
	fake.putBucketLifecycleRequestMutex.Lock()
	defer fake.putBucketLifecycleRequestMutex.Unlock()
	fake.PutBucketLifecycleRequestStub = nil
	fake.putBucketLifecycleRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketLifecycleOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLifecycleRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketLifecycleOutput) {
	fake.putBucketLifecycleRequestMutex.Lock()
	defer fake.putBucketLifecycleRequestMutex.Unlock()
	fake.PutBucketLifecycleRequestStub = nil
	if fake.putBucketLifecycleRequestReturnsOnCall == nil {
		fake.putBucketLifecycleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketLifecycleOutput
		})
	}
	fake.putBucketLifecycleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketLifecycleOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLifecycleWithContext(arg1 context.Context, arg2 *s3.PutBucketLifecycleInput, arg3 ...request.Option) (*s3.PutBucketLifecycleOutput, error) {
	fake.putBucketLifecycleWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketLifecycleWithContextReturnsOnCall[len(fake.putBucketLifecycleWithContextArgsForCall)]
	fake.putBucketLifecycleWithContextArgsForCall = append(fake.putBucketLifecycleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketLifecycleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketLifecycleWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketLifecycleWithContextMutex.Unlock()
	if fake.PutBucketLifecycleWithContextStub != nil {
		return fake.PutBucketLifecycleWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketLifecycleWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketLifecycleWithContextCallCount() int {
	fake.putBucketLifecycleWithContextMutex.RLock()
	defer fake.putBucketLifecycleWithContextMutex.RUnlock()
	return len(fake.putBucketLifecycleWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketLifecycleWithContextCalls(stub func(context.Context, *s3.PutBucketLifecycleInput, ...request.Option) (*s3.PutBucketLifecycleOutput, error)) {
	fake.putBucketLifecycleWithContextMutex.Lock()
	defer fake.putBucketLifecycleWithContextMutex.Unlock()
	fake.PutBucketLifecycleWithContextStub = stub
}

func (fake *FakeS3API) PutBucketLifecycleWithContextArgsForCall(i int) (context.Context, *s3.PutBucketLifecycleInput, []request.Option) {
	fake.putBucketLifecycleWithContextMutex.RLock()
	defer fake.putBucketLifecycleWithContextMutex.RUnlock()
	argsForCall := fake.putBucketLifecycleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketLifecycleWithContextReturns(result1 *s3.PutBucketLifecycleOutput, result2 error) {
	fake.putBucketLifecycleWithContextMutex.Lock()
	defer fake.putBucketLifecycleWithContextMutex.Unlock()
	fake.PutBucketLifecycleWithContextStub = nil
	fake.putBucketLifecycleWithContextReturns = struct {
		result1 *s3.PutBucketLifecycleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLifecycleWithContextReturnsOnCall(i int, result1 *s3.PutBucketLifecycleOutput, result2 error) {
	fake.putBucketLifecycleWithContextMutex.Lock()
	defer fake.putBucketLifecycleWithContextMutex.Unlock()
	fake.PutBucketLifecycleWithContextStub = nil
	if fake.putBucketLifecycleWithContextReturnsOnCall == nil {
		fake.putBucketLifecycleWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketLifecycleOutput
			result2 error
		})
	}
	fake.putBucketLifecycleWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketLifecycleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLogging(arg1 *s3.PutBucketLoggingInput) (*s3.PutBucketLoggingOutput, error) {
	fake.putBucketLoggingMutex.Lock()
	ret, specificReturn := fake.putBucketLoggingReturnsOnCall[len(fake.putBucketLoggingArgsForCall)]
	fake.putBucketLoggingArgsForCall = append(fake.putBucketLoggingArgsForCall, struct {
		arg1 *s3.PutBucketLoggingInput
	}{arg1})
	fake.recordInvocation("PutBucketLogging", []interface{}{arg1})
	fake.putBucketLoggingMutex.Unlock()
	if fake.PutBucketLoggingStub != nil {
		return fake.PutBucketLoggingStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketLoggingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketLoggingCallCount() int {
	fake.putBucketLoggingMutex.RLock()
	defer fake.putBucketLoggingMutex.RUnlock()
	return len(fake.putBucketLoggingArgsForCall)
}

func (fake *FakeS3API) PutBucketLoggingCalls(stub func(*s3.PutBucketLoggingInput) (*s3.PutBucketLoggingOutput, error)) {
	fake.putBucketLoggingMutex.Lock()
	defer fake.putBucketLoggingMutex.Unlock()
	fake.PutBucketLoggingStub = stub
}

func (fake *FakeS3API) PutBucketLoggingArgsForCall(i int) *s3.PutBucketLoggingInput {
	fake.putBucketLoggingMutex.RLock()
	defer fake.putBucketLoggingMutex.RUnlock()
	argsForCall := fake.putBucketLoggingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketLoggingReturns(result1 *s3.PutBucketLoggingOutput, result2 error) {
	fake.putBucketLoggingMutex.Lock()
	defer fake.putBucketLoggingMutex.Unlock()
	fake.PutBucketLoggingStub = nil
	fake.putBucketLoggingReturns = struct {
		result1 *s3.PutBucketLoggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLoggingReturnsOnCall(i int, result1 *s3.PutBucketLoggingOutput, result2 error) {
	fake.putBucketLoggingMutex.Lock()
	defer fake.putBucketLoggingMutex.Unlock()
	fake.PutBucketLoggingStub = nil
	if fake.putBucketLoggingReturnsOnCall == nil {
		fake.putBucketLoggingReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketLoggingOutput
			result2 error
		})
	}
	fake.putBucketLoggingReturnsOnCall[i] = struct {
		result1 *s3.PutBucketLoggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLoggingRequest(arg1 *s3.PutBucketLoggingInput) (*request.Request, *s3.PutBucketLoggingOutput) {
	fake.putBucketLoggingRequestMutex.Lock()
	ret, specificReturn := fake.putBucketLoggingRequestReturnsOnCall[len(fake.putBucketLoggingRequestArgsForCall)]
	fake.putBucketLoggingRequestArgsForCall = append(fake.putBucketLoggingRequestArgsForCall, struct {
		arg1 *s3.PutBucketLoggingInput
	}{arg1})
	fake.recordInvocation("PutBucketLoggingRequest", []interface{}{arg1})
	fake.putBucketLoggingRequestMutex.Unlock()
	if fake.PutBucketLoggingRequestStub != nil {
		return fake.PutBucketLoggingRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketLoggingRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketLoggingRequestCallCount() int {
	fake.putBucketLoggingRequestMutex.RLock()
	defer fake.putBucketLoggingRequestMutex.RUnlock()
	return len(fake.putBucketLoggingRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketLoggingRequestCalls(stub func(*s3.PutBucketLoggingInput) (*request.Request, *s3.PutBucketLoggingOutput)) {
	fake.putBucketLoggingRequestMutex.Lock()
	defer fake.putBucketLoggingRequestMutex.Unlock()
	fake.PutBucketLoggingRequestStub = stub
}

func (fake *FakeS3API) PutBucketLoggingRequestArgsForCall(i int) *s3.PutBucketLoggingInput {
	fake.putBucketLoggingRequestMutex.RLock()
	defer fake.putBucketLoggingRequestMutex.RUnlock()
	argsForCall := fake.putBucketLoggingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketLoggingRequestReturns(result1 *request.Request, result2 *s3.PutBucketLoggingOutput) {
	fake.putBucketLoggingRequestMutex.Lock()
	defer fake.putBucketLoggingRequestMutex.Unlock()
	fake.PutBucketLoggingRequestStub = nil
	fake.putBucketLoggingRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketLoggingOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLoggingRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketLoggingOutput) {
	fake.putBucketLoggingRequestMutex.Lock()
	defer fake.putBucketLoggingRequestMutex.Unlock()
	fake.PutBucketLoggingRequestStub = nil
	if fake.putBucketLoggingRequestReturnsOnCall == nil {
		fake.putBucketLoggingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketLoggingOutput
		})
	}
	fake.putBucketLoggingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketLoggingOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLoggingWithContext(arg1 context.Context, arg2 *s3.PutBucketLoggingInput, arg3 ...request.Option) (*s3.PutBucketLoggingOutput, error) {
	fake.putBucketLoggingWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketLoggingWithContextReturnsOnCall[len(fake.putBucketLoggingWithContextArgsForCall)]
	fake.putBucketLoggingWithContextArgsForCall = append(fake.putBucketLoggingWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketLoggingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketLoggingWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketLoggingWithContextMutex.Unlock()
	if fake.PutBucketLoggingWithContextStub != nil {
		return fake.PutBucketLoggingWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketLoggingWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketLoggingWithContextCallCount() int {
	fake.putBucketLoggingWithContextMutex.RLock()
	defer fake.putBucketLoggingWithContextMutex.RUnlock()
	return len(fake.putBucketLoggingWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketLoggingWithContextCalls(stub func(context.Context, *s3.PutBucketLoggingInput, ...request.Option) (*s3.PutBucketLoggingOutput, error)) {
	fake.putBucketLoggingWithContextMutex.Lock()
	defer fake.putBucketLoggingWithContextMutex.Unlock()
	fake.PutBucketLoggingWithContextStub = stub
}

func (fake *FakeS3API) PutBucketLoggingWithContextArgsForCall(i int) (context.Context, *s3.PutBucketLoggingInput, []request.Option) {
	fake.putBucketLoggingWithContextMutex.RLock()
	defer fake.putBucketLoggingWithContextMutex.RUnlock()
	argsForCall := fake.putBucketLoggingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketLoggingWithContextReturns(result1 *s3.PutBucketLoggingOutput, result2 error) {
	fake.putBucketLoggingWithContextMutex.Lock()
	defer fake.putBucketLoggingWithContextMutex.Unlock()
	fake.PutBucketLoggingWithContextStub = nil
	fake.putBucketLoggingWithContextReturns = struct {
		result1 *s3.PutBucketLoggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketLoggingWithContextReturnsOnCall(i int, result1 *s3.PutBucketLoggingOutput, result2 error) {
	fake.putBucketLoggingWithContextMutex.Lock()
	defer fake.putBucketLoggingWithContextMutex.Unlock()
	fake.PutBucketLoggingWithContextStub = nil
	if fake.putBucketLoggingWithContextReturnsOnCall == nil {
		fake.putBucketLoggingWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketLoggingOutput
			result2 error
		})
	}
	fake.putBucketLoggingWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketLoggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketMetricsConfiguration(arg1 *s3.PutBucketMetricsConfigurationInput) (*s3.PutBucketMetricsConfigurationOutput, error) {
	fake.putBucketMetricsConfigurationMutex.Lock()
	ret, specificReturn := fake.putBucketMetricsConfigurationReturnsOnCall[len(fake.putBucketMetricsConfigurationArgsForCall)]
	fake.putBucketMetricsConfigurationArgsForCall = append(fake.putBucketMetricsConfigurationArgsForCall, struct {
		arg1 *s3.PutBucketMetricsConfigurationInput
	}{arg1})
	fake.recordInvocation("PutBucketMetricsConfiguration", []interface{}{arg1})
	fake.putBucketMetricsConfigurationMutex.Unlock()
	if fake.PutBucketMetricsConfigurationStub != nil {
		return fake.PutBucketMetricsConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketMetricsConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketMetricsConfigurationCallCount() int {
	fake.putBucketMetricsConfigurationMutex.RLock()
	defer fake.putBucketMetricsConfigurationMutex.RUnlock()
	return len(fake.putBucketMetricsConfigurationArgsForCall)
}

func (fake *FakeS3API) PutBucketMetricsConfigurationCalls(stub func(*s3.PutBucketMetricsConfigurationInput) (*s3.PutBucketMetricsConfigurationOutput, error)) {
	fake.putBucketMetricsConfigurationMutex.Lock()
	defer fake.putBucketMetricsConfigurationMutex.Unlock()
	fake.PutBucketMetricsConfigurationStub = stub
}

func (fake *FakeS3API) PutBucketMetricsConfigurationArgsForCall(i int) *s3.PutBucketMetricsConfigurationInput {
	fake.putBucketMetricsConfigurationMutex.RLock()
	defer fake.putBucketMetricsConfigurationMutex.RUnlock()
	argsForCall := fake.putBucketMetricsConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketMetricsConfigurationReturns(result1 *s3.PutBucketMetricsConfigurationOutput, result2 error) {
	fake.putBucketMetricsConfigurationMutex.Lock()
	defer fake.putBucketMetricsConfigurationMutex.Unlock()
	fake.PutBucketMetricsConfigurationStub = nil
	fake.putBucketMetricsConfigurationReturns = struct {
		result1 *s3.PutBucketMetricsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketMetricsConfigurationReturnsOnCall(i int, result1 *s3.PutBucketMetricsConfigurationOutput, result2 error) {
	fake.putBucketMetricsConfigurationMutex.Lock()
	defer fake.putBucketMetricsConfigurationMutex.Unlock()
	fake.PutBucketMetricsConfigurationStub = nil
	if fake.putBucketMetricsConfigurationReturnsOnCall == nil {
		fake.putBucketMetricsConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketMetricsConfigurationOutput
			result2 error
		})
	}
	fake.putBucketMetricsConfigurationReturnsOnCall[i] = struct {
		result1 *s3.PutBucketMetricsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketMetricsConfigurationRequest(arg1 *s3.PutBucketMetricsConfigurationInput) (*request.Request, *s3.PutBucketMetricsConfigurationOutput) {
	fake.putBucketMetricsConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.putBucketMetricsConfigurationRequestReturnsOnCall[len(fake.putBucketMetricsConfigurationRequestArgsForCall)]
	fake.putBucketMetricsConfigurationRequestArgsForCall = append(fake.putBucketMetricsConfigurationRequestArgsForCall, struct {
		arg1 *s3.PutBucketMetricsConfigurationInput
	}{arg1})
	fake.recordInvocation("PutBucketMetricsConfigurationRequest", []interface{}{arg1})
	fake.putBucketMetricsConfigurationRequestMutex.Unlock()
	if fake.PutBucketMetricsConfigurationRequestStub != nil {
		return fake.PutBucketMetricsConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketMetricsConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketMetricsConfigurationRequestCallCount() int {
	fake.putBucketMetricsConfigurationRequestMutex.RLock()
	defer fake.putBucketMetricsConfigurationRequestMutex.RUnlock()
	return len(fake.putBucketMetricsConfigurationRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketMetricsConfigurationRequestCalls(stub func(*s3.PutBucketMetricsConfigurationInput) (*request.Request, *s3.PutBucketMetricsConfigurationOutput)) {
	fake.putBucketMetricsConfigurationRequestMutex.Lock()
	defer fake.putBucketMetricsConfigurationRequestMutex.Unlock()
	fake.PutBucketMetricsConfigurationRequestStub = stub
}

func (fake *FakeS3API) PutBucketMetricsConfigurationRequestArgsForCall(i int) *s3.PutBucketMetricsConfigurationInput {
	fake.putBucketMetricsConfigurationRequestMutex.RLock()
	defer fake.putBucketMetricsConfigurationRequestMutex.RUnlock()
	argsForCall := fake.putBucketMetricsConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketMetricsConfigurationRequestReturns(result1 *request.Request, result2 *s3.PutBucketMetricsConfigurationOutput) {
	fake.putBucketMetricsConfigurationRequestMutex.Lock()
	defer fake.putBucketMetricsConfigurationRequestMutex.Unlock()
	fake.PutBucketMetricsConfigurationRequestStub = nil
	fake.putBucketMetricsConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketMetricsConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketMetricsConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketMetricsConfigurationOutput) {
	fake.putBucketMetricsConfigurationRequestMutex.Lock()
	defer fake.putBucketMetricsConfigurationRequestMutex.Unlock()
	fake.PutBucketMetricsConfigurationRequestStub = nil
	if fake.putBucketMetricsConfigurationRequestReturnsOnCall == nil {
		fake.putBucketMetricsConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketMetricsConfigurationOutput
		})
	}
	fake.putBucketMetricsConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketMetricsConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketMetricsConfigurationWithContext(arg1 context.Context, arg2 *s3.PutBucketMetricsConfigurationInput, arg3 ...request.Option) (*s3.PutBucketMetricsConfigurationOutput, error) {
	fake.putBucketMetricsConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketMetricsConfigurationWithContextReturnsOnCall[len(fake.putBucketMetricsConfigurationWithContextArgsForCall)]
	fake.putBucketMetricsConfigurationWithContextArgsForCall = append(fake.putBucketMetricsConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketMetricsConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketMetricsConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketMetricsConfigurationWithContextMutex.Unlock()
	if fake.PutBucketMetricsConfigurationWithContextStub != nil {
		return fake.PutBucketMetricsConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketMetricsConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketMetricsConfigurationWithContextCallCount() int {
	fake.putBucketMetricsConfigurationWithContextMutex.RLock()
	defer fake.putBucketMetricsConfigurationWithContextMutex.RUnlock()
	return len(fake.putBucketMetricsConfigurationWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketMetricsConfigurationWithContextCalls(stub func(context.Context, *s3.PutBucketMetricsConfigurationInput, ...request.Option) (*s3.PutBucketMetricsConfigurationOutput, error)) {
	fake.putBucketMetricsConfigurationWithContextMutex.Lock()
	defer fake.putBucketMetricsConfigurationWithContextMutex.Unlock()
	fake.PutBucketMetricsConfigurationWithContextStub = stub
}

func (fake *FakeS3API) PutBucketMetricsConfigurationWithContextArgsForCall(i int) (context.Context, *s3.PutBucketMetricsConfigurationInput, []request.Option) {
	fake.putBucketMetricsConfigurationWithContextMutex.RLock()
	defer fake.putBucketMetricsConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.putBucketMetricsConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketMetricsConfigurationWithContextReturns(result1 *s3.PutBucketMetricsConfigurationOutput, result2 error) {
	fake.putBucketMetricsConfigurationWithContextMutex.Lock()
	defer fake.putBucketMetricsConfigurationWithContextMutex.Unlock()
	fake.PutBucketMetricsConfigurationWithContextStub = nil
	fake.putBucketMetricsConfigurationWithContextReturns = struct {
		result1 *s3.PutBucketMetricsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketMetricsConfigurationWithContextReturnsOnCall(i int, result1 *s3.PutBucketMetricsConfigurationOutput, result2 error) {
	fake.putBucketMetricsConfigurationWithContextMutex.Lock()
	defer fake.putBucketMetricsConfigurationWithContextMutex.Unlock()
	fake.PutBucketMetricsConfigurationWithContextStub = nil
	if fake.putBucketMetricsConfigurationWithContextReturnsOnCall == nil {
		fake.putBucketMetricsConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketMetricsConfigurationOutput
			result2 error
		})
	}
	fake.putBucketMetricsConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketMetricsConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketNotification(arg1 *s3.PutBucketNotificationInput) (*s3.PutBucketNotificationOutput, error) {
	fake.putBucketNotificationMutex.Lock()
	ret, specificReturn := fake.putBucketNotificationReturnsOnCall[len(fake.putBucketNotificationArgsForCall)]
	fake.putBucketNotificationArgsForCall = append(fake.putBucketNotificationArgsForCall, struct {
		arg1 *s3.PutBucketNotificationInput
	}{arg1})
	fake.recordInvocation("PutBucketNotification", []interface{}{arg1})
	fake.putBucketNotificationMutex.Unlock()
	if fake.PutBucketNotificationStub != nil {
		return fake.PutBucketNotificationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketNotificationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketNotificationCallCount() int {
	fake.putBucketNotificationMutex.RLock()
	defer fake.putBucketNotificationMutex.RUnlock()
	return len(fake.putBucketNotificationArgsForCall)
}

func (fake *FakeS3API) PutBucketNotificationCalls(stub func(*s3.PutBucketNotificationInput) (*s3.PutBucketNotificationOutput, error)) {
	fake.putBucketNotificationMutex.Lock()
	defer fake.putBucketNotificationMutex.Unlock()
	fake.PutBucketNotificationStub = stub
}

func (fake *FakeS3API) PutBucketNotificationArgsForCall(i int) *s3.PutBucketNotificationInput {
	fake.putBucketNotificationMutex.RLock()
	defer fake.putBucketNotificationMutex.RUnlock()
	argsForCall := fake.putBucketNotificationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketNotificationReturns(result1 *s3.PutBucketNotificationOutput, result2 error) {
	fake.putBucketNotificationMutex.Lock()
	defer fake.putBucketNotificationMutex.Unlock()
	fake.PutBucketNotificationStub = nil
	fake.putBucketNotificationReturns = struct {
		result1 *s3.PutBucketNotificationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketNotificationReturnsOnCall(i int, result1 *s3.PutBucketNotificationOutput, result2 error) {
	fake.putBucketNotificationMutex.Lock()
	defer fake.putBucketNotificationMutex.Unlock()
	fake.PutBucketNotificationStub = nil
	if fake.putBucketNotificationReturnsOnCall == nil {
		fake.putBucketNotificationReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketNotificationOutput
			result2 error
		})
	}
	fake.putBucketNotificationReturnsOnCall[i] = struct {
		result1 *s3.PutBucketNotificationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketNotificationConfiguration(arg1 *s3.PutBucketNotificationConfigurationInput) (*s3.PutBucketNotificationConfigurationOutput, error) {
	fake.putBucketNotificationConfigurationMutex.Lock()
	ret, specificReturn := fake.putBucketNotificationConfigurationReturnsOnCall[len(fake.putBucketNotificationConfigurationArgsForCall)]
	fake.putBucketNotificationConfigurationArgsForCall = append(fake.putBucketNotificationConfigurationArgsForCall, struct {
		arg1 *s3.PutBucketNotificationConfigurationInput
	}{arg1})
	fake.recordInvocation("PutBucketNotificationConfiguration", []interface{}{arg1})
	fake.putBucketNotificationConfigurationMutex.Unlock()
	if fake.PutBucketNotificationConfigurationStub != nil {
		return fake.PutBucketNotificationConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketNotificationConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketNotificationConfigurationCallCount() int {
	fake.putBucketNotificationConfigurationMutex.RLock()
	defer fake.putBucketNotificationConfigurationMutex.RUnlock()
	return len(fake.putBucketNotificationConfigurationArgsForCall)
}

func (fake *FakeS3API) PutBucketNotificationConfigurationCalls(stub func(*s3.PutBucketNotificationConfigurationInput) (*s3.PutBucketNotificationConfigurationOutput, error)) {
	fake.putBucketNotificationConfigurationMutex.Lock()
	defer fake.putBucketNotificationConfigurationMutex.Unlock()
	fake.PutBucketNotificationConfigurationStub = stub
}

func (fake *FakeS3API) PutBucketNotificationConfigurationArgsForCall(i int) *s3.PutBucketNotificationConfigurationInput {
	fake.putBucketNotificationConfigurationMutex.RLock()
	defer fake.putBucketNotificationConfigurationMutex.RUnlock()
	argsForCall := fake.putBucketNotificationConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketNotificationConfigurationReturns(result1 *s3.PutBucketNotificationConfigurationOutput, result2 error) {
	fake.putBucketNotificationConfigurationMutex.Lock()
	defer fake.putBucketNotificationConfigurationMutex.Unlock()
	fake.PutBucketNotificationConfigurationStub = nil
	fake.putBucketNotificationConfigurationReturns = struct {
		result1 *s3.PutBucketNotificationConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketNotificationConfigurationReturnsOnCall(i int, result1 *s3.PutBucketNotificationConfigurationOutput, result2 error) {
	fake.putBucketNotificationConfigurationMutex.Lock()
	defer fake.putBucketNotificationConfigurationMutex.Unlock()
	fake.PutBucketNotificationConfigurationStub = nil
	if fake.putBucketNotificationConfigurationReturnsOnCall == nil {
		fake.putBucketNotificationConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketNotificationConfigurationOutput
			result2 error
		})
	}
	fake.putBucketNotificationConfigurationReturnsOnCall[i] = struct {
		result1 *s3.PutBucketNotificationConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketNotificationConfigurationRequest(arg1 *s3.PutBucketNotificationConfigurationInput) (*request.Request, *s3.PutBucketNotificationConfigurationOutput) {
	fake.putBucketNotificationConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.putBucketNotificationConfigurationRequestReturnsOnCall[len(fake.putBucketNotificationConfigurationRequestArgsForCall)]
	fake.putBucketNotificationConfigurationRequestArgsForCall = append(fake.putBucketNotificationConfigurationRequestArgsForCall, struct {
		arg1 *s3.PutBucketNotificationConfigurationInput
	}{arg1})
	fake.recordInvocation("PutBucketNotificationConfigurationRequest", []interface{}{arg1})
	fake.putBucketNotificationConfigurationRequestMutex.Unlock()
	if fake.PutBucketNotificationConfigurationRequestStub != nil {
		return fake.PutBucketNotificationConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketNotificationConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketNotificationConfigurationRequestCallCount() int {
	fake.putBucketNotificationConfigurationRequestMutex.RLock()
	defer fake.putBucketNotificationConfigurationRequestMutex.RUnlock()
	return len(fake.putBucketNotificationConfigurationRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketNotificationConfigurationRequestCalls(stub func(*s3.PutBucketNotificationConfigurationInput) (*request.Request, *s3.PutBucketNotificationConfigurationOutput)) {
	fake.putBucketNotificationConfigurationRequestMutex.Lock()
	defer fake.putBucketNotificationConfigurationRequestMutex.Unlock()
	fake.PutBucketNotificationConfigurationRequestStub = stub
}

func (fake *FakeS3API) PutBucketNotificationConfigurationRequestArgsForCall(i int) *s3.PutBucketNotificationConfigurationInput {
	fake.putBucketNotificationConfigurationRequestMutex.RLock()
	defer fake.putBucketNotificationConfigurationRequestMutex.RUnlock()
	argsForCall := fake.putBucketNotificationConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketNotificationConfigurationRequestReturns(result1 *request.Request, result2 *s3.PutBucketNotificationConfigurationOutput) {
	fake.putBucketNotificationConfigurationRequestMutex.Lock()
	defer fake.putBucketNotificationConfigurationRequestMutex.Unlock()
	fake.PutBucketNotificationConfigurationRequestStub = nil
	fake.putBucketNotificationConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketNotificationConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketNotificationConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketNotificationConfigurationOutput) {
	fake.putBucketNotificationConfigurationRequestMutex.Lock()
	defer fake.putBucketNotificationConfigurationRequestMutex.Unlock()
	fake.PutBucketNotificationConfigurationRequestStub = nil
	if fake.putBucketNotificationConfigurationRequestReturnsOnCall == nil {
		fake.putBucketNotificationConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketNotificationConfigurationOutput
		})
	}
	fake.putBucketNotificationConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketNotificationConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketNotificationConfigurationWithContext(arg1 context.Context, arg2 *s3.PutBucketNotificationConfigurationInput, arg3 ...request.Option) (*s3.PutBucketNotificationConfigurationOutput, error) {
	fake.putBucketNotificationConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketNotificationConfigurationWithContextReturnsOnCall[len(fake.putBucketNotificationConfigurationWithContextArgsForCall)]
	fake.putBucketNotificationConfigurationWithContextArgsForCall = append(fake.putBucketNotificationConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketNotificationConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketNotificationConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketNotificationConfigurationWithContextMutex.Unlock()
	if fake.PutBucketNotificationConfigurationWithContextStub != nil {
		return fake.PutBucketNotificationConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketNotificationConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketNotificationConfigurationWithContextCallCount() int {
	fake.putBucketNotificationConfigurationWithContextMutex.RLock()
	defer fake.putBucketNotificationConfigurationWithContextMutex.RUnlock()
	return len(fake.putBucketNotificationConfigurationWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketNotificationConfigurationWithContextCalls(stub func(context.Context, *s3.PutBucketNotificationConfigurationInput, ...request.Option) (*s3.PutBucketNotificationConfigurationOutput, error)) {
	fake.putBucketNotificationConfigurationWithContextMutex.Lock()
	defer fake.putBucketNotificationConfigurationWithContextMutex.Unlock()
	fake.PutBucketNotificationConfigurationWithContextStub = stub
}

func (fake *FakeS3API) PutBucketNotificationConfigurationWithContextArgsForCall(i int) (context.Context, *s3.PutBucketNotificationConfigurationInput, []request.Option) {
	fake.putBucketNotificationConfigurationWithContextMutex.RLock()
	defer fake.putBucketNotificationConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.putBucketNotificationConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketNotificationConfigurationWithContextReturns(result1 *s3.PutBucketNotificationConfigurationOutput, result2 error) {
	fake.putBucketNotificationConfigurationWithContextMutex.Lock()
	defer fake.putBucketNotificationConfigurationWithContextMutex.Unlock()
	fake.PutBucketNotificationConfigurationWithContextStub = nil
	fake.putBucketNotificationConfigurationWithContextReturns = struct {
		result1 *s3.PutBucketNotificationConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketNotificationConfigurationWithContextReturnsOnCall(i int, result1 *s3.PutBucketNotificationConfigurationOutput, result2 error) {
	fake.putBucketNotificationConfigurationWithContextMutex.Lock()
	defer fake.putBucketNotificationConfigurationWithContextMutex.Unlock()
	fake.PutBucketNotificationConfigurationWithContextStub = nil
	if fake.putBucketNotificationConfigurationWithContextReturnsOnCall == nil {
		fake.putBucketNotificationConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketNotificationConfigurationOutput
			result2 error
		})
	}
	fake.putBucketNotificationConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketNotificationConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketNotificationRequest(arg1 *s3.PutBucketNotificationInput) (*request.Request, *s3.PutBucketNotificationOutput) {
	fake.putBucketNotificationRequestMutex.Lock()
	ret, specificReturn := fake.putBucketNotificationRequestReturnsOnCall[len(fake.putBucketNotificationRequestArgsForCall)]
	fake.putBucketNotificationRequestArgsForCall = append(fake.putBucketNotificationRequestArgsForCall, struct {
		arg1 *s3.PutBucketNotificationInput
	}{arg1})
	fake.recordInvocation("PutBucketNotificationRequest", []interface{}{arg1})
	fake.putBucketNotificationRequestMutex.Unlock()
	if fake.PutBucketNotificationRequestStub != nil {
		return fake.PutBucketNotificationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketNotificationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketNotificationRequestCallCount() int {
	fake.putBucketNotificationRequestMutex.RLock()
	defer fake.putBucketNotificationRequestMutex.RUnlock()
	return len(fake.putBucketNotificationRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketNotificationRequestCalls(stub func(*s3.PutBucketNotificationInput) (*request.Request, *s3.PutBucketNotificationOutput)) {
	fake.putBucketNotificationRequestMutex.Lock()
	defer fake.putBucketNotificationRequestMutex.Unlock()
	fake.PutBucketNotificationRequestStub = stub
}

func (fake *FakeS3API) PutBucketNotificationRequestArgsForCall(i int) *s3.PutBucketNotificationInput {
	fake.putBucketNotificationRequestMutex.RLock()
	defer fake.putBucketNotificationRequestMutex.RUnlock()
	argsForCall := fake.putBucketNotificationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketNotificationRequestReturns(result1 *request.Request, result2 *s3.PutBucketNotificationOutput) {
	fake.putBucketNotificationRequestMutex.Lock()
	defer fake.putBucketNotificationRequestMutex.Unlock()
	fake.PutBucketNotificationRequestStub = nil
	fake.putBucketNotificationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketNotificationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketNotificationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketNotificationOutput) {
	fake.putBucketNotificationRequestMutex.Lock()
	defer fake.putBucketNotificationRequestMutex.Unlock()
	fake.PutBucketNotificationRequestStub = nil
	if fake.putBucketNotificationRequestReturnsOnCall == nil {
		fake.putBucketNotificationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketNotificationOutput
		})
	}
	fake.putBucketNotificationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketNotificationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketNotificationWithContext(arg1 context.Context, arg2 *s3.PutBucketNotificationInput, arg3 ...request.Option) (*s3.PutBucketNotificationOutput, error) {
	fake.putBucketNotificationWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketNotificationWithContextReturnsOnCall[len(fake.putBucketNotificationWithContextArgsForCall)]
	fake.putBucketNotificationWithContextArgsForCall = append(fake.putBucketNotificationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketNotificationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketNotificationWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketNotificationWithContextMutex.Unlock()
	if fake.PutBucketNotificationWithContextStub != nil {
		return fake.PutBucketNotificationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketNotificationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketNotificationWithContextCallCount() int {
	fake.putBucketNotificationWithContextMutex.RLock()
	defer fake.putBucketNotificationWithContextMutex.RUnlock()
	return len(fake.putBucketNotificationWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketNotificationWithContextCalls(stub func(context.Context, *s3.PutBucketNotificationInput, ...request.Option) (*s3.PutBucketNotificationOutput, error)) {
	fake.putBucketNotificationWithContextMutex.Lock()
	defer fake.putBucketNotificationWithContextMutex.Unlock()
	fake.PutBucketNotificationWithContextStub = stub
}

func (fake *FakeS3API) PutBucketNotificationWithContextArgsForCall(i int) (context.Context, *s3.PutBucketNotificationInput, []request.Option) {
	fake.putBucketNotificationWithContextMutex.RLock()
	defer fake.putBucketNotificationWithContextMutex.RUnlock()
	argsForCall := fake.putBucketNotificationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketNotificationWithContextReturns(result1 *s3.PutBucketNotificationOutput, result2 error) {
	fake.putBucketNotificationWithContextMutex.Lock()
	defer fake.putBucketNotificationWithContextMutex.Unlock()
	fake.PutBucketNotificationWithContextStub = nil
	fake.putBucketNotificationWithContextReturns = struct {
		result1 *s3.PutBucketNotificationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketNotificationWithContextReturnsOnCall(i int, result1 *s3.PutBucketNotificationOutput, result2 error) {
	fake.putBucketNotificationWithContextMutex.Lock()
	defer fake.putBucketNotificationWithContextMutex.Unlock()
	fake.PutBucketNotificationWithContextStub = nil
	if fake.putBucketNotificationWithContextReturnsOnCall == nil {
		fake.putBucketNotificationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketNotificationOutput
			result2 error
		})
	}
	fake.putBucketNotificationWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketNotificationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketPolicy(arg1 *s3.PutBucketPolicyInput) (*s3.PutBucketPolicyOutput, error) {
	fake.putBucketPolicyMutex.Lock()
	ret, specificReturn := fake.putBucketPolicyReturnsOnCall[len(fake.putBucketPolicyArgsForCall)]
	fake.putBucketPolicyArgsForCall = append(fake.putBucketPolicyArgsForCall, struct {
		arg1 *s3.PutBucketPolicyInput
	}{arg1})
	fake.recordInvocation("PutBucketPolicy", []interface{}{arg1})
	fake.putBucketPolicyMutex.Unlock()
	if fake.PutBucketPolicyStub != nil {
		return fake.PutBucketPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketPolicyCallCount() int {
	fake.putBucketPolicyMutex.RLock()
	defer fake.putBucketPolicyMutex.RUnlock()
	return len(fake.putBucketPolicyArgsForCall)
}

func (fake *FakeS3API) PutBucketPolicyCalls(stub func(*s3.PutBucketPolicyInput) (*s3.PutBucketPolicyOutput, error)) {
	fake.putBucketPolicyMutex.Lock()
	defer fake.putBucketPolicyMutex.Unlock()
	fake.PutBucketPolicyStub = stub
}

func (fake *FakeS3API) PutBucketPolicyArgsForCall(i int) *s3.PutBucketPolicyInput {
	fake.putBucketPolicyMutex.RLock()
	defer fake.putBucketPolicyMutex.RUnlock()
	argsForCall := fake.putBucketPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketPolicyReturns(result1 *s3.PutBucketPolicyOutput, result2 error) {
	fake.putBucketPolicyMutex.Lock()
	defer fake.putBucketPolicyMutex.Unlock()
	fake.PutBucketPolicyStub = nil
	fake.putBucketPolicyReturns = struct {
		result1 *s3.PutBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketPolicyReturnsOnCall(i int, result1 *s3.PutBucketPolicyOutput, result2 error) {
	fake.putBucketPolicyMutex.Lock()
	defer fake.putBucketPolicyMutex.Unlock()
	fake.PutBucketPolicyStub = nil
	if fake.putBucketPolicyReturnsOnCall == nil {
		fake.putBucketPolicyReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketPolicyOutput
			result2 error
		})
	}
	fake.putBucketPolicyReturnsOnCall[i] = struct {
		result1 *s3.PutBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketPolicyRequest(arg1 *s3.PutBucketPolicyInput) (*request.Request, *s3.PutBucketPolicyOutput) {
	fake.putBucketPolicyRequestMutex.Lock()
	ret, specificReturn := fake.putBucketPolicyRequestReturnsOnCall[len(fake.putBucketPolicyRequestArgsForCall)]
	fake.putBucketPolicyRequestArgsForCall = append(fake.putBucketPolicyRequestArgsForCall, struct {
		arg1 *s3.PutBucketPolicyInput
	}{arg1})
	fake.recordInvocation("PutBucketPolicyRequest", []interface{}{arg1})
	fake.putBucketPolicyRequestMutex.Unlock()
	if fake.PutBucketPolicyRequestStub != nil {
		return fake.PutBucketPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketPolicyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketPolicyRequestCallCount() int {
	fake.putBucketPolicyRequestMutex.RLock()
	defer fake.putBucketPolicyRequestMutex.RUnlock()
	return len(fake.putBucketPolicyRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketPolicyRequestCalls(stub func(*s3.PutBucketPolicyInput) (*request.Request, *s3.PutBucketPolicyOutput)) {
	fake.putBucketPolicyRequestMutex.Lock()
	defer fake.putBucketPolicyRequestMutex.Unlock()
	fake.PutBucketPolicyRequestStub = stub
}

func (fake *FakeS3API) PutBucketPolicyRequestArgsForCall(i int) *s3.PutBucketPolicyInput {
	fake.putBucketPolicyRequestMutex.RLock()
	defer fake.putBucketPolicyRequestMutex.RUnlock()
	argsForCall := fake.putBucketPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketPolicyRequestReturns(result1 *request.Request, result2 *s3.PutBucketPolicyOutput) {
	fake.putBucketPolicyRequestMutex.Lock()
	defer fake.putBucketPolicyRequestMutex.Unlock()
	fake.PutBucketPolicyRequestStub = nil
	fake.putBucketPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketPolicyOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketPolicyOutput) {
	fake.putBucketPolicyRequestMutex.Lock()
	defer fake.putBucketPolicyRequestMutex.Unlock()
	fake.PutBucketPolicyRequestStub = nil
	if fake.putBucketPolicyRequestReturnsOnCall == nil {
		fake.putBucketPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketPolicyOutput
		})
	}
	fake.putBucketPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketPolicyOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketPolicyWithContext(arg1 context.Context, arg2 *s3.PutBucketPolicyInput, arg3 ...request.Option) (*s3.PutBucketPolicyOutput, error) {
	fake.putBucketPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketPolicyWithContextReturnsOnCall[len(fake.putBucketPolicyWithContextArgsForCall)]
	fake.putBucketPolicyWithContextArgsForCall = append(fake.putBucketPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketPolicyWithContextMutex.Unlock()
	if fake.PutBucketPolicyWithContextStub != nil {
		return fake.PutBucketPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketPolicyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketPolicyWithContextCallCount() int {
	fake.putBucketPolicyWithContextMutex.RLock()
	defer fake.putBucketPolicyWithContextMutex.RUnlock()
	return len(fake.putBucketPolicyWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketPolicyWithContextCalls(stub func(context.Context, *s3.PutBucketPolicyInput, ...request.Option) (*s3.PutBucketPolicyOutput, error)) {
	fake.putBucketPolicyWithContextMutex.Lock()
	defer fake.putBucketPolicyWithContextMutex.Unlock()
	fake.PutBucketPolicyWithContextStub = stub
}

func (fake *FakeS3API) PutBucketPolicyWithContextArgsForCall(i int) (context.Context, *s3.PutBucketPolicyInput, []request.Option) {
	fake.putBucketPolicyWithContextMutex.RLock()
	defer fake.putBucketPolicyWithContextMutex.RUnlock()
	argsForCall := fake.putBucketPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketPolicyWithContextReturns(result1 *s3.PutBucketPolicyOutput, result2 error) {
	fake.putBucketPolicyWithContextMutex.Lock()
	defer fake.putBucketPolicyWithContextMutex.Unlock()
	fake.PutBucketPolicyWithContextStub = nil
	fake.putBucketPolicyWithContextReturns = struct {
		result1 *s3.PutBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketPolicyWithContextReturnsOnCall(i int, result1 *s3.PutBucketPolicyOutput, result2 error) {
	fake.putBucketPolicyWithContextMutex.Lock()
	defer fake.putBucketPolicyWithContextMutex.Unlock()
	fake.PutBucketPolicyWithContextStub = nil
	if fake.putBucketPolicyWithContextReturnsOnCall == nil {
		fake.putBucketPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketPolicyOutput
			result2 error
		})
	}
	fake.putBucketPolicyWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketReplication(arg1 *s3.PutBucketReplicationInput) (*s3.PutBucketReplicationOutput, error) {
	fake.putBucketReplicationMutex.Lock()
	ret, specificReturn := fake.putBucketReplicationReturnsOnCall[len(fake.putBucketReplicationArgsForCall)]
	fake.putBucketReplicationArgsForCall = append(fake.putBucketReplicationArgsForCall, struct {
		arg1 *s3.PutBucketReplicationInput
	}{arg1})
	fake.recordInvocation("PutBucketReplication", []interface{}{arg1})
	fake.putBucketReplicationMutex.Unlock()
	if fake.PutBucketReplicationStub != nil {
		return fake.PutBucketReplicationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketReplicationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketReplicationCallCount() int {
	fake.putBucketReplicationMutex.RLock()
	defer fake.putBucketReplicationMutex.RUnlock()
	return len(fake.putBucketReplicationArgsForCall)
}

func (fake *FakeS3API) PutBucketReplicationCalls(stub func(*s3.PutBucketReplicationInput) (*s3.PutBucketReplicationOutput, error)) {
	fake.putBucketReplicationMutex.Lock()
	defer fake.putBucketReplicationMutex.Unlock()
	fake.PutBucketReplicationStub = stub
}

func (fake *FakeS3API) PutBucketReplicationArgsForCall(i int) *s3.PutBucketReplicationInput {
	fake.putBucketReplicationMutex.RLock()
	defer fake.putBucketReplicationMutex.RUnlock()
	argsForCall := fake.putBucketReplicationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketReplicationReturns(result1 *s3.PutBucketReplicationOutput, result2 error) {
	fake.putBucketReplicationMutex.Lock()
	defer fake.putBucketReplicationMutex.Unlock()
	fake.PutBucketReplicationStub = nil
	fake.putBucketReplicationReturns = struct {
		result1 *s3.PutBucketReplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketReplicationReturnsOnCall(i int, result1 *s3.PutBucketReplicationOutput, result2 error) {
	fake.putBucketReplicationMutex.Lock()
	defer fake.putBucketReplicationMutex.Unlock()
	fake.PutBucketReplicationStub = nil
	if fake.putBucketReplicationReturnsOnCall == nil {
		fake.putBucketReplicationReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketReplicationOutput
			result2 error
		})
	}
	fake.putBucketReplicationReturnsOnCall[i] = struct {
		result1 *s3.PutBucketReplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketReplicationRequest(arg1 *s3.PutBucketReplicationInput) (*request.Request, *s3.PutBucketReplicationOutput) {
	fake.putBucketReplicationRequestMutex.Lock()
	ret, specificReturn := fake.putBucketReplicationRequestReturnsOnCall[len(fake.putBucketReplicationRequestArgsForCall)]
	fake.putBucketReplicationRequestArgsForCall = append(fake.putBucketReplicationRequestArgsForCall, struct {
		arg1 *s3.PutBucketReplicationInput
	}{arg1})
	fake.recordInvocation("PutBucketReplicationRequest", []interface{}{arg1})
	fake.putBucketReplicationRequestMutex.Unlock()
	if fake.PutBucketReplicationRequestStub != nil {
		return fake.PutBucketReplicationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketReplicationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketReplicationRequestCallCount() int {
	fake.putBucketReplicationRequestMutex.RLock()
	defer fake.putBucketReplicationRequestMutex.RUnlock()
	return len(fake.putBucketReplicationRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketReplicationRequestCalls(stub func(*s3.PutBucketReplicationInput) (*request.Request, *s3.PutBucketReplicationOutput)) {
	fake.putBucketReplicationRequestMutex.Lock()
	defer fake.putBucketReplicationRequestMutex.Unlock()
	fake.PutBucketReplicationRequestStub = stub
}

func (fake *FakeS3API) PutBucketReplicationRequestArgsForCall(i int) *s3.PutBucketReplicationInput {
	fake.putBucketReplicationRequestMutex.RLock()
	defer fake.putBucketReplicationRequestMutex.RUnlock()
	argsForCall := fake.putBucketReplicationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketReplicationRequestReturns(result1 *request.Request, result2 *s3.PutBucketReplicationOutput) {
	fake.putBucketReplicationRequestMutex.Lock()
	defer fake.putBucketReplicationRequestMutex.Unlock()
	fake.PutBucketReplicationRequestStub = nil
	fake.putBucketReplicationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketReplicationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketReplicationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketReplicationOutput) {
	fake.putBucketReplicationRequestMutex.Lock()
	defer fake.putBucketReplicationRequestMutex.Unlock()
	fake.PutBucketReplicationRequestStub = nil
	if fake.putBucketReplicationRequestReturnsOnCall == nil {
		fake.putBucketReplicationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketReplicationOutput
		})
	}
	fake.putBucketReplicationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketReplicationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketReplicationWithContext(arg1 context.Context, arg2 *s3.PutBucketReplicationInput, arg3 ...request.Option) (*s3.PutBucketReplicationOutput, error) {
	fake.putBucketReplicationWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketReplicationWithContextReturnsOnCall[len(fake.putBucketReplicationWithContextArgsForCall)]
	fake.putBucketReplicationWithContextArgsForCall = append(fake.putBucketReplicationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketReplicationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketReplicationWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketReplicationWithContextMutex.Unlock()
	if fake.PutBucketReplicationWithContextStub != nil {
		return fake.PutBucketReplicationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketReplicationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketReplicationWithContextCallCount() int {
	fake.putBucketReplicationWithContextMutex.RLock()
	defer fake.putBucketReplicationWithContextMutex.RUnlock()
	return len(fake.putBucketReplicationWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketReplicationWithContextCalls(stub func(context.Context, *s3.PutBucketReplicationInput, ...request.Option) (*s3.PutBucketReplicationOutput, error)) {
	fake.putBucketReplicationWithContextMutex.Lock()
	defer fake.putBucketReplicationWithContextMutex.Unlock()
	fake.PutBucketReplicationWithContextStub = stub
}

func (fake *FakeS3API) PutBucketReplicationWithContextArgsForCall(i int) (context.Context, *s3.PutBucketReplicationInput, []request.Option) {
	fake.putBucketReplicationWithContextMutex.RLock()
	defer fake.putBucketReplicationWithContextMutex.RUnlock()
	argsForCall := fake.putBucketReplicationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketReplicationWithContextReturns(result1 *s3.PutBucketReplicationOutput, result2 error) {
	fake.putBucketReplicationWithContextMutex.Lock()
	defer fake.putBucketReplicationWithContextMutex.Unlock()
	fake.PutBucketReplicationWithContextStub = nil
	fake.putBucketReplicationWithContextReturns = struct {
		result1 *s3.PutBucketReplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketReplicationWithContextReturnsOnCall(i int, result1 *s3.PutBucketReplicationOutput, result2 error) {
	fake.putBucketReplicationWithContextMutex.Lock()
	defer fake.putBucketReplicationWithContextMutex.Unlock()
	fake.PutBucketReplicationWithContextStub = nil
	if fake.putBucketReplicationWithContextReturnsOnCall == nil {
		fake.putBucketReplicationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketReplicationOutput
			result2 error
		})
	}
	fake.putBucketReplicationWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketReplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketRequestPayment(arg1 *s3.PutBucketRequestPaymentInput) (*s3.PutBucketRequestPaymentOutput, error) {
	fake.putBucketRequestPaymentMutex.Lock()
	ret, specificReturn := fake.putBucketRequestPaymentReturnsOnCall[len(fake.putBucketRequestPaymentArgsForCall)]
	fake.putBucketRequestPaymentArgsForCall = append(fake.putBucketRequestPaymentArgsForCall, struct {
		arg1 *s3.PutBucketRequestPaymentInput
	}{arg1})
	fake.recordInvocation("PutBucketRequestPayment", []interface{}{arg1})
	fake.putBucketRequestPaymentMutex.Unlock()
	if fake.PutBucketRequestPaymentStub != nil {
		return fake.PutBucketRequestPaymentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketRequestPaymentReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketRequestPaymentCallCount() int {
	fake.putBucketRequestPaymentMutex.RLock()
	defer fake.putBucketRequestPaymentMutex.RUnlock()
	return len(fake.putBucketRequestPaymentArgsForCall)
}

func (fake *FakeS3API) PutBucketRequestPaymentCalls(stub func(*s3.PutBucketRequestPaymentInput) (*s3.PutBucketRequestPaymentOutput, error)) {
	fake.putBucketRequestPaymentMutex.Lock()
	defer fake.putBucketRequestPaymentMutex.Unlock()
	fake.PutBucketRequestPaymentStub = stub
}

func (fake *FakeS3API) PutBucketRequestPaymentArgsForCall(i int) *s3.PutBucketRequestPaymentInput {
	fake.putBucketRequestPaymentMutex.RLock()
	defer fake.putBucketRequestPaymentMutex.RUnlock()
	argsForCall := fake.putBucketRequestPaymentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketRequestPaymentReturns(result1 *s3.PutBucketRequestPaymentOutput, result2 error) {
	fake.putBucketRequestPaymentMutex.Lock()
	defer fake.putBucketRequestPaymentMutex.Unlock()
	fake.PutBucketRequestPaymentStub = nil
	fake.putBucketRequestPaymentReturns = struct {
		result1 *s3.PutBucketRequestPaymentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketRequestPaymentReturnsOnCall(i int, result1 *s3.PutBucketRequestPaymentOutput, result2 error) {
	fake.putBucketRequestPaymentMutex.Lock()
	defer fake.putBucketRequestPaymentMutex.Unlock()
	fake.PutBucketRequestPaymentStub = nil
	if fake.putBucketRequestPaymentReturnsOnCall == nil {
		fake.putBucketRequestPaymentReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketRequestPaymentOutput
			result2 error
		})
	}
	fake.putBucketRequestPaymentReturnsOnCall[i] = struct {
		result1 *s3.PutBucketRequestPaymentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketRequestPaymentRequest(arg1 *s3.PutBucketRequestPaymentInput) (*request.Request, *s3.PutBucketRequestPaymentOutput) {
	fake.putBucketRequestPaymentRequestMutex.Lock()
	ret, specificReturn := fake.putBucketRequestPaymentRequestReturnsOnCall[len(fake.putBucketRequestPaymentRequestArgsForCall)]
	fake.putBucketRequestPaymentRequestArgsForCall = append(fake.putBucketRequestPaymentRequestArgsForCall, struct {
		arg1 *s3.PutBucketRequestPaymentInput
	}{arg1})
	fake.recordInvocation("PutBucketRequestPaymentRequest", []interface{}{arg1})
	fake.putBucketRequestPaymentRequestMutex.Unlock()
	if fake.PutBucketRequestPaymentRequestStub != nil {
		return fake.PutBucketRequestPaymentRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketRequestPaymentRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketRequestPaymentRequestCallCount() int {
	fake.putBucketRequestPaymentRequestMutex.RLock()
	defer fake.putBucketRequestPaymentRequestMutex.RUnlock()
	return len(fake.putBucketRequestPaymentRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketRequestPaymentRequestCalls(stub func(*s3.PutBucketRequestPaymentInput) (*request.Request, *s3.PutBucketRequestPaymentOutput)) {
	fake.putBucketRequestPaymentRequestMutex.Lock()
	defer fake.putBucketRequestPaymentRequestMutex.Unlock()
	fake.PutBucketRequestPaymentRequestStub = stub
}

func (fake *FakeS3API) PutBucketRequestPaymentRequestArgsForCall(i int) *s3.PutBucketRequestPaymentInput {
	fake.putBucketRequestPaymentRequestMutex.RLock()
	defer fake.putBucketRequestPaymentRequestMutex.RUnlock()
	argsForCall := fake.putBucketRequestPaymentRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketRequestPaymentRequestReturns(result1 *request.Request, result2 *s3.PutBucketRequestPaymentOutput) {
	fake.putBucketRequestPaymentRequestMutex.Lock()
	defer fake.putBucketRequestPaymentRequestMutex.Unlock()
	fake.PutBucketRequestPaymentRequestStub = nil
	fake.putBucketRequestPaymentRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketRequestPaymentOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketRequestPaymentRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketRequestPaymentOutput) {
	fake.putBucketRequestPaymentRequestMutex.Lock()
	defer fake.putBucketRequestPaymentRequestMutex.Unlock()
	fake.PutBucketRequestPaymentRequestStub = nil
	if fake.putBucketRequestPaymentRequestReturnsOnCall == nil {
		fake.putBucketRequestPaymentRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketRequestPaymentOutput
		})
	}
	fake.putBucketRequestPaymentRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketRequestPaymentOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketRequestPaymentWithContext(arg1 context.Context, arg2 *s3.PutBucketRequestPaymentInput, arg3 ...request.Option) (*s3.PutBucketRequestPaymentOutput, error) {
	fake.putBucketRequestPaymentWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketRequestPaymentWithContextReturnsOnCall[len(fake.putBucketRequestPaymentWithContextArgsForCall)]
	fake.putBucketRequestPaymentWithContextArgsForCall = append(fake.putBucketRequestPaymentWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketRequestPaymentInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketRequestPaymentWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketRequestPaymentWithContextMutex.Unlock()
	if fake.PutBucketRequestPaymentWithContextStub != nil {
		return fake.PutBucketRequestPaymentWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketRequestPaymentWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketRequestPaymentWithContextCallCount() int {
	fake.putBucketRequestPaymentWithContextMutex.RLock()
	defer fake.putBucketRequestPaymentWithContextMutex.RUnlock()
	return len(fake.putBucketRequestPaymentWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketRequestPaymentWithContextCalls(stub func(context.Context, *s3.PutBucketRequestPaymentInput, ...request.Option) (*s3.PutBucketRequestPaymentOutput, error)) {
	fake.putBucketRequestPaymentWithContextMutex.Lock()
	defer fake.putBucketRequestPaymentWithContextMutex.Unlock()
	fake.PutBucketRequestPaymentWithContextStub = stub
}

func (fake *FakeS3API) PutBucketRequestPaymentWithContextArgsForCall(i int) (context.Context, *s3.PutBucketRequestPaymentInput, []request.Option) {
	fake.putBucketRequestPaymentWithContextMutex.RLock()
	defer fake.putBucketRequestPaymentWithContextMutex.RUnlock()
	argsForCall := fake.putBucketRequestPaymentWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketRequestPaymentWithContextReturns(result1 *s3.PutBucketRequestPaymentOutput, result2 error) {
	fake.putBucketRequestPaymentWithContextMutex.Lock()
	defer fake.putBucketRequestPaymentWithContextMutex.Unlock()
	fake.PutBucketRequestPaymentWithContextStub = nil
	fake.putBucketRequestPaymentWithContextReturns = struct {
		result1 *s3.PutBucketRequestPaymentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketRequestPaymentWithContextReturnsOnCall(i int, result1 *s3.PutBucketRequestPaymentOutput, result2 error) {
	fake.putBucketRequestPaymentWithContextMutex.Lock()
	defer fake.putBucketRequestPaymentWithContextMutex.Unlock()
	fake.PutBucketRequestPaymentWithContextStub = nil
	if fake.putBucketRequestPaymentWithContextReturnsOnCall == nil {
		fake.putBucketRequestPaymentWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketRequestPaymentOutput
			result2 error
		})
	}
	fake.putBucketRequestPaymentWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketRequestPaymentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketTagging(arg1 *s3.PutBucketTaggingInput) (*s3.PutBucketTaggingOutput, error) {
	fake.putBucketTaggingMutex.Lock()
	ret, specificReturn := fake.putBucketTaggingReturnsOnCall[len(fake.putBucketTaggingArgsForCall)]
	fake.putBucketTaggingArgsForCall = append(fake.putBucketTaggingArgsForCall, struct {
		arg1 *s3.PutBucketTaggingInput
	}{arg1})
	fake.recordInvocation("PutBucketTagging", []interface{}{arg1})
	fake.putBucketTaggingMutex.Unlock()
	if fake.PutBucketTaggingStub != nil {
		return fake.PutBucketTaggingStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketTaggingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketTaggingCallCount() int {
	fake.putBucketTaggingMutex.RLock()
	defer fake.putBucketTaggingMutex.RUnlock()
	return len(fake.putBucketTaggingArgsForCall)
}

func (fake *FakeS3API) PutBucketTaggingCalls(stub func(*s3.PutBucketTaggingInput) (*s3.PutBucketTaggingOutput, error)) {
	fake.putBucketTaggingMutex.Lock()
	defer fake.putBucketTaggingMutex.Unlock()
	fake.PutBucketTaggingStub = stub
}

func (fake *FakeS3API) PutBucketTaggingArgsForCall(i int) *s3.PutBucketTaggingInput {
	fake.putBucketTaggingMutex.RLock()
	defer fake.putBucketTaggingMutex.RUnlock()
	argsForCall := fake.putBucketTaggingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketTaggingReturns(result1 *s3.PutBucketTaggingOutput, result2 error) {
	fake.putBucketTaggingMutex.Lock()
	defer fake.putBucketTaggingMutex.Unlock()
	fake.PutBucketTaggingStub = nil
	fake.putBucketTaggingReturns = struct {
		result1 *s3.PutBucketTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketTaggingReturnsOnCall(i int, result1 *s3.PutBucketTaggingOutput, result2 error) {
	fake.putBucketTaggingMutex.Lock()
	defer fake.putBucketTaggingMutex.Unlock()
	fake.PutBucketTaggingStub = nil
	if fake.putBucketTaggingReturnsOnCall == nil {
		fake.putBucketTaggingReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketTaggingOutput
			result2 error
		})
	}
	fake.putBucketTaggingReturnsOnCall[i] = struct {
		result1 *s3.PutBucketTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketTaggingRequest(arg1 *s3.PutBucketTaggingInput) (*request.Request, *s3.PutBucketTaggingOutput) {
	fake.putBucketTaggingRequestMutex.Lock()
	ret, specificReturn := fake.putBucketTaggingRequestReturnsOnCall[len(fake.putBucketTaggingRequestArgsForCall)]
	fake.putBucketTaggingRequestArgsForCall = append(fake.putBucketTaggingRequestArgsForCall, struct {
		arg1 *s3.PutBucketTaggingInput
	}{arg1})
	fake.recordInvocation("PutBucketTaggingRequest", []interface{}{arg1})
	fake.putBucketTaggingRequestMutex.Unlock()
	if fake.PutBucketTaggingRequestStub != nil {
		return fake.PutBucketTaggingRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketTaggingRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketTaggingRequestCallCount() int {
	fake.putBucketTaggingRequestMutex.RLock()
	defer fake.putBucketTaggingRequestMutex.RUnlock()
	return len(fake.putBucketTaggingRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketTaggingRequestCalls(stub func(*s3.PutBucketTaggingInput) (*request.Request, *s3.PutBucketTaggingOutput)) {
	fake.putBucketTaggingRequestMutex.Lock()
	defer fake.putBucketTaggingRequestMutex.Unlock()
	fake.PutBucketTaggingRequestStub = stub
}

func (fake *FakeS3API) PutBucketTaggingRequestArgsForCall(i int) *s3.PutBucketTaggingInput {
	fake.putBucketTaggingRequestMutex.RLock()
	defer fake.putBucketTaggingRequestMutex.RUnlock()
	argsForCall := fake.putBucketTaggingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketTaggingRequestReturns(result1 *request.Request, result2 *s3.PutBucketTaggingOutput) {
	fake.putBucketTaggingRequestMutex.Lock()
	defer fake.putBucketTaggingRequestMutex.Unlock()
	fake.PutBucketTaggingRequestStub = nil
	fake.putBucketTaggingRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketTaggingOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketTaggingRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketTaggingOutput) {
	fake.putBucketTaggingRequestMutex.Lock()
	defer fake.putBucketTaggingRequestMutex.Unlock()
	fake.PutBucketTaggingRequestStub = nil
	if fake.putBucketTaggingRequestReturnsOnCall == nil {
		fake.putBucketTaggingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketTaggingOutput
		})
	}
	fake.putBucketTaggingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketTaggingOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketTaggingWithContext(arg1 context.Context, arg2 *s3.PutBucketTaggingInput, arg3 ...request.Option) (*s3.PutBucketTaggingOutput, error) {
	fake.putBucketTaggingWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketTaggingWithContextReturnsOnCall[len(fake.putBucketTaggingWithContextArgsForCall)]
	fake.putBucketTaggingWithContextArgsForCall = append(fake.putBucketTaggingWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketTaggingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketTaggingWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketTaggingWithContextMutex.Unlock()
	if fake.PutBucketTaggingWithContextStub != nil {
		return fake.PutBucketTaggingWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketTaggingWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketTaggingWithContextCallCount() int {
	fake.putBucketTaggingWithContextMutex.RLock()
	defer fake.putBucketTaggingWithContextMutex.RUnlock()
	return len(fake.putBucketTaggingWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketTaggingWithContextCalls(stub func(context.Context, *s3.PutBucketTaggingInput, ...request.Option) (*s3.PutBucketTaggingOutput, error)) {
	fake.putBucketTaggingWithContextMutex.Lock()
	defer fake.putBucketTaggingWithContextMutex.Unlock()
	fake.PutBucketTaggingWithContextStub = stub
}

func (fake *FakeS3API) PutBucketTaggingWithContextArgsForCall(i int) (context.Context, *s3.PutBucketTaggingInput, []request.Option) {
	fake.putBucketTaggingWithContextMutex.RLock()
	defer fake.putBucketTaggingWithContextMutex.RUnlock()
	argsForCall := fake.putBucketTaggingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketTaggingWithContextReturns(result1 *s3.PutBucketTaggingOutput, result2 error) {
	fake.putBucketTaggingWithContextMutex.Lock()
	defer fake.putBucketTaggingWithContextMutex.Unlock()
	fake.PutBucketTaggingWithContextStub = nil
	fake.putBucketTaggingWithContextReturns = struct {
		result1 *s3.PutBucketTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketTaggingWithContextReturnsOnCall(i int, result1 *s3.PutBucketTaggingOutput, result2 error) {
	fake.putBucketTaggingWithContextMutex.Lock()
	defer fake.putBucketTaggingWithContextMutex.Unlock()
	fake.PutBucketTaggingWithContextStub = nil
	if fake.putBucketTaggingWithContextReturnsOnCall == nil {
		fake.putBucketTaggingWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketTaggingOutput
			result2 error
		})
	}
	fake.putBucketTaggingWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketVersioning(arg1 *s3.PutBucketVersioningInput) (*s3.PutBucketVersioningOutput, error) {
	fake.putBucketVersioningMutex.Lock()
	ret, specificReturn := fake.putBucketVersioningReturnsOnCall[len(fake.putBucketVersioningArgsForCall)]
	fake.putBucketVersioningArgsForCall = append(fake.putBucketVersioningArgsForCall, struct {
		arg1 *s3.PutBucketVersioningInput
	}{arg1})
	fake.recordInvocation("PutBucketVersioning", []interface{}{arg1})
	fake.putBucketVersioningMutex.Unlock()
	if fake.PutBucketVersioningStub != nil {
		return fake.PutBucketVersioningStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketVersioningReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketVersioningCallCount() int {
	fake.putBucketVersioningMutex.RLock()
	defer fake.putBucketVersioningMutex.RUnlock()
	return len(fake.putBucketVersioningArgsForCall)
}

func (fake *FakeS3API) PutBucketVersioningCalls(stub func(*s3.PutBucketVersioningInput) (*s3.PutBucketVersioningOutput, error)) {
	fake.putBucketVersioningMutex.Lock()
	defer fake.putBucketVersioningMutex.Unlock()
	fake.PutBucketVersioningStub = stub
}

func (fake *FakeS3API) PutBucketVersioningArgsForCall(i int) *s3.PutBucketVersioningInput {
	fake.putBucketVersioningMutex.RLock()
	defer fake.putBucketVersioningMutex.RUnlock()
	argsForCall := fake.putBucketVersioningArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketVersioningReturns(result1 *s3.PutBucketVersioningOutput, result2 error) {
	fake.putBucketVersioningMutex.Lock()
	defer fake.putBucketVersioningMutex.Unlock()
	fake.PutBucketVersioningStub = nil
	fake.putBucketVersioningReturns = struct {
		result1 *s3.PutBucketVersioningOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketVersioningReturnsOnCall(i int, result1 *s3.PutBucketVersioningOutput, result2 error) {
	fake.putBucketVersioningMutex.Lock()
	defer fake.putBucketVersioningMutex.Unlock()
	fake.PutBucketVersioningStub = nil
	if fake.putBucketVersioningReturnsOnCall == nil {
		fake.putBucketVersioningReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketVersioningOutput
			result2 error
		})
	}
	fake.putBucketVersioningReturnsOnCall[i] = struct {
		result1 *s3.PutBucketVersioningOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketVersioningRequest(arg1 *s3.PutBucketVersioningInput) (*request.Request, *s3.PutBucketVersioningOutput) {
	fake.putBucketVersioningRequestMutex.Lock()
	ret, specificReturn := fake.putBucketVersioningRequestReturnsOnCall[len(fake.putBucketVersioningRequestArgsForCall)]
	fake.putBucketVersioningRequestArgsForCall = append(fake.putBucketVersioningRequestArgsForCall, struct {
		arg1 *s3.PutBucketVersioningInput
	}{arg1})
	fake.recordInvocation("PutBucketVersioningRequest", []interface{}{arg1})
	fake.putBucketVersioningRequestMutex.Unlock()
	if fake.PutBucketVersioningRequestStub != nil {
		return fake.PutBucketVersioningRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketVersioningRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketVersioningRequestCallCount() int {
	fake.putBucketVersioningRequestMutex.RLock()
	defer fake.putBucketVersioningRequestMutex.RUnlock()
	return len(fake.putBucketVersioningRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketVersioningRequestCalls(stub func(*s3.PutBucketVersioningInput) (*request.Request, *s3.PutBucketVersioningOutput)) {
	fake.putBucketVersioningRequestMutex.Lock()
	defer fake.putBucketVersioningRequestMutex.Unlock()
	fake.PutBucketVersioningRequestStub = stub
}

func (fake *FakeS3API) PutBucketVersioningRequestArgsForCall(i int) *s3.PutBucketVersioningInput {
	fake.putBucketVersioningRequestMutex.RLock()
	defer fake.putBucketVersioningRequestMutex.RUnlock()
	argsForCall := fake.putBucketVersioningRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketVersioningRequestReturns(result1 *request.Request, result2 *s3.PutBucketVersioningOutput) {
	fake.putBucketVersioningRequestMutex.Lock()
	defer fake.putBucketVersioningRequestMutex.Unlock()
	fake.PutBucketVersioningRequestStub = nil
	fake.putBucketVersioningRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketVersioningOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketVersioningRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketVersioningOutput) {
	fake.putBucketVersioningRequestMutex.Lock()
	defer fake.putBucketVersioningRequestMutex.Unlock()
	fake.PutBucketVersioningRequestStub = nil
	if fake.putBucketVersioningRequestReturnsOnCall == nil {
		fake.putBucketVersioningRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketVersioningOutput
		})
	}
	fake.putBucketVersioningRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketVersioningOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketVersioningWithContext(arg1 context.Context, arg2 *s3.PutBucketVersioningInput, arg3 ...request.Option) (*s3.PutBucketVersioningOutput, error) {
	fake.putBucketVersioningWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketVersioningWithContextReturnsOnCall[len(fake.putBucketVersioningWithContextArgsForCall)]
	fake.putBucketVersioningWithContextArgsForCall = append(fake.putBucketVersioningWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketVersioningInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketVersioningWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketVersioningWithContextMutex.Unlock()
	if fake.PutBucketVersioningWithContextStub != nil {
		return fake.PutBucketVersioningWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketVersioningWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketVersioningWithContextCallCount() int {
	fake.putBucketVersioningWithContextMutex.RLock()
	defer fake.putBucketVersioningWithContextMutex.RUnlock()
	return len(fake.putBucketVersioningWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketVersioningWithContextCalls(stub func(context.Context, *s3.PutBucketVersioningInput, ...request.Option) (*s3.PutBucketVersioningOutput, error)) {
	fake.putBucketVersioningWithContextMutex.Lock()
	defer fake.putBucketVersioningWithContextMutex.Unlock()
	fake.PutBucketVersioningWithContextStub = stub
}

func (fake *FakeS3API) PutBucketVersioningWithContextArgsForCall(i int) (context.Context, *s3.PutBucketVersioningInput, []request.Option) {
	fake.putBucketVersioningWithContextMutex.RLock()
	defer fake.putBucketVersioningWithContextMutex.RUnlock()
	argsForCall := fake.putBucketVersioningWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketVersioningWithContextReturns(result1 *s3.PutBucketVersioningOutput, result2 error) {
	fake.putBucketVersioningWithContextMutex.Lock()
	defer fake.putBucketVersioningWithContextMutex.Unlock()
	fake.PutBucketVersioningWithContextStub = nil
	fake.putBucketVersioningWithContextReturns = struct {
		result1 *s3.PutBucketVersioningOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketVersioningWithContextReturnsOnCall(i int, result1 *s3.PutBucketVersioningOutput, result2 error) {
	fake.putBucketVersioningWithContextMutex.Lock()
	defer fake.putBucketVersioningWithContextMutex.Unlock()
	fake.PutBucketVersioningWithContextStub = nil
	if fake.putBucketVersioningWithContextReturnsOnCall == nil {
		fake.putBucketVersioningWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketVersioningOutput
			result2 error
		})
	}
	fake.putBucketVersioningWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketVersioningOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketWebsite(arg1 *s3.PutBucketWebsiteInput) (*s3.PutBucketWebsiteOutput, error) {
	fake.putBucketWebsiteMutex.Lock()
	ret, specificReturn := fake.putBucketWebsiteReturnsOnCall[len(fake.putBucketWebsiteArgsForCall)]
	fake.putBucketWebsiteArgsForCall = append(fake.putBucketWebsiteArgsForCall, struct {
		arg1 *s3.PutBucketWebsiteInput
	}{arg1})
	fake.recordInvocation("PutBucketWebsite", []interface{}{arg1})
	fake.putBucketWebsiteMutex.Unlock()
	if fake.PutBucketWebsiteStub != nil {
		return fake.PutBucketWebsiteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketWebsiteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketWebsiteCallCount() int {
	fake.putBucketWebsiteMutex.RLock()
	defer fake.putBucketWebsiteMutex.RUnlock()
	return len(fake.putBucketWebsiteArgsForCall)
}

func (fake *FakeS3API) PutBucketWebsiteCalls(stub func(*s3.PutBucketWebsiteInput) (*s3.PutBucketWebsiteOutput, error)) {
	fake.putBucketWebsiteMutex.Lock()
	defer fake.putBucketWebsiteMutex.Unlock()
	fake.PutBucketWebsiteStub = stub
}

func (fake *FakeS3API) PutBucketWebsiteArgsForCall(i int) *s3.PutBucketWebsiteInput {
	fake.putBucketWebsiteMutex.RLock()
	defer fake.putBucketWebsiteMutex.RUnlock()
	argsForCall := fake.putBucketWebsiteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketWebsiteReturns(result1 *s3.PutBucketWebsiteOutput, result2 error) {
	fake.putBucketWebsiteMutex.Lock()
	defer fake.putBucketWebsiteMutex.Unlock()
	fake.PutBucketWebsiteStub = nil
	fake.putBucketWebsiteReturns = struct {
		result1 *s3.PutBucketWebsiteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketWebsiteReturnsOnCall(i int, result1 *s3.PutBucketWebsiteOutput, result2 error) {
	fake.putBucketWebsiteMutex.Lock()
	defer fake.putBucketWebsiteMutex.Unlock()
	fake.PutBucketWebsiteStub = nil
	if fake.putBucketWebsiteReturnsOnCall == nil {
		fake.putBucketWebsiteReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketWebsiteOutput
			result2 error
		})
	}
	fake.putBucketWebsiteReturnsOnCall[i] = struct {
		result1 *s3.PutBucketWebsiteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketWebsiteRequest(arg1 *s3.PutBucketWebsiteInput) (*request.Request, *s3.PutBucketWebsiteOutput) {
	fake.putBucketWebsiteRequestMutex.Lock()
	ret, specificReturn := fake.putBucketWebsiteRequestReturnsOnCall[len(fake.putBucketWebsiteRequestArgsForCall)]
	fake.putBucketWebsiteRequestArgsForCall = append(fake.putBucketWebsiteRequestArgsForCall, struct {
		arg1 *s3.PutBucketWebsiteInput
	}{arg1})
	fake.recordInvocation("PutBucketWebsiteRequest", []interface{}{arg1})
	fake.putBucketWebsiteRequestMutex.Unlock()
	if fake.PutBucketWebsiteRequestStub != nil {
		return fake.PutBucketWebsiteRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketWebsiteRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketWebsiteRequestCallCount() int {
	fake.putBucketWebsiteRequestMutex.RLock()
	defer fake.putBucketWebsiteRequestMutex.RUnlock()
	return len(fake.putBucketWebsiteRequestArgsForCall)
}

func (fake *FakeS3API) PutBucketWebsiteRequestCalls(stub func(*s3.PutBucketWebsiteInput) (*request.Request, *s3.PutBucketWebsiteOutput)) {
	fake.putBucketWebsiteRequestMutex.Lock()
	defer fake.putBucketWebsiteRequestMutex.Unlock()
	fake.PutBucketWebsiteRequestStub = stub
}

func (fake *FakeS3API) PutBucketWebsiteRequestArgsForCall(i int) *s3.PutBucketWebsiteInput {
	fake.putBucketWebsiteRequestMutex.RLock()
	defer fake.putBucketWebsiteRequestMutex.RUnlock()
	argsForCall := fake.putBucketWebsiteRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutBucketWebsiteRequestReturns(result1 *request.Request, result2 *s3.PutBucketWebsiteOutput) {
	fake.putBucketWebsiteRequestMutex.Lock()
	defer fake.putBucketWebsiteRequestMutex.Unlock()
	fake.PutBucketWebsiteRequestStub = nil
	fake.putBucketWebsiteRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutBucketWebsiteOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketWebsiteRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutBucketWebsiteOutput) {
	fake.putBucketWebsiteRequestMutex.Lock()
	defer fake.putBucketWebsiteRequestMutex.Unlock()
	fake.PutBucketWebsiteRequestStub = nil
	if fake.putBucketWebsiteRequestReturnsOnCall == nil {
		fake.putBucketWebsiteRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutBucketWebsiteOutput
		})
	}
	fake.putBucketWebsiteRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutBucketWebsiteOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketWebsiteWithContext(arg1 context.Context, arg2 *s3.PutBucketWebsiteInput, arg3 ...request.Option) (*s3.PutBucketWebsiteOutput, error) {
	fake.putBucketWebsiteWithContextMutex.Lock()
	ret, specificReturn := fake.putBucketWebsiteWithContextReturnsOnCall[len(fake.putBucketWebsiteWithContextArgsForCall)]
	fake.putBucketWebsiteWithContextArgsForCall = append(fake.putBucketWebsiteWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketWebsiteInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBucketWebsiteWithContext", []interface{}{arg1, arg2, arg3})
	fake.putBucketWebsiteWithContextMutex.Unlock()
	if fake.PutBucketWebsiteWithContextStub != nil {
		return fake.PutBucketWebsiteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putBucketWebsiteWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutBucketWebsiteWithContextCallCount() int {
	fake.putBucketWebsiteWithContextMutex.RLock()
	defer fake.putBucketWebsiteWithContextMutex.RUnlock()
	return len(fake.putBucketWebsiteWithContextArgsForCall)
}

func (fake *FakeS3API) PutBucketWebsiteWithContextCalls(stub func(context.Context, *s3.PutBucketWebsiteInput, ...request.Option) (*s3.PutBucketWebsiteOutput, error)) {
	fake.putBucketWebsiteWithContextMutex.Lock()
	defer fake.putBucketWebsiteWithContextMutex.Unlock()
	fake.PutBucketWebsiteWithContextStub = stub
}

func (fake *FakeS3API) PutBucketWebsiteWithContextArgsForCall(i int) (context.Context, *s3.PutBucketWebsiteInput, []request.Option) {
	fake.putBucketWebsiteWithContextMutex.RLock()
	defer fake.putBucketWebsiteWithContextMutex.RUnlock()
	argsForCall := fake.putBucketWebsiteWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutBucketWebsiteWithContextReturns(result1 *s3.PutBucketWebsiteOutput, result2 error) {
	fake.putBucketWebsiteWithContextMutex.Lock()
	defer fake.putBucketWebsiteWithContextMutex.Unlock()
	fake.PutBucketWebsiteWithContextStub = nil
	fake.putBucketWebsiteWithContextReturns = struct {
		result1 *s3.PutBucketWebsiteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutBucketWebsiteWithContextReturnsOnCall(i int, result1 *s3.PutBucketWebsiteOutput, result2 error) {
	fake.putBucketWebsiteWithContextMutex.Lock()
	defer fake.putBucketWebsiteWithContextMutex.Unlock()
	fake.PutBucketWebsiteWithContextStub = nil
	if fake.putBucketWebsiteWithContextReturnsOnCall == nil {
		fake.putBucketWebsiteWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketWebsiteOutput
			result2 error
		})
	}
	fake.putBucketWebsiteWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutBucketWebsiteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObject(arg1 *s3.PutObjectInput) (*s3.PutObjectOutput, error) {
	fake.putObjectMutex.Lock()
	ret, specificReturn := fake.putObjectReturnsOnCall[len(fake.putObjectArgsForCall)]
	fake.putObjectArgsForCall = append(fake.putObjectArgsForCall, struct {
		arg1 *s3.PutObjectInput
	}{arg1})
	fake.recordInvocation("PutObject", []interface{}{arg1})
	fake.putObjectMutex.Unlock()
	if fake.PutObjectStub != nil {
		return fake.PutObjectStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectCallCount() int {
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	return len(fake.putObjectArgsForCall)
}

func (fake *FakeS3API) PutObjectCalls(stub func(*s3.PutObjectInput) (*s3.PutObjectOutput, error)) {
	fake.putObjectMutex.Lock()
	defer fake.putObjectMutex.Unlock()
	fake.PutObjectStub = stub
}

func (fake *FakeS3API) PutObjectArgsForCall(i int) *s3.PutObjectInput {
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	argsForCall := fake.putObjectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutObjectReturns(result1 *s3.PutObjectOutput, result2 error) {
	fake.putObjectMutex.Lock()
	defer fake.putObjectMutex.Unlock()
	fake.PutObjectStub = nil
	fake.putObjectReturns = struct {
		result1 *s3.PutObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectReturnsOnCall(i int, result1 *s3.PutObjectOutput, result2 error) {
	fake.putObjectMutex.Lock()
	defer fake.putObjectMutex.Unlock()
	fake.PutObjectStub = nil
	if fake.putObjectReturnsOnCall == nil {
		fake.putObjectReturnsOnCall = make(map[int]struct {
			result1 *s3.PutObjectOutput
			result2 error
		})
	}
	fake.putObjectReturnsOnCall[i] = struct {
		result1 *s3.PutObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectAcl(arg1 *s3.PutObjectAclInput) (*s3.PutObjectAclOutput, error) {
	fake.putObjectAclMutex.Lock()
	ret, specificReturn := fake.putObjectAclReturnsOnCall[len(fake.putObjectAclArgsForCall)]
	fake.putObjectAclArgsForCall = append(fake.putObjectAclArgsForCall, struct {
		arg1 *s3.PutObjectAclInput
	}{arg1})
	fake.recordInvocation("PutObjectAcl", []interface{}{arg1})
	fake.putObjectAclMutex.Unlock()
	if fake.PutObjectAclStub != nil {
		return fake.PutObjectAclStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectAclReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectAclCallCount() int {
	fake.putObjectAclMutex.RLock()
	defer fake.putObjectAclMutex.RUnlock()
	return len(fake.putObjectAclArgsForCall)
}

func (fake *FakeS3API) PutObjectAclCalls(stub func(*s3.PutObjectAclInput) (*s3.PutObjectAclOutput, error)) {
	fake.putObjectAclMutex.Lock()
	defer fake.putObjectAclMutex.Unlock()
	fake.PutObjectAclStub = stub
}

func (fake *FakeS3API) PutObjectAclArgsForCall(i int) *s3.PutObjectAclInput {
	fake.putObjectAclMutex.RLock()
	defer fake.putObjectAclMutex.RUnlock()
	argsForCall := fake.putObjectAclArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutObjectAclReturns(result1 *s3.PutObjectAclOutput, result2 error) {
	fake.putObjectAclMutex.Lock()
	defer fake.putObjectAclMutex.Unlock()
	fake.PutObjectAclStub = nil
	fake.putObjectAclReturns = struct {
		result1 *s3.PutObjectAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectAclReturnsOnCall(i int, result1 *s3.PutObjectAclOutput, result2 error) {
	fake.putObjectAclMutex.Lock()
	defer fake.putObjectAclMutex.Unlock()
	fake.PutObjectAclStub = nil
	if fake.putObjectAclReturnsOnCall == nil {
		fake.putObjectAclReturnsOnCall = make(map[int]struct {
			result1 *s3.PutObjectAclOutput
			result2 error
		})
	}
	fake.putObjectAclReturnsOnCall[i] = struct {
		result1 *s3.PutObjectAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectAclRequest(arg1 *s3.PutObjectAclInput) (*request.Request, *s3.PutObjectAclOutput) {
	fake.putObjectAclRequestMutex.Lock()
	ret, specificReturn := fake.putObjectAclRequestReturnsOnCall[len(fake.putObjectAclRequestArgsForCall)]
	fake.putObjectAclRequestArgsForCall = append(fake.putObjectAclRequestArgsForCall, struct {
		arg1 *s3.PutObjectAclInput
	}{arg1})
	fake.recordInvocation("PutObjectAclRequest", []interface{}{arg1})
	fake.putObjectAclRequestMutex.Unlock()
	if fake.PutObjectAclRequestStub != nil {
		return fake.PutObjectAclRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectAclRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectAclRequestCallCount() int {
	fake.putObjectAclRequestMutex.RLock()
	defer fake.putObjectAclRequestMutex.RUnlock()
	return len(fake.putObjectAclRequestArgsForCall)
}

func (fake *FakeS3API) PutObjectAclRequestCalls(stub func(*s3.PutObjectAclInput) (*request.Request, *s3.PutObjectAclOutput)) {
	fake.putObjectAclRequestMutex.Lock()
	defer fake.putObjectAclRequestMutex.Unlock()
	fake.PutObjectAclRequestStub = stub
}

func (fake *FakeS3API) PutObjectAclRequestArgsForCall(i int) *s3.PutObjectAclInput {
	fake.putObjectAclRequestMutex.RLock()
	defer fake.putObjectAclRequestMutex.RUnlock()
	argsForCall := fake.putObjectAclRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutObjectAclRequestReturns(result1 *request.Request, result2 *s3.PutObjectAclOutput) {
	fake.putObjectAclRequestMutex.Lock()
	defer fake.putObjectAclRequestMutex.Unlock()
	fake.PutObjectAclRequestStub = nil
	fake.putObjectAclRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutObjectAclOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectAclRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutObjectAclOutput) {
	fake.putObjectAclRequestMutex.Lock()
	defer fake.putObjectAclRequestMutex.Unlock()
	fake.PutObjectAclRequestStub = nil
	if fake.putObjectAclRequestReturnsOnCall == nil {
		fake.putObjectAclRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutObjectAclOutput
		})
	}
	fake.putObjectAclRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutObjectAclOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectAclWithContext(arg1 context.Context, arg2 *s3.PutObjectAclInput, arg3 ...request.Option) (*s3.PutObjectAclOutput, error) {
	fake.putObjectAclWithContextMutex.Lock()
	ret, specificReturn := fake.putObjectAclWithContextReturnsOnCall[len(fake.putObjectAclWithContextArgsForCall)]
	fake.putObjectAclWithContextArgsForCall = append(fake.putObjectAclWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutObjectAclInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutObjectAclWithContext", []interface{}{arg1, arg2, arg3})
	fake.putObjectAclWithContextMutex.Unlock()
	if fake.PutObjectAclWithContextStub != nil {
		return fake.PutObjectAclWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectAclWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectAclWithContextCallCount() int {
	fake.putObjectAclWithContextMutex.RLock()
	defer fake.putObjectAclWithContextMutex.RUnlock()
	return len(fake.putObjectAclWithContextArgsForCall)
}

func (fake *FakeS3API) PutObjectAclWithContextCalls(stub func(context.Context, *s3.PutObjectAclInput, ...request.Option) (*s3.PutObjectAclOutput, error)) {
	fake.putObjectAclWithContextMutex.Lock()
	defer fake.putObjectAclWithContextMutex.Unlock()
	fake.PutObjectAclWithContextStub = stub
}

func (fake *FakeS3API) PutObjectAclWithContextArgsForCall(i int) (context.Context, *s3.PutObjectAclInput, []request.Option) {
	fake.putObjectAclWithContextMutex.RLock()
	defer fake.putObjectAclWithContextMutex.RUnlock()
	argsForCall := fake.putObjectAclWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutObjectAclWithContextReturns(result1 *s3.PutObjectAclOutput, result2 error) {
	fake.putObjectAclWithContextMutex.Lock()
	defer fake.putObjectAclWithContextMutex.Unlock()
	fake.PutObjectAclWithContextStub = nil
	fake.putObjectAclWithContextReturns = struct {
		result1 *s3.PutObjectAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectAclWithContextReturnsOnCall(i int, result1 *s3.PutObjectAclOutput, result2 error) {
	fake.putObjectAclWithContextMutex.Lock()
	defer fake.putObjectAclWithContextMutex.Unlock()
	fake.PutObjectAclWithContextStub = nil
	if fake.putObjectAclWithContextReturnsOnCall == nil {
		fake.putObjectAclWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutObjectAclOutput
			result2 error
		})
	}
	fake.putObjectAclWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutObjectAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectLegalHold(arg1 *s3.PutObjectLegalHoldInput) (*s3.PutObjectLegalHoldOutput, error) {
	fake.putObjectLegalHoldMutex.Lock()
	ret, specificReturn := fake.putObjectLegalHoldReturnsOnCall[len(fake.putObjectLegalHoldArgsForCall)]
	fake.putObjectLegalHoldArgsForCall = append(fake.putObjectLegalHoldArgsForCall, struct {
		arg1 *s3.PutObjectLegalHoldInput
	}{arg1})
	fake.recordInvocation("PutObjectLegalHold", []interface{}{arg1})
	fake.putObjectLegalHoldMutex.Unlock()
	if fake.PutObjectLegalHoldStub != nil {
		return fake.PutObjectLegalHoldStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectLegalHoldReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectLegalHoldCallCount() int {
	fake.putObjectLegalHoldMutex.RLock()
	defer fake.putObjectLegalHoldMutex.RUnlock()
	return len(fake.putObjectLegalHoldArgsForCall)
}

func (fake *FakeS3API) PutObjectLegalHoldCalls(stub func(*s3.PutObjectLegalHoldInput) (*s3.PutObjectLegalHoldOutput, error)) {
	fake.putObjectLegalHoldMutex.Lock()
	defer fake.putObjectLegalHoldMutex.Unlock()
	fake.PutObjectLegalHoldStub = stub
}

func (fake *FakeS3API) PutObjectLegalHoldArgsForCall(i int) *s3.PutObjectLegalHoldInput {
	fake.putObjectLegalHoldMutex.RLock()
	defer fake.putObjectLegalHoldMutex.RUnlock()
	argsForCall := fake.putObjectLegalHoldArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutObjectLegalHoldReturns(result1 *s3.PutObjectLegalHoldOutput, result2 error) {
	fake.putObjectLegalHoldMutex.Lock()
	defer fake.putObjectLegalHoldMutex.Unlock()
	fake.PutObjectLegalHoldStub = nil
	fake.putObjectLegalHoldReturns = struct {
		result1 *s3.PutObjectLegalHoldOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectLegalHoldReturnsOnCall(i int, result1 *s3.PutObjectLegalHoldOutput, result2 error) {
	fake.putObjectLegalHoldMutex.Lock()
	defer fake.putObjectLegalHoldMutex.Unlock()
	fake.PutObjectLegalHoldStub = nil
	if fake.putObjectLegalHoldReturnsOnCall == nil {
		fake.putObjectLegalHoldReturnsOnCall = make(map[int]struct {
			result1 *s3.PutObjectLegalHoldOutput
			result2 error
		})
	}
	fake.putObjectLegalHoldReturnsOnCall[i] = struct {
		result1 *s3.PutObjectLegalHoldOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectLegalHoldRequest(arg1 *s3.PutObjectLegalHoldInput) (*request.Request, *s3.PutObjectLegalHoldOutput) {
	fake.putObjectLegalHoldRequestMutex.Lock()
	ret, specificReturn := fake.putObjectLegalHoldRequestReturnsOnCall[len(fake.putObjectLegalHoldRequestArgsForCall)]
	fake.putObjectLegalHoldRequestArgsForCall = append(fake.putObjectLegalHoldRequestArgsForCall, struct {
		arg1 *s3.PutObjectLegalHoldInput
	}{arg1})
	fake.recordInvocation("PutObjectLegalHoldRequest", []interface{}{arg1})
	fake.putObjectLegalHoldRequestMutex.Unlock()
	if fake.PutObjectLegalHoldRequestStub != nil {
		return fake.PutObjectLegalHoldRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectLegalHoldRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectLegalHoldRequestCallCount() int {
	fake.putObjectLegalHoldRequestMutex.RLock()
	defer fake.putObjectLegalHoldRequestMutex.RUnlock()
	return len(fake.putObjectLegalHoldRequestArgsForCall)
}

func (fake *FakeS3API) PutObjectLegalHoldRequestCalls(stub func(*s3.PutObjectLegalHoldInput) (*request.Request, *s3.PutObjectLegalHoldOutput)) {
	fake.putObjectLegalHoldRequestMutex.Lock()
	defer fake.putObjectLegalHoldRequestMutex.Unlock()
	fake.PutObjectLegalHoldRequestStub = stub
}

func (fake *FakeS3API) PutObjectLegalHoldRequestArgsForCall(i int) *s3.PutObjectLegalHoldInput {
	fake.putObjectLegalHoldRequestMutex.RLock()
	defer fake.putObjectLegalHoldRequestMutex.RUnlock()
	argsForCall := fake.putObjectLegalHoldRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutObjectLegalHoldRequestReturns(result1 *request.Request, result2 *s3.PutObjectLegalHoldOutput) {
	fake.putObjectLegalHoldRequestMutex.Lock()
	defer fake.putObjectLegalHoldRequestMutex.Unlock()
	fake.PutObjectLegalHoldRequestStub = nil
	fake.putObjectLegalHoldRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutObjectLegalHoldOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectLegalHoldRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutObjectLegalHoldOutput) {
	fake.putObjectLegalHoldRequestMutex.Lock()
	defer fake.putObjectLegalHoldRequestMutex.Unlock()
	fake.PutObjectLegalHoldRequestStub = nil
	if fake.putObjectLegalHoldRequestReturnsOnCall == nil {
		fake.putObjectLegalHoldRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutObjectLegalHoldOutput
		})
	}
	fake.putObjectLegalHoldRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutObjectLegalHoldOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectLegalHoldWithContext(arg1 context.Context, arg2 *s3.PutObjectLegalHoldInput, arg3 ...request.Option) (*s3.PutObjectLegalHoldOutput, error) {
	fake.putObjectLegalHoldWithContextMutex.Lock()
	ret, specificReturn := fake.putObjectLegalHoldWithContextReturnsOnCall[len(fake.putObjectLegalHoldWithContextArgsForCall)]
	fake.putObjectLegalHoldWithContextArgsForCall = append(fake.putObjectLegalHoldWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutObjectLegalHoldInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutObjectLegalHoldWithContext", []interface{}{arg1, arg2, arg3})
	fake.putObjectLegalHoldWithContextMutex.Unlock()
	if fake.PutObjectLegalHoldWithContextStub != nil {
		return fake.PutObjectLegalHoldWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectLegalHoldWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectLegalHoldWithContextCallCount() int {
	fake.putObjectLegalHoldWithContextMutex.RLock()
	defer fake.putObjectLegalHoldWithContextMutex.RUnlock()
	return len(fake.putObjectLegalHoldWithContextArgsForCall)
}

func (fake *FakeS3API) PutObjectLegalHoldWithContextCalls(stub func(context.Context, *s3.PutObjectLegalHoldInput, ...request.Option) (*s3.PutObjectLegalHoldOutput, error)) {
	fake.putObjectLegalHoldWithContextMutex.Lock()
	defer fake.putObjectLegalHoldWithContextMutex.Unlock()
	fake.PutObjectLegalHoldWithContextStub = stub
}

func (fake *FakeS3API) PutObjectLegalHoldWithContextArgsForCall(i int) (context.Context, *s3.PutObjectLegalHoldInput, []request.Option) {
	fake.putObjectLegalHoldWithContextMutex.RLock()
	defer fake.putObjectLegalHoldWithContextMutex.RUnlock()
	argsForCall := fake.putObjectLegalHoldWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutObjectLegalHoldWithContextReturns(result1 *s3.PutObjectLegalHoldOutput, result2 error) {
	fake.putObjectLegalHoldWithContextMutex.Lock()
	defer fake.putObjectLegalHoldWithContextMutex.Unlock()
	fake.PutObjectLegalHoldWithContextStub = nil
	fake.putObjectLegalHoldWithContextReturns = struct {
		result1 *s3.PutObjectLegalHoldOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectLegalHoldWithContextReturnsOnCall(i int, result1 *s3.PutObjectLegalHoldOutput, result2 error) {
	fake.putObjectLegalHoldWithContextMutex.Lock()
	defer fake.putObjectLegalHoldWithContextMutex.Unlock()
	fake.PutObjectLegalHoldWithContextStub = nil
	if fake.putObjectLegalHoldWithContextReturnsOnCall == nil {
		fake.putObjectLegalHoldWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutObjectLegalHoldOutput
			result2 error
		})
	}
	fake.putObjectLegalHoldWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutObjectLegalHoldOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectLockConfiguration(arg1 *s3.PutObjectLockConfigurationInput) (*s3.PutObjectLockConfigurationOutput, error) {
	fake.putObjectLockConfigurationMutex.Lock()
	ret, specificReturn := fake.putObjectLockConfigurationReturnsOnCall[len(fake.putObjectLockConfigurationArgsForCall)]
	fake.putObjectLockConfigurationArgsForCall = append(fake.putObjectLockConfigurationArgsForCall, struct {
		arg1 *s3.PutObjectLockConfigurationInput
	}{arg1})
	fake.recordInvocation("PutObjectLockConfiguration", []interface{}{arg1})
	fake.putObjectLockConfigurationMutex.Unlock()
	if fake.PutObjectLockConfigurationStub != nil {
		return fake.PutObjectLockConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectLockConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectLockConfigurationCallCount() int {
	fake.putObjectLockConfigurationMutex.RLock()
	defer fake.putObjectLockConfigurationMutex.RUnlock()
	return len(fake.putObjectLockConfigurationArgsForCall)
}

func (fake *FakeS3API) PutObjectLockConfigurationCalls(stub func(*s3.PutObjectLockConfigurationInput) (*s3.PutObjectLockConfigurationOutput, error)) {
	fake.putObjectLockConfigurationMutex.Lock()
	defer fake.putObjectLockConfigurationMutex.Unlock()
	fake.PutObjectLockConfigurationStub = stub
}

func (fake *FakeS3API) PutObjectLockConfigurationArgsForCall(i int) *s3.PutObjectLockConfigurationInput {
	fake.putObjectLockConfigurationMutex.RLock()
	defer fake.putObjectLockConfigurationMutex.RUnlock()
	argsForCall := fake.putObjectLockConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutObjectLockConfigurationReturns(result1 *s3.PutObjectLockConfigurationOutput, result2 error) {
	fake.putObjectLockConfigurationMutex.Lock()
	defer fake.putObjectLockConfigurationMutex.Unlock()
	fake.PutObjectLockConfigurationStub = nil
	fake.putObjectLockConfigurationReturns = struct {
		result1 *s3.PutObjectLockConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectLockConfigurationReturnsOnCall(i int, result1 *s3.PutObjectLockConfigurationOutput, result2 error) {
	fake.putObjectLockConfigurationMutex.Lock()
	defer fake.putObjectLockConfigurationMutex.Unlock()
	fake.PutObjectLockConfigurationStub = nil
	if fake.putObjectLockConfigurationReturnsOnCall == nil {
		fake.putObjectLockConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.PutObjectLockConfigurationOutput
			result2 error
		})
	}
	fake.putObjectLockConfigurationReturnsOnCall[i] = struct {
		result1 *s3.PutObjectLockConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectLockConfigurationRequest(arg1 *s3.PutObjectLockConfigurationInput) (*request.Request, *s3.PutObjectLockConfigurationOutput) {
	fake.putObjectLockConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.putObjectLockConfigurationRequestReturnsOnCall[len(fake.putObjectLockConfigurationRequestArgsForCall)]
	fake.putObjectLockConfigurationRequestArgsForCall = append(fake.putObjectLockConfigurationRequestArgsForCall, struct {
		arg1 *s3.PutObjectLockConfigurationInput
	}{arg1})
	fake.recordInvocation("PutObjectLockConfigurationRequest", []interface{}{arg1})
	fake.putObjectLockConfigurationRequestMutex.Unlock()
	if fake.PutObjectLockConfigurationRequestStub != nil {
		return fake.PutObjectLockConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectLockConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectLockConfigurationRequestCallCount() int {
	fake.putObjectLockConfigurationRequestMutex.RLock()
	defer fake.putObjectLockConfigurationRequestMutex.RUnlock()
	return len(fake.putObjectLockConfigurationRequestArgsForCall)
}

func (fake *FakeS3API) PutObjectLockConfigurationRequestCalls(stub func(*s3.PutObjectLockConfigurationInput) (*request.Request, *s3.PutObjectLockConfigurationOutput)) {
	fake.putObjectLockConfigurationRequestMutex.Lock()
	defer fake.putObjectLockConfigurationRequestMutex.Unlock()
	fake.PutObjectLockConfigurationRequestStub = stub
}

func (fake *FakeS3API) PutObjectLockConfigurationRequestArgsForCall(i int) *s3.PutObjectLockConfigurationInput {
	fake.putObjectLockConfigurationRequestMutex.RLock()
	defer fake.putObjectLockConfigurationRequestMutex.RUnlock()
	argsForCall := fake.putObjectLockConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutObjectLockConfigurationRequestReturns(result1 *request.Request, result2 *s3.PutObjectLockConfigurationOutput) {
	fake.putObjectLockConfigurationRequestMutex.Lock()
	defer fake.putObjectLockConfigurationRequestMutex.Unlock()
	fake.PutObjectLockConfigurationRequestStub = nil
	fake.putObjectLockConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutObjectLockConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectLockConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutObjectLockConfigurationOutput) {
	fake.putObjectLockConfigurationRequestMutex.Lock()
	defer fake.putObjectLockConfigurationRequestMutex.Unlock()
	fake.PutObjectLockConfigurationRequestStub = nil
	if fake.putObjectLockConfigurationRequestReturnsOnCall == nil {
		fake.putObjectLockConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutObjectLockConfigurationOutput
		})
	}
	fake.putObjectLockConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutObjectLockConfigurationOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectLockConfigurationWithContext(arg1 context.Context, arg2 *s3.PutObjectLockConfigurationInput, arg3 ...request.Option) (*s3.PutObjectLockConfigurationOutput, error) {
	fake.putObjectLockConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.putObjectLockConfigurationWithContextReturnsOnCall[len(fake.putObjectLockConfigurationWithContextArgsForCall)]
	fake.putObjectLockConfigurationWithContextArgsForCall = append(fake.putObjectLockConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutObjectLockConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutObjectLockConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.putObjectLockConfigurationWithContextMutex.Unlock()
	if fake.PutObjectLockConfigurationWithContextStub != nil {
		return fake.PutObjectLockConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectLockConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectLockConfigurationWithContextCallCount() int {
	fake.putObjectLockConfigurationWithContextMutex.RLock()
	defer fake.putObjectLockConfigurationWithContextMutex.RUnlock()
	return len(fake.putObjectLockConfigurationWithContextArgsForCall)
}

func (fake *FakeS3API) PutObjectLockConfigurationWithContextCalls(stub func(context.Context, *s3.PutObjectLockConfigurationInput, ...request.Option) (*s3.PutObjectLockConfigurationOutput, error)) {
	fake.putObjectLockConfigurationWithContextMutex.Lock()
	defer fake.putObjectLockConfigurationWithContextMutex.Unlock()
	fake.PutObjectLockConfigurationWithContextStub = stub
}

func (fake *FakeS3API) PutObjectLockConfigurationWithContextArgsForCall(i int) (context.Context, *s3.PutObjectLockConfigurationInput, []request.Option) {
	fake.putObjectLockConfigurationWithContextMutex.RLock()
	defer fake.putObjectLockConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.putObjectLockConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutObjectLockConfigurationWithContextReturns(result1 *s3.PutObjectLockConfigurationOutput, result2 error) {
	fake.putObjectLockConfigurationWithContextMutex.Lock()
	defer fake.putObjectLockConfigurationWithContextMutex.Unlock()
	fake.PutObjectLockConfigurationWithContextStub = nil
	fake.putObjectLockConfigurationWithContextReturns = struct {
		result1 *s3.PutObjectLockConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectLockConfigurationWithContextReturnsOnCall(i int, result1 *s3.PutObjectLockConfigurationOutput, result2 error) {
	fake.putObjectLockConfigurationWithContextMutex.Lock()
	defer fake.putObjectLockConfigurationWithContextMutex.Unlock()
	fake.PutObjectLockConfigurationWithContextStub = nil
	if fake.putObjectLockConfigurationWithContextReturnsOnCall == nil {
		fake.putObjectLockConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutObjectLockConfigurationOutput
			result2 error
		})
	}
	fake.putObjectLockConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutObjectLockConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectRequest(arg1 *s3.PutObjectInput) (*request.Request, *s3.PutObjectOutput) {
	fake.putObjectRequestMutex.Lock()
	ret, specificReturn := fake.putObjectRequestReturnsOnCall[len(fake.putObjectRequestArgsForCall)]
	fake.putObjectRequestArgsForCall = append(fake.putObjectRequestArgsForCall, struct {
		arg1 *s3.PutObjectInput
	}{arg1})
	fake.recordInvocation("PutObjectRequest", []interface{}{arg1})
	fake.putObjectRequestMutex.Unlock()
	if fake.PutObjectRequestStub != nil {
		return fake.PutObjectRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectRequestCallCount() int {
	fake.putObjectRequestMutex.RLock()
	defer fake.putObjectRequestMutex.RUnlock()
	return len(fake.putObjectRequestArgsForCall)
}

func (fake *FakeS3API) PutObjectRequestCalls(stub func(*s3.PutObjectInput) (*request.Request, *s3.PutObjectOutput)) {
	fake.putObjectRequestMutex.Lock()
	defer fake.putObjectRequestMutex.Unlock()
	fake.PutObjectRequestStub = stub
}

func (fake *FakeS3API) PutObjectRequestArgsForCall(i int) *s3.PutObjectInput {
	fake.putObjectRequestMutex.RLock()
	defer fake.putObjectRequestMutex.RUnlock()
	argsForCall := fake.putObjectRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutObjectRequestReturns(result1 *request.Request, result2 *s3.PutObjectOutput) {
	fake.putObjectRequestMutex.Lock()
	defer fake.putObjectRequestMutex.Unlock()
	fake.PutObjectRequestStub = nil
	fake.putObjectRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutObjectOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutObjectOutput) {
	fake.putObjectRequestMutex.Lock()
	defer fake.putObjectRequestMutex.Unlock()
	fake.PutObjectRequestStub = nil
	if fake.putObjectRequestReturnsOnCall == nil {
		fake.putObjectRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutObjectOutput
		})
	}
	fake.putObjectRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutObjectOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectRetention(arg1 *s3.PutObjectRetentionInput) (*s3.PutObjectRetentionOutput, error) {
	fake.putObjectRetentionMutex.Lock()
	ret, specificReturn := fake.putObjectRetentionReturnsOnCall[len(fake.putObjectRetentionArgsForCall)]
	fake.putObjectRetentionArgsForCall = append(fake.putObjectRetentionArgsForCall, struct {
		arg1 *s3.PutObjectRetentionInput
	}{arg1})
	fake.recordInvocation("PutObjectRetention", []interface{}{arg1})
	fake.putObjectRetentionMutex.Unlock()
	if fake.PutObjectRetentionStub != nil {
		return fake.PutObjectRetentionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectRetentionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectRetentionCallCount() int {
	fake.putObjectRetentionMutex.RLock()
	defer fake.putObjectRetentionMutex.RUnlock()
	return len(fake.putObjectRetentionArgsForCall)
}

func (fake *FakeS3API) PutObjectRetentionCalls(stub func(*s3.PutObjectRetentionInput) (*s3.PutObjectRetentionOutput, error)) {
	fake.putObjectRetentionMutex.Lock()
	defer fake.putObjectRetentionMutex.Unlock()
	fake.PutObjectRetentionStub = stub
}

func (fake *FakeS3API) PutObjectRetentionArgsForCall(i int) *s3.PutObjectRetentionInput {
	fake.putObjectRetentionMutex.RLock()
	defer fake.putObjectRetentionMutex.RUnlock()
	argsForCall := fake.putObjectRetentionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutObjectRetentionReturns(result1 *s3.PutObjectRetentionOutput, result2 error) {
	fake.putObjectRetentionMutex.Lock()
	defer fake.putObjectRetentionMutex.Unlock()
	fake.PutObjectRetentionStub = nil
	fake.putObjectRetentionReturns = struct {
		result1 *s3.PutObjectRetentionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectRetentionReturnsOnCall(i int, result1 *s3.PutObjectRetentionOutput, result2 error) {
	fake.putObjectRetentionMutex.Lock()
	defer fake.putObjectRetentionMutex.Unlock()
	fake.PutObjectRetentionStub = nil
	if fake.putObjectRetentionReturnsOnCall == nil {
		fake.putObjectRetentionReturnsOnCall = make(map[int]struct {
			result1 *s3.PutObjectRetentionOutput
			result2 error
		})
	}
	fake.putObjectRetentionReturnsOnCall[i] = struct {
		result1 *s3.PutObjectRetentionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectRetentionRequest(arg1 *s3.PutObjectRetentionInput) (*request.Request, *s3.PutObjectRetentionOutput) {
	fake.putObjectRetentionRequestMutex.Lock()
	ret, specificReturn := fake.putObjectRetentionRequestReturnsOnCall[len(fake.putObjectRetentionRequestArgsForCall)]
	fake.putObjectRetentionRequestArgsForCall = append(fake.putObjectRetentionRequestArgsForCall, struct {
		arg1 *s3.PutObjectRetentionInput
	}{arg1})
	fake.recordInvocation("PutObjectRetentionRequest", []interface{}{arg1})
	fake.putObjectRetentionRequestMutex.Unlock()
	if fake.PutObjectRetentionRequestStub != nil {
		return fake.PutObjectRetentionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectRetentionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectRetentionRequestCallCount() int {
	fake.putObjectRetentionRequestMutex.RLock()
	defer fake.putObjectRetentionRequestMutex.RUnlock()
	return len(fake.putObjectRetentionRequestArgsForCall)
}

func (fake *FakeS3API) PutObjectRetentionRequestCalls(stub func(*s3.PutObjectRetentionInput) (*request.Request, *s3.PutObjectRetentionOutput)) {
	fake.putObjectRetentionRequestMutex.Lock()
	defer fake.putObjectRetentionRequestMutex.Unlock()
	fake.PutObjectRetentionRequestStub = stub
}

func (fake *FakeS3API) PutObjectRetentionRequestArgsForCall(i int) *s3.PutObjectRetentionInput {
	fake.putObjectRetentionRequestMutex.RLock()
	defer fake.putObjectRetentionRequestMutex.RUnlock()
	argsForCall := fake.putObjectRetentionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutObjectRetentionRequestReturns(result1 *request.Request, result2 *s3.PutObjectRetentionOutput) {
	fake.putObjectRetentionRequestMutex.Lock()
	defer fake.putObjectRetentionRequestMutex.Unlock()
	fake.PutObjectRetentionRequestStub = nil
	fake.putObjectRetentionRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutObjectRetentionOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectRetentionRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutObjectRetentionOutput) {
	fake.putObjectRetentionRequestMutex.Lock()
	defer fake.putObjectRetentionRequestMutex.Unlock()
	fake.PutObjectRetentionRequestStub = nil
	if fake.putObjectRetentionRequestReturnsOnCall == nil {
		fake.putObjectRetentionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutObjectRetentionOutput
		})
	}
	fake.putObjectRetentionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutObjectRetentionOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectRetentionWithContext(arg1 context.Context, arg2 *s3.PutObjectRetentionInput, arg3 ...request.Option) (*s3.PutObjectRetentionOutput, error) {
	fake.putObjectRetentionWithContextMutex.Lock()
	ret, specificReturn := fake.putObjectRetentionWithContextReturnsOnCall[len(fake.putObjectRetentionWithContextArgsForCall)]
	fake.putObjectRetentionWithContextArgsForCall = append(fake.putObjectRetentionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutObjectRetentionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutObjectRetentionWithContext", []interface{}{arg1, arg2, arg3})
	fake.putObjectRetentionWithContextMutex.Unlock()
	if fake.PutObjectRetentionWithContextStub != nil {
		return fake.PutObjectRetentionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectRetentionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectRetentionWithContextCallCount() int {
	fake.putObjectRetentionWithContextMutex.RLock()
	defer fake.putObjectRetentionWithContextMutex.RUnlock()
	return len(fake.putObjectRetentionWithContextArgsForCall)
}

func (fake *FakeS3API) PutObjectRetentionWithContextCalls(stub func(context.Context, *s3.PutObjectRetentionInput, ...request.Option) (*s3.PutObjectRetentionOutput, error)) {
	fake.putObjectRetentionWithContextMutex.Lock()
	defer fake.putObjectRetentionWithContextMutex.Unlock()
	fake.PutObjectRetentionWithContextStub = stub
}

func (fake *FakeS3API) PutObjectRetentionWithContextArgsForCall(i int) (context.Context, *s3.PutObjectRetentionInput, []request.Option) {
	fake.putObjectRetentionWithContextMutex.RLock()
	defer fake.putObjectRetentionWithContextMutex.RUnlock()
	argsForCall := fake.putObjectRetentionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutObjectRetentionWithContextReturns(result1 *s3.PutObjectRetentionOutput, result2 error) {
	fake.putObjectRetentionWithContextMutex.Lock()
	defer fake.putObjectRetentionWithContextMutex.Unlock()
	fake.PutObjectRetentionWithContextStub = nil
	fake.putObjectRetentionWithContextReturns = struct {
		result1 *s3.PutObjectRetentionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectRetentionWithContextReturnsOnCall(i int, result1 *s3.PutObjectRetentionOutput, result2 error) {
	fake.putObjectRetentionWithContextMutex.Lock()
	defer fake.putObjectRetentionWithContextMutex.Unlock()
	fake.PutObjectRetentionWithContextStub = nil
	if fake.putObjectRetentionWithContextReturnsOnCall == nil {
		fake.putObjectRetentionWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutObjectRetentionOutput
			result2 error
		})
	}
	fake.putObjectRetentionWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutObjectRetentionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectTagging(arg1 *s3.PutObjectTaggingInput) (*s3.PutObjectTaggingOutput, error) {
	fake.putObjectTaggingMutex.Lock()
	ret, specificReturn := fake.putObjectTaggingReturnsOnCall[len(fake.putObjectTaggingArgsForCall)]
	fake.putObjectTaggingArgsForCall = append(fake.putObjectTaggingArgsForCall, struct {
		arg1 *s3.PutObjectTaggingInput
	}{arg1})
	fake.recordInvocation("PutObjectTagging", []interface{}{arg1})
	fake.putObjectTaggingMutex.Unlock()
	if fake.PutObjectTaggingStub != nil {
		return fake.PutObjectTaggingStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectTaggingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectTaggingCallCount() int {
	fake.putObjectTaggingMutex.RLock()
	defer fake.putObjectTaggingMutex.RUnlock()
	return len(fake.putObjectTaggingArgsForCall)
}

func (fake *FakeS3API) PutObjectTaggingCalls(stub func(*s3.PutObjectTaggingInput) (*s3.PutObjectTaggingOutput, error)) {
	fake.putObjectTaggingMutex.Lock()
	defer fake.putObjectTaggingMutex.Unlock()
	fake.PutObjectTaggingStub = stub
}

func (fake *FakeS3API) PutObjectTaggingArgsForCall(i int) *s3.PutObjectTaggingInput {
	fake.putObjectTaggingMutex.RLock()
	defer fake.putObjectTaggingMutex.RUnlock()
	argsForCall := fake.putObjectTaggingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutObjectTaggingReturns(result1 *s3.PutObjectTaggingOutput, result2 error) {
	fake.putObjectTaggingMutex.Lock()
	defer fake.putObjectTaggingMutex.Unlock()
	fake.PutObjectTaggingStub = nil
	fake.putObjectTaggingReturns = struct {
		result1 *s3.PutObjectTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectTaggingReturnsOnCall(i int, result1 *s3.PutObjectTaggingOutput, result2 error) {
	fake.putObjectTaggingMutex.Lock()
	defer fake.putObjectTaggingMutex.Unlock()
	fake.PutObjectTaggingStub = nil
	if fake.putObjectTaggingReturnsOnCall == nil {
		fake.putObjectTaggingReturnsOnCall = make(map[int]struct {
			result1 *s3.PutObjectTaggingOutput
			result2 error
		})
	}
	fake.putObjectTaggingReturnsOnCall[i] = struct {
		result1 *s3.PutObjectTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectTaggingRequest(arg1 *s3.PutObjectTaggingInput) (*request.Request, *s3.PutObjectTaggingOutput) {
	fake.putObjectTaggingRequestMutex.Lock()
	ret, specificReturn := fake.putObjectTaggingRequestReturnsOnCall[len(fake.putObjectTaggingRequestArgsForCall)]
	fake.putObjectTaggingRequestArgsForCall = append(fake.putObjectTaggingRequestArgsForCall, struct {
		arg1 *s3.PutObjectTaggingInput
	}{arg1})
	fake.recordInvocation("PutObjectTaggingRequest", []interface{}{arg1})
	fake.putObjectTaggingRequestMutex.Unlock()
	if fake.PutObjectTaggingRequestStub != nil {
		return fake.PutObjectTaggingRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectTaggingRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectTaggingRequestCallCount() int {
	fake.putObjectTaggingRequestMutex.RLock()
	defer fake.putObjectTaggingRequestMutex.RUnlock()
	return len(fake.putObjectTaggingRequestArgsForCall)
}

func (fake *FakeS3API) PutObjectTaggingRequestCalls(stub func(*s3.PutObjectTaggingInput) (*request.Request, *s3.PutObjectTaggingOutput)) {
	fake.putObjectTaggingRequestMutex.Lock()
	defer fake.putObjectTaggingRequestMutex.Unlock()
	fake.PutObjectTaggingRequestStub = stub
}

func (fake *FakeS3API) PutObjectTaggingRequestArgsForCall(i int) *s3.PutObjectTaggingInput {
	fake.putObjectTaggingRequestMutex.RLock()
	defer fake.putObjectTaggingRequestMutex.RUnlock()
	argsForCall := fake.putObjectTaggingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutObjectTaggingRequestReturns(result1 *request.Request, result2 *s3.PutObjectTaggingOutput) {
	fake.putObjectTaggingRequestMutex.Lock()
	defer fake.putObjectTaggingRequestMutex.Unlock()
	fake.PutObjectTaggingRequestStub = nil
	fake.putObjectTaggingRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutObjectTaggingOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectTaggingRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutObjectTaggingOutput) {
	fake.putObjectTaggingRequestMutex.Lock()
	defer fake.putObjectTaggingRequestMutex.Unlock()
	fake.PutObjectTaggingRequestStub = nil
	if fake.putObjectTaggingRequestReturnsOnCall == nil {
		fake.putObjectTaggingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutObjectTaggingOutput
		})
	}
	fake.putObjectTaggingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutObjectTaggingOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectTaggingWithContext(arg1 context.Context, arg2 *s3.PutObjectTaggingInput, arg3 ...request.Option) (*s3.PutObjectTaggingOutput, error) {
	fake.putObjectTaggingWithContextMutex.Lock()
	ret, specificReturn := fake.putObjectTaggingWithContextReturnsOnCall[len(fake.putObjectTaggingWithContextArgsForCall)]
	fake.putObjectTaggingWithContextArgsForCall = append(fake.putObjectTaggingWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutObjectTaggingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutObjectTaggingWithContext", []interface{}{arg1, arg2, arg3})
	fake.putObjectTaggingWithContextMutex.Unlock()
	if fake.PutObjectTaggingWithContextStub != nil {
		return fake.PutObjectTaggingWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectTaggingWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectTaggingWithContextCallCount() int {
	fake.putObjectTaggingWithContextMutex.RLock()
	defer fake.putObjectTaggingWithContextMutex.RUnlock()
	return len(fake.putObjectTaggingWithContextArgsForCall)
}

func (fake *FakeS3API) PutObjectTaggingWithContextCalls(stub func(context.Context, *s3.PutObjectTaggingInput, ...request.Option) (*s3.PutObjectTaggingOutput, error)) {
	fake.putObjectTaggingWithContextMutex.Lock()
	defer fake.putObjectTaggingWithContextMutex.Unlock()
	fake.PutObjectTaggingWithContextStub = stub
}

func (fake *FakeS3API) PutObjectTaggingWithContextArgsForCall(i int) (context.Context, *s3.PutObjectTaggingInput, []request.Option) {
	fake.putObjectTaggingWithContextMutex.RLock()
	defer fake.putObjectTaggingWithContextMutex.RUnlock()
	argsForCall := fake.putObjectTaggingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutObjectTaggingWithContextReturns(result1 *s3.PutObjectTaggingOutput, result2 error) {
	fake.putObjectTaggingWithContextMutex.Lock()
	defer fake.putObjectTaggingWithContextMutex.Unlock()
	fake.PutObjectTaggingWithContextStub = nil
	fake.putObjectTaggingWithContextReturns = struct {
		result1 *s3.PutObjectTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectTaggingWithContextReturnsOnCall(i int, result1 *s3.PutObjectTaggingOutput, result2 error) {
	fake.putObjectTaggingWithContextMutex.Lock()
	defer fake.putObjectTaggingWithContextMutex.Unlock()
	fake.PutObjectTaggingWithContextStub = nil
	if fake.putObjectTaggingWithContextReturnsOnCall == nil {
		fake.putObjectTaggingWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutObjectTaggingOutput
			result2 error
		})
	}
	fake.putObjectTaggingWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutObjectTaggingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectWithContext(arg1 context.Context, arg2 *s3.PutObjectInput, arg3 ...request.Option) (*s3.PutObjectOutput, error) {
	fake.putObjectWithContextMutex.Lock()
	ret, specificReturn := fake.putObjectWithContextReturnsOnCall[len(fake.putObjectWithContextArgsForCall)]
	fake.putObjectWithContextArgsForCall = append(fake.putObjectWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutObjectInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutObjectWithContext", []interface{}{arg1, arg2, arg3})
	fake.putObjectWithContextMutex.Unlock()
	if fake.PutObjectWithContextStub != nil {
		return fake.PutObjectWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putObjectWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectWithContextCallCount() int {
	fake.putObjectWithContextMutex.RLock()
	defer fake.putObjectWithContextMutex.RUnlock()
	return len(fake.putObjectWithContextArgsForCall)
}

func (fake *FakeS3API) PutObjectWithContextCalls(stub func(context.Context, *s3.PutObjectInput, ...request.Option) (*s3.PutObjectOutput, error)) {
	fake.putObjectWithContextMutex.Lock()
	defer fake.putObjectWithContextMutex.Unlock()
	fake.PutObjectWithContextStub = stub
}

func (fake *FakeS3API) PutObjectWithContextArgsForCall(i int) (context.Context, *s3.PutObjectInput, []request.Option) {
	fake.putObjectWithContextMutex.RLock()
	defer fake.putObjectWithContextMutex.RUnlock()
	argsForCall := fake.putObjectWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutObjectWithContextReturns(result1 *s3.PutObjectOutput, result2 error) {
	fake.putObjectWithContextMutex.Lock()
	defer fake.putObjectWithContextMutex.Unlock()
	fake.PutObjectWithContextStub = nil
	fake.putObjectWithContextReturns = struct {
		result1 *s3.PutObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectWithContextReturnsOnCall(i int, result1 *s3.PutObjectOutput, result2 error) {
	fake.putObjectWithContextMutex.Lock()
	defer fake.putObjectWithContextMutex.Unlock()
	fake.PutObjectWithContextStub = nil
	if fake.putObjectWithContextReturnsOnCall == nil {
		fake.putObjectWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutObjectOutput
			result2 error
		})
	}
	fake.putObjectWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutPublicAccessBlock(arg1 *s3.PutPublicAccessBlockInput) (*s3.PutPublicAccessBlockOutput, error) {
	fake.putPublicAccessBlockMutex.Lock()
	ret, specificReturn := fake.putPublicAccessBlockReturnsOnCall[len(fake.putPublicAccessBlockArgsForCall)]
	fake.putPublicAccessBlockArgsForCall = append(fake.putPublicAccessBlockArgsForCall, struct {
		arg1 *s3.PutPublicAccessBlockInput
	}{arg1})
	fake.recordInvocation("PutPublicAccessBlock", []interface{}{arg1})
	fake.putPublicAccessBlockMutex.Unlock()
	if fake.PutPublicAccessBlockStub != nil {
		return fake.PutPublicAccessBlockStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putPublicAccessBlockReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutPublicAccessBlockCallCount() int {
	fake.putPublicAccessBlockMutex.RLock()
	defer fake.putPublicAccessBlockMutex.RUnlock()
	return len(fake.putPublicAccessBlockArgsForCall)
}

func (fake *FakeS3API) PutPublicAccessBlockCalls(stub func(*s3.PutPublicAccessBlockInput) (*s3.PutPublicAccessBlockOutput, error)) {
	fake.putPublicAccessBlockMutex.Lock()
	defer fake.putPublicAccessBlockMutex.Unlock()
	fake.PutPublicAccessBlockStub = stub
}

func (fake *FakeS3API) PutPublicAccessBlockArgsForCall(i int) *s3.PutPublicAccessBlockInput {
	fake.putPublicAccessBlockMutex.RLock()
	defer fake.putPublicAccessBlockMutex.RUnlock()
	argsForCall := fake.putPublicAccessBlockArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutPublicAccessBlockReturns(result1 *s3.PutPublicAccessBlockOutput, result2 error) {
	fake.putPublicAccessBlockMutex.Lock()
	defer fake.putPublicAccessBlockMutex.Unlock()
	fake.PutPublicAccessBlockStub = nil
	fake.putPublicAccessBlockReturns = struct {
		result1 *s3.PutPublicAccessBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutPublicAccessBlockReturnsOnCall(i int, result1 *s3.PutPublicAccessBlockOutput, result2 error) {
	fake.putPublicAccessBlockMutex.Lock()
	defer fake.putPublicAccessBlockMutex.Unlock()
	fake.PutPublicAccessBlockStub = nil
	if fake.putPublicAccessBlockReturnsOnCall == nil {
		fake.putPublicAccessBlockReturnsOnCall = make(map[int]struct {
			result1 *s3.PutPublicAccessBlockOutput
			result2 error
		})
	}
	fake.putPublicAccessBlockReturnsOnCall[i] = struct {
		result1 *s3.PutPublicAccessBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutPublicAccessBlockRequest(arg1 *s3.PutPublicAccessBlockInput) (*request.Request, *s3.PutPublicAccessBlockOutput) {
	fake.putPublicAccessBlockRequestMutex.Lock()
	ret, specificReturn := fake.putPublicAccessBlockRequestReturnsOnCall[len(fake.putPublicAccessBlockRequestArgsForCall)]
	fake.putPublicAccessBlockRequestArgsForCall = append(fake.putPublicAccessBlockRequestArgsForCall, struct {
		arg1 *s3.PutPublicAccessBlockInput
	}{arg1})
	fake.recordInvocation("PutPublicAccessBlockRequest", []interface{}{arg1})
	fake.putPublicAccessBlockRequestMutex.Unlock()
	if fake.PutPublicAccessBlockRequestStub != nil {
		return fake.PutPublicAccessBlockRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putPublicAccessBlockRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutPublicAccessBlockRequestCallCount() int {
	fake.putPublicAccessBlockRequestMutex.RLock()
	defer fake.putPublicAccessBlockRequestMutex.RUnlock()
	return len(fake.putPublicAccessBlockRequestArgsForCall)
}

func (fake *FakeS3API) PutPublicAccessBlockRequestCalls(stub func(*s3.PutPublicAccessBlockInput) (*request.Request, *s3.PutPublicAccessBlockOutput)) {
	fake.putPublicAccessBlockRequestMutex.Lock()
	defer fake.putPublicAccessBlockRequestMutex.Unlock()
	fake.PutPublicAccessBlockRequestStub = stub
}

func (fake *FakeS3API) PutPublicAccessBlockRequestArgsForCall(i int) *s3.PutPublicAccessBlockInput {
	fake.putPublicAccessBlockRequestMutex.RLock()
	defer fake.putPublicAccessBlockRequestMutex.RUnlock()
	argsForCall := fake.putPublicAccessBlockRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutPublicAccessBlockRequestReturns(result1 *request.Request, result2 *s3.PutPublicAccessBlockOutput) {
	fake.putPublicAccessBlockRequestMutex.Lock()
	defer fake.putPublicAccessBlockRequestMutex.Unlock()
	fake.PutPublicAccessBlockRequestStub = nil
	fake.putPublicAccessBlockRequestReturns = struct {
		result1 *request.Request
		result2 *s3.PutPublicAccessBlockOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutPublicAccessBlockRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.PutPublicAccessBlockOutput) {
	fake.putPublicAccessBlockRequestMutex.Lock()
	defer fake.putPublicAccessBlockRequestMutex.Unlock()
	fake.PutPublicAccessBlockRequestStub = nil
	if fake.putPublicAccessBlockRequestReturnsOnCall == nil {
		fake.putPublicAccessBlockRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.PutPublicAccessBlockOutput
		})
	}
	fake.putPublicAccessBlockRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.PutPublicAccessBlockOutput
	}{result1, result2}
}

func (fake *FakeS3API) PutPublicAccessBlockWithContext(arg1 context.Context, arg2 *s3.PutPublicAccessBlockInput, arg3 ...request.Option) (*s3.PutPublicAccessBlockOutput, error) {
	fake.putPublicAccessBlockWithContextMutex.Lock()
	ret, specificReturn := fake.putPublicAccessBlockWithContextReturnsOnCall[len(fake.putPublicAccessBlockWithContextArgsForCall)]
	fake.putPublicAccessBlockWithContextArgsForCall = append(fake.putPublicAccessBlockWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutPublicAccessBlockInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutPublicAccessBlockWithContext", []interface{}{arg1, arg2, arg3})
	fake.putPublicAccessBlockWithContextMutex.Unlock()
	if fake.PutPublicAccessBlockWithContextStub != nil {
		return fake.PutPublicAccessBlockWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putPublicAccessBlockWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutPublicAccessBlockWithContextCallCount() int {
	fake.putPublicAccessBlockWithContextMutex.RLock()
	defer fake.putPublicAccessBlockWithContextMutex.RUnlock()
	return len(fake.putPublicAccessBlockWithContextArgsForCall)
}

func (fake *FakeS3API) PutPublicAccessBlockWithContextCalls(stub func(context.Context, *s3.PutPublicAccessBlockInput, ...request.Option) (*s3.PutPublicAccessBlockOutput, error)) {
	fake.putPublicAccessBlockWithContextMutex.Lock()
	defer fake.putPublicAccessBlockWithContextMutex.Unlock()
	fake.PutPublicAccessBlockWithContextStub = stub
}

func (fake *FakeS3API) PutPublicAccessBlockWithContextArgsForCall(i int) (context.Context, *s3.PutPublicAccessBlockInput, []request.Option) {
	fake.putPublicAccessBlockWithContextMutex.RLock()
	defer fake.putPublicAccessBlockWithContextMutex.RUnlock()
	argsForCall := fake.putPublicAccessBlockWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) PutPublicAccessBlockWithContextReturns(result1 *s3.PutPublicAccessBlockOutput, result2 error) {
	fake.putPublicAccessBlockWithContextMutex.Lock()
	defer fake.putPublicAccessBlockWithContextMutex.Unlock()
	fake.PutPublicAccessBlockWithContextStub = nil
	fake.putPublicAccessBlockWithContextReturns = struct {
		result1 *s3.PutPublicAccessBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutPublicAccessBlockWithContextReturnsOnCall(i int, result1 *s3.PutPublicAccessBlockOutput, result2 error) {
	fake.putPublicAccessBlockWithContextMutex.Lock()
	defer fake.putPublicAccessBlockWithContextMutex.Unlock()
	fake.PutPublicAccessBlockWithContextStub = nil
	if fake.putPublicAccessBlockWithContextReturnsOnCall == nil {
		fake.putPublicAccessBlockWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.PutPublicAccessBlockOutput
			result2 error
		})
	}
	fake.putPublicAccessBlockWithContextReturnsOnCall[i] = struct {
		result1 *s3.PutPublicAccessBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) RestoreObject(arg1 *s3.RestoreObjectInput) (*s3.RestoreObjectOutput, error) {
	fake.restoreObjectMutex.Lock()
	ret, specificReturn := fake.restoreObjectReturnsOnCall[len(fake.restoreObjectArgsForCall)]
	fake.restoreObjectArgsForCall = append(fake.restoreObjectArgsForCall, struct {
		arg1 *s3.RestoreObjectInput
	}{arg1})
	fake.recordInvocation("RestoreObject", []interface{}{arg1})
	fake.restoreObjectMutex.Unlock()
	if fake.RestoreObjectStub != nil {
		return fake.RestoreObjectStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.restoreObjectReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) RestoreObjectCallCount() int {
	fake.restoreObjectMutex.RLock()
	defer fake.restoreObjectMutex.RUnlock()
	return len(fake.restoreObjectArgsForCall)
}

func (fake *FakeS3API) RestoreObjectCalls(stub func(*s3.RestoreObjectInput) (*s3.RestoreObjectOutput, error)) {
	fake.restoreObjectMutex.Lock()
	defer fake.restoreObjectMutex.Unlock()
	fake.RestoreObjectStub = stub
}

func (fake *FakeS3API) RestoreObjectArgsForCall(i int) *s3.RestoreObjectInput {
	fake.restoreObjectMutex.RLock()
	defer fake.restoreObjectMutex.RUnlock()
	argsForCall := fake.restoreObjectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) RestoreObjectReturns(result1 *s3.RestoreObjectOutput, result2 error) {
	fake.restoreObjectMutex.Lock()
	defer fake.restoreObjectMutex.Unlock()
	fake.RestoreObjectStub = nil
	fake.restoreObjectReturns = struct {
		result1 *s3.RestoreObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) RestoreObjectReturnsOnCall(i int, result1 *s3.RestoreObjectOutput, result2 error) {
	fake.restoreObjectMutex.Lock()
	defer fake.restoreObjectMutex.Unlock()
	fake.RestoreObjectStub = nil
	if fake.restoreObjectReturnsOnCall == nil {
		fake.restoreObjectReturnsOnCall = make(map[int]struct {
			result1 *s3.RestoreObjectOutput
			result2 error
		})
	}
	fake.restoreObjectReturnsOnCall[i] = struct {
		result1 *s3.RestoreObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) RestoreObjectRequest(arg1 *s3.RestoreObjectInput) (*request.Request, *s3.RestoreObjectOutput) {
	fake.restoreObjectRequestMutex.Lock()
	ret, specificReturn := fake.restoreObjectRequestReturnsOnCall[len(fake.restoreObjectRequestArgsForCall)]
	fake.restoreObjectRequestArgsForCall = append(fake.restoreObjectRequestArgsForCall, struct {
		arg1 *s3.RestoreObjectInput
	}{arg1})
	fake.recordInvocation("RestoreObjectRequest", []interface{}{arg1})
	fake.restoreObjectRequestMutex.Unlock()
	if fake.RestoreObjectRequestStub != nil {
		return fake.RestoreObjectRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.restoreObjectRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) RestoreObjectRequestCallCount() int {
	fake.restoreObjectRequestMutex.RLock()
	defer fake.restoreObjectRequestMutex.RUnlock()
	return len(fake.restoreObjectRequestArgsForCall)
}

func (fake *FakeS3API) RestoreObjectRequestCalls(stub func(*s3.RestoreObjectInput) (*request.Request, *s3.RestoreObjectOutput)) {
	fake.restoreObjectRequestMutex.Lock()
	defer fake.restoreObjectRequestMutex.Unlock()
	fake.RestoreObjectRequestStub = stub
}

func (fake *FakeS3API) RestoreObjectRequestArgsForCall(i int) *s3.RestoreObjectInput {
	fake.restoreObjectRequestMutex.RLock()
	defer fake.restoreObjectRequestMutex.RUnlock()
	argsForCall := fake.restoreObjectRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) RestoreObjectRequestReturns(result1 *request.Request, result2 *s3.RestoreObjectOutput) {
	fake.restoreObjectRequestMutex.Lock()
	defer fake.restoreObjectRequestMutex.Unlock()
	fake.RestoreObjectRequestStub = nil
	fake.restoreObjectRequestReturns = struct {
		result1 *request.Request
		result2 *s3.RestoreObjectOutput
	}{result1, result2}
}

func (fake *FakeS3API) RestoreObjectRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.RestoreObjectOutput) {
	fake.restoreObjectRequestMutex.Lock()
	defer fake.restoreObjectRequestMutex.Unlock()
	fake.RestoreObjectRequestStub = nil
	if fake.restoreObjectRequestReturnsOnCall == nil {
		fake.restoreObjectRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.RestoreObjectOutput
		})
	}
	fake.restoreObjectRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.RestoreObjectOutput
	}{result1, result2}
}

func (fake *FakeS3API) RestoreObjectWithContext(arg1 context.Context, arg2 *s3.RestoreObjectInput, arg3 ...request.Option) (*s3.RestoreObjectOutput, error) {
	fake.restoreObjectWithContextMutex.Lock()
	ret, specificReturn := fake.restoreObjectWithContextReturnsOnCall[len(fake.restoreObjectWithContextArgsForCall)]
	fake.restoreObjectWithContextArgsForCall = append(fake.restoreObjectWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.RestoreObjectInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RestoreObjectWithContext", []interface{}{arg1, arg2, arg3})
	fake.restoreObjectWithContextMutex.Unlock()
	if fake.RestoreObjectWithContextStub != nil {
		return fake.RestoreObjectWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.restoreObjectWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) RestoreObjectWithContextCallCount() int {
	fake.restoreObjectWithContextMutex.RLock()
	defer fake.restoreObjectWithContextMutex.RUnlock()
	return len(fake.restoreObjectWithContextArgsForCall)
}

func (fake *FakeS3API) RestoreObjectWithContextCalls(stub func(context.Context, *s3.RestoreObjectInput, ...request.Option) (*s3.RestoreObjectOutput, error)) {
	fake.restoreObjectWithContextMutex.Lock()
	defer fake.restoreObjectWithContextMutex.Unlock()
	fake.RestoreObjectWithContextStub = stub
}

func (fake *FakeS3API) RestoreObjectWithContextArgsForCall(i int) (context.Context, *s3.RestoreObjectInput, []request.Option) {
	fake.restoreObjectWithContextMutex.RLock()
	defer fake.restoreObjectWithContextMutex.RUnlock()
	argsForCall := fake.restoreObjectWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) RestoreObjectWithContextReturns(result1 *s3.RestoreObjectOutput, result2 error) {
	fake.restoreObjectWithContextMutex.Lock()
	defer fake.restoreObjectWithContextMutex.Unlock()
	fake.RestoreObjectWithContextStub = nil
	fake.restoreObjectWithContextReturns = struct {
		result1 *s3.RestoreObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) RestoreObjectWithContextReturnsOnCall(i int, result1 *s3.RestoreObjectOutput, result2 error) {
	fake.restoreObjectWithContextMutex.Lock()
	defer fake.restoreObjectWithContextMutex.Unlock()
	fake.RestoreObjectWithContextStub = nil
	if fake.restoreObjectWithContextReturnsOnCall == nil {
		fake.restoreObjectWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.RestoreObjectOutput
			result2 error
		})
	}
	fake.restoreObjectWithContextReturnsOnCall[i] = struct {
		result1 *s3.RestoreObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) SelectObjectContent(arg1 *s3.SelectObjectContentInput) (*s3.SelectObjectContentOutput, error) {
	fake.selectObjectContentMutex.Lock()
	ret, specificReturn := fake.selectObjectContentReturnsOnCall[len(fake.selectObjectContentArgsForCall)]
	fake.selectObjectContentArgsForCall = append(fake.selectObjectContentArgsForCall, struct {
		arg1 *s3.SelectObjectContentInput
	}{arg1})
	fake.recordInvocation("SelectObjectContent", []interface{}{arg1})
	fake.selectObjectContentMutex.Unlock()
	if fake.SelectObjectContentStub != nil {
		return fake.SelectObjectContentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.selectObjectContentReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) SelectObjectContentCallCount() int {
	fake.selectObjectContentMutex.RLock()
	defer fake.selectObjectContentMutex.RUnlock()
	return len(fake.selectObjectContentArgsForCall)
}

func (fake *FakeS3API) SelectObjectContentCalls(stub func(*s3.SelectObjectContentInput) (*s3.SelectObjectContentOutput, error)) {
	fake.selectObjectContentMutex.Lock()
	defer fake.selectObjectContentMutex.Unlock()
	fake.SelectObjectContentStub = stub
}

func (fake *FakeS3API) SelectObjectContentArgsForCall(i int) *s3.SelectObjectContentInput {
	fake.selectObjectContentMutex.RLock()
	defer fake.selectObjectContentMutex.RUnlock()
	argsForCall := fake.selectObjectContentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) SelectObjectContentReturns(result1 *s3.SelectObjectContentOutput, result2 error) {
	fake.selectObjectContentMutex.Lock()
	defer fake.selectObjectContentMutex.Unlock()
	fake.SelectObjectContentStub = nil
	fake.selectObjectContentReturns = struct {
		result1 *s3.SelectObjectContentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) SelectObjectContentReturnsOnCall(i int, result1 *s3.SelectObjectContentOutput, result2 error) {
	fake.selectObjectContentMutex.Lock()
	defer fake.selectObjectContentMutex.Unlock()
	fake.SelectObjectContentStub = nil
	if fake.selectObjectContentReturnsOnCall == nil {
		fake.selectObjectContentReturnsOnCall = make(map[int]struct {
			result1 *s3.SelectObjectContentOutput
			result2 error
		})
	}
	fake.selectObjectContentReturnsOnCall[i] = struct {
		result1 *s3.SelectObjectContentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) SelectObjectContentRequest(arg1 *s3.SelectObjectContentInput) (*request.Request, *s3.SelectObjectContentOutput) {
	fake.selectObjectContentRequestMutex.Lock()
	ret, specificReturn := fake.selectObjectContentRequestReturnsOnCall[len(fake.selectObjectContentRequestArgsForCall)]
	fake.selectObjectContentRequestArgsForCall = append(fake.selectObjectContentRequestArgsForCall, struct {
		arg1 *s3.SelectObjectContentInput
	}{arg1})
	fake.recordInvocation("SelectObjectContentRequest", []interface{}{arg1})
	fake.selectObjectContentRequestMutex.Unlock()
	if fake.SelectObjectContentRequestStub != nil {
		return fake.SelectObjectContentRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.selectObjectContentRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) SelectObjectContentRequestCallCount() int {
	fake.selectObjectContentRequestMutex.RLock()
	defer fake.selectObjectContentRequestMutex.RUnlock()
	return len(fake.selectObjectContentRequestArgsForCall)
}

func (fake *FakeS3API) SelectObjectContentRequestCalls(stub func(*s3.SelectObjectContentInput) (*request.Request, *s3.SelectObjectContentOutput)) {
	fake.selectObjectContentRequestMutex.Lock()
	defer fake.selectObjectContentRequestMutex.Unlock()
	fake.SelectObjectContentRequestStub = stub
}

func (fake *FakeS3API) SelectObjectContentRequestArgsForCall(i int) *s3.SelectObjectContentInput {
	fake.selectObjectContentRequestMutex.RLock()
	defer fake.selectObjectContentRequestMutex.RUnlock()
	argsForCall := fake.selectObjectContentRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) SelectObjectContentRequestReturns(result1 *request.Request, result2 *s3.SelectObjectContentOutput) {
	fake.selectObjectContentRequestMutex.Lock()
	defer fake.selectObjectContentRequestMutex.Unlock()
	fake.SelectObjectContentRequestStub = nil
	fake.selectObjectContentRequestReturns = struct {
		result1 *request.Request
		result2 *s3.SelectObjectContentOutput
	}{result1, result2}
}

func (fake *FakeS3API) SelectObjectContentRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.SelectObjectContentOutput) {
	fake.selectObjectContentRequestMutex.Lock()
	defer fake.selectObjectContentRequestMutex.Unlock()
	fake.SelectObjectContentRequestStub = nil
	if fake.selectObjectContentRequestReturnsOnCall == nil {
		fake.selectObjectContentRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.SelectObjectContentOutput
		})
	}
	fake.selectObjectContentRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.SelectObjectContentOutput
	}{result1, result2}
}

func (fake *FakeS3API) SelectObjectContentWithContext(arg1 context.Context, arg2 *s3.SelectObjectContentInput, arg3 ...request.Option) (*s3.SelectObjectContentOutput, error) {
	fake.selectObjectContentWithContextMutex.Lock()
	ret, specificReturn := fake.selectObjectContentWithContextReturnsOnCall[len(fake.selectObjectContentWithContextArgsForCall)]
	fake.selectObjectContentWithContextArgsForCall = append(fake.selectObjectContentWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.SelectObjectContentInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("SelectObjectContentWithContext", []interface{}{arg1, arg2, arg3})
	fake.selectObjectContentWithContextMutex.Unlock()
	if fake.SelectObjectContentWithContextStub != nil {
		return fake.SelectObjectContentWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.selectObjectContentWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) SelectObjectContentWithContextCallCount() int {
	fake.selectObjectContentWithContextMutex.RLock()
	defer fake.selectObjectContentWithContextMutex.RUnlock()
	return len(fake.selectObjectContentWithContextArgsForCall)
}

func (fake *FakeS3API) SelectObjectContentWithContextCalls(stub func(context.Context, *s3.SelectObjectContentInput, ...request.Option) (*s3.SelectObjectContentOutput, error)) {
	fake.selectObjectContentWithContextMutex.Lock()
	defer fake.selectObjectContentWithContextMutex.Unlock()
	fake.SelectObjectContentWithContextStub = stub
}

func (fake *FakeS3API) SelectObjectContentWithContextArgsForCall(i int) (context.Context, *s3.SelectObjectContentInput, []request.Option) {
	fake.selectObjectContentWithContextMutex.RLock()
	defer fake.selectObjectContentWithContextMutex.RUnlock()
	argsForCall := fake.selectObjectContentWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) SelectObjectContentWithContextReturns(result1 *s3.SelectObjectContentOutput, result2 error) {
	fake.selectObjectContentWithContextMutex.Lock()
	defer fake.selectObjectContentWithContextMutex.Unlock()
	fake.SelectObjectContentWithContextStub = nil
	fake.selectObjectContentWithContextReturns = struct {
		result1 *s3.SelectObjectContentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) SelectObjectContentWithContextReturnsOnCall(i int, result1 *s3.SelectObjectContentOutput, result2 error) {
	fake.selectObjectContentWithContextMutex.Lock()
	defer fake.selectObjectContentWithContextMutex.Unlock()
	fake.SelectObjectContentWithContextStub = nil
	if fake.selectObjectContentWithContextReturnsOnCall == nil {
		fake.selectObjectContentWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.SelectObjectContentOutput
			result2 error
		})
	}
	fake.selectObjectContentWithContextReturnsOnCall[i] = struct {
		result1 *s3.SelectObjectContentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) UploadPart(arg1 *s3.UploadPartInput) (*s3.UploadPartOutput, error) {
	fake.uploadPartMutex.Lock()
	ret, specificReturn := fake.uploadPartReturnsOnCall[len(fake.uploadPartArgsForCall)]
	fake.uploadPartArgsForCall = append(fake.uploadPartArgsForCall, struct {
		arg1 *s3.UploadPartInput
	}{arg1})
	fake.recordInvocation("UploadPart", []interface{}{arg1})
	fake.uploadPartMutex.Unlock()
	if fake.UploadPartStub != nil {
		return fake.UploadPartStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadPartReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) UploadPartCallCount() int {
	fake.uploadPartMutex.RLock()
	defer fake.uploadPartMutex.RUnlock()
	return len(fake.uploadPartArgsForCall)
}

func (fake *FakeS3API) UploadPartCalls(stub func(*s3.UploadPartInput) (*s3.UploadPartOutput, error)) {
	fake.uploadPartMutex.Lock()
	defer fake.uploadPartMutex.Unlock()
	fake.UploadPartStub = stub
}

func (fake *FakeS3API) UploadPartArgsForCall(i int) *s3.UploadPartInput {
	fake.uploadPartMutex.RLock()
	defer fake.uploadPartMutex.RUnlock()
	argsForCall := fake.uploadPartArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) UploadPartReturns(result1 *s3.UploadPartOutput, result2 error) {
	fake.uploadPartMutex.Lock()
	defer fake.uploadPartMutex.Unlock()
	fake.UploadPartStub = nil
	fake.uploadPartReturns = struct {
		result1 *s3.UploadPartOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) UploadPartReturnsOnCall(i int, result1 *s3.UploadPartOutput, result2 error) {
	fake.uploadPartMutex.Lock()
	defer fake.uploadPartMutex.Unlock()
	fake.UploadPartStub = nil
	if fake.uploadPartReturnsOnCall == nil {
		fake.uploadPartReturnsOnCall = make(map[int]struct {
			result1 *s3.UploadPartOutput
			result2 error
		})
	}
	fake.uploadPartReturnsOnCall[i] = struct {
		result1 *s3.UploadPartOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) UploadPartCopy(arg1 *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error) {
	fake.uploadPartCopyMutex.Lock()
	ret, specificReturn := fake.uploadPartCopyReturnsOnCall[len(fake.uploadPartCopyArgsForCall)]
	fake.uploadPartCopyArgsForCall = append(fake.uploadPartCopyArgsForCall, struct {
		arg1 *s3.UploadPartCopyInput
	}{arg1})
	fake.recordInvocation("UploadPartCopy", []interface{}{arg1})
	fake.uploadPartCopyMutex.Unlock()
	if fake.UploadPartCopyStub != nil {
		return fake.UploadPartCopyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadPartCopyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) UploadPartCopyCallCount() int {
	fake.uploadPartCopyMutex.RLock()
	defer fake.uploadPartCopyMutex.RUnlock()
	return len(fake.uploadPartCopyArgsForCall)
}

func (fake *FakeS3API) UploadPartCopyCalls(stub func(*s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)) {
	fake.uploadPartCopyMutex.Lock()
	defer fake.uploadPartCopyMutex.Unlock()
	fake.UploadPartCopyStub = stub
}

func (fake *FakeS3API) UploadPartCopyArgsForCall(i int) *s3.UploadPartCopyInput {
	fake.uploadPartCopyMutex.RLock()
	defer fake.uploadPartCopyMutex.RUnlock()
	argsForCall := fake.uploadPartCopyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) UploadPartCopyReturns(result1 *s3.UploadPartCopyOutput, result2 error) {
	fake.uploadPartCopyMutex.Lock()
	defer fake.uploadPartCopyMutex.Unlock()
	fake.UploadPartCopyStub = nil
	fake.uploadPartCopyReturns = struct {
		result1 *s3.UploadPartCopyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) UploadPartCopyReturnsOnCall(i int, result1 *s3.UploadPartCopyOutput, result2 error) {
	fake.uploadPartCopyMutex.Lock()
	defer fake.uploadPartCopyMutex.Unlock()
	fake.UploadPartCopyStub = nil
	if fake.uploadPartCopyReturnsOnCall == nil {
		fake.uploadPartCopyReturnsOnCall = make(map[int]struct {
			result1 *s3.UploadPartCopyOutput
			result2 error
		})
	}
	fake.uploadPartCopyReturnsOnCall[i] = struct {
		result1 *s3.UploadPartCopyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) UploadPartCopyRequest(arg1 *s3.UploadPartCopyInput) (*request.Request, *s3.UploadPartCopyOutput) {
	fake.uploadPartCopyRequestMutex.Lock()
	ret, specificReturn := fake.uploadPartCopyRequestReturnsOnCall[len(fake.uploadPartCopyRequestArgsForCall)]
	fake.uploadPartCopyRequestArgsForCall = append(fake.uploadPartCopyRequestArgsForCall, struct {
		arg1 *s3.UploadPartCopyInput
	}{arg1})
	fake.recordInvocation("UploadPartCopyRequest", []interface{}{arg1})
	fake.uploadPartCopyRequestMutex.Unlock()
	if fake.UploadPartCopyRequestStub != nil {
		return fake.UploadPartCopyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadPartCopyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) UploadPartCopyRequestCallCount() int {
	fake.uploadPartCopyRequestMutex.RLock()
	defer fake.uploadPartCopyRequestMutex.RUnlock()
	return len(fake.uploadPartCopyRequestArgsForCall)
}

func (fake *FakeS3API) UploadPartCopyRequestCalls(stub func(*s3.UploadPartCopyInput) (*request.Request, *s3.UploadPartCopyOutput)) {
	fake.uploadPartCopyRequestMutex.Lock()
	defer fake.uploadPartCopyRequestMutex.Unlock()
	fake.UploadPartCopyRequestStub = stub
}

func (fake *FakeS3API) UploadPartCopyRequestArgsForCall(i int) *s3.UploadPartCopyInput {
	fake.uploadPartCopyRequestMutex.RLock()
	defer fake.uploadPartCopyRequestMutex.RUnlock()
	argsForCall := fake.uploadPartCopyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) UploadPartCopyRequestReturns(result1 *request.Request, result2 *s3.UploadPartCopyOutput) {
	fake.uploadPartCopyRequestMutex.Lock()
	defer fake.uploadPartCopyRequestMutex.Unlock()
	fake.UploadPartCopyRequestStub = nil
	fake.uploadPartCopyRequestReturns = struct {
		result1 *request.Request
		result2 *s3.UploadPartCopyOutput
	}{result1, result2}
}

func (fake *FakeS3API) UploadPartCopyRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.UploadPartCopyOutput) {
	fake.uploadPartCopyRequestMutex.Lock()
	defer fake.uploadPartCopyRequestMutex.Unlock()
	fake.UploadPartCopyRequestStub = nil
	if fake.uploadPartCopyRequestReturnsOnCall == nil {
		fake.uploadPartCopyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.UploadPartCopyOutput
		})
	}
	fake.uploadPartCopyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.UploadPartCopyOutput
	}{result1, result2}
}

func (fake *FakeS3API) UploadPartCopyWithContext(arg1 context.Context, arg2 *s3.UploadPartCopyInput, arg3 ...request.Option) (*s3.UploadPartCopyOutput, error) {
	fake.uploadPartCopyWithContextMutex.Lock()
	ret, specificReturn := fake.uploadPartCopyWithContextReturnsOnCall[len(fake.uploadPartCopyWithContextArgsForCall)]
	fake.uploadPartCopyWithContextArgsForCall = append(fake.uploadPartCopyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.UploadPartCopyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UploadPartCopyWithContext", []interface{}{arg1, arg2, arg3})
	fake.uploadPartCopyWithContextMutex.Unlock()
	if fake.UploadPartCopyWithContextStub != nil {
		return fake.UploadPartCopyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadPartCopyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) UploadPartCopyWithContextCallCount() int {
	fake.uploadPartCopyWithContextMutex.RLock()
	defer fake.uploadPartCopyWithContextMutex.RUnlock()
	return len(fake.uploadPartCopyWithContextArgsForCall)
}

func (fake *FakeS3API) UploadPartCopyWithContextCalls(stub func(context.Context, *s3.UploadPartCopyInput, ...request.Option) (*s3.UploadPartCopyOutput, error)) {
	fake.uploadPartCopyWithContextMutex.Lock()
	defer fake.uploadPartCopyWithContextMutex.Unlock()
	fake.UploadPartCopyWithContextStub = stub
}

func (fake *FakeS3API) UploadPartCopyWithContextArgsForCall(i int) (context.Context, *s3.UploadPartCopyInput, []request.Option) {
	fake.uploadPartCopyWithContextMutex.RLock()
	defer fake.uploadPartCopyWithContextMutex.RUnlock()
	argsForCall := fake.uploadPartCopyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) UploadPartCopyWithContextReturns(result1 *s3.UploadPartCopyOutput, result2 error) {
	fake.uploadPartCopyWithContextMutex.Lock()
	defer fake.uploadPartCopyWithContextMutex.Unlock()
	fake.UploadPartCopyWithContextStub = nil
	fake.uploadPartCopyWithContextReturns = struct {
		result1 *s3.UploadPartCopyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) UploadPartCopyWithContextReturnsOnCall(i int, result1 *s3.UploadPartCopyOutput, result2 error) {
	fake.uploadPartCopyWithContextMutex.Lock()
	defer fake.uploadPartCopyWithContextMutex.Unlock()
	fake.UploadPartCopyWithContextStub = nil
	if fake.uploadPartCopyWithContextReturnsOnCall == nil {
		fake.uploadPartCopyWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.UploadPartCopyOutput
			result2 error
		})
	}
	fake.uploadPartCopyWithContextReturnsOnCall[i] = struct {
		result1 *s3.UploadPartCopyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) UploadPartRequest(arg1 *s3.UploadPartInput) (*request.Request, *s3.UploadPartOutput) {
	fake.uploadPartRequestMutex.Lock()
	ret, specificReturn := fake.uploadPartRequestReturnsOnCall[len(fake.uploadPartRequestArgsForCall)]
	fake.uploadPartRequestArgsForCall = append(fake.uploadPartRequestArgsForCall, struct {
		arg1 *s3.UploadPartInput
	}{arg1})
	fake.recordInvocation("UploadPartRequest", []interface{}{arg1})
	fake.uploadPartRequestMutex.Unlock()
	if fake.UploadPartRequestStub != nil {
		return fake.UploadPartRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadPartRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) UploadPartRequestCallCount() int {
	fake.uploadPartRequestMutex.RLock()
	defer fake.uploadPartRequestMutex.RUnlock()
	return len(fake.uploadPartRequestArgsForCall)
}

func (fake *FakeS3API) UploadPartRequestCalls(stub func(*s3.UploadPartInput) (*request.Request, *s3.UploadPartOutput)) {
	fake.uploadPartRequestMutex.Lock()
	defer fake.uploadPartRequestMutex.Unlock()
	fake.UploadPartRequestStub = stub
}

func (fake *FakeS3API) UploadPartRequestArgsForCall(i int) *s3.UploadPartInput {
	fake.uploadPartRequestMutex.RLock()
	defer fake.uploadPartRequestMutex.RUnlock()
	argsForCall := fake.uploadPartRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) UploadPartRequestReturns(result1 *request.Request, result2 *s3.UploadPartOutput) {
	fake.uploadPartRequestMutex.Lock()
	defer fake.uploadPartRequestMutex.Unlock()
	fake.UploadPartRequestStub = nil
	fake.uploadPartRequestReturns = struct {
		result1 *request.Request
		result2 *s3.UploadPartOutput
	}{result1, result2}
}

func (fake *FakeS3API) UploadPartRequestReturnsOnCall(i int, result1 *request.Request, result2 *s3.UploadPartOutput) {
	fake.uploadPartRequestMutex.Lock()
	defer fake.uploadPartRequestMutex.Unlock()
	fake.UploadPartRequestStub = nil
	if fake.uploadPartRequestReturnsOnCall == nil {
		fake.uploadPartRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *s3.UploadPartOutput
		})
	}
	fake.uploadPartRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *s3.UploadPartOutput
	}{result1, result2}
}

func (fake *FakeS3API) UploadPartWithContext(arg1 context.Context, arg2 *s3.UploadPartInput, arg3 ...request.Option) (*s3.UploadPartOutput, error) {
	fake.uploadPartWithContextMutex.Lock()
	ret, specificReturn := fake.uploadPartWithContextReturnsOnCall[len(fake.uploadPartWithContextArgsForCall)]
	fake.uploadPartWithContextArgsForCall = append(fake.uploadPartWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.UploadPartInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UploadPartWithContext", []interface{}{arg1, arg2, arg3})
	fake.uploadPartWithContextMutex.Unlock()
	if fake.UploadPartWithContextStub != nil {
		return fake.UploadPartWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadPartWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) UploadPartWithContextCallCount() int {
	fake.uploadPartWithContextMutex.RLock()
	defer fake.uploadPartWithContextMutex.RUnlock()
	return len(fake.uploadPartWithContextArgsForCall)
}

func (fake *FakeS3API) UploadPartWithContextCalls(stub func(context.Context, *s3.UploadPartInput, ...request.Option) (*s3.UploadPartOutput, error)) {
	fake.uploadPartWithContextMutex.Lock()
	defer fake.uploadPartWithContextMutex.Unlock()
	fake.UploadPartWithContextStub = stub
}

func (fake *FakeS3API) UploadPartWithContextArgsForCall(i int) (context.Context, *s3.UploadPartInput, []request.Option) {
	fake.uploadPartWithContextMutex.RLock()
	defer fake.uploadPartWithContextMutex.RUnlock()
	argsForCall := fake.uploadPartWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) UploadPartWithContextReturns(result1 *s3.UploadPartOutput, result2 error) {
	fake.uploadPartWithContextMutex.Lock()
	defer fake.uploadPartWithContextMutex.Unlock()
	fake.UploadPartWithContextStub = nil
	fake.uploadPartWithContextReturns = struct {
		result1 *s3.UploadPartOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) UploadPartWithContextReturnsOnCall(i int, result1 *s3.UploadPartOutput, result2 error) {
	fake.uploadPartWithContextMutex.Lock()
	defer fake.uploadPartWithContextMutex.Unlock()
	fake.UploadPartWithContextStub = nil
	if fake.uploadPartWithContextReturnsOnCall == nil {
		fake.uploadPartWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3.UploadPartOutput
			result2 error
		})
	}
	fake.uploadPartWithContextReturnsOnCall[i] = struct {
		result1 *s3.UploadPartOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) WaitUntilBucketExists(arg1 *s3.HeadBucketInput) error {
	fake.waitUntilBucketExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilBucketExistsReturnsOnCall[len(fake.waitUntilBucketExistsArgsForCall)]
	fake.waitUntilBucketExistsArgsForCall = append(fake.waitUntilBucketExistsArgsForCall, struct {
		arg1 *s3.HeadBucketInput
	}{arg1})
	fake.recordInvocation("WaitUntilBucketExists", []interface{}{arg1})
	fake.waitUntilBucketExistsMutex.Unlock()
	if fake.WaitUntilBucketExistsStub != nil {
		return fake.WaitUntilBucketExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilBucketExistsReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) WaitUntilBucketExistsCallCount() int {
	fake.waitUntilBucketExistsMutex.RLock()
	defer fake.waitUntilBucketExistsMutex.RUnlock()
	return len(fake.waitUntilBucketExistsArgsForCall)
}

func (fake *FakeS3API) WaitUntilBucketExistsCalls(stub func(*s3.HeadBucketInput) error) {
	fake.waitUntilBucketExistsMutex.Lock()
	defer fake.waitUntilBucketExistsMutex.Unlock()
	fake.WaitUntilBucketExistsStub = stub
}

func (fake *FakeS3API) WaitUntilBucketExistsArgsForCall(i int) *s3.HeadBucketInput {
	fake.waitUntilBucketExistsMutex.RLock()
	defer fake.waitUntilBucketExistsMutex.RUnlock()
	argsForCall := fake.waitUntilBucketExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) WaitUntilBucketExistsReturns(result1 error) {
	fake.waitUntilBucketExistsMutex.Lock()
	defer fake.waitUntilBucketExistsMutex.Unlock()
	fake.WaitUntilBucketExistsStub = nil
	fake.waitUntilBucketExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) WaitUntilBucketExistsReturnsOnCall(i int, result1 error) {
	fake.waitUntilBucketExistsMutex.Lock()
	defer fake.waitUntilBucketExistsMutex.Unlock()
	fake.WaitUntilBucketExistsStub = nil
	if fake.waitUntilBucketExistsReturnsOnCall == nil {
		fake.waitUntilBucketExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilBucketExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) WaitUntilBucketExistsWithContext(arg1 context.Context, arg2 *s3.HeadBucketInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilBucketExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilBucketExistsWithContextReturnsOnCall[len(fake.waitUntilBucketExistsWithContextArgsForCall)]
	fake.waitUntilBucketExistsWithContextArgsForCall = append(fake.waitUntilBucketExistsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.HeadBucketInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilBucketExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilBucketExistsWithContextMutex.Unlock()
	if fake.WaitUntilBucketExistsWithContextStub != nil {
		return fake.WaitUntilBucketExistsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilBucketExistsWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) WaitUntilBucketExistsWithContextCallCount() int {
	fake.waitUntilBucketExistsWithContextMutex.RLock()
	defer fake.waitUntilBucketExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilBucketExistsWithContextArgsForCall)
}

func (fake *FakeS3API) WaitUntilBucketExistsWithContextCalls(stub func(context.Context, *s3.HeadBucketInput, ...request.WaiterOption) error) {
	fake.waitUntilBucketExistsWithContextMutex.Lock()
	defer fake.waitUntilBucketExistsWithContextMutex.Unlock()
	fake.WaitUntilBucketExistsWithContextStub = stub
}

func (fake *FakeS3API) WaitUntilBucketExistsWithContextArgsForCall(i int) (context.Context, *s3.HeadBucketInput, []request.WaiterOption) {
	fake.waitUntilBucketExistsWithContextMutex.RLock()
	defer fake.waitUntilBucketExistsWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilBucketExistsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) WaitUntilBucketExistsWithContextReturns(result1 error) {
	fake.waitUntilBucketExistsWithContextMutex.Lock()
	defer fake.waitUntilBucketExistsWithContextMutex.Unlock()
	fake.WaitUntilBucketExistsWithContextStub = nil
	fake.waitUntilBucketExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) WaitUntilBucketExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilBucketExistsWithContextMutex.Lock()
	defer fake.waitUntilBucketExistsWithContextMutex.Unlock()
	fake.WaitUntilBucketExistsWithContextStub = nil
	if fake.waitUntilBucketExistsWithContextReturnsOnCall == nil {
		fake.waitUntilBucketExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilBucketExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) WaitUntilBucketNotExists(arg1 *s3.HeadBucketInput) error {
	fake.waitUntilBucketNotExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilBucketNotExistsReturnsOnCall[len(fake.waitUntilBucketNotExistsArgsForCall)]
	fake.waitUntilBucketNotExistsArgsForCall = append(fake.waitUntilBucketNotExistsArgsForCall, struct {
		arg1 *s3.HeadBucketInput
	}{arg1})
	fake.recordInvocation("WaitUntilBucketNotExists", []interface{}{arg1})
	fake.waitUntilBucketNotExistsMutex.Unlock()
	if fake.WaitUntilBucketNotExistsStub != nil {
		return fake.WaitUntilBucketNotExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilBucketNotExistsReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) WaitUntilBucketNotExistsCallCount() int {
	fake.waitUntilBucketNotExistsMutex.RLock()
	defer fake.waitUntilBucketNotExistsMutex.RUnlock()
	return len(fake.waitUntilBucketNotExistsArgsForCall)
}

func (fake *FakeS3API) WaitUntilBucketNotExistsCalls(stub func(*s3.HeadBucketInput) error) {
	fake.waitUntilBucketNotExistsMutex.Lock()
	defer fake.waitUntilBucketNotExistsMutex.Unlock()
	fake.WaitUntilBucketNotExistsStub = stub
}

func (fake *FakeS3API) WaitUntilBucketNotExistsArgsForCall(i int) *s3.HeadBucketInput {
	fake.waitUntilBucketNotExistsMutex.RLock()
	defer fake.waitUntilBucketNotExistsMutex.RUnlock()
	argsForCall := fake.waitUntilBucketNotExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) WaitUntilBucketNotExistsReturns(result1 error) {
	fake.waitUntilBucketNotExistsMutex.Lock()
	defer fake.waitUntilBucketNotExistsMutex.Unlock()
	fake.WaitUntilBucketNotExistsStub = nil
	fake.waitUntilBucketNotExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) WaitUntilBucketNotExistsReturnsOnCall(i int, result1 error) {
	fake.waitUntilBucketNotExistsMutex.Lock()
	defer fake.waitUntilBucketNotExistsMutex.Unlock()
	fake.WaitUntilBucketNotExistsStub = nil
	if fake.waitUntilBucketNotExistsReturnsOnCall == nil {
		fake.waitUntilBucketNotExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilBucketNotExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) WaitUntilBucketNotExistsWithContext(arg1 context.Context, arg2 *s3.HeadBucketInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilBucketNotExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilBucketNotExistsWithContextReturnsOnCall[len(fake.waitUntilBucketNotExistsWithContextArgsForCall)]
	fake.waitUntilBucketNotExistsWithContextArgsForCall = append(fake.waitUntilBucketNotExistsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.HeadBucketInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilBucketNotExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilBucketNotExistsWithContextMutex.Unlock()
	if fake.WaitUntilBucketNotExistsWithContextStub != nil {
		return fake.WaitUntilBucketNotExistsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilBucketNotExistsWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) WaitUntilBucketNotExistsWithContextCallCount() int {
	fake.waitUntilBucketNotExistsWithContextMutex.RLock()
	defer fake.waitUntilBucketNotExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilBucketNotExistsWithContextArgsForCall)
}

func (fake *FakeS3API) WaitUntilBucketNotExistsWithContextCalls(stub func(context.Context, *s3.HeadBucketInput, ...request.WaiterOption) error) {
	fake.waitUntilBucketNotExistsWithContextMutex.Lock()
	defer fake.waitUntilBucketNotExistsWithContextMutex.Unlock()
	fake.WaitUntilBucketNotExistsWithContextStub = stub
}

func (fake *FakeS3API) WaitUntilBucketNotExistsWithContextArgsForCall(i int) (context.Context, *s3.HeadBucketInput, []request.WaiterOption) {
	fake.waitUntilBucketNotExistsWithContextMutex.RLock()
	defer fake.waitUntilBucketNotExistsWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilBucketNotExistsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) WaitUntilBucketNotExistsWithContextReturns(result1 error) {
	fake.waitUntilBucketNotExistsWithContextMutex.Lock()
	defer fake.waitUntilBucketNotExistsWithContextMutex.Unlock()
	fake.WaitUntilBucketNotExistsWithContextStub = nil
	fake.waitUntilBucketNotExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) WaitUntilBucketNotExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilBucketNotExistsWithContextMutex.Lock()
	defer fake.waitUntilBucketNotExistsWithContextMutex.Unlock()
	fake.WaitUntilBucketNotExistsWithContextStub = nil
	if fake.waitUntilBucketNotExistsWithContextReturnsOnCall == nil {
		fake.waitUntilBucketNotExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilBucketNotExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) WaitUntilObjectExists(arg1 *s3.HeadObjectInput) error {
	fake.waitUntilObjectExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilObjectExistsReturnsOnCall[len(fake.waitUntilObjectExistsArgsForCall)]
	fake.waitUntilObjectExistsArgsForCall = append(fake.waitUntilObjectExistsArgsForCall, struct {
		arg1 *s3.HeadObjectInput
	}{arg1})
	fake.recordInvocation("WaitUntilObjectExists", []interface{}{arg1})
	fake.waitUntilObjectExistsMutex.Unlock()
	if fake.WaitUntilObjectExistsStub != nil {
		return fake.WaitUntilObjectExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilObjectExistsReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) WaitUntilObjectExistsCallCount() int {
	fake.waitUntilObjectExistsMutex.RLock()
	defer fake.waitUntilObjectExistsMutex.RUnlock()
	return len(fake.waitUntilObjectExistsArgsForCall)
}

func (fake *FakeS3API) WaitUntilObjectExistsCalls(stub func(*s3.HeadObjectInput) error) {
	fake.waitUntilObjectExistsMutex.Lock()
	defer fake.waitUntilObjectExistsMutex.Unlock()
	fake.WaitUntilObjectExistsStub = stub
}

func (fake *FakeS3API) WaitUntilObjectExistsArgsForCall(i int) *s3.HeadObjectInput {
	fake.waitUntilObjectExistsMutex.RLock()
	defer fake.waitUntilObjectExistsMutex.RUnlock()
	argsForCall := fake.waitUntilObjectExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) WaitUntilObjectExistsReturns(result1 error) {
	fake.waitUntilObjectExistsMutex.Lock()
	defer fake.waitUntilObjectExistsMutex.Unlock()
	fake.WaitUntilObjectExistsStub = nil
	fake.waitUntilObjectExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) WaitUntilObjectExistsReturnsOnCall(i int, result1 error) {
	fake.waitUntilObjectExistsMutex.Lock()
	defer fake.waitUntilObjectExistsMutex.Unlock()
	fake.WaitUntilObjectExistsStub = nil
	if fake.waitUntilObjectExistsReturnsOnCall == nil {
		fake.waitUntilObjectExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilObjectExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) WaitUntilObjectExistsWithContext(arg1 context.Context, arg2 *s3.HeadObjectInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilObjectExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilObjectExistsWithContextReturnsOnCall[len(fake.waitUntilObjectExistsWithContextArgsForCall)]
	fake.waitUntilObjectExistsWithContextArgsForCall = append(fake.waitUntilObjectExistsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.HeadObjectInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilObjectExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilObjectExistsWithContextMutex.Unlock()
	if fake.WaitUntilObjectExistsWithContextStub != nil {
		return fake.WaitUntilObjectExistsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilObjectExistsWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) WaitUntilObjectExistsWithContextCallCount() int {
	fake.waitUntilObjectExistsWithContextMutex.RLock()
	defer fake.waitUntilObjectExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilObjectExistsWithContextArgsForCall)
}

func (fake *FakeS3API) WaitUntilObjectExistsWithContextCalls(stub func(context.Context, *s3.HeadObjectInput, ...request.WaiterOption) error) {
	fake.waitUntilObjectExistsWithContextMutex.Lock()
	defer fake.waitUntilObjectExistsWithContextMutex.Unlock()
	fake.WaitUntilObjectExistsWithContextStub = stub
}

func (fake *FakeS3API) WaitUntilObjectExistsWithContextArgsForCall(i int) (context.Context, *s3.HeadObjectInput, []request.WaiterOption) {
	fake.waitUntilObjectExistsWithContextMutex.RLock()
	defer fake.waitUntilObjectExistsWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilObjectExistsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) WaitUntilObjectExistsWithContextReturns(result1 error) {
	fake.waitUntilObjectExistsWithContextMutex.Lock()
	defer fake.waitUntilObjectExistsWithContextMutex.Unlock()
	fake.WaitUntilObjectExistsWithContextStub = nil
	fake.waitUntilObjectExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) WaitUntilObjectExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilObjectExistsWithContextMutex.Lock()
	defer fake.waitUntilObjectExistsWithContextMutex.Unlock()
	fake.WaitUntilObjectExistsWithContextStub = nil
	if fake.waitUntilObjectExistsWithContextReturnsOnCall == nil {
		fake.waitUntilObjectExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilObjectExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) WaitUntilObjectNotExists(arg1 *s3.HeadObjectInput) error {
	fake.waitUntilObjectNotExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilObjectNotExistsReturnsOnCall[len(fake.waitUntilObjectNotExistsArgsForCall)]
	fake.waitUntilObjectNotExistsArgsForCall = append(fake.waitUntilObjectNotExistsArgsForCall, struct {
		arg1 *s3.HeadObjectInput
	}{arg1})
	fake.recordInvocation("WaitUntilObjectNotExists", []interface{}{arg1})
	fake.waitUntilObjectNotExistsMutex.Unlock()
	if fake.WaitUntilObjectNotExistsStub != nil {
		return fake.WaitUntilObjectNotExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilObjectNotExistsReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) WaitUntilObjectNotExistsCallCount() int {
	fake.waitUntilObjectNotExistsMutex.RLock()
	defer fake.waitUntilObjectNotExistsMutex.RUnlock()
	return len(fake.waitUntilObjectNotExistsArgsForCall)
}

func (fake *FakeS3API) WaitUntilObjectNotExistsCalls(stub func(*s3.HeadObjectInput) error) {
	fake.waitUntilObjectNotExistsMutex.Lock()
	defer fake.waitUntilObjectNotExistsMutex.Unlock()
	fake.WaitUntilObjectNotExistsStub = stub
}

func (fake *FakeS3API) WaitUntilObjectNotExistsArgsForCall(i int) *s3.HeadObjectInput {
	fake.waitUntilObjectNotExistsMutex.RLock()
	defer fake.waitUntilObjectNotExistsMutex.RUnlock()
	argsForCall := fake.waitUntilObjectNotExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) WaitUntilObjectNotExistsReturns(result1 error) {
	fake.waitUntilObjectNotExistsMutex.Lock()
	defer fake.waitUntilObjectNotExistsMutex.Unlock()
	fake.WaitUntilObjectNotExistsStub = nil
	fake.waitUntilObjectNotExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) WaitUntilObjectNotExistsReturnsOnCall(i int, result1 error) {
	fake.waitUntilObjectNotExistsMutex.Lock()
	defer fake.waitUntilObjectNotExistsMutex.Unlock()
	fake.WaitUntilObjectNotExistsStub = nil
	if fake.waitUntilObjectNotExistsReturnsOnCall == nil {
		fake.waitUntilObjectNotExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilObjectNotExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) WaitUntilObjectNotExistsWithContext(arg1 context.Context, arg2 *s3.HeadObjectInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilObjectNotExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilObjectNotExistsWithContextReturnsOnCall[len(fake.waitUntilObjectNotExistsWithContextArgsForCall)]
	fake.waitUntilObjectNotExistsWithContextArgsForCall = append(fake.waitUntilObjectNotExistsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.HeadObjectInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilObjectNotExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilObjectNotExistsWithContextMutex.Unlock()
	if fake.WaitUntilObjectNotExistsWithContextStub != nil {
		return fake.WaitUntilObjectNotExistsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilObjectNotExistsWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeS3API) WaitUntilObjectNotExistsWithContextCallCount() int {
	fake.waitUntilObjectNotExistsWithContextMutex.RLock()
	defer fake.waitUntilObjectNotExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilObjectNotExistsWithContextArgsForCall)
}

func (fake *FakeS3API) WaitUntilObjectNotExistsWithContextCalls(stub func(context.Context, *s3.HeadObjectInput, ...request.WaiterOption) error) {
	fake.waitUntilObjectNotExistsWithContextMutex.Lock()
	defer fake.waitUntilObjectNotExistsWithContextMutex.Unlock()
	fake.WaitUntilObjectNotExistsWithContextStub = stub
}

func (fake *FakeS3API) WaitUntilObjectNotExistsWithContextArgsForCall(i int) (context.Context, *s3.HeadObjectInput, []request.WaiterOption) {
	fake.waitUntilObjectNotExistsWithContextMutex.RLock()
	defer fake.waitUntilObjectNotExistsWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilObjectNotExistsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3API) WaitUntilObjectNotExistsWithContextReturns(result1 error) {
	fake.waitUntilObjectNotExistsWithContextMutex.Lock()
	defer fake.waitUntilObjectNotExistsWithContextMutex.Unlock()
	fake.WaitUntilObjectNotExistsWithContextStub = nil
	fake.waitUntilObjectNotExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) WaitUntilObjectNotExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilObjectNotExistsWithContextMutex.Lock()
	defer fake.waitUntilObjectNotExistsWithContextMutex.Unlock()
	fake.WaitUntilObjectNotExistsWithContextStub = nil
	if fake.waitUntilObjectNotExistsWithContextReturnsOnCall == nil {
		fake.waitUntilObjectNotExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilObjectNotExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3API) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.abortMultipartUploadMutex.RLock()
	defer fake.abortMultipartUploadMutex.RUnlock()
	fake.abortMultipartUploadRequestMutex.RLock()
	defer fake.abortMultipartUploadRequestMutex.RUnlock()
	fake.abortMultipartUploadWithContextMutex.RLock()
	defer fake.abortMultipartUploadWithContextMutex.RUnlock()
	fake.completeMultipartUploadMutex.RLock()
	defer fake.completeMultipartUploadMutex.RUnlock()
	fake.completeMultipartUploadRequestMutex.RLock()
	defer fake.completeMultipartUploadRequestMutex.RUnlock()
	fake.completeMultipartUploadWithContextMutex.RLock()
	defer fake.completeMultipartUploadWithContextMutex.RUnlock()
	fake.copyObjectMutex.RLock()
	defer fake.copyObjectMutex.RUnlock()
	fake.copyObjectRequestMutex.RLock()
	defer fake.copyObjectRequestMutex.RUnlock()
	fake.copyObjectWithContextMutex.RLock()
	defer fake.copyObjectWithContextMutex.RUnlock()
	fake.createBucketMutex.RLock()
	defer fake.createBucketMutex.RUnlock()
	fake.createBucketRequestMutex.RLock()
	defer fake.createBucketRequestMutex.RUnlock()
	fake.createBucketWithContextMutex.RLock()
	defer fake.createBucketWithContextMutex.RUnlock()
	fake.createMultipartUploadMutex.RLock()
	defer fake.createMultipartUploadMutex.RUnlock()
	fake.createMultipartUploadRequestMutex.RLock()
	defer fake.createMultipartUploadRequestMutex.RUnlock()
	fake.createMultipartUploadWithContextMutex.RLock()
	defer fake.createMultipartUploadWithContextMutex.RUnlock()
	fake.deleteBucketMutex.RLock()
	defer fake.deleteBucketMutex.RUnlock()
	fake.deleteBucketAnalyticsConfigurationMutex.RLock()
	defer fake.deleteBucketAnalyticsConfigurationMutex.RUnlock()
	fake.deleteBucketAnalyticsConfigurationRequestMutex.RLock()
	defer fake.deleteBucketAnalyticsConfigurationRequestMutex.RUnlock()
	fake.deleteBucketAnalyticsConfigurationWithContextMutex.RLock()
	defer fake.deleteBucketAnalyticsConfigurationWithContextMutex.RUnlock()
	fake.deleteBucketCorsMutex.RLock()
	defer fake.deleteBucketCorsMutex.RUnlock()
	fake.deleteBucketCorsRequestMutex.RLock()
	defer fake.deleteBucketCorsRequestMutex.RUnlock()
	fake.deleteBucketCorsWithContextMutex.RLock()
	defer fake.deleteBucketCorsWithContextMutex.RUnlock()
	fake.deleteBucketEncryptionMutex.RLock()
	defer fake.deleteBucketEncryptionMutex.RUnlock()
	fake.deleteBucketEncryptionRequestMutex.RLock()
	defer fake.deleteBucketEncryptionRequestMutex.RUnlock()
	fake.deleteBucketEncryptionWithContextMutex.RLock()
	defer fake.deleteBucketEncryptionWithContextMutex.RUnlock()
	fake.deleteBucketInventoryConfigurationMutex.RLock()
	defer fake.deleteBucketInventoryConfigurationMutex.RUnlock()
	fake.deleteBucketInventoryConfigurationRequestMutex.RLock()
	defer fake.deleteBucketInventoryConfigurationRequestMutex.RUnlock()
	fake.deleteBucketInventoryConfigurationWithContextMutex.RLock()
	defer fake.deleteBucketInventoryConfigurationWithContextMutex.RUnlock()
	fake.deleteBucketLifecycleMutex.RLock()
	defer fake.deleteBucketLifecycleMutex.RUnlock()
	fake.deleteBucketLifecycleRequestMutex.RLock()
	defer fake.deleteBucketLifecycleRequestMutex.RUnlock()
	fake.deleteBucketLifecycleWithContextMutex.RLock()
	defer fake.deleteBucketLifecycleWithContextMutex.RUnlock()
	fake.deleteBucketMetricsConfigurationMutex.RLock()
	defer fake.deleteBucketMetricsConfigurationMutex.RUnlock()
	fake.deleteBucketMetricsConfigurationRequestMutex.RLock()
	defer fake.deleteBucketMetricsConfigurationRequestMutex.RUnlock()
	fake.deleteBucketMetricsConfigurationWithContextMutex.RLock()
	defer fake.deleteBucketMetricsConfigurationWithContextMutex.RUnlock()
	fake.deleteBucketPolicyMutex.RLock()
	defer fake.deleteBucketPolicyMutex.RUnlock()
	fake.deleteBucketPolicyRequestMutex.RLock()
	defer fake.deleteBucketPolicyRequestMutex.RUnlock()
	fake.deleteBucketPolicyWithContextMutex.RLock()
	defer fake.deleteBucketPolicyWithContextMutex.RUnlock()
	fake.deleteBucketReplicationMutex.RLock()
	defer fake.deleteBucketReplicationMutex.RUnlock()
	fake.deleteBucketReplicationRequestMutex.RLock()
	defer fake.deleteBucketReplicationRequestMutex.RUnlock()
	fake.deleteBucketReplicationWithContextMutex.RLock()
	defer fake.deleteBucketReplicationWithContextMutex.RUnlock()
	fake.deleteBucketRequestMutex.RLock()
	defer fake.deleteBucketRequestMutex.RUnlock()
	fake.deleteBucketTaggingMutex.RLock()
	defer fake.deleteBucketTaggingMutex.RUnlock()
	fake.deleteBucketTaggingRequestMutex.RLock()
	defer fake.deleteBucketTaggingRequestMutex.RUnlock()
	fake.deleteBucketTaggingWithContextMutex.RLock()
	defer fake.deleteBucketTaggingWithContextMutex.RUnlock()
	fake.deleteBucketWebsiteMutex.RLock()
	defer fake.deleteBucketWebsiteMutex.RUnlock()
	fake.deleteBucketWebsiteRequestMutex.RLock()
	defer fake.deleteBucketWebsiteRequestMutex.RUnlock()
	fake.deleteBucketWebsiteWithContextMutex.RLock()
	defer fake.deleteBucketWebsiteWithContextMutex.RUnlock()
	fake.deleteBucketWithContextMutex.RLock()
	defer fake.deleteBucketWithContextMutex.RUnlock()
	fake.deleteObjectMutex.RLock()
	defer fake.deleteObjectMutex.RUnlock()
	fake.deleteObjectRequestMutex.RLock()
	defer fake.deleteObjectRequestMutex.RUnlock()
	fake.deleteObjectTaggingMutex.RLock()
	defer fake.deleteObjectTaggingMutex.RUnlock()
	fake.deleteObjectTaggingRequestMutex.RLock()
	defer fake.deleteObjectTaggingRequestMutex.RUnlock()
	fake.deleteObjectTaggingWithContextMutex.RLock()
	defer fake.deleteObjectTaggingWithContextMutex.RUnlock()
	fake.deleteObjectWithContextMutex.RLock()
	defer fake.deleteObjectWithContextMutex.RUnlock()
	fake.deleteObjectsMutex.RLock()
	defer fake.deleteObjectsMutex.RUnlock()
	fake.deleteObjectsRequestMutex.RLock()
	defer fake.deleteObjectsRequestMutex.RUnlock()
	fake.deleteObjectsWithContextMutex.RLock()
	defer fake.deleteObjectsWithContextMutex.RUnlock()
	fake.deletePublicAccessBlockMutex.RLock()
	defer fake.deletePublicAccessBlockMutex.RUnlock()
	fake.deletePublicAccessBlockRequestMutex.RLock()
	defer fake.deletePublicAccessBlockRequestMutex.RUnlock()
	fake.deletePublicAccessBlockWithContextMutex.RLock()
	defer fake.deletePublicAccessBlockWithContextMutex.RUnlock()
	fake.getBucketAccelerateConfigurationMutex.RLock()
	defer fake.getBucketAccelerateConfigurationMutex.RUnlock()
	fake.getBucketAccelerateConfigurationRequestMutex.RLock()
	defer fake.getBucketAccelerateConfigurationRequestMutex.RUnlock()
	fake.getBucketAccelerateConfigurationWithContextMutex.RLock()
	defer fake.getBucketAccelerateConfigurationWithContextMutex.RUnlock()
	fake.getBucketAclMutex.RLock()
	defer fake.getBucketAclMutex.RUnlock()
	fake.getBucketAclRequestMutex.RLock()
	defer fake.getBucketAclRequestMutex.RUnlock()
	fake.getBucketAclWithContextMutex.RLock()
	defer fake.getBucketAclWithContextMutex.RUnlock()
	fake.getBucketAnalyticsConfigurationMutex.RLock()
	defer fake.getBucketAnalyticsConfigurationMutex.RUnlock()
	fake.getBucketAnalyticsConfigurationRequestMutex.RLock()
	defer fake.getBucketAnalyticsConfigurationRequestMutex.RUnlock()
	fake.getBucketAnalyticsConfigurationWithContextMutex.RLock()
	defer fake.getBucketAnalyticsConfigurationWithContextMutex.RUnlock()
	fake.getBucketCorsMutex.RLock()
	defer fake.getBucketCorsMutex.RUnlock()
	fake.getBucketCorsRequestMutex.RLock()
	defer fake.getBucketCorsRequestMutex.RUnlock()
	fake.getBucketCorsWithContextMutex.RLock()
	defer fake.getBucketCorsWithContextMutex.RUnlock()
	fake.getBucketEncryptionMutex.RLock()
	defer fake.getBucketEncryptionMutex.RUnlock()
	fake.getBucketEncryptionRequestMutex.RLock()
	defer fake.getBucketEncryptionRequestMutex.RUnlock()
	fake.getBucketEncryptionWithContextMutex.RLock()
	defer fake.getBucketEncryptionWithContextMutex.RUnlock()
	fake.getBucketInventoryConfigurationMutex.RLock()
	defer fake.getBucketInventoryConfigurationMutex.RUnlock()
	fake.getBucketInventoryConfigurationRequestMutex.RLock()
	defer fake.getBucketInventoryConfigurationRequestMutex.RUnlock()
	fake.getBucketInventoryConfigurationWithContextMutex.RLock()
	defer fake.getBucketInventoryConfigurationWithContextMutex.RUnlock()
	fake.getBucketLifecycleMutex.RLock()
	defer fake.getBucketLifecycleMutex.RUnlock()
	fake.getBucketLifecycleConfigurationMutex.RLock()
	defer fake.getBucketLifecycleConfigurationMutex.RUnlock()
	fake.getBucketLifecycleConfigurationRequestMutex.RLock()
	defer fake.getBucketLifecycleConfigurationRequestMutex.RUnlock()
	fake.getBucketLifecycleConfigurationWithContextMutex.RLock()
	defer fake.getBucketLifecycleConfigurationWithContextMutex.RUnlock()
	fake.getBucketLifecycleRequestMutex.RLock()
	defer fake.getBucketLifecycleRequestMutex.RUnlock()
	fake.getBucketLifecycleWithContextMutex.RLock()
	defer fake.getBucketLifecycleWithContextMutex.RUnlock()
	fake.getBucketLocationMutex.RLock()
	defer fake.getBucketLocationMutex.RUnlock()
	fake.getBucketLocationRequestMutex.RLock()
	defer fake.getBucketLocationRequestMutex.RUnlock()
	fake.getBucketLocationWithContextMutex.RLock()
	defer fake.getBucketLocationWithContextMutex.RUnlock()
	fake.getBucketLoggingMutex.RLock()
	defer fake.getBucketLoggingMutex.RUnlock()
	fake.getBucketLoggingRequestMutex.RLock()
	defer fake.getBucketLoggingRequestMutex.RUnlock()
	fake.getBucketLoggingWithContextMutex.RLock()
	defer fake.getBucketLoggingWithContextMutex.RUnlock()
	fake.getBucketMetricsConfigurationMutex.RLock()
	defer fake.getBucketMetricsConfigurationMutex.RUnlock()
	fake.getBucketMetricsConfigurationRequestMutex.RLock()
	defer fake.getBucketMetricsConfigurationRequestMutex.RUnlock()
	fake.getBucketMetricsConfigurationWithContextMutex.RLock()
	defer fake.getBucketMetricsConfigurationWithContextMutex.RUnlock()
	fake.getBucketNotificationMutex.RLock()
	defer fake.getBucketNotificationMutex.RUnlock()
	fake.getBucketNotificationConfigurationMutex.RLock()
	defer fake.getBucketNotificationConfigurationMutex.RUnlock()
	fake.getBucketNotificationConfigurationRequestMutex.RLock()
	defer fake.getBucketNotificationConfigurationRequestMutex.RUnlock()
	fake.getBucketNotificationConfigurationWithContextMutex.RLock()
	defer fake.getBucketNotificationConfigurationWithContextMutex.RUnlock()
	fake.getBucketNotificationRequestMutex.RLock()
	defer fake.getBucketNotificationRequestMutex.RUnlock()
	fake.getBucketNotificationWithContextMutex.RLock()
	defer fake.getBucketNotificationWithContextMutex.RUnlock()
	fake.getBucketPolicyMutex.RLock()
	defer fake.getBucketPolicyMutex.RUnlock()
	fake.getBucketPolicyRequestMutex.RLock()
	defer fake.getBucketPolicyRequestMutex.RUnlock()
	fake.getBucketPolicyStatusMutex.RLock()
	defer fake.getBucketPolicyStatusMutex.RUnlock()
	fake.getBucketPolicyStatusRequestMutex.RLock()
	defer fake.getBucketPolicyStatusRequestMutex.RUnlock()
	fake.getBucketPolicyStatusWithContextMutex.RLock()
	defer fake.getBucketPolicyStatusWithContextMutex.RUnlock()
	fake.getBucketPolicyWithContextMutex.RLock()
	defer fake.getBucketPolicyWithContextMutex.RUnlock()
	fake.getBucketReplicationMutex.RLock()
	defer fake.getBucketReplicationMutex.RUnlock()
	fake.getBucketReplicationRequestMutex.RLock()
	defer fake.getBucketReplicationRequestMutex.RUnlock()
	fake.getBucketReplicationWithContextMutex.RLock()
	defer fake.getBucketReplicationWithContextMutex.RUnlock()
	fake.getBucketRequestPaymentMutex.RLock()
	defer fake.getBucketRequestPaymentMutex.RUnlock()
	fake.getBucketRequestPaymentRequestMutex.RLock()
	defer fake.getBucketRequestPaymentRequestMutex.RUnlock()
	fake.getBucketRequestPaymentWithContextMutex.RLock()
	defer fake.getBucketRequestPaymentWithContextMutex.RUnlock()
	fake.getBucketTaggingMutex.RLock()
	defer fake.getBucketTaggingMutex.RUnlock()
	fake.getBucketTaggingRequestMutex.RLock()
	defer fake.getBucketTaggingRequestMutex.RUnlock()
	fake.getBucketTaggingWithContextMutex.RLock()
	defer fake.getBucketTaggingWithContextMutex.RUnlock()
	fake.getBucketVersioningMutex.RLock()
	defer fake.getBucketVersioningMutex.RUnlock()
	fake.getBucketVersioningRequestMutex.RLock()
	defer fake.getBucketVersioningRequestMutex.RUnlock()
	fake.getBucketVersioningWithContextMutex.RLock()
	defer fake.getBucketVersioningWithContextMutex.RUnlock()
	fake.getBucketWebsiteMutex.RLock()
	defer fake.getBucketWebsiteMutex.RUnlock()
	fake.getBucketWebsiteRequestMutex.RLock()
	defer fake.getBucketWebsiteRequestMutex.RUnlock()
	fake.getBucketWebsiteWithContextMutex.RLock()
	defer fake.getBucketWebsiteWithContextMutex.RUnlock()
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	fake.getObjectAclMutex.RLock()
	defer fake.getObjectAclMutex.RUnlock()
	fake.getObjectAclRequestMutex.RLock()
	defer fake.getObjectAclRequestMutex.RUnlock()
	fake.getObjectAclWithContextMutex.RLock()
	defer fake.getObjectAclWithContextMutex.RUnlock()
	fake.getObjectLegalHoldMutex.RLock()
	defer fake.getObjectLegalHoldMutex.RUnlock()
	fake.getObjectLegalHoldRequestMutex.RLock()
	defer fake.getObjectLegalHoldRequestMutex.RUnlock()
	fake.getObjectLegalHoldWithContextMutex.RLock()
	defer fake.getObjectLegalHoldWithContextMutex.RUnlock()
	fake.getObjectLockConfigurationMutex.RLock()
	defer fake.getObjectLockConfigurationMutex.RUnlock()
	fake.getObjectLockConfigurationRequestMutex.RLock()
	defer fake.getObjectLockConfigurationRequestMutex.RUnlock()
	fake.getObjectLockConfigurationWithContextMutex.RLock()
	defer fake.getObjectLockConfigurationWithContextMutex.RUnlock()
	fake.getObjectRequestMutex.RLock()
	defer fake.getObjectRequestMutex.RUnlock()
	fake.getObjectRetentionMutex.RLock()
	defer fake.getObjectRetentionMutex.RUnlock()
	fake.getObjectRetentionRequestMutex.RLock()
	defer fake.getObjectRetentionRequestMutex.RUnlock()
	fake.getObjectRetentionWithContextMutex.RLock()
	defer fake.getObjectRetentionWithContextMutex.RUnlock()
	fake.getObjectTaggingMutex.RLock()
	defer fake.getObjectTaggingMutex.RUnlock()
	fake.getObjectTaggingRequestMutex.RLock()
	defer fake.getObjectTaggingRequestMutex.RUnlock()
	fake.getObjectTaggingWithContextMutex.RLock()
	defer fake.getObjectTaggingWithContextMutex.RUnlock()
	fake.getObjectTorrentMutex.RLock()
	defer fake.getObjectTorrentMutex.RUnlock()
	fake.getObjectTorrentRequestMutex.RLock()
	defer fake.getObjectTorrentRequestMutex.RUnlock()
	fake.getObjectTorrentWithContextMutex.RLock()
	defer fake.getObjectTorrentWithContextMutex.RUnlock()
	fake.getObjectWithContextMutex.RLock()
	defer fake.getObjectWithContextMutex.RUnlock()
	fake.getPublicAccessBlockMutex.RLock()
	defer fake.getPublicAccessBlockMutex.RUnlock()
	fake.getPublicAccessBlockRequestMutex.RLock()
	defer fake.getPublicAccessBlockRequestMutex.RUnlock()
	fake.getPublicAccessBlockWithContextMutex.RLock()
	defer fake.getPublicAccessBlockWithContextMutex.RUnlock()
	fake.headBucketMutex.RLock()
	defer fake.headBucketMutex.RUnlock()
	fake.headBucketRequestMutex.RLock()
	defer fake.headBucketRequestMutex.RUnlock()
	fake.headBucketWithContextMutex.RLock()
	defer fake.headBucketWithContextMutex.RUnlock()
	fake.headObjectMutex.RLock()
	defer fake.headObjectMutex.RUnlock()
	fake.headObjectRequestMutex.RLock()
	defer fake.headObjectRequestMutex.RUnlock()
	fake.headObjectWithContextMutex.RLock()
	defer fake.headObjectWithContextMutex.RUnlock()
	fake.listBucketAnalyticsConfigurationsMutex.RLock()
	defer fake.listBucketAnalyticsConfigurationsMutex.RUnlock()
	fake.listBucketAnalyticsConfigurationsRequestMutex.RLock()
	defer fake.listBucketAnalyticsConfigurationsRequestMutex.RUnlock()
	fake.listBucketAnalyticsConfigurationsWithContextMutex.RLock()
	defer fake.listBucketAnalyticsConfigurationsWithContextMutex.RUnlock()
	fake.listBucketInventoryConfigurationsMutex.RLock()
	defer fake.listBucketInventoryConfigurationsMutex.RUnlock()
	fake.listBucketInventoryConfigurationsRequestMutex.RLock()
	defer fake.listBucketInventoryConfigurationsRequestMutex.RUnlock()
	fake.listBucketInventoryConfigurationsWithContextMutex.RLock()
	defer fake.listBucketInventoryConfigurationsWithContextMutex.RUnlock()
	fake.listBucketMetricsConfigurationsMutex.RLock()
	defer fake.listBucketMetricsConfigurationsMutex.RUnlock()
	fake.listBucketMetricsConfigurationsRequestMutex.RLock()
	defer fake.listBucketMetricsConfigurationsRequestMutex.RUnlock()
	fake.listBucketMetricsConfigurationsWithContextMutex.RLock()
	defer fake.listBucketMetricsConfigurationsWithContextMutex.RUnlock()
	fake.listBucketsMutex.RLock()
	defer fake.listBucketsMutex.RUnlock()
	fake.listBucketsRequestMutex.RLock()
	defer fake.listBucketsRequestMutex.RUnlock()
	fake.listBucketsWithContextMutex.RLock()
	defer fake.listBucketsWithContextMutex.RUnlock()
	fake.listMultipartUploadsMutex.RLock()
	defer fake.listMultipartUploadsMutex.RUnlock()
	fake.listMultipartUploadsPagesMutex.RLock()
	defer fake.listMultipartUploadsPagesMutex.RUnlock()
	fake.listMultipartUploadsPagesWithContextMutex.RLock()
	defer fake.listMultipartUploadsPagesWithContextMutex.RUnlock()
	fake.listMultipartUploadsRequestMutex.RLock()
	defer fake.listMultipartUploadsRequestMutex.RUnlock()
	fake.listMultipartUploadsWithContextMutex.RLock()
	defer fake.listMultipartUploadsWithContextMutex.RUnlock()
	fake.listObjectVersionsMutex.RLock()
	defer fake.listObjectVersionsMutex.RUnlock()
	fake.listObjectVersionsPagesMutex.RLock()
	defer fake.listObjectVersionsPagesMutex.RUnlock()
	fake.listObjectVersionsPagesWithContextMutex.RLock()
	defer fake.listObjectVersionsPagesWithContextMutex.RUnlock()
	fake.listObjectVersionsRequestMutex.RLock()
	defer fake.listObjectVersionsRequestMutex.RUnlock()
	fake.listObjectVersionsWithContextMutex.RLock()
	defer fake.listObjectVersionsWithContextMutex.RUnlock()
	fake.listObjectsMutex.RLock()
	defer fake.listObjectsMutex.RUnlock()
	fake.listObjectsPagesMutex.RLock()
	defer fake.listObjectsPagesMutex.RUnlock()
	fake.listObjectsPagesWithContextMutex.RLock()
	defer fake.listObjectsPagesWithContextMutex.RUnlock()
	fake.listObjectsRequestMutex.RLock()
	defer fake.listObjectsRequestMutex.RUnlock()
	fake.listObjectsV2Mutex.RLock()
	defer fake.listObjectsV2Mutex.RUnlock()
	fake.listObjectsV2PagesMutex.RLock()
	defer fake.listObjectsV2PagesMutex.RUnlock()
	fake.listObjectsV2PagesWithContextMutex.RLock()
	defer fake.listObjectsV2PagesWithContextMutex.RUnlock()
	fake.listObjectsV2RequestMutex.RLock()
	defer fake.listObjectsV2RequestMutex.RUnlock()
	fake.listObjectsV2WithContextMutex.RLock()
	defer fake.listObjectsV2WithContextMutex.RUnlock()
	fake.listObjectsWithContextMutex.RLock()
	defer fake.listObjectsWithContextMutex.RUnlock()
	fake.listPartsMutex.RLock()
	defer fake.listPartsMutex.RUnlock()
	fake.listPartsPagesMutex.RLock()
	defer fake.listPartsPagesMutex.RUnlock()
	fake.listPartsPagesWithContextMutex.RLock()
	defer fake.listPartsPagesWithContextMutex.RUnlock()
	fake.listPartsRequestMutex.RLock()
	defer fake.listPartsRequestMutex.RUnlock()
	fake.listPartsWithContextMutex.RLock()
	defer fake.listPartsWithContextMutex.RUnlock()
	fake.putBucketAccelerateConfigurationMutex.RLock()
	defer fake.putBucketAccelerateConfigurationMutex.RUnlock()
	fake.putBucketAccelerateConfigurationRequestMutex.RLock()
	defer fake.putBucketAccelerateConfigurationRequestMutex.RUnlock()
	fake.putBucketAccelerateConfigurationWithContextMutex.RLock()
	defer fake.putBucketAccelerateConfigurationWithContextMutex.RUnlock()
	fake.putBucketAclMutex.RLock()
	defer fake.putBucketAclMutex.RUnlock()
	fake.putBucketAclRequestMutex.RLock()
	defer fake.putBucketAclRequestMutex.RUnlock()
	fake.putBucketAclWithContextMutex.RLock()
	defer fake.putBucketAclWithContextMutex.RUnlock()
	fake.putBucketAnalyticsConfigurationMutex.RLock()
	defer fake.putBucketAnalyticsConfigurationMutex.RUnlock()
	fake.putBucketAnalyticsConfigurationRequestMutex.RLock()
	defer fake.putBucketAnalyticsConfigurationRequestMutex.RUnlock()
	fake.putBucketAnalyticsConfigurationWithContextMutex.RLock()
	defer fake.putBucketAnalyticsConfigurationWithContextMutex.RUnlock()
	fake.putBucketCorsMutex.RLock()
	defer fake.putBucketCorsMutex.RUnlock()
	fake.putBucketCorsRequestMutex.RLock()
	defer fake.putBucketCorsRequestMutex.RUnlock()
	fake.putBucketCorsWithContextMutex.RLock()
	defer fake.putBucketCorsWithContextMutex.RUnlock()
	fake.putBucketEncryptionMutex.RLock()
	defer fake.putBucketEncryptionMutex.RUnlock()
	fake.putBucketEncryptionRequestMutex.RLock()
	defer fake.putBucketEncryptionRequestMutex.RUnlock()
	fake.putBucketEncryptionWithContextMutex.RLock()
	defer fake.putBucketEncryptionWithContextMutex.RUnlock()
	fake.putBucketInventoryConfigurationMutex.RLock()
	defer fake.putBucketInventoryConfigurationMutex.RUnlock()
	fake.putBucketInventoryConfigurationRequestMutex.RLock()
	defer fake.putBucketInventoryConfigurationRequestMutex.RUnlock()
	fake.putBucketInventoryConfigurationWithContextMutex.RLock()
	defer fake.putBucketInventoryConfigurationWithContextMutex.RUnlock()
	fake.putBucketLifecycleMutex.RLock()
	defer fake.putBucketLifecycleMutex.RUnlock()
	fake.putBucketLifecycleConfigurationMutex.RLock()
	defer fake.putBucketLifecycleConfigurationMutex.RUnlock()
	fake.putBucketLifecycleConfigurationRequestMutex.RLock()
	defer fake.putBucketLifecycleConfigurationRequestMutex.RUnlock()
	fake.putBucketLifecycleConfigurationWithContextMutex.RLock()
	defer fake.putBucketLifecycleConfigurationWithContextMutex.RUnlock()
	fake.putBucketLifecycleRequestMutex.RLock()
	defer fake.putBucketLifecycleRequestMutex.RUnlock()
	fake.putBucketLifecycleWithContextMutex.RLock()
	defer fake.putBucketLifecycleWithContextMutex.RUnlock()
	fake.putBucketLoggingMutex.RLock()
	defer fake.putBucketLoggingMutex.RUnlock()
	fake.putBucketLoggingRequestMutex.RLock()
	defer fake.putBucketLoggingRequestMutex.RUnlock()
	fake.putBucketLoggingWithContextMutex.RLock()
	defer fake.putBucketLoggingWithContextMutex.RUnlock()
	fake.putBucketMetricsConfigurationMutex.RLock()
	defer fake.putBucketMetricsConfigurationMutex.RUnlock()
	fake.putBucketMetricsConfigurationRequestMutex.RLock()
	defer fake.putBucketMetricsConfigurationRequestMutex.RUnlock()
	fake.putBucketMetricsConfigurationWithContextMutex.RLock()
	defer fake.putBucketMetricsConfigurationWithContextMutex.RUnlock()
	fake.putBucketNotificationMutex.RLock()
	defer fake.putBucketNotificationMutex.RUnlock()
	fake.putBucketNotificationConfigurationMutex.RLock()
	defer fake.putBucketNotificationConfigurationMutex.RUnlock()
	fake.putBucketNotificationConfigurationRequestMutex.RLock()
	defer fake.putBucketNotificationConfigurationRequestMutex.RUnlock()
	fake.putBucketNotificationConfigurationWithContextMutex.RLock()
	defer fake.putBucketNotificationConfigurationWithContextMutex.RUnlock()
	fake.putBucketNotificationRequestMutex.RLock()
	defer fake.putBucketNotificationRequestMutex.RUnlock()
	fake.putBucketNotificationWithContextMutex.RLock()
	defer fake.putBucketNotificationWithContextMutex.RUnlock()
	fake.putBucketPolicyMutex.RLock()
	defer fake.putBucketPolicyMutex.RUnlock()
	fake.putBucketPolicyRequestMutex.RLock()
	defer fake.putBucketPolicyRequestMutex.RUnlock()
	fake.putBucketPolicyWithContextMutex.RLock()
	defer fake.putBucketPolicyWithContextMutex.RUnlock()
	fake.putBucketReplicationMutex.RLock()
	defer fake.putBucketReplicationMutex.RUnlock()
	fake.putBucketReplicationRequestMutex.RLock()
	defer fake.putBucketReplicationRequestMutex.RUnlock()
	fake.putBucketReplicationWithContextMutex.RLock()
	defer fake.putBucketReplicationWithContextMutex.RUnlock()
	fake.putBucketRequestPaymentMutex.RLock()
	defer fake.putBucketRequestPaymentMutex.RUnlock()
	fake.putBucketRequestPaymentRequestMutex.RLock()
	defer fake.putBucketRequestPaymentRequestMutex.RUnlock()
	fake.putBucketRequestPaymentWithContextMutex.RLock()
	defer fake.putBucketRequestPaymentWithContextMutex.RUnlock()
	fake.putBucketTaggingMutex.RLock()
	defer fake.putBucketTaggingMutex.RUnlock()
	fake.putBucketTaggingRequestMutex.RLock()
	defer fake.putBucketTaggingRequestMutex.RUnlock()
	fake.putBucketTaggingWithContextMutex.RLock()
	defer fake.putBucketTaggingWithContextMutex.RUnlock()
	fake.putBucketVersioningMutex.RLock()
	defer fake.putBucketVersioningMutex.RUnlock()
	fake.putBucketVersioningRequestMutex.RLock()
	defer fake.putBucketVersioningRequestMutex.RUnlock()
	fake.putBucketVersioningWithContextMutex.RLock()
	defer fake.putBucketVersioningWithContextMutex.RUnlock()
	fake.putBucketWebsiteMutex.RLock()
	defer fake.putBucketWebsiteMutex.RUnlock()
	fake.putBucketWebsiteRequestMutex.RLock()
	defer fake.putBucketWebsiteRequestMutex.RUnlock()
	fake.putBucketWebsiteWithContextMutex.RLock()
	defer fake.putBucketWebsiteWithContextMutex.RUnlock()
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	fake.putObjectAclMutex.RLock()
	defer fake.putObjectAclMutex.RUnlock()
	fake.putObjectAclRequestMutex.RLock()
	defer fake.putObjectAclRequestMutex.RUnlock()
	fake.putObjectAclWithContextMutex.RLock()
	defer fake.putObjectAclWithContextMutex.RUnlock()
	fake.putObjectLegalHoldMutex.RLock()
	defer fake.putObjectLegalHoldMutex.RUnlock()
	fake.putObjectLegalHoldRequestMutex.RLock()
	defer fake.putObjectLegalHoldRequestMutex.RUnlock()
	fake.putObjectLegalHoldWithContextMutex.RLock()
	defer fake.putObjectLegalHoldWithContextMutex.RUnlock()
	fake.putObjectLockConfigurationMutex.RLock()
	defer fake.putObjectLockConfigurationMutex.RUnlock()
	fake.putObjectLockConfigurationRequestMutex.RLock()
	defer fake.putObjectLockConfigurationRequestMutex.RUnlock()
	fake.putObjectLockConfigurationWithContextMutex.RLock()
	defer fake.putObjectLockConfigurationWithContextMutex.RUnlock()
	fake.putObjectRequestMutex.RLock()
	defer fake.putObjectRequestMutex.RUnlock()
	fake.putObjectRetentionMutex.RLock()
	defer fake.putObjectRetentionMutex.RUnlock()
	fake.putObjectRetentionRequestMutex.RLock()
	defer fake.putObjectRetentionRequestMutex.RUnlock()
	fake.putObjectRetentionWithContextMutex.RLock()
	defer fake.putObjectRetentionWithContextMutex.RUnlock()
	fake.putObjectTaggingMutex.RLock()
	defer fake.putObjectTaggingMutex.RUnlock()
	fake.putObjectTaggingRequestMutex.RLock()
	defer fake.putObjectTaggingRequestMutex.RUnlock()
	fake.putObjectTaggingWithContextMutex.RLock()
	defer fake.putObjectTaggingWithContextMutex.RUnlock()
	fake.putObjectWithContextMutex.RLock()
	defer fake.putObjectWithContextMutex.RUnlock()
	fake.putPublicAccessBlockMutex.RLock()
	defer fake.putPublicAccessBlockMutex.RUnlock()
	fake.putPublicAccessBlockRequestMutex.RLock()
	defer fake.putPublicAccessBlockRequestMutex.RUnlock()
	fake.putPublicAccessBlockWithContextMutex.RLock()
	defer fake.putPublicAccessBlockWithContextMutex.RUnlock()
	fake.restoreObjectMutex.RLock()
	defer fake.restoreObjectMutex.RUnlock()
	fake.restoreObjectRequestMutex.RLock()
	defer fake.restoreObjectRequestMutex.RUnlock()
	fake.restoreObjectWithContextMutex.RLock()
	defer fake.restoreObjectWithContextMutex.RUnlock()
	fake.selectObjectContentMutex.RLock()
	defer fake.selectObjectContentMutex.RUnlock()
	fake.selectObjectContentRequestMutex.RLock()
	defer fake.selectObjectContentRequestMutex.RUnlock()
	fake.selectObjectContentWithContextMutex.RLock()
	defer fake.selectObjectContentWithContextMutex.RUnlock()
	fake.uploadPartMutex.RLock()
	defer fake.uploadPartMutex.RUnlock()
	fake.uploadPartCopyMutex.RLock()
	defer fake.uploadPartCopyMutex.RUnlock()
	fake.uploadPartCopyRequestMutex.RLock()
	defer fake.uploadPartCopyRequestMutex.RUnlock()
	fake.uploadPartCopyWithContextMutex.RLock()
	defer fake.uploadPartCopyWithContextMutex.RUnlock()
	fake.uploadPartRequestMutex.RLock()
	defer fake.uploadPartRequestMutex.RUnlock()
	fake.uploadPartWithContextMutex.RLock()
	defer fake.uploadPartWithContextMutex.RUnlock()
	fake.waitUntilBucketExistsMutex.RLock()
	defer fake.waitUntilBucketExistsMutex.RUnlock()
	fake.waitUntilBucketExistsWithContextMutex.RLock()
	defer fake.waitUntilBucketExistsWithContextMutex.RUnlock()
	fake.waitUntilBucketNotExistsMutex.RLock()
	defer fake.waitUntilBucketNotExistsMutex.RUnlock()
	fake.waitUntilBucketNotExistsWithContextMutex.RLock()
	defer fake.waitUntilBucketNotExistsWithContextMutex.RUnlock()
	fake.waitUntilObjectExistsMutex.RLock()
	defer fake.waitUntilObjectExistsMutex.RUnlock()
	fake.waitUntilObjectExistsWithContextMutex.RLock()
	defer fake.waitUntilObjectExistsWithContextMutex.RUnlock()
	fake.waitUntilObjectNotExistsMutex.RLock()
	defer fake.waitUntilObjectNotExistsMutex.RUnlock()
	fake.waitUntilObjectNotExistsWithContextMutex.RLock()
	defer fake.waitUntilObjectNotExistsWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeS3API) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ s3iface.S3API = new(FakeS3API)
